// @generated by cargo bevy-api-gen generate, modify the templates not this file
#![allow(clippy::all)]
#![allow(unused, deprecated, dead_code)]
#![cfg_attr(rustfmt, rustfmt_skip)]

use bevy_mod_scripting_core::{
    bindings::{
        ReflectReference, 
        function::{from::{Ref, Mut, Val}, namespace::{NamespaceBuilder}}
    }
};
use bevy_ecs::{prelude::*};


use bevy_mod_scripting_derive::script_bindings;


use crate::*;







pub struct BevySceneScriptingPlugin;


#[script_bindings(
    remote,
    name = "dynamic_scene_root_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl ::bevy_scene::prelude::DynamicSceneRoot {


    
    fn assert_receiver_is_total_eq (_self: Ref<::bevy_scene::prelude::DynamicSceneRoot>,) -> () {
        let output: () =<::bevy_scene::prelude::DynamicSceneRoot as ::std::cmp::Eq>::assert_receiver_is_total_eq(&_self,).into();
        output
    }


    
    fn clone (_self: Ref<::bevy_scene::prelude::DynamicSceneRoot>,) -> Val<::bevy_scene::prelude::DynamicSceneRoot> {
        let output: Val<::bevy_scene::prelude::DynamicSceneRoot> =<::bevy_scene::prelude::DynamicSceneRoot as ::std::clone::Clone>::clone(&_self,).into();
        output
    }


    
    fn eq (_self: Ref<::bevy_scene::prelude::DynamicSceneRoot>,other: Ref<::bevy_scene::prelude::DynamicSceneRoot>,) -> bool {
        let output: bool =<::bevy_scene::prelude::DynamicSceneRoot as ::std::cmp::PartialEq::<::bevy_scene::prelude::DynamicSceneRoot>>::eq(&_self,&other,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "scene_root_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl ::bevy_scene::prelude::SceneRoot {


    
    fn assert_receiver_is_total_eq (_self: Ref<::bevy_scene::prelude::SceneRoot>,) -> () {
        let output: () =<::bevy_scene::prelude::SceneRoot as ::std::cmp::Eq>::assert_receiver_is_total_eq(&_self,).into();
        output
    }


    
    fn clone (_self: Ref<::bevy_scene::prelude::SceneRoot>,) -> Val<::bevy_scene::prelude::SceneRoot> {
        let output: Val<::bevy_scene::prelude::SceneRoot> =<::bevy_scene::prelude::SceneRoot as ::std::clone::Clone>::clone(&_self,).into();
        output
    }


    
    fn eq (_self: Ref<::bevy_scene::prelude::SceneRoot>,other: Ref<::bevy_scene::prelude::SceneRoot>,) -> bool {
        let output: bool =<::bevy_scene::prelude::SceneRoot as ::std::cmp::PartialEq::<::bevy_scene::prelude::SceneRoot>>::eq(&_self,&other,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "scene_instance_ready_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl ::bevy_scene::SceneInstanceReady {


    
    fn assert_receiver_is_total_eq (_self: Ref<::bevy_scene::SceneInstanceReady>,) -> () {
        let output: () =<::bevy_scene::SceneInstanceReady as ::std::cmp::Eq>::assert_receiver_is_total_eq(&_self,).into();
        output
    }


    
    fn clone (_self: Ref<::bevy_scene::SceneInstanceReady>,) -> Val<::bevy_scene::SceneInstanceReady> {
        let output: Val<::bevy_scene::SceneInstanceReady> =<::bevy_scene::SceneInstanceReady as ::std::clone::Clone>::clone(&_self,).into();
        output
    }


    
    fn eq (_self: Ref<::bevy_scene::SceneInstanceReady>,other: Ref<::bevy_scene::SceneInstanceReady>,) -> bool {
        let output: bool =<::bevy_scene::SceneInstanceReady as ::std::cmp::PartialEq::<::bevy_scene::SceneInstanceReady>>::eq(&_self,&other,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "instance_id_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl ::bevy_scene::InstanceId {


    
    fn assert_receiver_is_total_eq (_self: Ref<::bevy_scene::InstanceId>,) -> () {
        let output: () =<::bevy_scene::InstanceId as ::std::cmp::Eq>::assert_receiver_is_total_eq(&_self,).into();
        output
    }


    
    fn clone (_self: Ref<::bevy_scene::InstanceId>,) -> Val<::bevy_scene::InstanceId> {
        let output: Val<::bevy_scene::InstanceId> =<::bevy_scene::InstanceId as ::std::clone::Clone>::clone(&_self,).into();
        output
    }


    
    fn eq (_self: Ref<::bevy_scene::InstanceId>,other: Ref<::bevy_scene::InstanceId>,) -> bool {
        let output: bool =<::bevy_scene::InstanceId as ::std::cmp::PartialEq::<::bevy_scene::InstanceId>>::eq(&_self,&other,).into();
        output
    }
     
}


impl Plugin for BevySceneScriptingPlugin {
    fn build(&self, app: &mut App) {
        let mut world = app.world_mut();

        
            register_dynamic_scene_root_functions(&mut world);
        
            register_scene_root_functions(&mut world);
        
            register_scene_instance_ready_functions(&mut world);
        
            register_instance_id_functions(&mut world);
        
    }
}
