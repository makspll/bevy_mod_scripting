// @generated by cargo bevy-api-gen generate, modify the templates not this file
#![allow(clippy::all)]
#![allow(unused, deprecated, dead_code)]
#![cfg_attr(rustfmt, rustfmt_skip)]

use bevy_mod_scripting_core::{
    bindings::{
        ReflectReference, 
        function::{from::{Ref, Mut, Val}, namespace::{NamespaceBuilder}}
    }
};

use bevy_mod_scripting_derive::script_bindings;


use crate::*;







pub struct BevyImageScriptingPlugin;


#[script_bindings(
    remote,
    name = "texture_atlas_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl bevy::image::prelude::TextureAtlas {


    
    fn assert_receiver_is_total_eq (_self:Ref<bevy::image::prelude::TextureAtlas>,) -> () {
        let output: () =<bevy::image::prelude::TextureAtlas as ::std::cmp::Eq>::assert_receiver_is_total_eq(&_self,).into();
        output
    }


    
    fn clone (_self:Ref<bevy::image::prelude::TextureAtlas>,) -> Val<bevy::image::prelude::TextureAtlas> {
        let output: Val<bevy::image::prelude::TextureAtlas> =<bevy::image::prelude::TextureAtlas as ::std::clone::Clone>::clone(&_self,).into();
        output
    }


    
    fn eq (_self:Ref<bevy::image::prelude::TextureAtlas>,other:Ref<bevy::image::prelude::TextureAtlas>,) -> bool {
        let output: bool =<bevy::image::prelude::TextureAtlas as ::std::cmp::PartialEq::<bevy::image::prelude::TextureAtlas>>::eq(&_self,&other,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "texture_atlas_layout_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl bevy::image::prelude::TextureAtlasLayout {


    
    ///  Add a *section* to the list in the layout and returns its index
    
    ///  which can be used with [`TextureAtlas`]
    
    ///  # Arguments
    
    ///  * `rect` - The section of the texture to be added
    
    ///  [`TextureAtlas`]: crate::TextureAtlas
    
    fn add_texture (mut _self:Mut<bevy::image::prelude::TextureAtlasLayout>,rect:Val<bevy::math::URect>,) -> usize {
        let output: usize =bevy::image::prelude::TextureAtlasLayout::add_texture(&mut _self,rect.into_inner(),).into();
        output
    }


    
    fn assert_receiver_is_total_eq (_self:Ref<bevy::image::prelude::TextureAtlasLayout>,) -> () {
        let output: () =<bevy::image::prelude::TextureAtlasLayout as ::std::cmp::Eq>::assert_receiver_is_total_eq(&_self,).into();
        output
    }


    
    fn clone (_self:Ref<bevy::image::prelude::TextureAtlasLayout>,) -> Val<bevy::image::prelude::TextureAtlasLayout> {
        let output: Val<bevy::image::prelude::TextureAtlasLayout> =<bevy::image::prelude::TextureAtlasLayout as ::std::clone::Clone>::clone(&_self,).into();
        output
    }


    
    fn eq (_self:Ref<bevy::image::prelude::TextureAtlasLayout>,other:Ref<bevy::image::prelude::TextureAtlasLayout>,) -> bool {
        let output: bool =<bevy::image::prelude::TextureAtlasLayout as ::std::cmp::PartialEq::<bevy::image::prelude::TextureAtlasLayout>>::eq(&_self,&other,).into();
        output
    }


    
    fn is_empty (_self:Ref<bevy::image::prelude::TextureAtlasLayout>,) -> bool {
        let output: bool =bevy::image::prelude::TextureAtlasLayout::is_empty(&_self,).into();
        output
    }


    
    ///  The number of textures in the [`TextureAtlasLayout`]
    
    fn len (_self:Ref<bevy::image::prelude::TextureAtlasLayout>,) -> usize {
        let output: usize =bevy::image::prelude::TextureAtlasLayout::len(&_self,).into();
        output
    }


    
    ///  Create a new empty layout with custom `dimensions`
    
    fn new_empty (dimensions:Val<bevy::math::UVec2>,) -> Val<bevy::image::prelude::TextureAtlasLayout> {
        let output: Val<bevy::image::prelude::TextureAtlasLayout> =bevy::image::prelude::TextureAtlasLayout::new_empty(dimensions.into_inner(),).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "image_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl bevy::image::prelude::Image {


    
    ///  Returns the aspect ratio (width / height) of a 2D image.
    
    fn aspect_ratio (_self:Ref<bevy::image::prelude::Image>,) -> Val<bevy::math::AspectRatio> {
        let output: Val<bevy::math::AspectRatio> =bevy::image::prelude::Image::aspect_ratio(&_self,).into();
        output
    }


    
    fn clone (_self:Ref<bevy::image::prelude::Image>,) -> Val<bevy::image::prelude::Image> {
        let output: Val<bevy::image::prelude::Image> =<bevy::image::prelude::Image as ::std::clone::Clone>::clone(&_self,).into();
        output
    }


    
    ///  Creates a new uninitialized 1x1x1 image
    
    fn default_uninit () -> Val<bevy::image::prelude::Image> {
        let output: Val<bevy::image::prelude::Image> =bevy::image::prelude::Image::default_uninit().into();
        output
    }


    
    ///  Returns the height of a 2D image.
    
    fn height (_self:Ref<bevy::image::prelude::Image>,) -> u32 {
        let output: u32 =bevy::image::prelude::Image::height(&_self,).into();
        output
    }


    
    ///  Whether the texture format is compressed or uncompressed
    
    fn is_compressed (_self:Ref<bevy::image::prelude::Image>,) -> bool {
        let output: bool =bevy::image::prelude::Image::is_compressed(&_self,).into();
        output
    }


    
    ///  Compute the byte offset where the data of a specific pixel is stored
    
    ///  Returns None if the provided coordinates are out of bounds.
    
    ///  For 2D textures, Z is the layer number. For 1D textures, Y and Z are ignored.
    
    fn pixel_data_offset (_self:Ref<bevy::image::prelude::Image>,coords:Val<bevy::math::UVec3>,) -> ::std::option::Option<usize> {
        let output: ::std::option::Option<usize> =bevy::image::prelude::Image::pixel_data_offset(&_self,coords.into_inner(),).into();
        output
    }


    
    ///  Takes a 2D image containing vertically stacked images of the same size, and reinterprets
    
    ///  it as a 2D array texture, where each of the stacked images becomes one layer of the
    
    ///  array. This is primarily for use with the `texture2DArray` shader uniform type.
    
    ///  # Panics
    
    ///  Panics if the texture is not 2D, has more than one layers or is not evenly dividable into
    
    ///  the `layers`.
    
    fn reinterpret_stacked_2d_as_array (mut _self:Mut<bevy::image::prelude::Image>,layers:u32,) -> () {
        let output: () =bevy::image::prelude::Image::reinterpret_stacked_2d_as_array(&mut _self,layers,).into();
        output
    }


    
    ///  Returns the size of a 2D image.
    
    fn size (_self:Ref<bevy::image::prelude::Image>,) -> Val<bevy::math::UVec2> {
        let output: Val<bevy::math::UVec2> =bevy::image::prelude::Image::size(&_self,).into();
        output
    }


    
    ///  Returns the size of a 2D image as f32.
    
    fn size_f32 (_self:Ref<bevy::image::prelude::Image>,) -> Val<bevy::math::Vec2> {
        let output: Val<bevy::math::Vec2> =bevy::image::prelude::Image::size_f32(&_self,).into();
        output
    }


    
    ///  A transparent white 1x1x1 image.
    
    ///  Contrast to [`Image::default`], which is opaque.
    
    fn transparent () -> Val<bevy::image::prelude::Image> {
        let output: Val<bevy::image::prelude::Image> =bevy::image::prelude::Image::transparent().into();
        output
    }


    
    ///  Returns the width of a 2D image.
    
    fn width (_self:Ref<bevy::image::prelude::Image>,) -> u32 {
        let output: u32 =bevy::image::prelude::Image::width(&_self,).into();
        output
    }
     
}


impl ::bevy::app::Plugin for BevyImageScriptingPlugin {
    fn build(&self, app: &mut ::bevy::prelude::App) {
        let mut world = app.world_mut();

        
            register_texture_atlas_functions(&mut world);
        
            register_texture_atlas_layout_functions(&mut world);
        
            register_image_functions(&mut world);
        
    }
}
