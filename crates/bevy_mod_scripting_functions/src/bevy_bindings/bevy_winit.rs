// @generated by cargo bevy-api-gen generate, modify the templates not this file
#![allow(clippy::all)]
#![allow(unused, deprecated, dead_code)]
#![cfg_attr(rustfmt, rustfmt_skip)]

use bevy_mod_scripting_core::{
    bindings::{
        ReflectReference, 
        function::{from::{Ref, Mut, Val}, namespace::{NamespaceBuilder}}
    }
};
use bevy_ecs::{prelude::*};


use bevy_mod_scripting_derive::script_bindings;


use crate::*;







pub struct BevyWinitScriptingPlugin;


#[script_bindings(
    remote,
    name = "custom_cursor_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl ::bevy_winit::cursor::CustomCursor {


    
    fn assert_receiver_is_total_eq (_self:Ref<::bevy_winit::cursor::CustomCursor>,) -> () {
        let output: () =<::bevy_winit::cursor::CustomCursor as ::std::cmp::Eq>::assert_receiver_is_total_eq(&_self,).into();
        output
    }


    
    fn clone (_self:Ref<::bevy_winit::cursor::CustomCursor>,) -> Val<::bevy_winit::cursor::CustomCursor> {
        let output: Val<::bevy_winit::cursor::CustomCursor> =<::bevy_winit::cursor::CustomCursor as ::std::clone::Clone>::clone(&_self,).into();
        output
    }


    
    fn eq (_self:Ref<::bevy_winit::cursor::CustomCursor>,other:Ref<::bevy_winit::cursor::CustomCursor>,) -> bool {
        let output: bool =<::bevy_winit::cursor::CustomCursor as ::std::cmp::PartialEq::<::bevy_winit::cursor::CustomCursor>>::eq(&_self,&other,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "wake_up_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl ::bevy_winit::WakeUp {


    
    fn clone (_self:Ref<::bevy_winit::WakeUp>,) -> Val<::bevy_winit::WakeUp> {
        let output: Val<::bevy_winit::WakeUp> =<::bevy_winit::WakeUp as ::std::clone::Clone>::clone(&_self,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "cursor_icon_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl ::bevy_winit::cursor::CursorIcon {


    
    fn assert_receiver_is_total_eq (_self:Ref<::bevy_winit::cursor::CursorIcon>,) -> () {
        let output: () =<::bevy_winit::cursor::CursorIcon as ::std::cmp::Eq>::assert_receiver_is_total_eq(&_self,).into();
        output
    }


    
    fn clone (_self:Ref<::bevy_winit::cursor::CursorIcon>,) -> Val<::bevy_winit::cursor::CursorIcon> {
        let output: Val<::bevy_winit::cursor::CursorIcon> =<::bevy_winit::cursor::CursorIcon as ::std::clone::Clone>::clone(&_self,).into();
        output
    }


    
    fn eq (_self:Ref<::bevy_winit::cursor::CursorIcon>,other:Ref<::bevy_winit::cursor::CursorIcon>,) -> bool {
        let output: bool =<::bevy_winit::cursor::CursorIcon as ::std::cmp::PartialEq::<::bevy_winit::cursor::CursorIcon>>::eq(&_self,&other,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "custom_cursor_image_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl ::bevy_winit::cursor::CustomCursorImage {


    
    fn assert_receiver_is_total_eq (_self:Ref<::bevy_winit::cursor::CustomCursorImage>,) -> () {
        let output: () =<::bevy_winit::cursor::CustomCursorImage as ::std::cmp::Eq>::assert_receiver_is_total_eq(&_self,).into();
        output
    }


    
    fn clone (_self:Ref<::bevy_winit::cursor::CustomCursorImage>,) -> Val<::bevy_winit::cursor::CustomCursorImage> {
        let output: Val<::bevy_winit::cursor::CustomCursorImage> =<::bevy_winit::cursor::CustomCursorImage as ::std::clone::Clone>::clone(&_self,).into();
        output
    }


    
    fn eq (_self:Ref<::bevy_winit::cursor::CustomCursorImage>,other:Ref<::bevy_winit::cursor::CustomCursorImage>,) -> bool {
        let output: bool =<::bevy_winit::cursor::CustomCursorImage as ::std::cmp::PartialEq::<::bevy_winit::cursor::CustomCursorImage>>::eq(&_self,&other,).into();
        output
    }
     
}


impl Plugin for BevyWinitScriptingPlugin {
    fn build(&self, app: &mut App) {
        let mut world = app.world_mut();

        
            register_custom_cursor_functions(&mut world);
        
            register_wake_up_functions(&mut world);
        
            register_cursor_icon_functions(&mut world);
        
            register_custom_cursor_image_functions(&mut world);
        
    }
}
