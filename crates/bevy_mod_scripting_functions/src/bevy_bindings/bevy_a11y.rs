// @generated by cargo bevy-api-gen generate, modify the templates not this file
#![allow(clippy::all)]
#![allow(unused, deprecated, dead_code)]
#![cfg_attr(rustfmt, rustfmt_skip)]

use bevy_mod_scripting_core::{
    bindings::{
        ReflectReference, 
        function::{from::{Ref, Mut, Val}, namespace::{NamespaceBuilder}}
    }
};
use bevy_ecs::{prelude::*};


use bevy_mod_scripting_derive::script_bindings;


use crate::*;







pub struct BevyA11YScriptingPlugin;


#[script_bindings(
    remote,
    name = "accessibility_requested_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl ::bevy_a11y::AccessibilityRequested {


    
    fn clone (_self:Ref<::bevy_a11y::AccessibilityRequested>,) -> Val<::bevy_a11y::AccessibilityRequested> {
        let output: Val<::bevy_a11y::AccessibilityRequested> =<::bevy_a11y::AccessibilityRequested as ::core::clone::Clone>::clone(&_self,).into();
        output
    }


    
    ///  Returns `true` if an access technology is active and accessibility tree
    
    ///  updates should be sent.
    
    fn get (_self:Ref<::bevy_a11y::AccessibilityRequested>,) -> bool {
        let output: bool =::bevy_a11y::AccessibilityRequested::get(&_self,).into();
        output
    }


    
    ///  Sets whether accessibility updates were requested by an access technology.
    
    fn set (_self:Ref<::bevy_a11y::AccessibilityRequested>,value:bool,) -> () {
        let output: () =::bevy_a11y::AccessibilityRequested::set(&_self,value,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "manage_accessibility_updates_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl ::bevy_a11y::ManageAccessibilityUpdates {


    
    fn clone (_self:Ref<::bevy_a11y::ManageAccessibilityUpdates>,) -> Val<::bevy_a11y::ManageAccessibilityUpdates> {
        let output: Val<::bevy_a11y::ManageAccessibilityUpdates> =<::bevy_a11y::ManageAccessibilityUpdates as ::core::clone::Clone>::clone(&_self,).into();
        output
    }


    
    ///  Returns `true` if the ECS should update the accessibility tree.
    
    fn get (_self:Ref<::bevy_a11y::ManageAccessibilityUpdates>,) -> bool {
        let output: bool =::bevy_a11y::ManageAccessibilityUpdates::get(&_self,).into();
        output
    }


    
    ///  Sets whether the ECS should update the accessibility tree.
    
    fn set (mut _self:Mut<::bevy_a11y::ManageAccessibilityUpdates>,value:bool,) -> () {
        let output: () =::bevy_a11y::ManageAccessibilityUpdates::set(&mut _self,value,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "accessibility_system_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl ::bevy_a11y::AccessibilitySystem {


    
    fn assert_receiver_is_total_eq (_self:Ref<::bevy_a11y::AccessibilitySystem>,) -> () {
        let output: () =<::bevy_a11y::AccessibilitySystem as ::core::cmp::Eq>::assert_receiver_is_total_eq(&_self,).into();
        output
    }


    
    fn clone (_self:Ref<::bevy_a11y::AccessibilitySystem>,) -> Val<::bevy_a11y::AccessibilitySystem> {
        let output: Val<::bevy_a11y::AccessibilitySystem> =<::bevy_a11y::AccessibilitySystem as ::core::clone::Clone>::clone(&_self,).into();
        output
    }


    
    fn eq (_self:Ref<::bevy_a11y::AccessibilitySystem>,other:Ref<::bevy_a11y::AccessibilitySystem>,) -> bool {
        let output: bool =<::bevy_a11y::AccessibilitySystem as ::core::cmp::PartialEq::<::bevy_a11y::AccessibilitySystem>>::eq(&_self,&other,).into();
        output
    }
     
}


impl Plugin for BevyA11YScriptingPlugin {
    fn build(&self, app: &mut App) {
        let mut world = app.world_mut();

        
            register_accessibility_requested_functions(&mut world);
        
            register_manage_accessibility_updates_functions(&mut world);
        
            register_accessibility_system_functions(&mut world);
        
    }
}
