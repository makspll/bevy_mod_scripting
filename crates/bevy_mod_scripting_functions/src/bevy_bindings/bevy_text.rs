// @generated by cargo bevy-api-gen generate, modify the templates not this file
#![allow(clippy::all)]
#![allow(unused, deprecated, dead_code)]
#![cfg_attr(rustfmt, rustfmt_skip)]

use bevy_mod_scripting_core::{
    bindings::{
        ReflectReference, 
        function::{from::{Ref, Mut, Val}, namespace::{NamespaceBuilder}}
    }
};

use bevy_mod_scripting_derive::script_bindings;


use crate::*;







pub struct BevyTextScriptingPlugin;


#[script_bindings(
    remote,
    name = "justify_text_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl bevy::text::prelude::JustifyText {


    
    fn assert_receiver_is_total_eq (_self:Ref<bevy::text::prelude::JustifyText>,) -> () {
        let output: () =<bevy::text::prelude::JustifyText as ::std::cmp::Eq>::assert_receiver_is_total_eq(&_self,).into();
        output
    }


    
    fn clone (_self:Ref<bevy::text::prelude::JustifyText>,) -> Val<bevy::text::prelude::JustifyText> {
        let output: Val<bevy::text::prelude::JustifyText> =<bevy::text::prelude::JustifyText as ::std::clone::Clone>::clone(&_self,).into();
        output
    }


    
    fn eq (_self:Ref<bevy::text::prelude::JustifyText>,other:Ref<bevy::text::prelude::JustifyText>,) -> bool {
        let output: bool =<bevy::text::prelude::JustifyText as ::std::cmp::PartialEq::<bevy::text::prelude::JustifyText>>::eq(&_self,&other,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "line_break_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl bevy::text::prelude::LineBreak {


    
    fn assert_receiver_is_total_eq (_self:Ref<bevy::text::prelude::LineBreak>,) -> () {
        let output: () =<bevy::text::prelude::LineBreak as ::std::cmp::Eq>::assert_receiver_is_total_eq(&_self,).into();
        output
    }


    
    fn clone (_self:Ref<bevy::text::prelude::LineBreak>,) -> Val<bevy::text::prelude::LineBreak> {
        let output: Val<bevy::text::prelude::LineBreak> =<bevy::text::prelude::LineBreak as ::std::clone::Clone>::clone(&_self,).into();
        output
    }


    
    fn eq (_self:Ref<bevy::text::prelude::LineBreak>,other:Ref<bevy::text::prelude::LineBreak>,) -> bool {
        let output: bool =<bevy::text::prelude::LineBreak as ::std::cmp::PartialEq::<bevy::text::prelude::LineBreak>>::eq(&_self,&other,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "text_2_d_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl bevy::text::prelude::Text2d {


    
    fn clone (_self:Ref<bevy::text::prelude::Text2d>,) -> Val<bevy::text::prelude::Text2d> {
        let output: Val<bevy::text::prelude::Text2d> =<bevy::text::prelude::Text2d as ::std::clone::Clone>::clone(&_self,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "text_color_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl bevy::text::prelude::TextColor {


    
    fn clone (_self:Ref<bevy::text::prelude::TextColor>,) -> Val<bevy::text::prelude::TextColor> {
        let output: Val<bevy::text::prelude::TextColor> =<bevy::text::prelude::TextColor as ::std::clone::Clone>::clone(&_self,).into();
        output
    }


    
    fn eq (_self:Ref<bevy::text::prelude::TextColor>,other:Ref<bevy::text::prelude::TextColor>,) -> bool {
        let output: bool =<bevy::text::prelude::TextColor as ::std::cmp::PartialEq::<bevy::text::prelude::TextColor>>::eq(&_self,&other,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "text_font_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl bevy::text::prelude::TextFont {


    
    fn clone (_self:Ref<bevy::text::prelude::TextFont>,) -> Val<bevy::text::prelude::TextFont> {
        let output: Val<bevy::text::prelude::TextFont> =<bevy::text::prelude::TextFont as ::std::clone::Clone>::clone(&_self,).into();
        output
    }


    
    ///  Returns a new [`TextFont`] with the specified font size.
    
    fn from_font_size (font_size:f32,) -> Val<bevy::text::prelude::TextFont> {
        let output: Val<bevy::text::prelude::TextFont> =bevy::text::prelude::TextFont::from_font_size(font_size,).into();
        output
    }


    
    ///  Returns this [`TextFont`] with the specified font size.
    
    fn with_font_size (_self:Val<bevy::text::prelude::TextFont>,font_size:f32,) -> Val<bevy::text::prelude::TextFont> {
        let output: Val<bevy::text::prelude::TextFont> =bevy::text::prelude::TextFont::with_font_size(_self.into_inner(),font_size,).into();
        output
    }


    
    ///  Returns this [`TextFont`] with the specified [`FontSmoothing`].
    
    fn with_font_smoothing (_self:Val<bevy::text::prelude::TextFont>,font_smoothing:Val<bevy::text::FontSmoothing>,) -> Val<bevy::text::prelude::TextFont> {
        let output: Val<bevy::text::prelude::TextFont> =bevy::text::prelude::TextFont::with_font_smoothing(_self.into_inner(),font_smoothing.into_inner(),).into();
        output
    }


    
    ///  Returns this [`TextFont`] with the specified [`LineHeight`].
    
    fn with_line_height (_self:Val<bevy::text::prelude::TextFont>,line_height:Val<bevy::text::LineHeight>,) -> Val<bevy::text::prelude::TextFont> {
        let output: Val<bevy::text::prelude::TextFont> =bevy::text::prelude::TextFont::with_line_height(_self.into_inner(),line_height.into_inner(),).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "text_layout_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl bevy::text::prelude::TextLayout {


    
    fn clone (_self:Ref<bevy::text::prelude::TextLayout>,) -> Val<bevy::text::prelude::TextLayout> {
        let output: Val<bevy::text::prelude::TextLayout> =<bevy::text::prelude::TextLayout as ::std::clone::Clone>::clone(&_self,).into();
        output
    }


    
    ///  Makes a new [`TextLayout`].
    
    fn new (justify:Val<bevy::text::prelude::JustifyText>,linebreak:Val<bevy::text::prelude::LineBreak>,) -> Val<bevy::text::prelude::TextLayout> {
        let output: Val<bevy::text::prelude::TextLayout> =bevy::text::prelude::TextLayout::new(justify.into_inner(),linebreak.into_inner(),).into();
        output
    }


    
    ///  Makes a new [`TextLayout`] with the specified [`JustifyText`].
    
    fn new_with_justify (justify:Val<bevy::text::prelude::JustifyText>,) -> Val<bevy::text::prelude::TextLayout> {
        let output: Val<bevy::text::prelude::TextLayout> =bevy::text::prelude::TextLayout::new_with_justify(justify.into_inner(),).into();
        output
    }


    
    ///  Makes a new [`TextLayout`] with the specified [`LineBreak`].
    
    fn new_with_linebreak (linebreak:Val<bevy::text::prelude::LineBreak>,) -> Val<bevy::text::prelude::TextLayout> {
        let output: Val<bevy::text::prelude::TextLayout> =bevy::text::prelude::TextLayout::new_with_linebreak(linebreak.into_inner(),).into();
        output
    }


    
    ///  Makes a new [`TextLayout`] with soft wrapping disabled.
    
    ///  Hard wrapping, where text contains an explicit linebreak such as the escape sequence `\n`, will still occur.
    
    fn new_with_no_wrap () -> Val<bevy::text::prelude::TextLayout> {
        let output: Val<bevy::text::prelude::TextLayout> =bevy::text::prelude::TextLayout::new_with_no_wrap().into();
        output
    }


    
    ///  Returns this [`TextLayout`] with the specified [`JustifyText`].
    
    fn with_justify (_self:Val<bevy::text::prelude::TextLayout>,justify:Val<bevy::text::prelude::JustifyText>,) -> Val<bevy::text::prelude::TextLayout> {
        let output: Val<bevy::text::prelude::TextLayout> =bevy::text::prelude::TextLayout::with_justify(_self.into_inner(),justify.into_inner(),).into();
        output
    }


    
    ///  Returns this [`TextLayout`] with the specified [`LineBreak`].
    
    fn with_linebreak (_self:Val<bevy::text::prelude::TextLayout>,linebreak:Val<bevy::text::prelude::LineBreak>,) -> Val<bevy::text::prelude::TextLayout> {
        let output: Val<bevy::text::prelude::TextLayout> =bevy::text::prelude::TextLayout::with_linebreak(_self.into_inner(),linebreak.into_inner(),).into();
        output
    }


    
    ///  Returns this [`TextLayout`] with soft wrapping disabled.
    
    ///  Hard wrapping, where text contains an explicit linebreak such as the escape sequence `\n`, will still occur.
    
    fn with_no_wrap (_self:Val<bevy::text::prelude::TextLayout>,) -> Val<bevy::text::prelude::TextLayout> {
        let output: Val<bevy::text::prelude::TextLayout> =bevy::text::prelude::TextLayout::with_no_wrap(_self.into_inner(),).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "text_span_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl bevy::text::prelude::TextSpan {


    
    fn clone (_self:Ref<bevy::text::prelude::TextSpan>,) -> Val<bevy::text::prelude::TextSpan> {
        let output: Val<bevy::text::prelude::TextSpan> =<bevy::text::prelude::TextSpan as ::std::clone::Clone>::clone(&_self,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "line_height_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl bevy::text::LineHeight {


    
    fn clone (_self:Ref<bevy::text::LineHeight>,) -> Val<bevy::text::LineHeight> {
        let output: Val<bevy::text::LineHeight> =<bevy::text::LineHeight as ::std::clone::Clone>::clone(&_self,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "text_bounds_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl bevy::text::TextBounds {


    
    fn clone (_self:Ref<bevy::text::TextBounds>,) -> Val<bevy::text::TextBounds> {
        let output: Val<bevy::text::TextBounds> =<bevy::text::TextBounds as ::std::clone::Clone>::clone(&_self,).into();
        output
    }


    
    ///  Creates a new `TextBounds`, bounded with the specified width and height values.
    
    fn new (width:f32,height:f32,) -> Val<bevy::text::TextBounds> {
        let output: Val<bevy::text::TextBounds> =bevy::text::TextBounds::new(width,height,).into();
        output
    }


    
    ///  Creates a new `TextBounds`, bounded with the specified width value and unbounded on height.
    
    fn new_horizontal (width:f32,) -> Val<bevy::text::TextBounds> {
        let output: Val<bevy::text::TextBounds> =bevy::text::TextBounds::new_horizontal(width,).into();
        output
    }


    
    ///  Creates a new `TextBounds`, bounded with the specified height value and unbounded on width.
    
    fn new_vertical (height:f32,) -> Val<bevy::text::TextBounds> {
        let output: Val<bevy::text::TextBounds> =bevy::text::TextBounds::new_vertical(height,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "computed_text_block_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl bevy::text::ComputedTextBlock {


    
    fn clone (_self:Ref<bevy::text::ComputedTextBlock>,) -> Val<bevy::text::ComputedTextBlock> {
        let output: Val<bevy::text::ComputedTextBlock> =<bevy::text::ComputedTextBlock as ::std::clone::Clone>::clone(&_self,).into();
        output
    }


    
    ///  Indicates if the text needs to be refreshed in [`TextLayoutInfo`].
    
    ///  Updated automatically by [`detect_text_needs_rerender`] and cleared
    
    ///  by [`TextPipeline`](crate::TextPipeline) methods.
    
    fn needs_rerender (_self:Ref<bevy::text::ComputedTextBlock>,) -> bool {
        let output: bool =bevy::text::ComputedTextBlock::needs_rerender(&_self,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "text_entity_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl bevy::text::TextEntity {


    
    fn clone (_self:Ref<bevy::text::TextEntity>,) -> Val<bevy::text::TextEntity> {
        let output: Val<bevy::text::TextEntity> =<bevy::text::TextEntity as ::std::clone::Clone>::clone(&_self,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "font_smoothing_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl bevy::text::FontSmoothing {


    
    fn assert_receiver_is_total_eq (_self:Ref<bevy::text::FontSmoothing>,) -> () {
        let output: () =<bevy::text::FontSmoothing as ::std::cmp::Eq>::assert_receiver_is_total_eq(&_self,).into();
        output
    }


    
    fn clone (_self:Ref<bevy::text::FontSmoothing>,) -> Val<bevy::text::FontSmoothing> {
        let output: Val<bevy::text::FontSmoothing> =<bevy::text::FontSmoothing as ::std::clone::Clone>::clone(&_self,).into();
        output
    }


    
    fn eq (_self:Ref<bevy::text::FontSmoothing>,other:Ref<bevy::text::FontSmoothing>,) -> bool {
        let output: bool =<bevy::text::FontSmoothing as ::std::cmp::PartialEq::<bevy::text::FontSmoothing>>::eq(&_self,&other,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "glyph_atlas_location_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl bevy::text::GlyphAtlasLocation {


    
    fn clone (_self:Ref<bevy::text::GlyphAtlasLocation>,) -> Val<bevy::text::GlyphAtlasLocation> {
        let output: Val<bevy::text::GlyphAtlasLocation> =<bevy::text::GlyphAtlasLocation as ::std::clone::Clone>::clone(&_self,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "glyph_atlas_info_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl bevy::text::GlyphAtlasInfo {


    
    fn clone (_self:Ref<bevy::text::GlyphAtlasInfo>,) -> Val<bevy::text::GlyphAtlasInfo> {
        let output: Val<bevy::text::GlyphAtlasInfo> =<bevy::text::GlyphAtlasInfo as ::std::clone::Clone>::clone(&_self,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "positioned_glyph_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl bevy::text::PositionedGlyph {


    
    fn clone (_self:Ref<bevy::text::PositionedGlyph>,) -> Val<bevy::text::PositionedGlyph> {
        let output: Val<bevy::text::PositionedGlyph> =<bevy::text::PositionedGlyph as ::std::clone::Clone>::clone(&_self,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "text_layout_info_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl bevy::text::TextLayoutInfo {


    
    fn clone (_self:Ref<bevy::text::TextLayoutInfo>,) -> Val<bevy::text::TextLayoutInfo> {
        let output: Val<bevy::text::TextLayoutInfo> =<bevy::text::TextLayoutInfo as ::std::clone::Clone>::clone(&_self,).into();
        output
    }
     
}


impl ::bevy::app::Plugin for BevyTextScriptingPlugin {
    fn build(&self, app: &mut ::bevy::prelude::App) {
        let mut world = app.world_mut();

        
            register_justify_text_functions(&mut world);
        
            register_line_break_functions(&mut world);
        
            register_text_2_d_functions(&mut world);
        
            register_text_color_functions(&mut world);
        
            register_text_font_functions(&mut world);
        
            register_text_layout_functions(&mut world);
        
            register_text_span_functions(&mut world);
        
            register_line_height_functions(&mut world);
        
            register_text_bounds_functions(&mut world);
        
            register_computed_text_block_functions(&mut world);
        
            register_text_entity_functions(&mut world);
        
            register_font_smoothing_functions(&mut world);
        
            register_glyph_atlas_location_functions(&mut world);
        
            register_glyph_atlas_info_functions(&mut world);
        
            register_positioned_glyph_functions(&mut world);
        
            register_text_layout_info_functions(&mut world);
        
    }
}
