// @generated by cargo bevy-api-gen generate, modify the templates not this file
#![allow(clippy::all)]
#![allow(unused, deprecated, dead_code)]
#![cfg_attr(rustfmt, rustfmt_skip)]
use bevy_mod_scripting_core::bindings::{
    ReflectReference,
    function::{
        from::{Ref, Mut, Val},
        namespace::NamespaceBuilder,
    },
};
use bevy_mod_scripting_derive::script_bindings;
use crate::*;
pub struct BevyCoreScriptingPlugin;
#[script_bindings(
    remote,
    name = "name_functions",
    bms_core_path = "bevy_mod_scripting_core",
    generated
)]
impl bevy::core::prelude::Name {
    fn clone(_self: Ref<bevy::core::prelude::Name>) -> Val<bevy::core::prelude::Name> {
        let output: Val<bevy::core::prelude::Name> = <bevy::core::prelude::Name as std::clone::Clone>::clone(
                &_self,
            )
            .into();
        output
    }
    fn eq(
        _self: Ref<bevy::core::prelude::Name>,
        other: Ref<bevy::core::prelude::Name>,
    ) -> bool {
        let output: bool = <bevy::core::prelude::Name as std::cmp::PartialEq<
            bevy::core::prelude::Name,
        >>::eq(&_self, &other)
            .into();
        output
    }
}
impl ::bevy::app::Plugin for BevyCoreScriptingPlugin {
    fn build(&self, app: &mut ::bevy::prelude::App) {
        let mut world = app.world_mut();
        register_name_functions(&mut world);
    }
}
