// @generated by cargo bevy-api-gen generate, modify the templates not this file
#![allow(clippy::all)]
#![allow(unused, deprecated, dead_code)]
#![cfg_attr(rustfmt, rustfmt_skip)]

use bevy_mod_scripting_core::{
    bindings::{
        ReflectReference, 
        function::{from::{Ref, Mut, Val}, namespace::{NamespaceBuilder}}
    }
};
use bevy_ecs::{prelude::*};


use bevy_mod_scripting_derive::script_bindings;


use crate::*;







pub struct BevyGizmosScriptingPlugin;


#[script_bindings(
    remote,
    name = "aabb_gizmo_config_group_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl ::bevy_gizmos::aabb::AabbGizmoConfigGroup {


    
    fn clone (_self:Ref<::bevy_gizmos::aabb::AabbGizmoConfigGroup>,) -> Val<::bevy_gizmos::aabb::AabbGizmoConfigGroup> {
        let output: Val<::bevy_gizmos::aabb::AabbGizmoConfigGroup> =<::bevy_gizmos::aabb::AabbGizmoConfigGroup as ::std::clone::Clone>::clone(&_self,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "show_aabb_gizmo_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl ::bevy_gizmos::aabb::ShowAabbGizmo {
     
}

#[script_bindings(
    remote,
    name = "default_gizmo_config_group_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl ::bevy_gizmos::config::DefaultGizmoConfigGroup {
     
}

#[script_bindings(
    remote,
    name = "gizmo_config_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl ::bevy_gizmos::config::GizmoConfig {


    
    fn clone (_self:Ref<::bevy_gizmos::config::GizmoConfig>,) -> Val<::bevy_gizmos::config::GizmoConfig> {
        let output: Val<::bevy_gizmos::config::GizmoConfig> =<::bevy_gizmos::config::GizmoConfig as ::std::clone::Clone>::clone(&_self,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "gizmo_config_store_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl ::bevy_gizmos::config::GizmoConfigStore {
     
}

#[script_bindings(
    remote,
    name = "gizmo_line_config_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl ::bevy_gizmos::config::GizmoLineConfig {


    
    fn clone (_self:Ref<::bevy_gizmos::config::GizmoLineConfig>,) -> Val<::bevy_gizmos::config::GizmoLineConfig> {
        let output: Val<::bevy_gizmos::config::GizmoLineConfig> =<::bevy_gizmos::config::GizmoLineConfig as ::std::clone::Clone>::clone(&_self,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "gizmo_line_joint_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl ::bevy_gizmos::config::GizmoLineJoint {


    
    fn assert_receiver_is_total_eq (_self:Ref<::bevy_gizmos::config::GizmoLineJoint>,) -> () {
        let output: () =<::bevy_gizmos::config::GizmoLineJoint as ::std::cmp::Eq>::assert_receiver_is_total_eq(&_self,).into();
        output
    }


    
    fn clone (_self:Ref<::bevy_gizmos::config::GizmoLineJoint>,) -> Val<::bevy_gizmos::config::GizmoLineJoint> {
        let output: Val<::bevy_gizmos::config::GizmoLineJoint> =<::bevy_gizmos::config::GizmoLineJoint as ::std::clone::Clone>::clone(&_self,).into();
        output
    }


    
    fn eq (_self:Ref<::bevy_gizmos::config::GizmoLineJoint>,other:Ref<::bevy_gizmos::config::GizmoLineJoint>,) -> bool {
        let output: bool =<::bevy_gizmos::config::GizmoLineJoint as ::std::cmp::PartialEq::<::bevy_gizmos::config::GizmoLineJoint>>::eq(&_self,&other,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "gizmo_line_style_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl ::bevy_gizmos::config::GizmoLineStyle {


    
    fn clone (_self:Ref<::bevy_gizmos::config::GizmoLineStyle>,) -> Val<::bevy_gizmos::config::GizmoLineStyle> {
        let output: Val<::bevy_gizmos::config::GizmoLineStyle> =<::bevy_gizmos::config::GizmoLineStyle as ::std::clone::Clone>::clone(&_self,).into();
        output
    }


    
    fn eq (_self:Ref<::bevy_gizmos::config::GizmoLineStyle>,other:Ref<::bevy_gizmos::config::GizmoLineStyle>,) -> bool {
        let output: bool =<::bevy_gizmos::config::GizmoLineStyle as ::std::cmp::PartialEq::<::bevy_gizmos::config::GizmoLineStyle>>::eq(&_self,&other,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "gizmo_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl ::bevy_gizmos::retained::Gizmo {


    
    fn clone (_self:Ref<::bevy_gizmos::retained::Gizmo>,) -> Val<::bevy_gizmos::retained::Gizmo> {
        let output: Val<::bevy_gizmos::retained::Gizmo> =<::bevy_gizmos::retained::Gizmo as ::std::clone::Clone>::clone(&_self,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "light_gizmo_color_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl ::bevy_gizmos::light::LightGizmoColor {


    
    fn clone (_self:Ref<::bevy_gizmos::light::LightGizmoColor>,) -> Val<::bevy_gizmos::light::LightGizmoColor> {
        let output: Val<::bevy_gizmos::light::LightGizmoColor> =<::bevy_gizmos::light::LightGizmoColor as ::std::clone::Clone>::clone(&_self,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "light_gizmo_config_group_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl ::bevy_gizmos::light::LightGizmoConfigGroup {


    
    fn clone (_self:Ref<::bevy_gizmos::light::LightGizmoConfigGroup>,) -> Val<::bevy_gizmos::light::LightGizmoConfigGroup> {
        let output: Val<::bevy_gizmos::light::LightGizmoConfigGroup> =<::bevy_gizmos::light::LightGizmoConfigGroup as ::std::clone::Clone>::clone(&_self,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "show_light_gizmo_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl ::bevy_gizmos::light::ShowLightGizmo {
     
}

#[script_bindings(
    remote,
    name = "erased_gizmo_config_group_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl ::bevy_gizmos::config::ErasedGizmoConfigGroup {


    
    fn clone (_self:Ref<::bevy_gizmos::config::ErasedGizmoConfigGroup>,) -> Val<::bevy_gizmos::config::ErasedGizmoConfigGroup> {
        let output: Val<::bevy_gizmos::config::ErasedGizmoConfigGroup> =<::bevy_gizmos::config::ErasedGizmoConfigGroup as ::std::clone::Clone>::clone(&_self,).into();
        output
    }
     
}


impl Plugin for BevyGizmosScriptingPlugin {
    fn build(&self, app: &mut App) {
        let mut world = app.world_mut();

        
            register_aabb_gizmo_config_group_functions(&mut world);
        
            register_show_aabb_gizmo_functions(&mut world);
        
            register_default_gizmo_config_group_functions(&mut world);
        
            register_gizmo_config_functions(&mut world);
        
            register_gizmo_config_store_functions(&mut world);
        
            register_gizmo_line_config_functions(&mut world);
        
            register_gizmo_line_joint_functions(&mut world);
        
            register_gizmo_line_style_functions(&mut world);
        
            register_gizmo_functions(&mut world);
        
            register_light_gizmo_color_functions(&mut world);
        
            register_light_gizmo_config_group_functions(&mut world);
        
            register_show_light_gizmo_functions(&mut world);
        
            register_erased_gizmo_config_group_functions(&mut world);
        
    }
}
