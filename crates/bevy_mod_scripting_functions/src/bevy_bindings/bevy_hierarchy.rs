// @generated by cargo bevy-api-gen generate, modify the templates not this file
#![allow(clippy::all)]
#![allow(unused, deprecated, dead_code)]
#![cfg_attr(rustfmt, rustfmt_skip)]
use super::bevy_ecs::*;
use super::bevy_reflect::*;
use super::bevy_core::*;
use bevy_mod_scripting_core::{
    AddContextInitializer, StoreDocumentation,
    bindings::{ReflectReference, function::from::{Ref, Mut, Val}},
};
use crate::*;
pub struct BevyHierarchyScriptingPlugin;
impl ::bevy::app::Plugin for BevyHierarchyScriptingPlugin {
    fn build(&self, app: &mut ::bevy::prelude::App) {
        let mut world = app.world_mut();
        NamespaceBuilder::<::bevy::hierarchy::prelude::Children>::new(world)
            .overwrite_script_function(
                "swap",
                |
                    mut _self: Mut<bevy::hierarchy::prelude::Children>,
                    a_index: usize,
                    b_index: usize|
                {
                    let output: () = ::bevy::hierarchy::prelude::Children::swap(
                            &mut _self,
                            a_index,
                            b_index,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<::bevy::hierarchy::prelude::Parent>::new(world)
            .overwrite_script_function(
                "assert_receiver_is_total_eq",
                |_self: Ref<bevy::hierarchy::prelude::Parent>| {
                    let output: () = ::bevy::hierarchy::prelude::Parent::assert_receiver_is_total_eq(
                            &_self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::hierarchy::prelude::Parent>,
                    other: Ref<bevy::hierarchy::prelude::Parent>|
                {
                    let output: bool = ::bevy::hierarchy::prelude::Parent::eq(
                            &_self,
                            &other,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<::bevy::hierarchy::HierarchyEvent>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::hierarchy::HierarchyEvent>,
                    other: Ref<bevy::hierarchy::HierarchyEvent>|
                {
                    let output: bool = ::bevy::hierarchy::HierarchyEvent::eq(
                            &_self,
                            &other,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::hierarchy::HierarchyEvent>| {
                    let output: Val<bevy::hierarchy::HierarchyEvent> = ::bevy::hierarchy::HierarchyEvent::clone(
                            &_self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "assert_receiver_is_total_eq",
                |_self: Ref<bevy::hierarchy::HierarchyEvent>| {
                    let output: () = ::bevy::hierarchy::HierarchyEvent::assert_receiver_is_total_eq(
                            &_self,
                        )
                        .into();
                    output
                },
            );
    }
}
