// @generated by cargo bevy-api-gen generate, modify the templates not this file
#![allow(clippy::all)]
#![allow(unused, deprecated, dead_code)]
#![cfg_attr(rustfmt, rustfmt_skip)]
use super::bevy_ecs::*;
use super::bevy_reflect::*;
use super::bevy_core::*;
use super::bevy_math::*;
use super::bevy_hierarchy::*;
use bevy_mod_scripting_core::{
    AddContextInitializer, StoreDocumentation,
    bindings::{ReflectReference, function::from::{Ref, Mut, Val}},
};
use crate::*;
pub struct BevyTransformScriptingPlugin;
impl ::bevy::app::Plugin for BevyTransformScriptingPlugin {
    fn build(&self, app: &mut ::bevy::prelude::App) {
        let mut world = app.world_mut();
        NamespaceBuilder::<::bevy::transform::components::GlobalTransform>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::transform::components::GlobalTransform>| {
                    let output: Val<bevy::transform::components::GlobalTransform> = ::bevy::transform::components::GlobalTransform::clone(
                            _self.into(),
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "mul",
                |
                    _self: Val<bevy::transform::components::GlobalTransform>,
                    global_transform: Val<bevy::transform::components::GlobalTransform>|
                {
                    let output: Val<bevy::transform::components::GlobalTransform> = ::bevy::transform::components::GlobalTransform::mul(
                            _self.into(),
                            global_transform.into(),
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "mul",
                |
                    _self: Val<bevy::transform::components::GlobalTransform>,
                    transform: Val<bevy::transform::components::Transform>|
                {
                    let output: Val<bevy::transform::components::GlobalTransform> = ::bevy::transform::components::GlobalTransform::mul(
                            _self.into(),
                            transform.into(),
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::transform::components::GlobalTransform>,
                    other: Ref<bevy::transform::components::GlobalTransform>|
                {
                    let output: bool = ::bevy::transform::components::GlobalTransform::eq(
                            _self.into(),
                            other.into(),
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "from_xyz",
                |x: f32, y: f32, z: f32| {
                    let output: Val<bevy::transform::components::GlobalTransform> = ::bevy::transform::components::GlobalTransform::from_xyz(
                            x.into(),
                            y.into(),
                            z.into(),
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "compute_transform",
                |_self: Ref<bevy::transform::components::GlobalTransform>| {
                    let output: Val<bevy::transform::components::Transform> = ::bevy::transform::components::GlobalTransform::compute_transform(
                            _self.into(),
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "reparented_to",
                |
                    _self: Ref<bevy::transform::components::GlobalTransform>,
                    parent: Ref<bevy::transform::components::GlobalTransform>|
                {
                    let output: Val<bevy::transform::components::Transform> = ::bevy::transform::components::GlobalTransform::reparented_to(
                            _self.into(),
                            parent.into(),
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "mul_transform",
                |
                    _self: Ref<bevy::transform::components::GlobalTransform>,
                    transform: Val<bevy::transform::components::Transform>|
                {
                    let output: Val<bevy::transform::components::GlobalTransform> = ::bevy::transform::components::GlobalTransform::mul_transform(
                            _self.into(),
                            transform.into(),
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<::bevy::transform::components::Transform>::new(world)
            .overwrite_script_function(
                "from_xyz",
                |x: f32, y: f32, z: f32| {
                    let output: Val<bevy::transform::components::Transform> = ::bevy::transform::components::Transform::from_xyz(
                            x.into(),
                            y.into(),
                            z.into(),
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "rotate_x",
                |_self: Mut<bevy::transform::components::Transform>, angle: f32| {
                    let output: () = ::bevy::transform::components::Transform::rotate_x(
                            _self.into(),
                            angle.into(),
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "rotate_y",
                |_self: Mut<bevy::transform::components::Transform>, angle: f32| {
                    let output: () = ::bevy::transform::components::Transform::rotate_y(
                            _self.into(),
                            angle.into(),
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "rotate_z",
                |_self: Mut<bevy::transform::components::Transform>, angle: f32| {
                    let output: () = ::bevy::transform::components::Transform::rotate_z(
                            _self.into(),
                            angle.into(),
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "rotate_local_x",
                |_self: Mut<bevy::transform::components::Transform>, angle: f32| {
                    let output: () = ::bevy::transform::components::Transform::rotate_local_x(
                            _self.into(),
                            angle.into(),
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "rotate_local_y",
                |_self: Mut<bevy::transform::components::Transform>, angle: f32| {
                    let output: () = ::bevy::transform::components::Transform::rotate_local_y(
                            _self.into(),
                            angle.into(),
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "rotate_local_z",
                |_self: Mut<bevy::transform::components::Transform>, angle: f32| {
                    let output: () = ::bevy::transform::components::Transform::rotate_local_z(
                            _self.into(),
                            angle.into(),
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "mul_transform",
                |
                    _self: Ref<bevy::transform::components::Transform>,
                    transform: Val<bevy::transform::components::Transform>|
                {
                    let output: Val<bevy::transform::components::Transform> = ::bevy::transform::components::Transform::mul_transform(
                            _self.into(),
                            transform.into(),
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "is_finite",
                |_self: Ref<bevy::transform::components::Transform>| {
                    let output: bool = ::bevy::transform::components::Transform::is_finite(
                            _self.into(),
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::transform::components::Transform>,
                    other: Ref<bevy::transform::components::Transform>|
                {
                    let output: bool = ::bevy::transform::components::Transform::eq(
                            _self.into(),
                            other.into(),
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "mul",
                |
                    _self: Val<bevy::transform::components::Transform>,
                    transform: Val<bevy::transform::components::Transform>|
                {
                    let output: Val<bevy::transform::components::Transform> = ::bevy::transform::components::Transform::mul(
                            _self.into(),
                            transform.into(),
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "mul",
                |
                    _self: Val<bevy::transform::components::Transform>,
                    global_transform: Val<bevy::transform::components::GlobalTransform>|
                {
                    let output: Val<bevy::transform::components::GlobalTransform> = ::bevy::transform::components::Transform::mul(
                            _self.into(),
                            global_transform.into(),
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::transform::components::Transform>| {
                    let output: Val<bevy::transform::components::Transform> = ::bevy::transform::components::Transform::clone(
                            _self.into(),
                        )
                        .into();
                    output
                },
            );
    }
}
