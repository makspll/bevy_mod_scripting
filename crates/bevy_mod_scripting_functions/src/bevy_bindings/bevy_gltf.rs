// @generated by cargo bevy-api-gen generate, modify the templates not this file
#![allow(clippy::all)]
#![allow(unused, deprecated, dead_code)]
#![cfg_attr(rustfmt, rustfmt_skip)]

use bevy_mod_scripting_core::{
    bindings::{
        ReflectReference, 
        function::{from::{Ref, Mut, Val}, namespace::{NamespaceBuilder}}
    }
};
use bevy_ecs::{prelude::*};


use bevy_mod_scripting_derive::script_bindings;


use crate::*;







pub struct BevyGltfScriptingPlugin;


#[script_bindings(
    remote,
    name = "gltf_extras_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl ::bevy_gltf::prelude::GltfExtras {


    
    fn clone (_self:Ref<::bevy_gltf::prelude::GltfExtras>,) -> Val<::bevy_gltf::prelude::GltfExtras> {
        let output: Val<::bevy_gltf::prelude::GltfExtras> =<::bevy_gltf::prelude::GltfExtras as ::std::clone::Clone>::clone(&_self,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "gltf_scene_extras_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl ::bevy_gltf::GltfSceneExtras {


    
    fn clone (_self:Ref<::bevy_gltf::GltfSceneExtras>,) -> Val<::bevy_gltf::GltfSceneExtras> {
        let output: Val<::bevy_gltf::GltfSceneExtras> =<::bevy_gltf::GltfSceneExtras as ::std::clone::Clone>::clone(&_self,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "gltf_mesh_extras_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl ::bevy_gltf::GltfMeshExtras {


    
    fn clone (_self:Ref<::bevy_gltf::GltfMeshExtras>,) -> Val<::bevy_gltf::GltfMeshExtras> {
        let output: Val<::bevy_gltf::GltfMeshExtras> =<::bevy_gltf::GltfMeshExtras as ::std::clone::Clone>::clone(&_self,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "gltf_material_extras_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl ::bevy_gltf::GltfMaterialExtras {


    
    fn clone (_self:Ref<::bevy_gltf::GltfMaterialExtras>,) -> Val<::bevy_gltf::GltfMaterialExtras> {
        let output: Val<::bevy_gltf::GltfMaterialExtras> =<::bevy_gltf::GltfMaterialExtras as ::std::clone::Clone>::clone(&_self,).into();
        output
    }
     
}

#[script_bindings(
    remote,
    name = "gltf_material_name_functions",
    bms_core_path="bevy_mod_scripting_core",
    generated
)]
impl ::bevy_gltf::GltfMaterialName {


    
    fn clone (_self:Ref<::bevy_gltf::GltfMaterialName>,) -> Val<::bevy_gltf::GltfMaterialName> {
        let output: Val<::bevy_gltf::GltfMaterialName> =<::bevy_gltf::GltfMaterialName as ::std::clone::Clone>::clone(&_self,).into();
        output
    }
     
}


impl Plugin for BevyGltfScriptingPlugin {
    fn build(&self, app: &mut App) {
        let mut world = app.world_mut();

        
            register_gltf_extras_functions(&mut world);
        
            register_gltf_scene_extras_functions(&mut world);
        
            register_gltf_mesh_extras_functions(&mut world);
        
            register_gltf_material_extras_functions(&mut world);
        
            register_gltf_material_name_functions(&mut world);
        
    }
}
