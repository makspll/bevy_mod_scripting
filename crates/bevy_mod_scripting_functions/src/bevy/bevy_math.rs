// @generated by cargo bevy-api-gen generate, modify the templates not this file
#![allow(clippy::all)]
#![allow(unused, deprecated, dead_code)]
#![cfg_attr(rustfmt, rustfmt_skip)]
use super::bevy_reflect::*;
use bevy_mod_scripting_core::{
    AddContextInitializer, StoreDocumentation, bindings::ReflectReference,
};
use bevy_mod_scripting_functions::RegisterScriptFunction;
use crate::*;
pub struct BevyMathScriptingPlugin;
impl bevy::app::Plugin for BevyMathScriptingPlugin {
    fn build(&self, app: &mut bevy::prelude::App) {
        let mut world = app.world_mut();
        NamespaceBuilder::<AspectRatio>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::AspectRatio>,
                    other: Ref<bevy::math::AspectRatio>|
                {
                    let output: bool = AspectRatio::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "ratio",
                |_self: Ref<bevy::math::AspectRatio>| {
                    let output: f32 = AspectRatio::ratio(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "inverse",
                |_self: Ref<bevy::math::AspectRatio>| {
                    let output: Val<bevy::math::AspectRatio> = AspectRatio::inverse(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "is_landscape",
                |_self: Ref<bevy::math::AspectRatio>| {
                    let output: bool = AspectRatio::is_landscape(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "is_portrait",
                |_self: Ref<bevy::math::AspectRatio>| {
                    let output: bool = AspectRatio::is_portrait(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "is_square",
                |_self: Ref<bevy::math::AspectRatio>| {
                    let output: bool = AspectRatio::is_square(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::AspectRatio>| {
                    let output: Val<bevy::math::AspectRatio> = AspectRatio::clone(_self)
                        .into();
                    output
                },
            );
        NamespaceBuilder::<CompassOctant>::new(world)
            .overwrite_script_function(
                "assert_receiver_is_total_eq",
                |_self: Ref<bevy::math::CompassOctant>| {
                    let output: () = CompassOctant::assert_receiver_is_total_eq(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::CompassOctant>| {
                    let output: Val<bevy::math::CompassOctant> = CompassOctant::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::CompassOctant>,
                    other: Ref<bevy::math::CompassOctant>|
                {
                    let output: bool = CompassOctant::eq(_self, other).into();
                    output
                },
            );
        NamespaceBuilder::<CompassQuadrant>::new(world)
            .overwrite_script_function(
                "assert_receiver_is_total_eq",
                |_self: Ref<bevy::math::CompassQuadrant>| {
                    let output: () = CompassQuadrant::assert_receiver_is_total_eq(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::CompassQuadrant>,
                    other: Ref<bevy::math::CompassQuadrant>|
                {
                    let output: bool = CompassQuadrant::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::CompassQuadrant>| {
                    let output: Val<bevy::math::CompassQuadrant> = CompassQuadrant::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<Isometry2d>::new(world)
            .overwrite_script_function(
                "mul",
                |
                    _self: Val<bevy::math::Isometry2d>,
                    rhs: Val<bevy::math::prelude::Dir2>|
                {
                    let output: Val<bevy::math::prelude::Dir2> = Isometry2d::mul(
                            _self,
                            rhs,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "from_rotation",
                |rotation: Val<bevy::math::Rot2>| {
                    let output: Val<bevy::math::Isometry2d> = Isometry2d::from_rotation(
                            rotation,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "from_xy",
                |x: f32, y: f32| {
                    let output: Val<bevy::math::Isometry2d> = Isometry2d::from_xy(x, y)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "inverse",
                |_self: Ref<bevy::math::Isometry2d>| {
                    let output: Val<bevy::math::Isometry2d> = Isometry2d::inverse(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "inverse_mul",
                |_self: Ref<bevy::math::Isometry2d>, rhs: Val<bevy::math::Isometry2d>| {
                    let output: Val<bevy::math::Isometry2d> = Isometry2d::inverse_mul(
                            _self,
                            rhs,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::Isometry2d>| {
                    let output: Val<bevy::math::Isometry2d> = Isometry2d::clone(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "mul",
                |_self: Val<bevy::math::Isometry2d>, rhs: Val<bevy::math::Isometry2d>| {
                    let output: Val<bevy::math::Isometry2d> = Isometry2d::mul(_self, rhs)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |_self: Ref<bevy::math::Isometry2d>, other: Ref<bevy::math::Isometry2d>| {
                    let output: bool = Isometry2d::eq(_self, other).into();
                    output
                },
            );
        NamespaceBuilder::<Isometry3d>::new(world)
            .overwrite_script_function(
                "from_xyz",
                |x: f32, y: f32, z: f32| {
                    let output: Val<bevy::math::Isometry3d> = Isometry3d::from_xyz(
                            x,
                            y,
                            z,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "inverse",
                |_self: Ref<bevy::math::Isometry3d>| {
                    let output: Val<bevy::math::Isometry3d> = Isometry3d::inverse(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "inverse_mul",
                |_self: Ref<bevy::math::Isometry3d>, rhs: Val<bevy::math::Isometry3d>| {
                    let output: Val<bevy::math::Isometry3d> = Isometry3d::inverse_mul(
                            _self,
                            rhs,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::Isometry3d>| {
                    let output: Val<bevy::math::Isometry3d> = Isometry3d::clone(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "mul",
                |_self: Val<bevy::math::Isometry3d>, rhs: Val<bevy::math::Isometry3d>| {
                    let output: Val<bevy::math::Isometry3d> = Isometry3d::mul(_self, rhs)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "mul",
                |
                    _self: Val<bevy::math::Isometry3d>,
                    rhs: Val<bevy::math::prelude::Dir3>|
                {
                    let output: Val<bevy::math::prelude::Dir3> = Isometry3d::mul(
                            _self,
                            rhs,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |_self: Ref<bevy::math::Isometry3d>, other: Ref<bevy::math::Isometry3d>| {
                    let output: bool = Isometry3d::eq(_self, other).into();
                    output
                },
            );
        NamespaceBuilder::<Ray2d>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::Ray2d>| {
                    let output: Val<bevy::math::Ray2d> = Ray2d::clone(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |_self: Ref<bevy::math::Ray2d>, other: Ref<bevy::math::Ray2d>| {
                    let output: bool = Ray2d::eq(_self, other).into();
                    output
                },
            );
        NamespaceBuilder::<Ray3d>::new(world)
            .overwrite_script_function(
                "eq",
                |_self: Ref<bevy::math::Ray3d>, other: Ref<bevy::math::Ray3d>| {
                    let output: bool = Ray3d::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::Ray3d>| {
                    let output: Val<bevy::math::Ray3d> = Ray3d::clone(_self).into();
                    output
                },
            );
        NamespaceBuilder::<Rot2>::new(world)
            .overwrite_script_function(
                "mul",
                |_self: Val<bevy::math::Rot2>, rhs: Val<bevy::math::Rot2>| {
                    let output: Val<bevy::math::Rot2> = Rot2::mul(_self, rhs).into();
                    output
                },
            )
            .overwrite_script_function(
                "radians",
                |radians: f32| {
                    let output: Val<bevy::math::Rot2> = Rot2::radians(radians).into();
                    output
                },
            )
            .overwrite_script_function(
                "degrees",
                |degrees: f32| {
                    let output: Val<bevy::math::Rot2> = Rot2::degrees(degrees).into();
                    output
                },
            )
            .overwrite_script_function(
                "turn_fraction",
                |fraction: f32| {
                    let output: Val<bevy::math::Rot2> = Rot2::turn_fraction(fraction)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "from_sin_cos",
                |sin: f32, cos: f32| {
                    let output: Val<bevy::math::Rot2> = Rot2::from_sin_cos(sin, cos)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "as_radians",
                |_self: Val<bevy::math::Rot2>| {
                    let output: f32 = Rot2::as_radians(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "as_degrees",
                |_self: Val<bevy::math::Rot2>| {
                    let output: f32 = Rot2::as_degrees(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "as_turn_fraction",
                |_self: Val<bevy::math::Rot2>| {
                    let output: f32 = Rot2::as_turn_fraction(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "sin_cos",
                |_self: Val<bevy::math::Rot2>| {
                    let output: (f32, f32) = Rot2::sin_cos(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "length",
                |_self: Val<bevy::math::Rot2>| {
                    let output: f32 = Rot2::length(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "length_squared",
                |_self: Val<bevy::math::Rot2>| {
                    let output: f32 = Rot2::length_squared(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "length_recip",
                |_self: Val<bevy::math::Rot2>| {
                    let output: f32 = Rot2::length_recip(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "normalize",
                |_self: Val<bevy::math::Rot2>| {
                    let output: Val<bevy::math::Rot2> = Rot2::normalize(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "fast_renormalize",
                |_self: Val<bevy::math::Rot2>| {
                    let output: Val<bevy::math::Rot2> = Rot2::fast_renormalize(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "is_finite",
                |_self: Val<bevy::math::Rot2>| {
                    let output: bool = Rot2::is_finite(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "is_nan",
                |_self: Val<bevy::math::Rot2>| {
                    let output: bool = Rot2::is_nan(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "is_normalized",
                |_self: Val<bevy::math::Rot2>| {
                    let output: bool = Rot2::is_normalized(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "is_near_identity",
                |_self: Val<bevy::math::Rot2>| {
                    let output: bool = Rot2::is_near_identity(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "angle_between",
                |_self: Val<bevy::math::Rot2>, other: Val<bevy::math::Rot2>| {
                    let output: f32 = Rot2::angle_between(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "angle_to",
                |_self: Val<bevy::math::Rot2>, other: Val<bevy::math::Rot2>| {
                    let output: f32 = Rot2::angle_to(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "inverse",
                |_self: Val<bevy::math::Rot2>| {
                    let output: Val<bevy::math::Rot2> = Rot2::inverse(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "nlerp",
                |_self: Val<bevy::math::Rot2>, end: Val<bevy::math::Rot2>, s: f32| {
                    let output: Val<bevy::math::Rot2> = Rot2::nlerp(_self, end, s)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "slerp",
                |_self: Val<bevy::math::Rot2>, end: Val<bevy::math::Rot2>, s: f32| {
                    let output: Val<bevy::math::Rot2> = Rot2::slerp(_self, end, s)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "mul",
                |
                    _self: Val<bevy::math::Rot2>,
                    direction: Val<bevy::math::prelude::Dir2>|
                {
                    let output: Val<bevy::math::prelude::Dir2> = Rot2::mul(
                            _self,
                            direction,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |_self: Ref<bevy::math::Rot2>, other: Ref<bevy::math::Rot2>| {
                    let output: bool = Rot2::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::Rot2>| {
                    let output: Val<bevy::math::Rot2> = Rot2::clone(_self).into();
                    output
                },
            );
        NamespaceBuilder::<Dir2>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::prelude::Dir2>| {
                    let output: Val<bevy::math::prelude::Dir2> = Dir2::clone(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "from_xy_unchecked",
                |x: f32, y: f32| {
                    let output: Val<bevy::math::prelude::Dir2> = Dir2::from_xy_unchecked(
                            x,
                            y,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "slerp",
                |
                    _self: Val<bevy::math::prelude::Dir2>,
                    rhs: Val<bevy::math::prelude::Dir2>,
                    s: f32|
                {
                    let output: Val<bevy::math::prelude::Dir2> = Dir2::slerp(
                            _self,
                            rhs,
                            s,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "rotation_to",
                |
                    _self: Val<bevy::math::prelude::Dir2>,
                    other: Val<bevy::math::prelude::Dir2>|
                {
                    let output: Val<bevy::math::Rot2> = Dir2::rotation_to(_self, other)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "rotation_from",
                |
                    _self: Val<bevy::math::prelude::Dir2>,
                    other: Val<bevy::math::prelude::Dir2>|
                {
                    let output: Val<bevy::math::Rot2> = Dir2::rotation_from(_self, other)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "rotation_from_x",
                |_self: Val<bevy::math::prelude::Dir2>| {
                    let output: Val<bevy::math::Rot2> = Dir2::rotation_from_x(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "rotation_to_x",
                |_self: Val<bevy::math::prelude::Dir2>| {
                    let output: Val<bevy::math::Rot2> = Dir2::rotation_to_x(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "rotation_from_y",
                |_self: Val<bevy::math::prelude::Dir2>| {
                    let output: Val<bevy::math::Rot2> = Dir2::rotation_from_y(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "rotation_to_y",
                |_self: Val<bevy::math::prelude::Dir2>| {
                    let output: Val<bevy::math::Rot2> = Dir2::rotation_to_y(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "fast_renormalize",
                |_self: Val<bevy::math::prelude::Dir2>| {
                    let output: Val<bevy::math::prelude::Dir2> = Dir2::fast_renormalize(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::prelude::Dir2>,
                    other: Ref<bevy::math::prelude::Dir2>|
                {
                    let output: bool = Dir2::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "neg",
                |_self: Val<bevy::math::prelude::Dir2>| {
                    let output: Val<bevy::math::prelude::Dir2> = Dir2::neg(_self).into();
                    output
                },
            );
        NamespaceBuilder::<Dir3>::new(world)
            .overwrite_script_function(
                "neg",
                |_self: Val<bevy::math::prelude::Dir3>| {
                    let output: Val<bevy::math::prelude::Dir3> = Dir3::neg(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::prelude::Dir3>| {
                    let output: Val<bevy::math::prelude::Dir3> = Dir3::clone(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::prelude::Dir3>,
                    other: Ref<bevy::math::prelude::Dir3>|
                {
                    let output: bool = Dir3::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "from_xyz_unchecked",
                |x: f32, y: f32, z: f32| {
                    let output: Val<bevy::math::prelude::Dir3> = Dir3::from_xyz_unchecked(
                            x,
                            y,
                            z,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "slerp",
                |
                    _self: Val<bevy::math::prelude::Dir3>,
                    rhs: Val<bevy::math::prelude::Dir3>,
                    s: f32|
                {
                    let output: Val<bevy::math::prelude::Dir3> = Dir3::slerp(
                            _self,
                            rhs,
                            s,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "fast_renormalize",
                |_self: Val<bevy::math::prelude::Dir3>| {
                    let output: Val<bevy::math::prelude::Dir3> = Dir3::fast_renormalize(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<Dir3A>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::prelude::Dir3A>| {
                    let output: Val<bevy::math::prelude::Dir3A> = Dir3A::clone(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "neg",
                |_self: Val<bevy::math::prelude::Dir3A>| {
                    let output: Val<bevy::math::prelude::Dir3A> = Dir3A::neg(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::prelude::Dir3A>,
                    other: Ref<bevy::math::prelude::Dir3A>|
                {
                    let output: bool = Dir3A::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "from_xyz_unchecked",
                |x: f32, y: f32, z: f32| {
                    let output: Val<bevy::math::prelude::Dir3A> = Dir3A::from_xyz_unchecked(
                            x,
                            y,
                            z,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "slerp",
                |
                    _self: Val<bevy::math::prelude::Dir3A>,
                    rhs: Val<bevy::math::prelude::Dir3A>,
                    s: f32|
                {
                    let output: Val<bevy::math::prelude::Dir3A> = Dir3A::slerp(
                            _self,
                            rhs,
                            s,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "fast_renormalize",
                |_self: Val<bevy::math::prelude::Dir3A>| {
                    let output: Val<bevy::math::prelude::Dir3A> = Dir3A::fast_renormalize(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<IRect>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::prelude::IRect>,
                    other: Ref<bevy::math::prelude::IRect>|
                {
                    let output: bool = IRect::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "assert_receiver_is_total_eq",
                |_self: Ref<bevy::math::prelude::IRect>| {
                    let output: () = IRect::assert_receiver_is_total_eq(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::prelude::IRect>| {
                    let output: Val<bevy::math::prelude::IRect> = IRect::clone(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "new",
                |x0: i32, y0: i32, x1: i32, y1: i32| {
                    let output: Val<bevy::math::prelude::IRect> = IRect::new(
                            x0,
                            y0,
                            x1,
                            y1,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "is_empty",
                |_self: Ref<bevy::math::prelude::IRect>| {
                    let output: bool = IRect::is_empty(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "width",
                |_self: Ref<bevy::math::prelude::IRect>| {
                    let output: i32 = IRect::width(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "height",
                |_self: Ref<bevy::math::prelude::IRect>| {
                    let output: i32 = IRect::height(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "union",
                |
                    _self: Ref<bevy::math::prelude::IRect>,
                    other: Val<bevy::math::prelude::IRect>|
                {
                    let output: Val<bevy::math::prelude::IRect> = IRect::union(
                            _self,
                            other,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "intersect",
                |
                    _self: Ref<bevy::math::prelude::IRect>,
                    other: Val<bevy::math::prelude::IRect>|
                {
                    let output: Val<bevy::math::prelude::IRect> = IRect::intersect(
                            _self,
                            other,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "inflate",
                |_self: Ref<bevy::math::prelude::IRect>, expansion: i32| {
                    let output: Val<bevy::math::prelude::IRect> = IRect::inflate(
                            _self,
                            expansion,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "as_rect",
                |_self: Ref<bevy::math::prelude::IRect>| {
                    let output: Val<bevy::math::prelude::Rect> = IRect::as_rect(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "as_urect",
                |_self: Ref<bevy::math::prelude::IRect>| {
                    let output: Val<bevy::math::prelude::URect> = IRect::as_urect(_self)
                        .into();
                    output
                },
            );
        NamespaceBuilder::<Rect>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::prelude::Rect>,
                    other: Ref<bevy::math::prelude::Rect>|
                {
                    let output: bool = Rect::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "new",
                |x0: f32, y0: f32, x1: f32, y1: f32| {
                    let output: Val<bevy::math::prelude::Rect> = Rect::new(
                            x0,
                            y0,
                            x1,
                            y1,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "is_empty",
                |_self: Ref<bevy::math::prelude::Rect>| {
                    let output: bool = Rect::is_empty(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "width",
                |_self: Ref<bevy::math::prelude::Rect>| {
                    let output: f32 = Rect::width(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "height",
                |_self: Ref<bevy::math::prelude::Rect>| {
                    let output: f32 = Rect::height(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "union",
                |
                    _self: Ref<bevy::math::prelude::Rect>,
                    other: Val<bevy::math::prelude::Rect>|
                {
                    let output: Val<bevy::math::prelude::Rect> = Rect::union(
                            _self,
                            other,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "intersect",
                |
                    _self: Ref<bevy::math::prelude::Rect>,
                    other: Val<bevy::math::prelude::Rect>|
                {
                    let output: Val<bevy::math::prelude::Rect> = Rect::intersect(
                            _self,
                            other,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "inflate",
                |_self: Ref<bevy::math::prelude::Rect>, expansion: f32| {
                    let output: Val<bevy::math::prelude::Rect> = Rect::inflate(
                            _self,
                            expansion,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "normalize",
                |
                    _self: Ref<bevy::math::prelude::Rect>,
                    other: Val<bevy::math::prelude::Rect>|
                {
                    let output: Val<bevy::math::prelude::Rect> = Rect::normalize(
                            _self,
                            other,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "as_irect",
                |_self: Ref<bevy::math::prelude::Rect>| {
                    let output: Val<bevy::math::prelude::IRect> = Rect::as_irect(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "as_urect",
                |_self: Ref<bevy::math::prelude::Rect>| {
                    let output: Val<bevy::math::prelude::URect> = Rect::as_urect(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::prelude::Rect>| {
                    let output: Val<bevy::math::prelude::Rect> = Rect::clone(_self)
                        .into();
                    output
                },
            );
        NamespaceBuilder::<URect>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::prelude::URect>,
                    other: Ref<bevy::math::prelude::URect>|
                {
                    let output: bool = URect::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "new",
                |x0: u32, y0: u32, x1: u32, y1: u32| {
                    let output: Val<bevy::math::prelude::URect> = URect::new(
                            x0,
                            y0,
                            x1,
                            y1,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "is_empty",
                |_self: Ref<bevy::math::prelude::URect>| {
                    let output: bool = URect::is_empty(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "width",
                |_self: Ref<bevy::math::prelude::URect>| {
                    let output: u32 = URect::width(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "height",
                |_self: Ref<bevy::math::prelude::URect>| {
                    let output: u32 = URect::height(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "union",
                |
                    _self: Ref<bevy::math::prelude::URect>,
                    other: Val<bevy::math::prelude::URect>|
                {
                    let output: Val<bevy::math::prelude::URect> = URect::union(
                            _self,
                            other,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "intersect",
                |
                    _self: Ref<bevy::math::prelude::URect>,
                    other: Val<bevy::math::prelude::URect>|
                {
                    let output: Val<bevy::math::prelude::URect> = URect::intersect(
                            _self,
                            other,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "inflate",
                |_self: Ref<bevy::math::prelude::URect>, expansion: i32| {
                    let output: Val<bevy::math::prelude::URect> = URect::inflate(
                            _self,
                            expansion,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "as_rect",
                |_self: Ref<bevy::math::prelude::URect>| {
                    let output: Val<bevy::math::prelude::Rect> = URect::as_rect(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "as_irect",
                |_self: Ref<bevy::math::prelude::URect>| {
                    let output: Val<bevy::math::prelude::IRect> = URect::as_irect(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::prelude::URect>| {
                    let output: Val<bevy::math::prelude::URect> = URect::clone(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "assert_receiver_is_total_eq",
                |_self: Ref<bevy::math::prelude::URect>| {
                    let output: () = URect::assert_receiver_is_total_eq(_self).into();
                    output
                },
            );
        NamespaceBuilder::<Affine3>::new(world);
        NamespaceBuilder::<Aabb2d>::new(world)
            .overwrite_script_function(
                "bounding_circle",
                |_self: Ref<bevy::math::bounding::Aabb2d>| {
                    let output: Val<bevy::math::bounding::BoundingCircle> = Aabb2d::bounding_circle(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::bounding::Aabb2d>| {
                    let output: Val<bevy::math::bounding::Aabb2d> = Aabb2d::clone(_self)
                        .into();
                    output
                },
            );
        NamespaceBuilder::<BoundingCircle>::new(world)
            .overwrite_script_function(
                "radius",
                |_self: Ref<bevy::math::bounding::BoundingCircle>| {
                    let output: f32 = BoundingCircle::radius(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "aabb_2d",
                |_self: Ref<bevy::math::bounding::BoundingCircle>| {
                    let output: Val<bevy::math::bounding::Aabb2d> = BoundingCircle::aabb_2d(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::bounding::BoundingCircle>| {
                    let output: Val<bevy::math::bounding::BoundingCircle> = BoundingCircle::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<Circle>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::primitives::Circle>,
                    other: Ref<bevy::math::primitives::Circle>|
                {
                    let output: bool = Circle::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "new",
                |radius: f32| {
                    let output: Val<bevy::math::primitives::Circle> = Circle::new(radius)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "diameter",
                |_self: Ref<bevy::math::primitives::Circle>| {
                    let output: f32 = Circle::diameter(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::primitives::Circle>| {
                    let output: Val<bevy::math::primitives::Circle> = Circle::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<Annulus>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::primitives::Annulus>| {
                    let output: Val<bevy::math::primitives::Annulus> = Annulus::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::primitives::Annulus>,
                    other: Ref<bevy::math::primitives::Annulus>|
                {
                    let output: bool = Annulus::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "new",
                |inner_radius: f32, outer_radius: f32| {
                    let output: Val<bevy::math::primitives::Annulus> = Annulus::new(
                            inner_radius,
                            outer_radius,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "diameter",
                |_self: Ref<bevy::math::primitives::Annulus>| {
                    let output: f32 = Annulus::diameter(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "thickness",
                |_self: Ref<bevy::math::primitives::Annulus>| {
                    let output: f32 = Annulus::thickness(_self).into();
                    output
                },
            );
        NamespaceBuilder::<Arc2d>::new(world)
            .overwrite_script_function(
                "new",
                |radius: f32, half_angle: f32| {
                    let output: Val<bevy::math::primitives::Arc2d> = Arc2d::new(
                            radius,
                            half_angle,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "from_radians",
                |radius: f32, angle: f32| {
                    let output: Val<bevy::math::primitives::Arc2d> = Arc2d::from_radians(
                            radius,
                            angle,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "from_degrees",
                |radius: f32, angle: f32| {
                    let output: Val<bevy::math::primitives::Arc2d> = Arc2d::from_degrees(
                            radius,
                            angle,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "from_turns",
                |radius: f32, fraction: f32| {
                    let output: Val<bevy::math::primitives::Arc2d> = Arc2d::from_turns(
                            radius,
                            fraction,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "angle",
                |_self: Ref<bevy::math::primitives::Arc2d>| {
                    let output: f32 = Arc2d::angle(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "length",
                |_self: Ref<bevy::math::primitives::Arc2d>| {
                    let output: f32 = Arc2d::length(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "half_chord_length",
                |_self: Ref<bevy::math::primitives::Arc2d>| {
                    let output: f32 = Arc2d::half_chord_length(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "chord_length",
                |_self: Ref<bevy::math::primitives::Arc2d>| {
                    let output: f32 = Arc2d::chord_length(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "apothem",
                |_self: Ref<bevy::math::primitives::Arc2d>| {
                    let output: f32 = Arc2d::apothem(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "sagitta",
                |_self: Ref<bevy::math::primitives::Arc2d>| {
                    let output: f32 = Arc2d::sagitta(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "is_minor",
                |_self: Ref<bevy::math::primitives::Arc2d>| {
                    let output: bool = Arc2d::is_minor(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "is_major",
                |_self: Ref<bevy::math::primitives::Arc2d>| {
                    let output: bool = Arc2d::is_major(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::primitives::Arc2d>| {
                    let output: Val<bevy::math::primitives::Arc2d> = Arc2d::clone(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::primitives::Arc2d>,
                    other: Ref<bevy::math::primitives::Arc2d>|
                {
                    let output: bool = Arc2d::eq(_self, other).into();
                    output
                },
            );
        NamespaceBuilder::<Capsule2d>::new(world)
            .overwrite_script_function(
                "new",
                |radius: f32, length: f32| {
                    let output: Val<bevy::math::primitives::Capsule2d> = Capsule2d::new(
                            radius,
                            length,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "to_inner_rectangle",
                |_self: Ref<bevy::math::primitives::Capsule2d>| {
                    let output: Val<bevy::math::primitives::Rectangle> = Capsule2d::to_inner_rectangle(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::primitives::Capsule2d>,
                    other: Ref<bevy::math::primitives::Capsule2d>|
                {
                    let output: bool = Capsule2d::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::primitives::Capsule2d>| {
                    let output: Val<bevy::math::primitives::Capsule2d> = Capsule2d::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<CircularSector>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::primitives::CircularSector>,
                    other: Ref<bevy::math::primitives::CircularSector>|
                {
                    let output: bool = CircularSector::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "new",
                |radius: f32, angle: f32| {
                    let output: Val<bevy::math::primitives::CircularSector> = CircularSector::new(
                            radius,
                            angle,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "from_radians",
                |radius: f32, angle: f32| {
                    let output: Val<bevy::math::primitives::CircularSector> = CircularSector::from_radians(
                            radius,
                            angle,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "from_degrees",
                |radius: f32, angle: f32| {
                    let output: Val<bevy::math::primitives::CircularSector> = CircularSector::from_degrees(
                            radius,
                            angle,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "from_turns",
                |radius: f32, fraction: f32| {
                    let output: Val<bevy::math::primitives::CircularSector> = CircularSector::from_turns(
                            radius,
                            fraction,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "half_angle",
                |_self: Ref<bevy::math::primitives::CircularSector>| {
                    let output: f32 = CircularSector::half_angle(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "angle",
                |_self: Ref<bevy::math::primitives::CircularSector>| {
                    let output: f32 = CircularSector::angle(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "radius",
                |_self: Ref<bevy::math::primitives::CircularSector>| {
                    let output: f32 = CircularSector::radius(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "arc_length",
                |_self: Ref<bevy::math::primitives::CircularSector>| {
                    let output: f32 = CircularSector::arc_length(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "half_chord_length",
                |_self: Ref<bevy::math::primitives::CircularSector>| {
                    let output: f32 = CircularSector::half_chord_length(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "chord_length",
                |_self: Ref<bevy::math::primitives::CircularSector>| {
                    let output: f32 = CircularSector::chord_length(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "apothem",
                |_self: Ref<bevy::math::primitives::CircularSector>| {
                    let output: f32 = CircularSector::apothem(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "sagitta",
                |_self: Ref<bevy::math::primitives::CircularSector>| {
                    let output: f32 = CircularSector::sagitta(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::primitives::CircularSector>| {
                    let output: Val<bevy::math::primitives::CircularSector> = CircularSector::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<CircularSegment>::new(world)
            .overwrite_script_function(
                "new",
                |radius: f32, angle: f32| {
                    let output: Val<bevy::math::primitives::CircularSegment> = CircularSegment::new(
                            radius,
                            angle,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "from_radians",
                |radius: f32, angle: f32| {
                    let output: Val<bevy::math::primitives::CircularSegment> = CircularSegment::from_radians(
                            radius,
                            angle,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "from_degrees",
                |radius: f32, angle: f32| {
                    let output: Val<bevy::math::primitives::CircularSegment> = CircularSegment::from_degrees(
                            radius,
                            angle,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "from_turns",
                |radius: f32, fraction: f32| {
                    let output: Val<bevy::math::primitives::CircularSegment> = CircularSegment::from_turns(
                            radius,
                            fraction,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "half_angle",
                |_self: Ref<bevy::math::primitives::CircularSegment>| {
                    let output: f32 = CircularSegment::half_angle(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "angle",
                |_self: Ref<bevy::math::primitives::CircularSegment>| {
                    let output: f32 = CircularSegment::angle(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "radius",
                |_self: Ref<bevy::math::primitives::CircularSegment>| {
                    let output: f32 = CircularSegment::radius(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "arc_length",
                |_self: Ref<bevy::math::primitives::CircularSegment>| {
                    let output: f32 = CircularSegment::arc_length(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "half_chord_length",
                |_self: Ref<bevy::math::primitives::CircularSegment>| {
                    let output: f32 = CircularSegment::half_chord_length(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "chord_length",
                |_self: Ref<bevy::math::primitives::CircularSegment>| {
                    let output: f32 = CircularSegment::chord_length(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "apothem",
                |_self: Ref<bevy::math::primitives::CircularSegment>| {
                    let output: f32 = CircularSegment::apothem(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "sagitta",
                |_self: Ref<bevy::math::primitives::CircularSegment>| {
                    let output: f32 = CircularSegment::sagitta(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::primitives::CircularSegment>| {
                    let output: Val<bevy::math::primitives::CircularSegment> = CircularSegment::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::primitives::CircularSegment>,
                    other: Ref<bevy::math::primitives::CircularSegment>|
                {
                    let output: bool = CircularSegment::eq(_self, other).into();
                    output
                },
            );
        NamespaceBuilder::<Ellipse>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::primitives::Ellipse>,
                    other: Ref<bevy::math::primitives::Ellipse>|
                {
                    let output: bool = Ellipse::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "new",
                |half_width: f32, half_height: f32| {
                    let output: Val<bevy::math::primitives::Ellipse> = Ellipse::new(
                            half_width,
                            half_height,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eccentricity",
                |_self: Ref<bevy::math::primitives::Ellipse>| {
                    let output: f32 = Ellipse::eccentricity(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "focal_length",
                |_self: Ref<bevy::math::primitives::Ellipse>| {
                    let output: f32 = Ellipse::focal_length(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "semi_major",
                |_self: Ref<bevy::math::primitives::Ellipse>| {
                    let output: f32 = Ellipse::semi_major(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "semi_minor",
                |_self: Ref<bevy::math::primitives::Ellipse>| {
                    let output: f32 = Ellipse::semi_minor(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::primitives::Ellipse>| {
                    let output: Val<bevy::math::primitives::Ellipse> = Ellipse::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<Line2d>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::primitives::Line2d>| {
                    let output: Val<bevy::math::primitives::Line2d> = Line2d::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::primitives::Line2d>,
                    other: Ref<bevy::math::primitives::Line2d>|
                {
                    let output: bool = Line2d::eq(_self, other).into();
                    output
                },
            );
        NamespaceBuilder::<Plane2d>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::primitives::Plane2d>| {
                    let output: Val<bevy::math::primitives::Plane2d> = Plane2d::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::primitives::Plane2d>,
                    other: Ref<bevy::math::primitives::Plane2d>|
                {
                    let output: bool = Plane2d::eq(_self, other).into();
                    output
                },
            );
        NamespaceBuilder::<Rectangle>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::primitives::Rectangle>,
                    other: Ref<bevy::math::primitives::Rectangle>|
                {
                    let output: bool = Rectangle::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "new",
                |width: f32, height: f32| {
                    let output: Val<bevy::math::primitives::Rectangle> = Rectangle::new(
                            width,
                            height,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "from_length",
                |length: f32| {
                    let output: Val<bevy::math::primitives::Rectangle> = Rectangle::from_length(
                            length,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::primitives::Rectangle>| {
                    let output: Val<bevy::math::primitives::Rectangle> = Rectangle::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<RegularPolygon>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::primitives::RegularPolygon>| {
                    let output: Val<bevy::math::primitives::RegularPolygon> = RegularPolygon::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "new",
                |circumradius: f32, sides: u32| {
                    let output: Val<bevy::math::primitives::RegularPolygon> = RegularPolygon::new(
                            circumradius,
                            sides,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "circumradius",
                |_self: Ref<bevy::math::primitives::RegularPolygon>| {
                    let output: f32 = RegularPolygon::circumradius(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "inradius",
                |_self: Ref<bevy::math::primitives::RegularPolygon>| {
                    let output: f32 = RegularPolygon::inradius(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "side_length",
                |_self: Ref<bevy::math::primitives::RegularPolygon>| {
                    let output: f32 = RegularPolygon::side_length(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "internal_angle_degrees",
                |_self: Ref<bevy::math::primitives::RegularPolygon>| {
                    let output: f32 = RegularPolygon::internal_angle_degrees(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "internal_angle_radians",
                |_self: Ref<bevy::math::primitives::RegularPolygon>| {
                    let output: f32 = RegularPolygon::internal_angle_radians(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "external_angle_degrees",
                |_self: Ref<bevy::math::primitives::RegularPolygon>| {
                    let output: f32 = RegularPolygon::external_angle_degrees(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "external_angle_radians",
                |_self: Ref<bevy::math::primitives::RegularPolygon>| {
                    let output: f32 = RegularPolygon::external_angle_radians(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::primitives::RegularPolygon>,
                    other: Ref<bevy::math::primitives::RegularPolygon>|
                {
                    let output: bool = RegularPolygon::eq(_self, other).into();
                    output
                },
            );
        NamespaceBuilder::<Rhombus>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::primitives::Rhombus>,
                    other: Ref<bevy::math::primitives::Rhombus>|
                {
                    let output: bool = Rhombus::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "new",
                |horizontal_diagonal: f32, vertical_diagonal: f32| {
                    let output: Val<bevy::math::primitives::Rhombus> = Rhombus::new(
                            horizontal_diagonal,
                            vertical_diagonal,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "from_side",
                |side: f32| {
                    let output: Val<bevy::math::primitives::Rhombus> = Rhombus::from_side(
                            side,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "from_inradius",
                |inradius: f32| {
                    let output: Val<bevy::math::primitives::Rhombus> = Rhombus::from_inradius(
                            inradius,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "side",
                |_self: Ref<bevy::math::primitives::Rhombus>| {
                    let output: f32 = Rhombus::side(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "circumradius",
                |_self: Ref<bevy::math::primitives::Rhombus>| {
                    let output: f32 = Rhombus::circumradius(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "inradius",
                |_self: Ref<bevy::math::primitives::Rhombus>| {
                    let output: f32 = Rhombus::inradius(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::primitives::Rhombus>| {
                    let output: Val<bevy::math::primitives::Rhombus> = Rhombus::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<Segment2d>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::primitives::Segment2d>,
                    other: Ref<bevy::math::primitives::Segment2d>|
                {
                    let output: bool = Segment2d::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "new",
                |direction: Val<bevy::math::prelude::Dir2>, length: f32| {
                    let output: Val<bevy::math::primitives::Segment2d> = Segment2d::new(
                            direction,
                            length,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::primitives::Segment2d>| {
                    let output: Val<bevy::math::primitives::Segment2d> = Segment2d::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<Triangle2d>::new(world)
            .overwrite_script_function(
                "is_degenerate",
                |_self: Ref<bevy::math::primitives::Triangle2d>| {
                    let output: bool = Triangle2d::is_degenerate(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "is_acute",
                |_self: Ref<bevy::math::primitives::Triangle2d>| {
                    let output: bool = Triangle2d::is_acute(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "is_obtuse",
                |_self: Ref<bevy::math::primitives::Triangle2d>| {
                    let output: bool = Triangle2d::is_obtuse(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "reverse",
                |_self: Mut<bevy::math::primitives::Triangle2d>| {
                    let output: () = Triangle2d::reverse(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "reversed",
                |_self: Val<bevy::math::primitives::Triangle2d>| {
                    let output: Val<bevy::math::primitives::Triangle2d> = Triangle2d::reversed(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::primitives::Triangle2d>| {
                    let output: Val<bevy::math::primitives::Triangle2d> = Triangle2d::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::primitives::Triangle2d>,
                    other: Ref<bevy::math::primitives::Triangle2d>|
                {
                    let output: bool = Triangle2d::eq(_self, other).into();
                    output
                },
            );
        NamespaceBuilder::<Aabb3d>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::bounding::Aabb3d>| {
                    let output: Val<bevy::math::bounding::Aabb3d> = Aabb3d::clone(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "bounding_sphere",
                |_self: Ref<bevy::math::bounding::Aabb3d>| {
                    let output: Val<bevy::math::bounding::BoundingSphere> = Aabb3d::bounding_sphere(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<BoundingSphere>::new(world)
            .overwrite_script_function(
                "radius",
                |_self: Ref<bevy::math::bounding::BoundingSphere>| {
                    let output: f32 = BoundingSphere::radius(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "aabb_3d",
                |_self: Ref<bevy::math::bounding::BoundingSphere>| {
                    let output: Val<bevy::math::bounding::Aabb3d> = BoundingSphere::aabb_3d(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::bounding::BoundingSphere>| {
                    let output: Val<bevy::math::bounding::BoundingSphere> = BoundingSphere::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<Sphere>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::primitives::Sphere>,
                    other: Ref<bevy::math::primitives::Sphere>|
                {
                    let output: bool = Sphere::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::primitives::Sphere>| {
                    let output: Val<bevy::math::primitives::Sphere> = Sphere::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "new",
                |radius: f32| {
                    let output: Val<bevy::math::primitives::Sphere> = Sphere::new(radius)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "diameter",
                |_self: Ref<bevy::math::primitives::Sphere>| {
                    let output: f32 = Sphere::diameter(_self).into();
                    output
                },
            );
        NamespaceBuilder::<Cuboid>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::primitives::Cuboid>| {
                    let output: Val<bevy::math::primitives::Cuboid> = Cuboid::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::primitives::Cuboid>,
                    other: Ref<bevy::math::primitives::Cuboid>|
                {
                    let output: bool = Cuboid::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "new",
                |x_length: f32, y_length: f32, z_length: f32| {
                    let output: Val<bevy::math::primitives::Cuboid> = Cuboid::new(
                            x_length,
                            y_length,
                            z_length,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "from_length",
                |length: f32| {
                    let output: Val<bevy::math::primitives::Cuboid> = Cuboid::from_length(
                            length,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<Cylinder>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::primitives::Cylinder>| {
                    let output: Val<bevy::math::primitives::Cylinder> = Cylinder::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::primitives::Cylinder>,
                    other: Ref<bevy::math::primitives::Cylinder>|
                {
                    let output: bool = Cylinder::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "new",
                |radius: f32, height: f32| {
                    let output: Val<bevy::math::primitives::Cylinder> = Cylinder::new(
                            radius,
                            height,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "base",
                |_self: Ref<bevy::math::primitives::Cylinder>| {
                    let output: Val<bevy::math::primitives::Circle> = Cylinder::base(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "lateral_area",
                |_self: Ref<bevy::math::primitives::Cylinder>| {
                    let output: f32 = Cylinder::lateral_area(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "base_area",
                |_self: Ref<bevy::math::primitives::Cylinder>| {
                    let output: f32 = Cylinder::base_area(_self).into();
                    output
                },
            );
        NamespaceBuilder::<Capsule3d>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::primitives::Capsule3d>| {
                    let output: Val<bevy::math::primitives::Capsule3d> = Capsule3d::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::primitives::Capsule3d>,
                    other: Ref<bevy::math::primitives::Capsule3d>|
                {
                    let output: bool = Capsule3d::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "new",
                |radius: f32, length: f32| {
                    let output: Val<bevy::math::primitives::Capsule3d> = Capsule3d::new(
                            radius,
                            length,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "to_cylinder",
                |_self: Ref<bevy::math::primitives::Capsule3d>| {
                    let output: Val<bevy::math::primitives::Cylinder> = Capsule3d::to_cylinder(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<Cone>::new(world)
            .overwrite_script_function(
                "new",
                |radius: f32, height: f32| {
                    let output: Val<bevy::math::primitives::Cone> = Cone::new(
                            radius,
                            height,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "base",
                |_self: Ref<bevy::math::primitives::Cone>| {
                    let output: Val<bevy::math::primitives::Circle> = Cone::base(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "slant_height",
                |_self: Ref<bevy::math::primitives::Cone>| {
                    let output: f32 = Cone::slant_height(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "lateral_area",
                |_self: Ref<bevy::math::primitives::Cone>| {
                    let output: f32 = Cone::lateral_area(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "base_area",
                |_self: Ref<bevy::math::primitives::Cone>| {
                    let output: f32 = Cone::base_area(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::primitives::Cone>| {
                    let output: Val<bevy::math::primitives::Cone> = Cone::clone(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::primitives::Cone>,
                    other: Ref<bevy::math::primitives::Cone>|
                {
                    let output: bool = Cone::eq(_self, other).into();
                    output
                },
            );
        NamespaceBuilder::<ConicalFrustum>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::primitives::ConicalFrustum>,
                    other: Ref<bevy::math::primitives::ConicalFrustum>|
                {
                    let output: bool = ConicalFrustum::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::primitives::ConicalFrustum>| {
                    let output: Val<bevy::math::primitives::ConicalFrustum> = ConicalFrustum::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<InfinitePlane3d>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::primitives::InfinitePlane3d>| {
                    let output: Val<bevy::math::primitives::InfinitePlane3d> = InfinitePlane3d::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::primitives::InfinitePlane3d>,
                    other: Ref<bevy::math::primitives::InfinitePlane3d>|
                {
                    let output: bool = InfinitePlane3d::eq(_self, other).into();
                    output
                },
            );
        NamespaceBuilder::<Line3d>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::primitives::Line3d>| {
                    let output: Val<bevy::math::primitives::Line3d> = Line3d::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::primitives::Line3d>,
                    other: Ref<bevy::math::primitives::Line3d>|
                {
                    let output: bool = Line3d::eq(_self, other).into();
                    output
                },
            );
        NamespaceBuilder::<Segment3d>::new(world)
            .overwrite_script_function(
                "new",
                |direction: Val<bevy::math::prelude::Dir3>, length: f32| {
                    let output: Val<bevy::math::primitives::Segment3d> = Segment3d::new(
                            direction,
                            length,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::primitives::Segment3d>,
                    other: Ref<bevy::math::primitives::Segment3d>|
                {
                    let output: bool = Segment3d::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::primitives::Segment3d>| {
                    let output: Val<bevy::math::primitives::Segment3d> = Segment3d::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<Torus>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::primitives::Torus>| {
                    let output: Val<bevy::math::primitives::Torus> = Torus::clone(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::primitives::Torus>,
                    other: Ref<bevy::math::primitives::Torus>|
                {
                    let output: bool = Torus::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "new",
                |inner_radius: f32, outer_radius: f32| {
                    let output: Val<bevy::math::primitives::Torus> = Torus::new(
                            inner_radius,
                            outer_radius,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "inner_radius",
                |_self: Ref<bevy::math::primitives::Torus>| {
                    let output: f32 = Torus::inner_radius(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "outer_radius",
                |_self: Ref<bevy::math::primitives::Torus>| {
                    let output: f32 = Torus::outer_radius(_self).into();
                    output
                },
            );
        NamespaceBuilder::<Triangle3d>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::primitives::Triangle3d>,
                    other: Ref<bevy::math::primitives::Triangle3d>|
                {
                    let output: bool = Triangle3d::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "is_degenerate",
                |_self: Ref<bevy::math::primitives::Triangle3d>| {
                    let output: bool = Triangle3d::is_degenerate(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "is_acute",
                |_self: Ref<bevy::math::primitives::Triangle3d>| {
                    let output: bool = Triangle3d::is_acute(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "is_obtuse",
                |_self: Ref<bevy::math::primitives::Triangle3d>| {
                    let output: bool = Triangle3d::is_obtuse(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "reverse",
                |_self: Mut<bevy::math::primitives::Triangle3d>| {
                    let output: () = Triangle3d::reverse(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "reversed",
                |_self: Val<bevy::math::primitives::Triangle3d>| {
                    let output: Val<bevy::math::primitives::Triangle3d> = Triangle3d::reversed(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::primitives::Triangle3d>| {
                    let output: Val<bevy::math::primitives::Triangle3d> = Triangle3d::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<RayCast2d>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::bounding::RayCast2d>| {
                    let output: Val<bevy::math::bounding::RayCast2d> = RayCast2d::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "from_ray",
                |ray: Val<bevy::math::Ray2d>, max: f32| {
                    let output: Val<bevy::math::bounding::RayCast2d> = RayCast2d::from_ray(
                            ray,
                            max,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "aabb_intersection_at",
                |
                    _self: Ref<bevy::math::bounding::RayCast2d>,
                    aabb: Ref<bevy::math::bounding::Aabb2d>|
                {
                    let output: std::option::Option<f32> = RayCast2d::aabb_intersection_at(
                            _self,
                            aabb,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "circle_intersection_at",
                |
                    _self: Ref<bevy::math::bounding::RayCast2d>,
                    circle: Ref<bevy::math::bounding::BoundingCircle>|
                {
                    let output: std::option::Option<f32> = RayCast2d::circle_intersection_at(
                            _self,
                            circle,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<AabbCast2d>::new(world)
            .overwrite_script_function(
                "from_ray",
                |
                    aabb: Val<bevy::math::bounding::Aabb2d>,
                    ray: Val<bevy::math::Ray2d>,
                    max: f32|
                {
                    let output: Val<bevy::math::bounding::AabbCast2d> = AabbCast2d::from_ray(
                            aabb,
                            ray,
                            max,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "aabb_collision_at",
                |
                    _self: Ref<bevy::math::bounding::AabbCast2d>,
                    aabb: Val<bevy::math::bounding::Aabb2d>|
                {
                    let output: std::option::Option<f32> = AabbCast2d::aabb_collision_at(
                            _self,
                            aabb,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::bounding::AabbCast2d>| {
                    let output: Val<bevy::math::bounding::AabbCast2d> = AabbCast2d::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<BoundingCircleCast>::new(world)
            .overwrite_script_function(
                "from_ray",
                |
                    circle: Val<bevy::math::bounding::BoundingCircle>,
                    ray: Val<bevy::math::Ray2d>,
                    max: f32|
                {
                    let output: Val<bevy::math::bounding::BoundingCircleCast> = BoundingCircleCast::from_ray(
                            circle,
                            ray,
                            max,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "circle_collision_at",
                |
                    _self: Ref<bevy::math::bounding::BoundingCircleCast>,
                    circle: Val<bevy::math::bounding::BoundingCircle>|
                {
                    let output: std::option::Option<f32> = BoundingCircleCast::circle_collision_at(
                            _self,
                            circle,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::bounding::BoundingCircleCast>| {
                    let output: Val<bevy::math::bounding::BoundingCircleCast> = BoundingCircleCast::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<RayCast3d>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::bounding::RayCast3d>| {
                    let output: Val<bevy::math::bounding::RayCast3d> = RayCast3d::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "from_ray",
                |ray: Val<bevy::math::Ray3d>, max: f32| {
                    let output: Val<bevy::math::bounding::RayCast3d> = RayCast3d::from_ray(
                            ray,
                            max,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "aabb_intersection_at",
                |
                    _self: Ref<bevy::math::bounding::RayCast3d>,
                    aabb: Ref<bevy::math::bounding::Aabb3d>|
                {
                    let output: std::option::Option<f32> = RayCast3d::aabb_intersection_at(
                            _self,
                            aabb,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "sphere_intersection_at",
                |
                    _self: Ref<bevy::math::bounding::RayCast3d>,
                    sphere: Ref<bevy::math::bounding::BoundingSphere>|
                {
                    let output: std::option::Option<f32> = RayCast3d::sphere_intersection_at(
                            _self,
                            sphere,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<AabbCast3d>::new(world)
            .overwrite_script_function(
                "from_ray",
                |
                    aabb: Val<bevy::math::bounding::Aabb3d>,
                    ray: Val<bevy::math::Ray3d>,
                    max: f32|
                {
                    let output: Val<bevy::math::bounding::AabbCast3d> = AabbCast3d::from_ray(
                            aabb,
                            ray,
                            max,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "aabb_collision_at",
                |
                    _self: Ref<bevy::math::bounding::AabbCast3d>,
                    aabb: Val<bevy::math::bounding::Aabb3d>|
                {
                    let output: std::option::Option<f32> = AabbCast3d::aabb_collision_at(
                            _self,
                            aabb,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::bounding::AabbCast3d>| {
                    let output: Val<bevy::math::bounding::AabbCast3d> = AabbCast3d::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<BoundingSphereCast>::new(world)
            .overwrite_script_function(
                "from_ray",
                |
                    sphere: Val<bevy::math::bounding::BoundingSphere>,
                    ray: Val<bevy::math::Ray3d>,
                    max: f32|
                {
                    let output: Val<bevy::math::bounding::BoundingSphereCast> = BoundingSphereCast::from_ray(
                            sphere,
                            ray,
                            max,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "sphere_collision_at",
                |
                    _self: Ref<bevy::math::bounding::BoundingSphereCast>,
                    sphere: Val<bevy::math::bounding::BoundingSphere>|
                {
                    let output: std::option::Option<f32> = BoundingSphereCast::sphere_collision_at(
                            _self,
                            sphere,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::bounding::BoundingSphereCast>| {
                    let output: Val<bevy::math::bounding::BoundingSphereCast> = BoundingSphereCast::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<Interval>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::curve::interval::Interval>,
                    other: Ref<bevy::math::curve::interval::Interval>|
                {
                    let output: bool = Interval::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "start",
                |_self: Val<bevy::math::curve::interval::Interval>| {
                    let output: f32 = Interval::start(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "end",
                |_self: Val<bevy::math::curve::interval::Interval>| {
                    let output: f32 = Interval::end(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "length",
                |_self: Val<bevy::math::curve::interval::Interval>| {
                    let output: f32 = Interval::length(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "is_bounded",
                |_self: Val<bevy::math::curve::interval::Interval>| {
                    let output: bool = Interval::is_bounded(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "has_finite_start",
                |_self: Val<bevy::math::curve::interval::Interval>| {
                    let output: bool = Interval::has_finite_start(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "has_finite_end",
                |_self: Val<bevy::math::curve::interval::Interval>| {
                    let output: bool = Interval::has_finite_end(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "contains",
                |_self: Val<bevy::math::curve::interval::Interval>, item: f32| {
                    let output: bool = Interval::contains(_self, item).into();
                    output
                },
            )
            .overwrite_script_function(
                "contains_interval",
                |
                    _self: Val<bevy::math::curve::interval::Interval>,
                    other: Val<bevy::math::curve::interval::Interval>|
                {
                    let output: bool = Interval::contains_interval(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "clamp",
                |_self: Val<bevy::math::curve::interval::Interval>, value: f32| {
                    let output: f32 = Interval::clamp(_self, value).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::curve::interval::Interval>| {
                    let output: Val<bevy::math::curve::interval::Interval> = Interval::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<FloatOrd>::new(world)
            .overwrite_script_function(
                "neg",
                |_self: Val<bevy::math::FloatOrd>| {
                    let output: Val<bevy::math::FloatOrd> = FloatOrd::neg(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::FloatOrd>| {
                    let output: Val<bevy::math::FloatOrd> = FloatOrd::clone(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |_self: Ref<bevy::math::FloatOrd>, other: Ref<bevy::math::FloatOrd>| {
                    let output: bool = FloatOrd::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "lt",
                |_self: Ref<bevy::math::FloatOrd>, other: Ref<bevy::math::FloatOrd>| {
                    let output: bool = FloatOrd::lt(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "le",
                |_self: Ref<bevy::math::FloatOrd>, other: Ref<bevy::math::FloatOrd>| {
                    let output: bool = FloatOrd::le(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "gt",
                |_self: Ref<bevy::math::FloatOrd>, other: Ref<bevy::math::FloatOrd>| {
                    let output: bool = FloatOrd::gt(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "ge",
                |_self: Ref<bevy::math::FloatOrd>, other: Ref<bevy::math::FloatOrd>| {
                    let output: bool = FloatOrd::ge(_self, other).into();
                    output
                },
            );
        NamespaceBuilder::<Plane3d>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::primitives::Plane3d>| {
                    let output: Val<bevy::math::primitives::Plane3d> = Plane3d::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::primitives::Plane3d>,
                    other: Ref<bevy::math::primitives::Plane3d>|
                {
                    let output: bool = Plane3d::eq(_self, other).into();
                    output
                },
            );
        NamespaceBuilder::<Tetrahedron>::new(world)
            .overwrite_script_function(
                "signed_volume",
                |_self: Ref<bevy::math::primitives::Tetrahedron>| {
                    let output: f32 = Tetrahedron::signed_volume(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::primitives::Tetrahedron>,
                    other: Ref<bevy::math::primitives::Tetrahedron>|
                {
                    let output: bool = Tetrahedron::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::primitives::Tetrahedron>| {
                    let output: Val<bevy::math::primitives::Tetrahedron> = Tetrahedron::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<EaseFunction>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::math::curve::easing::EaseFunction>| {
                    let output: Val<bevy::math::curve::easing::EaseFunction> = EaseFunction::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::math::curve::easing::EaseFunction>,
                    other: Ref<bevy::math::curve::easing::EaseFunction>|
                {
                    let output: bool = EaseFunction::eq(_self, other).into();
                    output
                },
            );
    }
}
