// @generated by cargo bevy-api-gen generate, modify the templates not this file
#![allow(clippy::all)]
#![allow(unused, deprecated, dead_code)]
#![cfg_attr(rustfmt, rustfmt_skip)]
use super::bevy_reflect::*;
use bevy_mod_scripting_core::{
    AddContextInitializer, StoreDocumentation, bindings::ReflectReference,
};
use bevy_mod_scripting_functions::RegisterScriptFunction;
use crate::*;
pub struct BevyEcsScriptingPlugin;
impl bevy::app::Plugin for BevyEcsScriptingPlugin {
    fn build(&self, app: &mut bevy::prelude::App) {
        let mut world = app.world_mut();
        NamespaceBuilder::<Entity>::new(world)
            .overwrite_script_function(
                "from_raw",
                |index: u32| {
                    let output: Val<bevy::ecs::entity::Entity> = Entity::from_raw(index)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "to_bits",
                |_self: Val<bevy::ecs::entity::Entity>| {
                    let output: u64 = Entity::to_bits(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "from_bits",
                |bits: u64| {
                    let output: Val<bevy::ecs::entity::Entity> = Entity::from_bits(bits)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "index",
                |_self: Val<bevy::ecs::entity::Entity>| {
                    let output: u32 = Entity::index(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "generation",
                |_self: Val<bevy::ecs::entity::Entity>| {
                    let output: u32 = Entity::generation(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::ecs::entity::Entity>,
                    other: Ref<bevy::ecs::entity::Entity>|
                {
                    let output: bool = Entity::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::ecs::entity::Entity>| {
                    let output: Val<bevy::ecs::entity::Entity> = Entity::clone(_self)
                        .into();
                    output
                },
            );
        NamespaceBuilder::<OnAdd>::new(world);
        NamespaceBuilder::<OnInsert>::new(world);
        NamespaceBuilder::<OnRemove>::new(world);
        NamespaceBuilder::<OnReplace>::new(world);
        NamespaceBuilder::<ComponentId>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::ecs::component::ComponentId>,
                    other: Ref<bevy::ecs::component::ComponentId>|
                {
                    let output: bool = ComponentId::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::ecs::component::ComponentId>| {
                    let output: Val<bevy::ecs::component::ComponentId> = ComponentId::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "new",
                |index: usize| {
                    let output: Val<bevy::ecs::component::ComponentId> = ComponentId::new(
                            index,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "index",
                |_self: Val<bevy::ecs::component::ComponentId>| {
                    let output: usize = ComponentId::index(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "assert_receiver_is_total_eq",
                |_self: Ref<bevy::ecs::component::ComponentId>| {
                    let output: () = ComponentId::assert_receiver_is_total_eq(_self)
                        .into();
                    output
                },
            );
        NamespaceBuilder::<Tick>::new(world)
            .overwrite_script_function(
                "assert_receiver_is_total_eq",
                |_self: Ref<bevy::ecs::component::Tick>| {
                    let output: () = Tick::assert_receiver_is_total_eq(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::ecs::component::Tick>,
                    other: Ref<bevy::ecs::component::Tick>|
                {
                    let output: bool = Tick::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::ecs::component::Tick>| {
                    let output: Val<bevy::ecs::component::Tick> = Tick::clone(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "new",
                |tick: u32| {
                    let output: Val<bevy::ecs::component::Tick> = Tick::new(tick).into();
                    output
                },
            )
            .overwrite_script_function(
                "get",
                |_self: Val<bevy::ecs::component::Tick>| {
                    let output: u32 = Tick::get(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "set",
                |_self: Mut<bevy::ecs::component::Tick>, tick: u32| {
                    let output: () = Tick::set(_self, tick).into();
                    output
                },
            )
            .overwrite_script_function(
                "is_newer_than",
                |
                    _self: Val<bevy::ecs::component::Tick>,
                    last_run: Val<bevy::ecs::component::Tick>,
                    this_run: Val<bevy::ecs::component::Tick>|
                {
                    let output: bool = Tick::is_newer_than(_self, last_run, this_run)
                        .into();
                    output
                },
            );
        NamespaceBuilder::<ComponentTicks>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::ecs::component::ComponentTicks>| {
                    let output: Val<bevy::ecs::component::ComponentTicks> = ComponentTicks::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "is_added",
                |
                    _self: Ref<bevy::ecs::component::ComponentTicks>,
                    last_run: Val<bevy::ecs::component::Tick>,
                    this_run: Val<bevy::ecs::component::Tick>|
                {
                    let output: bool = ComponentTicks::is_added(
                            _self,
                            last_run,
                            this_run,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "is_changed",
                |
                    _self: Ref<bevy::ecs::component::ComponentTicks>,
                    last_run: Val<bevy::ecs::component::Tick>,
                    this_run: Val<bevy::ecs::component::Tick>|
                {
                    let output: bool = ComponentTicks::is_changed(
                            _self,
                            last_run,
                            this_run,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "new",
                |change_tick: Val<bevy::ecs::component::Tick>| {
                    let output: Val<bevy::ecs::component::ComponentTicks> = ComponentTicks::new(
                            change_tick,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "set_changed",
                |
                    _self: Mut<bevy::ecs::component::ComponentTicks>,
                    change_tick: Val<bevy::ecs::component::Tick>|
                {
                    let output: () = ComponentTicks::set_changed(_self, change_tick)
                        .into();
                    output
                },
            );
        NamespaceBuilder::<Identifier>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::ecs::identifier::Identifier>| {
                    let output: Val<bevy::ecs::identifier::Identifier> = Identifier::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "low",
                |_self: Val<bevy::ecs::identifier::Identifier>| {
                    let output: u32 = Identifier::low(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "masked_high",
                |_self: Val<bevy::ecs::identifier::Identifier>| {
                    let output: u32 = Identifier::masked_high(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "to_bits",
                |_self: Val<bevy::ecs::identifier::Identifier>| {
                    let output: u64 = Identifier::to_bits(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "from_bits",
                |value: u64| {
                    let output: Val<bevy::ecs::identifier::Identifier> = Identifier::from_bits(
                            value,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::ecs::identifier::Identifier>,
                    other: Ref<bevy::ecs::identifier::Identifier>|
                {
                    let output: bool = Identifier::eq(_self, other).into();
                    output
                },
            );
        NamespaceBuilder::<EntityHash>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::ecs::entity::EntityHash>| {
                    let output: Val<bevy::ecs::entity::EntityHash> = EntityHash::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<RemovedComponentEntity>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::ecs::removal_detection::RemovedComponentEntity>| {
                    let output: Val<
                        bevy::ecs::removal_detection::RemovedComponentEntity,
                    > = RemovedComponentEntity::clone(_self).into();
                    output
                },
            );
        NamespaceBuilder::<SystemIdMarker>::new(world);
    }
}
