// @generated by cargo bevy-api-gen generate, modify the templates not this file
#![allow(clippy::all)]
#![allow(unused, deprecated, dead_code)]
#![cfg_attr(rustfmt, rustfmt_skip)]
use super::bevy_ecs::*;
use super::bevy_reflect::*;
use super::bevy_core::*;
use super::bevy_math::*;
use bevy_mod_scripting_core::{
    AddContextInitializer, StoreDocumentation, bindings::ReflectReference,
};
use bevy_mod_scripting_functions::RegisterScriptFunction;
use crate::*;
pub struct BevyInputScriptingPlugin;
impl bevy::app::Plugin for BevyInputScriptingPlugin {
    fn build(&self, app: &mut bevy::prelude::App) {
        let mut world = app.world_mut();
        NamespaceBuilder::<Gamepad>::new(world)
            .overwrite_script_function(
                "vendor_id",
                |_self: Ref<bevy::input::gamepad::Gamepad>| {
                    let output: std::option::Option<u16> = Gamepad::vendor_id(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "product_id",
                |_self: Ref<bevy::input::gamepad::Gamepad>| {
                    let output: std::option::Option<u16> = Gamepad::product_id(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "pressed",
                |
                    _self: Ref<bevy::input::gamepad::Gamepad>,
                    button_type: Val<bevy::input::gamepad::GamepadButton>|
                {
                    let output: bool = Gamepad::pressed(_self, button_type).into();
                    output
                },
            )
            .overwrite_script_function(
                "just_pressed",
                |
                    _self: Ref<bevy::input::gamepad::Gamepad>,
                    button_type: Val<bevy::input::gamepad::GamepadButton>|
                {
                    let output: bool = Gamepad::just_pressed(_self, button_type).into();
                    output
                },
            )
            .overwrite_script_function(
                "just_released",
                |
                    _self: Ref<bevy::input::gamepad::Gamepad>,
                    button_type: Val<bevy::input::gamepad::GamepadButton>|
                {
                    let output: bool = Gamepad::just_released(_self, button_type).into();
                    output
                },
            );
        NamespaceBuilder::<GamepadAxis>::new(world)
            .overwrite_script_function(
                "assert_receiver_is_total_eq",
                |_self: Ref<bevy::input::gamepad::GamepadAxis>| {
                    let output: () = GamepadAxis::assert_receiver_is_total_eq(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::gamepad::GamepadAxis>,
                    other: Ref<bevy::input::gamepad::GamepadAxis>|
                {
                    let output: bool = GamepadAxis::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::gamepad::GamepadAxis>| {
                    let output: Val<bevy::input::gamepad::GamepadAxis> = GamepadAxis::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<GamepadButton>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::gamepad::GamepadButton>,
                    other: Ref<bevy::input::gamepad::GamepadButton>|
                {
                    let output: bool = GamepadButton::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::gamepad::GamepadButton>| {
                    let output: Val<bevy::input::gamepad::GamepadButton> = GamepadButton::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "assert_receiver_is_total_eq",
                |_self: Ref<bevy::input::gamepad::GamepadButton>| {
                    let output: () = GamepadButton::assert_receiver_is_total_eq(_self)
                        .into();
                    output
                },
            );
        NamespaceBuilder::<GamepadSettings>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::gamepad::GamepadSettings>| {
                    let output: Val<bevy::input::gamepad::GamepadSettings> = GamepadSettings::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<KeyCode>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::keyboard::KeyCode>,
                    other: Ref<bevy::input::keyboard::KeyCode>|
                {
                    let output: bool = KeyCode::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::keyboard::KeyCode>| {
                    let output: Val<bevy::input::keyboard::KeyCode> = KeyCode::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "assert_receiver_is_total_eq",
                |_self: Ref<bevy::input::keyboard::KeyCode>| {
                    let output: () = KeyCode::assert_receiver_is_total_eq(_self).into();
                    output
                },
            );
        NamespaceBuilder::<MouseButton>::new(world)
            .overwrite_script_function(
                "assert_receiver_is_total_eq",
                |_self: Ref<bevy::input::mouse::MouseButton>| {
                    let output: () = MouseButton::assert_receiver_is_total_eq(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::mouse::MouseButton>,
                    other: Ref<bevy::input::mouse::MouseButton>|
                {
                    let output: bool = MouseButton::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::mouse::MouseButton>| {
                    let output: Val<bevy::input::mouse::MouseButton> = MouseButton::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<TouchInput>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::touch::TouchInput>| {
                    let output: Val<bevy::input::touch::TouchInput> = TouchInput::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::touch::TouchInput>,
                    other: Ref<bevy::input::touch::TouchInput>|
                {
                    let output: bool = TouchInput::eq(_self, other).into();
                    output
                },
            );
        NamespaceBuilder::<KeyboardFocusLost>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::keyboard::KeyboardFocusLost>| {
                    let output: Val<bevy::input::keyboard::KeyboardFocusLost> = KeyboardFocusLost::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "assert_receiver_is_total_eq",
                |_self: Ref<bevy::input::keyboard::KeyboardFocusLost>| {
                    let output: () = KeyboardFocusLost::assert_receiver_is_total_eq(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::keyboard::KeyboardFocusLost>,
                    other: Ref<bevy::input::keyboard::KeyboardFocusLost>|
                {
                    let output: bool = KeyboardFocusLost::eq(_self, other).into();
                    output
                },
            );
        NamespaceBuilder::<KeyboardInput>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::keyboard::KeyboardInput>,
                    other: Ref<bevy::input::keyboard::KeyboardInput>|
                {
                    let output: bool = KeyboardInput::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::keyboard::KeyboardInput>| {
                    let output: Val<bevy::input::keyboard::KeyboardInput> = KeyboardInput::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "assert_receiver_is_total_eq",
                |_self: Ref<bevy::input::keyboard::KeyboardInput>| {
                    let output: () = KeyboardInput::assert_receiver_is_total_eq(_self)
                        .into();
                    output
                },
            );
        NamespaceBuilder::<AccumulatedMouseMotion>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::mouse::AccumulatedMouseMotion>,
                    other: Ref<bevy::input::mouse::AccumulatedMouseMotion>|
                {
                    let output: bool = AccumulatedMouseMotion::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::mouse::AccumulatedMouseMotion>| {
                    let output: Val<bevy::input::mouse::AccumulatedMouseMotion> = AccumulatedMouseMotion::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<AccumulatedMouseScroll>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::mouse::AccumulatedMouseScroll>| {
                    let output: Val<bevy::input::mouse::AccumulatedMouseScroll> = AccumulatedMouseScroll::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::mouse::AccumulatedMouseScroll>,
                    other: Ref<bevy::input::mouse::AccumulatedMouseScroll>|
                {
                    let output: bool = AccumulatedMouseScroll::eq(_self, other).into();
                    output
                },
            );
        NamespaceBuilder::<MouseButtonInput>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::mouse::MouseButtonInput>,
                    other: Ref<bevy::input::mouse::MouseButtonInput>|
                {
                    let output: bool = MouseButtonInput::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::mouse::MouseButtonInput>| {
                    let output: Val<bevy::input::mouse::MouseButtonInput> = MouseButtonInput::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "assert_receiver_is_total_eq",
                |_self: Ref<bevy::input::mouse::MouseButtonInput>| {
                    let output: () = MouseButtonInput::assert_receiver_is_total_eq(_self)
                        .into();
                    output
                },
            );
        NamespaceBuilder::<MouseMotion>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::mouse::MouseMotion>,
                    other: Ref<bevy::input::mouse::MouseMotion>|
                {
                    let output: bool = MouseMotion::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::mouse::MouseMotion>| {
                    let output: Val<bevy::input::mouse::MouseMotion> = MouseMotion::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<MouseWheel>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::mouse::MouseWheel>| {
                    let output: Val<bevy::input::mouse::MouseWheel> = MouseWheel::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::mouse::MouseWheel>,
                    other: Ref<bevy::input::mouse::MouseWheel>|
                {
                    let output: bool = MouseWheel::eq(_self, other).into();
                    output
                },
            );
        NamespaceBuilder::<GamepadAxisChangedEvent>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::gamepad::GamepadAxisChangedEvent>| {
                    let output: Val<bevy::input::gamepad::GamepadAxisChangedEvent> = GamepadAxisChangedEvent::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::gamepad::GamepadAxisChangedEvent>,
                    other: Ref<bevy::input::gamepad::GamepadAxisChangedEvent>|
                {
                    let output: bool = GamepadAxisChangedEvent::eq(_self, other).into();
                    output
                },
            );
        NamespaceBuilder::<GamepadButtonChangedEvent>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::gamepad::GamepadButtonChangedEvent>| {
                    let output: Val<bevy::input::gamepad::GamepadButtonChangedEvent> = GamepadButtonChangedEvent::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::gamepad::GamepadButtonChangedEvent>,
                    other: Ref<bevy::input::gamepad::GamepadButtonChangedEvent>|
                {
                    let output: bool = GamepadButtonChangedEvent::eq(_self, other)
                        .into();
                    output
                },
            );
        NamespaceBuilder::<GamepadButtonStateChangedEvent>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::gamepad::GamepadButtonStateChangedEvent>| {
                    let output: Val<
                        bevy::input::gamepad::GamepadButtonStateChangedEvent,
                    > = GamepadButtonStateChangedEvent::clone(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::gamepad::GamepadButtonStateChangedEvent>,
                    other: Ref<bevy::input::gamepad::GamepadButtonStateChangedEvent>|
                {
                    let output: bool = GamepadButtonStateChangedEvent::eq(_self, other)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "assert_receiver_is_total_eq",
                |_self: Ref<bevy::input::gamepad::GamepadButtonStateChangedEvent>| {
                    let output: () = GamepadButtonStateChangedEvent::assert_receiver_is_total_eq(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<GamepadConnection>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::gamepad::GamepadConnection>,
                    other: Ref<bevy::input::gamepad::GamepadConnection>|
                {
                    let output: bool = GamepadConnection::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::gamepad::GamepadConnection>| {
                    let output: Val<bevy::input::gamepad::GamepadConnection> = GamepadConnection::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<GamepadConnectionEvent>::new(world)
            .overwrite_script_function(
                "connected",
                |_self: Ref<bevy::input::gamepad::GamepadConnectionEvent>| {
                    let output: bool = GamepadConnectionEvent::connected(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "disconnected",
                |_self: Ref<bevy::input::gamepad::GamepadConnectionEvent>| {
                    let output: bool = GamepadConnectionEvent::disconnected(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::gamepad::GamepadConnectionEvent>,
                    other: Ref<bevy::input::gamepad::GamepadConnectionEvent>|
                {
                    let output: bool = GamepadConnectionEvent::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::gamepad::GamepadConnectionEvent>| {
                    let output: Val<bevy::input::gamepad::GamepadConnectionEvent> = GamepadConnectionEvent::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<GamepadEvent>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::gamepad::GamepadEvent>,
                    other: Ref<bevy::input::gamepad::GamepadEvent>|
                {
                    let output: bool = GamepadEvent::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::gamepad::GamepadEvent>| {
                    let output: Val<bevy::input::gamepad::GamepadEvent> = GamepadEvent::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<GamepadInput>::new(world)
            .overwrite_script_function(
                "assert_receiver_is_total_eq",
                |_self: Ref<bevy::input::gamepad::GamepadInput>| {
                    let output: () = GamepadInput::assert_receiver_is_total_eq(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::gamepad::GamepadInput>| {
                    let output: Val<bevy::input::gamepad::GamepadInput> = GamepadInput::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::gamepad::GamepadInput>,
                    other: Ref<bevy::input::gamepad::GamepadInput>|
                {
                    let output: bool = GamepadInput::eq(_self, other).into();
                    output
                },
            );
        NamespaceBuilder::<GamepadRumbleRequest>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::gamepad::GamepadRumbleRequest>| {
                    let output: Val<bevy::input::gamepad::GamepadRumbleRequest> = GamepadRumbleRequest::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<RawGamepadAxisChangedEvent>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::gamepad::RawGamepadAxisChangedEvent>,
                    other: Ref<bevy::input::gamepad::RawGamepadAxisChangedEvent>|
                {
                    let output: bool = RawGamepadAxisChangedEvent::eq(_self, other)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::gamepad::RawGamepadAxisChangedEvent>| {
                    let output: Val<bevy::input::gamepad::RawGamepadAxisChangedEvent> = RawGamepadAxisChangedEvent::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<RawGamepadButtonChangedEvent>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::gamepad::RawGamepadButtonChangedEvent>| {
                    let output: Val<
                        bevy::input::gamepad::RawGamepadButtonChangedEvent,
                    > = RawGamepadButtonChangedEvent::clone(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::gamepad::RawGamepadButtonChangedEvent>,
                    other: Ref<bevy::input::gamepad::RawGamepadButtonChangedEvent>|
                {
                    let output: bool = RawGamepadButtonChangedEvent::eq(_self, other)
                        .into();
                    output
                },
            );
        NamespaceBuilder::<RawGamepadEvent>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::gamepad::RawGamepadEvent>| {
                    let output: Val<bevy::input::gamepad::RawGamepadEvent> = RawGamepadEvent::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::gamepad::RawGamepadEvent>,
                    other: Ref<bevy::input::gamepad::RawGamepadEvent>|
                {
                    let output: bool = RawGamepadEvent::eq(_self, other).into();
                    output
                },
            );
        NamespaceBuilder::<PinchGesture>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::gestures::PinchGesture>| {
                    let output: Val<bevy::input::gestures::PinchGesture> = PinchGesture::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::gestures::PinchGesture>,
                    other: Ref<bevy::input::gestures::PinchGesture>|
                {
                    let output: bool = PinchGesture::eq(_self, other).into();
                    output
                },
            );
        NamespaceBuilder::<RotationGesture>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::gestures::RotationGesture>| {
                    let output: Val<bevy::input::gestures::RotationGesture> = RotationGesture::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::gestures::RotationGesture>,
                    other: Ref<bevy::input::gestures::RotationGesture>|
                {
                    let output: bool = RotationGesture::eq(_self, other).into();
                    output
                },
            );
        NamespaceBuilder::<DoubleTapGesture>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::gestures::DoubleTapGesture>,
                    other: Ref<bevy::input::gestures::DoubleTapGesture>|
                {
                    let output: bool = DoubleTapGesture::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::gestures::DoubleTapGesture>| {
                    let output: Val<bevy::input::gestures::DoubleTapGesture> = DoubleTapGesture::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<PanGesture>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::gestures::PanGesture>| {
                    let output: Val<bevy::input::gestures::PanGesture> = PanGesture::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::gestures::PanGesture>,
                    other: Ref<bevy::input::gestures::PanGesture>|
                {
                    let output: bool = PanGesture::eq(_self, other).into();
                    output
                },
            );
        NamespaceBuilder::<ButtonState>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::ButtonState>,
                    other: Ref<bevy::input::ButtonState>|
                {
                    let output: bool = ButtonState::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "is_pressed",
                |_self: Ref<bevy::input::ButtonState>| {
                    let output: bool = ButtonState::is_pressed(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "assert_receiver_is_total_eq",
                |_self: Ref<bevy::input::ButtonState>| {
                    let output: () = ButtonState::assert_receiver_is_total_eq(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::ButtonState>| {
                    let output: Val<bevy::input::ButtonState> = ButtonState::clone(_self)
                        .into();
                    output
                },
            );
        NamespaceBuilder::<ButtonSettings>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::gamepad::ButtonSettings>,
                    other: Ref<bevy::input::gamepad::ButtonSettings>|
                {
                    let output: bool = ButtonSettings::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::gamepad::ButtonSettings>| {
                    let output: Val<bevy::input::gamepad::ButtonSettings> = ButtonSettings::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "is_pressed",
                |_self: Ref<bevy::input::gamepad::ButtonSettings>, value: f32| {
                    let output: bool = ButtonSettings::is_pressed(_self, value).into();
                    output
                },
            )
            .overwrite_script_function(
                "is_released",
                |_self: Ref<bevy::input::gamepad::ButtonSettings>, value: f32| {
                    let output: bool = ButtonSettings::is_released(_self, value).into();
                    output
                },
            )
            .overwrite_script_function(
                "press_threshold",
                |_self: Ref<bevy::input::gamepad::ButtonSettings>| {
                    let output: f32 = ButtonSettings::press_threshold(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "set_press_threshold",
                |_self: Mut<bevy::input::gamepad::ButtonSettings>, value: f32| {
                    let output: f32 = ButtonSettings::set_press_threshold(_self, value)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "release_threshold",
                |_self: Ref<bevy::input::gamepad::ButtonSettings>| {
                    let output: f32 = ButtonSettings::release_threshold(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "set_release_threshold",
                |_self: Mut<bevy::input::gamepad::ButtonSettings>, value: f32| {
                    let output: f32 = ButtonSettings::set_release_threshold(_self, value)
                        .into();
                    output
                },
            );
        NamespaceBuilder::<AxisSettings>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::gamepad::AxisSettings>,
                    other: Ref<bevy::input::gamepad::AxisSettings>|
                {
                    let output: bool = AxisSettings::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "livezone_upperbound",
                |_self: Ref<bevy::input::gamepad::AxisSettings>| {
                    let output: f32 = AxisSettings::livezone_upperbound(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "set_livezone_upperbound",
                |_self: Mut<bevy::input::gamepad::AxisSettings>, value: f32| {
                    let output: f32 = AxisSettings::set_livezone_upperbound(_self, value)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "deadzone_upperbound",
                |_self: Ref<bevy::input::gamepad::AxisSettings>| {
                    let output: f32 = AxisSettings::deadzone_upperbound(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "set_deadzone_upperbound",
                |_self: Mut<bevy::input::gamepad::AxisSettings>, value: f32| {
                    let output: f32 = AxisSettings::set_deadzone_upperbound(_self, value)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "livezone_lowerbound",
                |_self: Ref<bevy::input::gamepad::AxisSettings>| {
                    let output: f32 = AxisSettings::livezone_lowerbound(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "set_livezone_lowerbound",
                |_self: Mut<bevy::input::gamepad::AxisSettings>, value: f32| {
                    let output: f32 = AxisSettings::set_livezone_lowerbound(_self, value)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "deadzone_lowerbound",
                |_self: Ref<bevy::input::gamepad::AxisSettings>| {
                    let output: f32 = AxisSettings::deadzone_lowerbound(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "set_deadzone_lowerbound",
                |_self: Mut<bevy::input::gamepad::AxisSettings>, value: f32| {
                    let output: f32 = AxisSettings::set_deadzone_lowerbound(_self, value)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "threshold",
                |_self: Ref<bevy::input::gamepad::AxisSettings>| {
                    let output: f32 = AxisSettings::threshold(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "set_threshold",
                |_self: Mut<bevy::input::gamepad::AxisSettings>, value: f32| {
                    let output: f32 = AxisSettings::set_threshold(_self, value).into();
                    output
                },
            )
            .overwrite_script_function(
                "clamp",
                |_self: Ref<bevy::input::gamepad::AxisSettings>, new_value: f32| {
                    let output: f32 = AxisSettings::clamp(_self, new_value).into();
                    output
                },
            )
            .overwrite_script_function(
                "filter",
                |
                    _self: Ref<bevy::input::gamepad::AxisSettings>,
                    new_value: f32,
                    old_value: std::option::Option<f32>|
                {
                    let output: std::option::Option<f32> = AxisSettings::filter(
                            _self,
                            new_value,
                            old_value,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::gamepad::AxisSettings>| {
                    let output: Val<bevy::input::gamepad::AxisSettings> = AxisSettings::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<ButtonAxisSettings>::new(world)
            .overwrite_script_function(
                "filter",
                |
                    _self: Ref<bevy::input::gamepad::ButtonAxisSettings>,
                    new_value: f32,
                    old_value: std::option::Option<f32>|
                {
                    let output: std::option::Option<f32> = ButtonAxisSettings::filter(
                            _self,
                            new_value,
                            old_value,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::gamepad::ButtonAxisSettings>| {
                    let output: Val<bevy::input::gamepad::ButtonAxisSettings> = ButtonAxisSettings::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<GamepadRumbleIntensity>::new(world)
            .overwrite_script_function(
                "weak_motor",
                |intensity: f32| {
                    let output: Val<bevy::input::gamepad::GamepadRumbleIntensity> = GamepadRumbleIntensity::weak_motor(
                            intensity,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "strong_motor",
                |intensity: f32| {
                    let output: Val<bevy::input::gamepad::GamepadRumbleIntensity> = GamepadRumbleIntensity::strong_motor(
                            intensity,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::gamepad::GamepadRumbleIntensity>| {
                    let output: Val<bevy::input::gamepad::GamepadRumbleIntensity> = GamepadRumbleIntensity::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::gamepad::GamepadRumbleIntensity>,
                    other: Ref<bevy::input::gamepad::GamepadRumbleIntensity>|
                {
                    let output: bool = GamepadRumbleIntensity::eq(_self, other).into();
                    output
                },
            );
        NamespaceBuilder::<Key>::new(world)
            .overwrite_script_function(
                "assert_receiver_is_total_eq",
                |_self: Ref<bevy::input::keyboard::Key>| {
                    let output: () = Key::assert_receiver_is_total_eq(_self).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::keyboard::Key>| {
                    let output: Val<bevy::input::keyboard::Key> = Key::clone(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::keyboard::Key>,
                    other: Ref<bevy::input::keyboard::Key>|
                {
                    let output: bool = Key::eq(_self, other).into();
                    output
                },
            );
        NamespaceBuilder::<NativeKeyCode>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::keyboard::NativeKeyCode>,
                    other: Ref<bevy::input::keyboard::NativeKeyCode>|
                {
                    let output: bool = NativeKeyCode::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::keyboard::NativeKeyCode>| {
                    let output: Val<bevy::input::keyboard::NativeKeyCode> = NativeKeyCode::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "assert_receiver_is_total_eq",
                |_self: Ref<bevy::input::keyboard::NativeKeyCode>| {
                    let output: () = NativeKeyCode::assert_receiver_is_total_eq(_self)
                        .into();
                    output
                },
            );
        NamespaceBuilder::<NativeKey>::new(world)
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::keyboard::NativeKey>,
                    other: Ref<bevy::input::keyboard::NativeKey>|
                {
                    let output: bool = NativeKey::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "assert_receiver_is_total_eq",
                |_self: Ref<bevy::input::keyboard::NativeKey>| {
                    let output: () = NativeKey::assert_receiver_is_total_eq(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::keyboard::NativeKey>| {
                    let output: Val<bevy::input::keyboard::NativeKey> = NativeKey::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<MouseScrollUnit>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::mouse::MouseScrollUnit>| {
                    let output: Val<bevy::input::mouse::MouseScrollUnit> = MouseScrollUnit::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "assert_receiver_is_total_eq",
                |_self: Ref<bevy::input::mouse::MouseScrollUnit>| {
                    let output: () = MouseScrollUnit::assert_receiver_is_total_eq(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::mouse::MouseScrollUnit>,
                    other: Ref<bevy::input::mouse::MouseScrollUnit>|
                {
                    let output: bool = MouseScrollUnit::eq(_self, other).into();
                    output
                },
            );
        NamespaceBuilder::<TouchPhase>::new(world)
            .overwrite_script_function(
                "assert_receiver_is_total_eq",
                |_self: Ref<bevy::input::touch::TouchPhase>| {
                    let output: () = TouchPhase::assert_receiver_is_total_eq(_self)
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::touch::TouchPhase>,
                    other: Ref<bevy::input::touch::TouchPhase>|
                {
                    let output: bool = TouchPhase::eq(_self, other).into();
                    output
                },
            )
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::touch::TouchPhase>| {
                    let output: Val<bevy::input::touch::TouchPhase> = TouchPhase::clone(
                            _self,
                        )
                        .into();
                    output
                },
            );
        NamespaceBuilder::<ForceTouch>::new(world)
            .overwrite_script_function(
                "clone",
                |_self: Ref<bevy::input::touch::ForceTouch>| {
                    let output: Val<bevy::input::touch::ForceTouch> = ForceTouch::clone(
                            _self,
                        )
                        .into();
                    output
                },
            )
            .overwrite_script_function(
                "eq",
                |
                    _self: Ref<bevy::input::touch::ForceTouch>,
                    other: Ref<bevy::input::touch::ForceTouch>|
                {
                    let output: bool = ForceTouch::eq(_self, other).into();
                    output
                },
            );
    }
}
