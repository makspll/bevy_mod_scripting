{
  "version": "0.5.0",
  "globals": {
    "Annulus": {
      "type_kind": {
        "val": "bevy_math::primitives::dim2::Annulus"
      },
      "is_static": true
    },
    "FunctionInfo": {
      "type_kind": {
        "val": "bevy_mod_scripting_core::docgen::info::FunctionInfo"
      },
      "is_static": true
    },
    "AlignItems": {
      "type_kind": {
        "val": "bevy_ui::ui_node::AlignItems"
      },
      "is_static": true
    },
    "WindowBackendScaleFactorChanged": {
      "type_kind": {
        "val": "bevy_window::event::WindowBackendScaleFactorChanged"
      },
      "is_static": true
    },
    "TextColor": {
      "type_kind": {
        "val": "bevy_text::text::TextColor"
      },
      "is_static": true
    },
    "AnimationTransitions": {
      "type_kind": {
        "val": "bevy_animation::transition::AnimationTransitions"
      },
      "is_static": true
    },
    "GamepadRumbleRequest": {
      "type_kind": {
        "val": "bevy_input::gamepad::GamepadRumbleRequest"
      },
      "is_static": true
    },
    "AtomicU16": {
      "type_kind": {
        "val": "core::sync::atomic::AtomicU16"
      },
      "is_static": true
    },
    "Cascade": {
      "type_kind": {
        "val": "bevy_pbr::light::Cascade"
      },
      "is_static": true
    },
    "ConeMeshBuilder": {
      "type_kind": {
        "val": "bevy_mesh::primitives::dim3::cone::ConeMeshBuilder"
      },
      "is_static": true
    },
    "BackgroundColor": {
      "type_kind": {
        "val": "bevy_ui::ui_node::BackgroundColor"
      },
      "is_static": true
    },
    "KeyboardFocusLost": {
      "type_kind": {
        "val": "bevy_input::keyboard::KeyboardFocusLost"
      },
      "is_static": true
    },
    "ComputedNode": {
      "type_kind": {
        "val": "bevy_ui::ui_node::ComputedNode"
      },
      "is_static": true
    },
    "PointerId": {
      "type_kind": {
        "val": "bevy_picking::pointer::PointerId"
      },
      "is_static": true
    },
    "RegularPolygonMeshBuilder": {
      "type_kind": {
        "val": "bevy_mesh::primitives::dim2::RegularPolygonMeshBuilder"
      },
      "is_static": true
    },
    "SmolStr": {
      "type_kind": {
        "val": "smol_str::SmolStr"
      },
      "is_static": true
    },
    "ClusterZConfig": {
      "type_kind": {
        "val": "bevy_pbr::cluster::ClusterZConfig"
      },
      "is_static": true
    },
    "ChromaticAberration": {
      "type_kind": {
        "val": "bevy_core_pipeline::post_process::ChromaticAberration"
      },
      "is_static": true
    },
    "OnInsert": {
      "type_kind": {
        "val": "bevy_ecs::world::component_constants::OnInsert"
      },
      "is_static": true
    },
    "U8Vec3": {
      "type_kind": {
        "val": "glam::U8Vec3"
      },
      "is_static": true
    },
    "GizmoLineStyle": {
      "type_kind": {
        "val": "bevy_gizmos::config::GizmoLineStyle"
      },
      "is_static": true
    },
    "DynamicComponent": {
      "type_kind": {
        "val": "bevy_mod_scripting_core::bindings::script_component::DynamicComponent"
      },
      "is_static": true
    },
    "DQuat": {
      "type_kind": {
        "val": "glam::DQuat"
      },
      "is_static": true
    },
    "U16Vec4": {
      "type_kind": {
        "val": "glam::U16Vec4"
      },
      "is_static": true
    },
    "CursorLeft": {
      "type_kind": {
        "val": "bevy_window::event::CursorLeft"
      },
      "is_static": true
    },
    "Arc2d": {
      "type_kind": {
        "val": "bevy_math::primitives::dim2::Arc2d"
      },
      "is_static": true
    },
    "CustomCursorImage": {
      "type_kind": {
        "val": "bevy_winit::custom_cursor::CustomCursorImage"
      },
      "is_static": true
    },
    "CameraRenderGraph": {
      "type_kind": {
        "val": "bevy_render::camera::camera::CameraRenderGraph"
      },
      "is_static": true
    },
    "BloomCompositeMode": {
      "type_kind": {
        "val": "bevy_core_pipeline::bloom::settings::BloomCompositeMode"
      },
      "is_static": true
    },
    "NonZeroI16": {
      "type_kind": {
        "val": "core::num::NonZeroI16"
      },
      "is_static": true
    },
    "FileDragAndDrop": {
      "type_kind": {
        "val": "bevy_window::event::FileDragAndDrop"
      },
      "is_static": true
    },
    "Mat3": {
      "type_kind": {
        "val": "glam::Mat3"
      },
      "is_static": true
    },
    "ThreadedAnimationGraphs": {
      "type_kind": {
        "val": "bevy_animation::graph::ThreadedAnimationGraphs"
      },
      "is_static": true
    },
    "Frustum": {
      "type_kind": {
        "val": "bevy_render::primitives::Frustum"
      },
      "is_static": true
    },
    "ColorGradingSection": {
      "type_kind": {
        "val": "bevy_render::view::ColorGradingSection"
      },
      "is_static": true
    },
    "bool": {
      "type_kind": {
        "val": "bool"
      },
      "is_static": true
    },
    "ComputedNodeTarget": {
      "type_kind": {
        "val": "bevy_ui::ui_node::ComputedNodeTarget"
      },
      "is_static": true
    },
    "BorderColor": {
      "type_kind": {
        "val": "bevy_ui::ui_node::BorderColor"
      },
      "is_static": true
    },
    "WindowPosition": {
      "type_kind": {
        "val": "bevy_window::window::WindowPosition"
      },
      "is_static": true
    },
    "GltfExtras": {
      "type_kind": {
        "val": "bevy_gltf::assets::GltfExtras"
      },
      "is_static": true
    },
    "ImageNode": {
      "type_kind": {
        "val": "bevy_ui::widget::image::ImageNode"
      },
      "is_static": true
    },
    "SystemIdMarker": {
      "type_kind": {
        "val": "bevy_ecs::system::system_registry::SystemIdMarker"
      },
      "is_static": true
    },
    "WindowCreated": {
      "type_kind": {
        "val": "bevy_window::event::WindowCreated"
      },
      "is_static": true
    },
    "AccumulatedMouseMotion": {
      "type_kind": {
        "val": "bevy_input::mouse::AccumulatedMouseMotion"
      },
      "is_static": true
    },
    "Label": {
      "type_kind": {
        "val": "bevy_ui::widget::label::Label"
      },
      "is_static": true
    },
    "FontSmoothing": {
      "type_kind": {
        "val": "bevy_text::text::FontSmoothing"
      },
      "is_static": true
    },
    "LightGizmoConfigGroup": {
      "type_kind": {
        "val": "bevy_gizmos::light::LightGizmoConfigGroup"
      },
      "is_static": true
    },
    "SmaaPreset": {
      "type_kind": {
        "val": "bevy_core_pipeline::smaa::SmaaPreset"
      },
      "is_static": true
    },
    "i16": {
      "type_kind": {
        "val": "i16"
      },
      "is_static": true
    },
    "PathBuf": {
      "type_kind": {
        "val": "PathBuf"
      },
      "is_static": true
    },
    "MinTrackSizingFunction": {
      "type_kind": {
        "val": "bevy_ui::ui_node::MinTrackSizingFunction"
      },
      "is_static": true
    },
    "TimedAnimationEvent": {
      "type_kind": {
        "val": "bevy_animation::TimedAnimationEvent"
      },
      "is_static": true
    },
    "ThreadedAnimationGraph": {
      "type_kind": {
        "val": "bevy_animation::graph::ThreadedAnimationGraph"
      },
      "is_static": true
    },
    "WindowClosing": {
      "type_kind": {
        "val": "bevy_window::event::WindowClosing"
      },
      "is_static": true
    },
    "Isometry2d": {
      "type_kind": {
        "val": "bevy_math::isometry::Isometry2d"
      },
      "is_static": true
    },
    "Sensitivity": {
      "type_kind": {
        "val": "bevy_core_pipeline::fxaa::Sensitivity"
      },
      "is_static": true
    },
    "RayId": {
      "type_kind": {
        "val": "bevy_picking::backend::ray::RayId"
      },
      "is_static": true
    },
    "ZIndex": {
      "type_kind": {
        "val": "bevy_ui::ui_node::ZIndex"
      },
      "is_static": true
    },
    "Entity": {
      "type_kind": {
        "val": "bevy_ecs::entity::Entity"
      },
      "is_static": true
    },
    "Namespace": {
      "type_kind": {
        "val": "bevy_mod_scripting_core::bindings::function::namespace::Namespace"
      },
      "is_static": true
    },
    "RemovedComponentEntity": {
      "type_kind": {
        "val": "bevy_ecs::removal_detection::RemovedComponentEntity"
      },
      "is_static": true
    },
    "f64": {
      "type_kind": {
        "val": "f64"
      },
      "is_static": true
    },
    "GizmoLineJoint": {
      "type_kind": {
        "val": "bevy_gizmos::config::GizmoLineJoint"
      },
      "is_static": true
    },
    "BloomPrefilter": {
      "type_kind": {
        "val": "bevy_core_pipeline::bloom::settings::BloomPrefilter"
      },
      "is_static": true
    },
    "Text2d": {
      "type_kind": {
        "val": "bevy_text::text2d::Text2d"
      },
      "is_static": true
    },
    "TouchPhase": {
      "type_kind": {
        "val": "bevy_input::touch::TouchPhase"
      },
      "is_static": true
    },
    "TorusMeshBuilder": {
      "type_kind": {
        "val": "bevy_mesh::primitives::dim3::torus::TorusMeshBuilder"
      },
      "is_static": true
    },
    "OrderIndependentTransparencySettings": {
      "type_kind": {
        "val": "bevy_core_pipeline::oit::OrderIndependentTransparencySettings"
      },
      "is_static": true
    },
    "EulerRot": {
      "type_kind": {
        "val": "glam::EulerRot"
      },
      "is_static": true
    },
    "Camera3dDepthTextureUsage": {
      "type_kind": {
        "val": "bevy_core_pipeline::core_3d::camera_3d::Camera3dDepthTextureUsage"
      },
      "is_static": true
    },
    "U64Vec2": {
      "type_kind": {
        "val": "glam::U64Vec2"
      },
      "is_static": true
    },
    "I8Vec2": {
      "type_kind": {
        "val": "glam::I8Vec2"
      },
      "is_static": true
    },
    "ContentSize": {
      "type_kind": {
        "val": "bevy_ui::measurement::ContentSize"
      },
      "is_static": true
    },
    "u8": {
      "type_kind": {
        "val": "u8"
      },
      "is_static": true
    },
    "DirectionalLightShadowMap": {
      "type_kind": {
        "val": "bevy_pbr::light::DirectionalLightShadowMap"
      },
      "is_static": true
    },
    "Tetrahedron": {
      "type_kind": {
        "val": "bevy_math::primitives::dim3::Tetrahedron"
      },
      "is_static": true
    },
    "DistanceFog": {
      "type_kind": {
        "val": "bevy_pbr::fog::DistanceFog"
      },
      "is_static": true
    },
    "Dir3A": {
      "type_kind": {
        "val": "bevy_math::direction::Dir3A"
      },
      "is_static": true
    },
    "ImageRenderTarget": {
      "type_kind": {
        "val": "bevy_render::camera::camera::ImageRenderTarget"
      },
      "is_static": true
    },
    "Quat": {
      "type_kind": {
        "val": "glam::Quat"
      },
      "is_static": true
    },
    "Plane2d": {
      "type_kind": {
        "val": "bevy_math::primitives::dim2::Plane2d"
      },
      "is_static": true
    },
    "I16Vec4": {
      "type_kind": {
        "val": "glam::I16Vec4"
      },
      "is_static": true
    },
    "GamepadButtonChangedEvent": {
      "type_kind": {
        "val": "bevy_input::gamepad::GamepadButtonChangedEvent"
      },
      "is_static": true
    },
    "DiGraph": {
      "type_kind": {
        "val": "petgraph::graph::DiGraph<bevy_animation::graph::AnimationGraphNode, (), u32>"
      },
      "is_static": true
    },
    "CompassOctant": {
      "type_kind": {
        "val": "bevy_math::compass::CompassOctant"
      },
      "is_static": true
    },
    "Ime": {
      "type_kind": {
        "val": "bevy_window::event::Ime"
      },
      "is_static": true
    },
    "ParallaxMappingMethod": {
      "type_kind": {
        "val": "bevy_pbr::parallax::ParallaxMappingMethod"
      },
      "is_static": true
    },
    "Line2d": {
      "type_kind": {
        "val": "bevy_math::primitives::dim2::Line2d"
      },
      "is_static": true
    },
    "Sprite": {
      "type_kind": {
        "val": "bevy_sprite::sprite::Sprite"
      },
      "is_static": true
    },
    "DeferredPrepass": {
      "type_kind": {
        "val": "bevy_core_pipeline::prepass::DeferredPrepass"
      },
      "is_static": true
    },
    "KeyCode": {
      "type_kind": {
        "val": "bevy_input::keyboard::KeyCode"
      },
      "is_static": true
    },
    "TemporalJitter": {
      "type_kind": {
        "val": "bevy_render::camera::camera::TemporalJitter"
      },
      "is_static": true
    },
    "ViewVisibility": {
      "type_kind": {
        "val": "bevy_render::view::visibility::ViewVisibility"
      },
      "is_static": true
    },
    "TextEntity": {
      "type_kind": {
        "val": "bevy_text::text::TextEntity"
      },
      "is_static": true
    },
    "AspectRatio": {
      "type_kind": {
        "val": "bevy_math::aspect_ratio::AspectRatio"
      },
      "is_static": true
    },
    "Ellipse": {
      "type_kind": {
        "val": "bevy_math::primitives::dim2::Ellipse"
      },
      "is_static": true
    },
    "Color": {
      "type_kind": {
        "val": "bevy_color::color::Color"
      },
      "is_static": true
    },
    "PickingPlugin": {
      "type_kind": {
        "val": "bevy_picking::PickingPlugin"
      },
      "is_static": true
    },
    "I64Vec4": {
      "type_kind": {
        "val": "glam::I64Vec4"
      },
      "is_static": true
    },
    "WindowRef": {
      "type_kind": {
        "val": "bevy_window::window::WindowRef"
      },
      "is_static": true
    },
    "GlobalTransform": {
      "type_kind": {
        "val": "bevy_transform::components::global_transform::GlobalTransform"
      },
      "is_static": true
    },
    "Rectangle": {
      "type_kind": {
        "val": "bevy_math::primitives::dim2::Rectangle"
      },
      "is_static": true
    },
    "WindowLevel": {
      "type_kind": {
        "val": "bevy_window::window::WindowLevel"
      },
      "is_static": true
    },
    "ButtonSettings": {
      "type_kind": {
        "val": "bevy_input::gamepad::ButtonSettings"
      },
      "is_static": true
    },
    "IVec4": {
      "type_kind": {
        "val": "glam::IVec4"
      },
      "is_static": true
    },
    "ForwardDecal": {
      "type_kind": {
        "val": "bevy_pbr::decal::forward::ForwardDecal"
      },
      "is_static": true
    },
    "CalculatedClip": {
      "type_kind": {
        "val": "bevy_ui::ui_node::CalculatedClip"
      },
      "is_static": true
    },
    "RequestRedraw": {
      "type_kind": {
        "val": "bevy_window::event::RequestRedraw"
      },
      "is_static": true
    },
    "Line3d": {
      "type_kind": {
        "val": "bevy_math::primitives::dim3::Line3d"
      },
      "is_static": true
    },
    "ScreenSpaceReflections": {
      "type_kind": {
        "val": "bevy_pbr::ssr::ScreenSpaceReflections"
      },
      "is_static": true
    },
    "PrimaryWindow": {
      "type_kind": {
        "val": "bevy_window::window::PrimaryWindow"
      },
      "is_static": true
    },
    "U8Vec2": {
      "type_kind": {
        "val": "glam::U8Vec2"
      },
      "is_static": true
    },
    "Triangle2dMeshBuilder": {
      "type_kind": {
        "val": "bevy_mesh::primitives::dim2::Triangle2dMeshBuilder"
      },
      "is_static": true
    },
    "BoxShadow": {
      "type_kind": {
        "val": "bevy_ui::ui_node::BoxShadow"
      },
      "is_static": true
    },
    "GizmoConfig": {
      "type_kind": {
        "val": "bevy_gizmos::config::GizmoConfig"
      },
      "is_static": true
    },
    "U64Vec4": {
      "type_kind": {
        "val": "glam::U64Vec4"
      },
      "is_static": true
    },
    "DynamicSceneRoot": {
      "type_kind": {
        "val": "bevy_scene::components::DynamicSceneRoot"
      },
      "is_static": true
    },
    "SubCameraView": {
      "type_kind": {
        "val": "bevy_render::camera::camera::SubCameraView"
      },
      "is_static": true
    },
    "UVec3": {
      "type_kind": {
        "val": "glam::UVec3"
      },
      "is_static": true
    },
    "DebandDither": {
      "type_kind": {
        "val": "bevy_core_pipeline::tonemapping::DebandDither"
      },
      "is_static": true
    },
    "Screenshot": {
      "type_kind": {
        "val": "bevy_render::view::window::screenshot::Screenshot"
      },
      "is_static": true
    },
    "OverflowClipMargin": {
      "type_kind": {
        "val": "bevy_ui::ui_node::OverflowClipMargin"
      },
      "is_static": true
    },
    "GlyphAtlasLocation": {
      "type_kind": {
        "val": "bevy_text::glyph::GlyphAtlasLocation"
      },
      "is_static": true
    },
    "FunctionReturnInfo": {
      "type_kind": {
        "val": "bevy_mod_scripting_core::docgen::info::FunctionReturnInfo"
      },
      "is_static": true
    },
    "Image": {
      "type_kind": {
        "val": "bevy_image::image::Image"
      },
      "is_static": true
    },
    "Triangle3d": {
      "type_kind": {
        "val": "bevy_math::primitives::dim3::Triangle3d"
      },
      "is_static": true
    },
    "TextBounds": {
      "type_kind": {
        "val": "bevy_text::bounds::TextBounds"
      },
      "is_static": true
    },
    "UiScale": {
      "type_kind": {
        "val": "bevy_ui::UiScale"
      },
      "is_static": true
    },
    "I8Vec3": {
      "type_kind": {
        "val": "glam::I8Vec3"
      },
      "is_static": true
    },
    "Fixed": {
      "type_kind": {
        "val": "bevy_time::fixed::Fixed"
      },
      "is_static": true
    },
    "Vec2": {
      "type_kind": {
        "val": "glam::Vec2"
      },
      "is_static": true
    },
    "Camera": {
      "type_kind": {
        "val": "bevy_render::camera::camera::Camera"
      },
      "is_static": true
    },
    "BoundingCircle": {
      "type_kind": {
        "val": "bevy_math::bounding::bounded2d::BoundingCircle"
      },
      "is_static": true
    },
    "Laba": {
      "type_kind": {
        "val": "bevy_color::laba::Laba"
      },
      "is_static": true
    },
    "Capsule3dMeshBuilder": {
      "type_kind": {
        "val": "bevy_mesh::primitives::dim3::capsule::Capsule3dMeshBuilder"
      },
      "is_static": true
    },
    "DepthOfField": {
      "type_kind": {
        "val": "bevy_core_pipeline::dof::DepthOfField"
      },
      "is_static": true
    },
    "f32": {
      "type_kind": {
        "val": "f32"
      },
      "is_static": true
    },
    "BorderRect": {
      "type_kind": {
        "val": "bevy_sprite::texture_slice::border_rect::BorderRect"
      },
      "is_static": true
    },
    "DAffine3": {
      "type_kind": {
        "val": "glam::DAffine3"
      },
      "is_static": true
    },
    "i8": {
      "type_kind": {
        "val": "i8"
      },
      "is_static": true
    },
    "AnimationGraph": {
      "type_kind": {
        "val": "bevy_animation::graph::AnimationGraph"
      },
      "is_static": true
    },
    "OverflowAxis": {
      "type_kind": {
        "val": "bevy_ui::ui_node::OverflowAxis"
      },
      "is_static": true
    },
    "Range": {
      "type_kind": {
        "val": "core::ops::Range<u32>"
      },
      "is_static": true
    },
    "NonZeroU32": {
      "type_kind": {
        "val": "core::num::NonZeroU32"
      },
      "is_static": true
    },
    "BoundingCircleCast": {
      "type_kind": {
        "val": "bevy_math::bounding::raycast2d::BoundingCircleCast"
      },
      "is_static": true
    },
    "Ray3d": {
      "type_kind": {
        "val": "bevy_math::ray::Ray3d"
      },
      "is_static": true
    },
    "Indices": {
      "type_kind": {
        "val": "bevy_mesh::index::Indices"
      },
      "is_static": true
    },
    "AlignSelf": {
      "type_kind": {
        "val": "bevy_ui::ui_node::AlignSelf"
      },
      "is_static": true
    },
    "SliceScaleMode": {
      "type_kind": {
        "val": "bevy_sprite::texture_slice::slicer::SliceScaleMode"
      },
      "is_static": true
    },
    "u64": {
      "type_kind": {
        "val": "u64"
      },
      "is_static": true
    },
    "VideoMode": {
      "type_kind": {
        "val": "bevy_window::monitor::VideoMode"
      },
      "is_static": true
    },
    "AtomicUsize": {
      "type_kind": {
        "val": "core::sync::atomic::AtomicUsize"
      },
      "is_static": true
    },
    "BVec3A": {
      "type_kind": {
        "val": "glam::BVec3A"
      },
      "is_static": true
    },
    "VolumetricFog": {
      "type_kind": {
        "val": "bevy_pbr::volumetric_fog::VolumetricFog"
      },
      "is_static": true
    },
    "RenderAssetUsages": {
      "type_kind": {
        "val": "bevy_asset::render_asset::RenderAssetUsages"
      },
      "is_static": true
    },
    "Vec3A": {
      "type_kind": {
        "val": "glam::Vec3A"
      },
      "is_static": true
    },
    "MouseButton": {
      "type_kind": {
        "val": "bevy_input::mouse::MouseButton"
      },
      "is_static": true
    },
    "RotationGesture": {
      "type_kind": {
        "val": "bevy_input::gestures::RotationGesture"
      },
      "is_static": true
    },
    "VisibilityClass": {
      "type_kind": {
        "val": "bevy_render::view::visibility::VisibilityClass"
      },
      "is_static": true
    },
    "GamepadConnection": {
      "type_kind": {
        "val": "bevy_input::gamepad::GamepadConnection"
      },
      "is_static": true
    },
    "AnimationClip": {
      "type_kind": {
        "val": "bevy_animation::AnimationClip"
      },
      "is_static": true
    },
    "ScriptAsset": {
      "type_kind": {
        "val": "bevy_mod_scripting_core::asset::ScriptAsset"
      },
      "is_static": true
    },
    "Xyza": {
      "type_kind": {
        "val": "bevy_color::xyza::Xyza"
      },
      "is_static": true
    },
    "EntityHashSet": {
      "type_kind": {
        "val": "bevy_ecs::entity::hash_set::EntityHashSet"
      },
      "is_static": true
    },
    "FlexDirection": {
      "type_kind": {
        "val": "bevy_ui::ui_node::FlexDirection"
      },
      "is_static": true
    },
    "CircularMeshUvMode": {
      "type_kind": {
        "val": "bevy_mesh::primitives::dim2::CircularMeshUvMode"
      },
      "is_static": true
    },
    "OnAdd": {
      "type_kind": {
        "val": "bevy_ecs::world::component_constants::OnAdd"
      },
      "is_static": true
    },
    "ScreenSpaceAmbientOcclusionQualityLevel": {
      "type_kind": {
        "val": "bevy_pbr::ssao::ScreenSpaceAmbientOcclusionQualityLevel"
      },
      "is_static": true
    },
    "Text": {
      "type_kind": {
        "val": "bevy_ui::widget::text::Text"
      },
      "is_static": true
    },
    "ReflectReference": {
      "type_kind": {
        "val": "ReflectReference"
      },
      "is_static": true
    },
    "CapsuleUvProfile": {
      "type_kind": {
        "val": "bevy_mesh::primitives::dim3::capsule::CapsuleUvProfile"
      },
      "is_static": true
    },
    "CustomProjection": {
      "type_kind": {
        "val": "bevy_render::camera::projection::CustomProjection"
      },
      "is_static": true
    },
    "ReflectSystem": {
      "type_kind": {
        "val": "bevy_system_reflection::ReflectSystem"
      },
      "is_static": true
    },
    "Virtual": {
      "type_kind": {
        "val": "bevy_time::virt::Virtual"
      },
      "is_static": true
    },
    "Mat4": {
      "type_kind": {
        "val": "glam::Mat4"
      },
      "is_static": true
    },
    "InfinitePlane3d": {
      "type_kind": {
        "val": "bevy_math::primitives::dim3::InfinitePlane3d"
      },
      "is_static": true
    },
    "RawGamepadEvent": {
      "type_kind": {
        "val": "bevy_input::gamepad::RawGamepadEvent"
      },
      "is_static": true
    },
    "Tonemapping": {
      "type_kind": {
        "val": "bevy_core_pipeline::tonemapping::Tonemapping"
      },
      "is_static": true
    },
    "CursorIcon": {
      "type_kind": {
        "val": "bevy_winit::cursor::CursorIcon"
      },
      "is_static": true
    },
    "OnDespawn": {
      "type_kind": {
        "val": "bevy_ecs::world::component_constants::OnDespawn"
      },
      "is_static": true
    },
    "Affine2": {
      "type_kind": {
        "val": "glam::Affine2"
      },
      "is_static": true
    },
    "AtomicU32": {
      "type_kind": {
        "val": "core::sync::atomic::AtomicU32"
      },
      "is_static": true
    },
    "AnimationEvent": {
      "type_kind": {
        "val": "bevy_animation::AnimationEvent"
      },
      "is_static": true
    },
    "JumpAt": {
      "type_kind": {
        "val": "bevy_math::curve::easing::JumpAt"
      },
      "is_static": true
    },
    "ComponentId": {
      "type_kind": {
        "val": "bevy_ecs::component::ComponentId"
      },
      "is_static": true
    },
    "IrradianceVolume": {
      "type_kind": {
        "val": "bevy_pbr::light_probe::irradiance_volume::IrradianceVolume"
      },
      "is_static": true
    },
    "AtomicBool": {
      "type_kind": {
        "val": "core::sync::atomic::AtomicBool"
      },
      "is_static": true
    },
    "Bloom": {
      "type_kind": {
        "val": "bevy_core_pipeline::bloom::settings::Bloom"
      },
      "is_static": true
    },
    "ManualTextureViewHandle": {
      "type_kind": {
        "val": "bevy_render::camera::manual_texture_view::ManualTextureViewHandle"
      },
      "is_static": true
    },
    "NotShadowCaster": {
      "type_kind": {
        "val": "bevy_pbr::light::NotShadowCaster"
      },
      "is_static": true
    },
    "ClusterFarZMode": {
      "type_kind": {
        "val": "bevy_pbr::cluster::ClusterFarZMode"
      },
      "is_static": true
    },
    "Segment3d": {
      "type_kind": {
        "val": "bevy_math::primitives::dim3::Segment3d"
      },
      "is_static": true
    },
    "WindowClosed": {
      "type_kind": {
        "val": "bevy_window::event::WindowClosed"
      },
      "is_static": true
    },
    "Cow": {
      "type_kind": {
        "val": "alloc::borrow::Cow<str>"
      },
      "is_static": true
    },
    "EnabledButtons": {
      "type_kind": {
        "val": "bevy_window::window::EnabledButtons"
      },
      "is_static": true
    },
    "GamepadConnectionEvent": {
      "type_kind": {
        "val": "bevy_input::gamepad::GamepadConnectionEvent"
      },
      "is_static": true
    },
    "InternalWindowState": {
      "type_kind": {
        "val": "bevy_window::window::InternalWindowState"
      },
      "is_static": true
    },
    "RangeInclusive": {
      "type_kind": {
        "val": "core::ops::RangeInclusive<f32>"
      },
      "is_static": true
    },
    "EnvironmentMapLight": {
      "type_kind": {
        "val": "bevy_pbr::light_probe::environment_map::EnvironmentMapLight"
      },
      "is_static": true
    },
    "VideoModeSelection": {
      "type_kind": {
        "val": "bevy_window::window::VideoModeSelection"
      },
      "is_static": true
    },
    "FogFalloff": {
      "type_kind": {
        "val": "bevy_pbr::fog::FogFalloff"
      },
      "is_static": true
    },
    "Outline": {
      "type_kind": {
        "val": "bevy_ui::ui_node::Outline"
      },
      "is_static": true
    },
    "PointerLocation": {
      "type_kind": {
        "val": "bevy_picking::pointer::PointerLocation"
      },
      "is_static": true
    },
    "GamepadRumbleIntensity": {
      "type_kind": {
        "val": "bevy_input::gamepad::GamepadRumbleIntensity"
      },
      "is_static": true
    },
    "CylinderAnchor": {
      "type_kind": {
        "val": "bevy_mesh::primitives::dim3::cylinder::CylinderAnchor"
      },
      "is_static": true
    },
    "U16Vec2": {
      "type_kind": {
        "val": "glam::U16Vec2"
      },
      "is_static": true
    },
    "ChildOf": {
      "type_kind": {
        "val": "bevy_ecs::hierarchy::ChildOf"
      },
      "is_static": true
    },
    "u128": {
      "type_kind": {
        "val": "u128"
      },
      "is_static": true
    },
    "types": {
      "type_kind": {
        "hashMap": [
          {
            "primitive": "string"
          },
          {
            "union": [
              {
                "val": "bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration"
              },
              {
                "union": [
                  {
                    "val": "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration"
                  },
                  {
                    "val": "bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration"
                  }
                ]
              }
            ]
          }
        ]
      },
      "is_static": false
    },
    "Skybox": {
      "type_kind": {
        "val": "bevy_core_pipeline::skybox::Skybox"
      },
      "is_static": true
    },
    "CylinderMeshBuilder": {
      "type_kind": {
        "val": "bevy_mesh::primitives::dim3::cylinder::CylinderMeshBuilder"
      },
      "is_static": true
    },
    "Camera3dDepthLoadOp": {
      "type_kind": {
        "val": "bevy_core_pipeline::core_3d::camera_3d::Camera3dDepthLoadOp"
      },
      "is_static": true
    },
    "JustifySelf": {
      "type_kind": {
        "val": "bevy_ui::ui_node::JustifySelf"
      },
      "is_static": true
    },
    "ScreenSpaceTransmissionQuality": {
      "type_kind": {
        "val": "bevy_core_pipeline::core_3d::camera_3d::ScreenSpaceTransmissionQuality"
      },
      "is_static": true
    },
    "Dir2": {
      "type_kind": {
        "val": "bevy_math::direction::Dir2"
      },
      "is_static": true
    },
    "CircularSegment": {
      "type_kind": {
        "val": "bevy_math::primitives::dim2::CircularSegment"
      },
      "is_static": true
    },
    "BoxShadowSamples": {
      "type_kind": {
        "val": "bevy_ui::ui_node::BoxShadowSamples"
      },
      "is_static": true
    },
    "LinearRgba": {
      "type_kind": {
        "val": "bevy_color::linear_rgba::LinearRgba"
      },
      "is_static": true
    },
    "TextLayoutInfo": {
      "type_kind": {
        "val": "bevy_text::pipeline::TextLayoutInfo"
      },
      "is_static": true
    },
    "ImageNodeSize": {
      "type_kind": {
        "val": "bevy_ui::widget::image::ImageNodeSize"
      },
      "is_static": true
    },
    "TypeId": {
      "type_kind": {
        "val": "core::any::TypeId"
      },
      "is_static": true
    },
    "I16Vec2": {
      "type_kind": {
        "val": "glam::I16Vec2"
      },
      "is_static": true
    },
    "URect": {
      "type_kind": {
        "val": "bevy_math::rects::urect::URect"
      },
      "is_static": true
    },
    "RectangleMeshBuilder": {
      "type_kind": {
        "val": "bevy_mesh::primitives::dim2::RectangleMeshBuilder"
      },
      "is_static": true
    },
    "VolumetricLight": {
      "type_kind": {
        "val": "bevy_pbr::volumetric_fog::VolumetricLight"
      },
      "is_static": true
    },
    "AnimationEventTarget": {
      "type_kind": {
        "val": "bevy_animation::AnimationEventTarget"
      },
      "is_static": true
    },
    "Capsule2dMeshBuilder": {
      "type_kind": {
        "val": "bevy_mesh::primitives::dim2::Capsule2dMeshBuilder"
      },
      "is_static": true
    },
    "SphereMeshBuilder": {
      "type_kind": {
        "val": "bevy_mesh::primitives::dim3::sphere::SphereMeshBuilder"
      },
      "is_static": true
    },
    "I64Vec2": {
      "type_kind": {
        "val": "glam::I64Vec2"
      },
      "is_static": true
    },
    "Children": {
      "type_kind": {
        "val": "bevy_ecs::hierarchy::Children"
      },
      "is_static": true
    },
    "i32": {
      "type_kind": {
        "val": "i32"
      },
      "is_static": true
    },
    "CursorOptions": {
      "type_kind": {
        "val": "bevy_window::window::CursorOptions"
      },
      "is_static": true
    },
    "AtomicI16": {
      "type_kind": {
        "val": "core::sync::atomic::AtomicI16"
      },
      "is_static": true
    },
    "AnimationTargetId": {
      "type_kind": {
        "val": "bevy_animation::AnimationTargetId"
      },
      "is_static": true
    },
    "MeshMorphWeights": {
      "type_kind": {
        "val": "bevy_mesh::morph::MeshMorphWeights"
      },
      "is_static": true
    },
    "Projection": {
      "type_kind": {
        "val": "bevy_render::camera::projection::Projection"
      },
      "is_static": true
    },
    "DMat4": {
      "type_kind": {
        "val": "glam::DMat4"
      },
      "is_static": true
    },
    "Gamepad": {
      "type_kind": {
        "val": "bevy_input::gamepad::Gamepad"
      },
      "is_static": true
    },
    "Affine3": {
      "type_kind": {
        "val": "bevy_math::affine3::Affine3"
      },
      "is_static": true
    },
    "TimerMode": {
      "type_kind": {
        "val": "bevy_time::timer::TimerMode"
      },
      "is_static": true
    },
    "Display": {
      "type_kind": {
        "val": "bevy_ui::ui_node::Display"
      },
      "is_static": true
    },
    "SceneRoot": {
      "type_kind": {
        "val": "bevy_scene::components::SceneRoot"
      },
      "is_static": true
    },
    "VisibilityRange": {
      "type_kind": {
        "val": "bevy_render::view::visibility::range::VisibilityRange"
      },
      "is_static": true
    },
    "RenderLayers": {
      "type_kind": {
        "val": "bevy_render::view::visibility::render_layers::RenderLayers"
      },
      "is_static": true
    },
    "U8Vec4": {
      "type_kind": {
        "val": "glam::U8Vec4"
      },
      "is_static": true
    },
    "SyncToRenderWorld": {
      "type_kind": {
        "val": "bevy_render::sync_world::SyncToRenderWorld"
      },
      "is_static": true
    },
    "TextShadow": {
      "type_kind": {
        "val": "bevy_ui::ui_node::TextShadow"
      },
      "is_static": true
    },
    "CubemapVisibleEntities": {
      "type_kind": {
        "val": "bevy_pbr::components::CubemapVisibleEntities"
      },
      "is_static": true
    },
    "PointerPress": {
      "type_kind": {
        "val": "bevy_picking::pointer::PointerPress"
      },
      "is_static": true
    },
    "I8Vec4": {
      "type_kind": {
        "val": "glam::I8Vec4"
      },
      "is_static": true
    },
    "AabbCast3d": {
      "type_kind": {
        "val": "bevy_math::bounding::raycast3d::AabbCast3d"
      },
      "is_static": true
    },
    "ConicalFrustumMeshBuilder": {
      "type_kind": {
        "val": "bevy_mesh::primitives::dim3::conical_frustum::ConicalFrustumMeshBuilder"
      },
      "is_static": true
    },
    "LineBreak": {
      "type_kind": {
        "val": "bevy_text::text::LineBreak"
      },
      "is_static": true
    },
    "Real": {
      "type_kind": {
        "val": "bevy_time::real::Real"
      },
      "is_static": true
    },
    "HitData": {
      "type_kind": {
        "val": "bevy_picking::backend::HitData"
      },
      "is_static": true
    },
    "WindowCloseRequested": {
      "type_kind": {
        "val": "bevy_window::event::WindowCloseRequested"
      },
      "is_static": true
    },
    "ScrollPosition": {
      "type_kind": {
        "val": "bevy_ui::ui_node::ScrollPosition"
      },
      "is_static": true
    },
    "UvChannel": {
      "type_kind": {
        "val": "bevy_pbr::pbr_material::UvChannel"
      },
      "is_static": true
    },
    "RayCast3d": {
      "type_kind": {
        "val": "bevy_math::bounding::raycast3d::RayCast3d"
      },
      "is_static": true
    },
    "GizmoLineConfig": {
      "type_kind": {
        "val": "bevy_gizmos::config::GizmoLineConfig"
      },
      "is_static": true
    },
    "OverflowClipBox": {
      "type_kind": {
        "val": "bevy_ui::ui_node::OverflowClipBox"
      },
      "is_static": true
    },
    "Aabb3d": {
      "type_kind": {
        "val": "bevy_math::bounding::bounded3d::Aabb3d"
      },
      "is_static": true
    },
    "Window": {
      "type_kind": {
        "val": "bevy_window::window::Window"
      },
      "is_static": true
    },
    "StandardMaterial": {
      "type_kind": {
        "val": "bevy_pbr::pbr_material::StandardMaterial"
      },
      "is_static": true
    },
    "InheritedVisibility": {
      "type_kind": {
        "val": "bevy_render::view::visibility::InheritedVisibility"
      },
      "is_static": true
    },
    "DirectionalLight": {
      "type_kind": {
        "val": "bevy_pbr::light::directional_light::DirectionalLight"
      },
      "is_static": true
    },
    "ScreenSpaceAmbientOcclusion": {
      "type_kind": {
        "val": "bevy_pbr::ssao::ScreenSpaceAmbientOcclusion"
      },
      "is_static": true
    },
    "TextureAtlasLayout": {
      "type_kind": {
        "val": "bevy_image::texture_atlas::TextureAtlasLayout"
      },
      "is_static": true
    },
    "Triangle3dMeshBuilder": {
      "type_kind": {
        "val": "bevy_mesh::primitives::dim3::triangle3d::Triangle3dMeshBuilder"
      },
      "is_static": true
    },
    "I16Vec3": {
      "type_kind": {
        "val": "glam::I16Vec3"
      },
      "is_static": true
    },
    "Smaa": {
      "type_kind": {
        "val": "bevy_core_pipeline::smaa::Smaa"
      },
      "is_static": true
    },
    "Oklcha": {
      "type_kind": {
        "val": "bevy_color::oklcha::Oklcha"
      },
      "is_static": true
    },
    "ShadowStyle": {
      "type_kind": {
        "val": "bevy_ui::ui_node::ShadowStyle"
      },
      "is_static": true
    },
    "GridTrackRepetition": {
      "type_kind": {
        "val": "bevy_ui::ui_node::GridTrackRepetition"
      },
      "is_static": true
    },
    "Aabb2d": {
      "type_kind": {
        "val": "bevy_math::bounding::bounded2d::Aabb2d"
      },
      "is_static": true
    },
    "CompositeAlphaMode": {
      "type_kind": {
        "val": "bevy_window::window::CompositeAlphaMode"
      },
      "is_static": true
    },
    "GamepadSettings": {
      "type_kind": {
        "val": "bevy_input::gamepad::GamepadSettings"
      },
      "is_static": true
    },
    "Camera3d": {
      "type_kind": {
        "val": "bevy_core_pipeline::core_3d::camera_3d::Camera3d"
      },
      "is_static": true
    },
    "Arc": {
      "type_kind": {
        "val": "bevy_platform::sync::Arc<bevy_asset::handle::StrongHandle>"
      },
      "is_static": true
    },
    "DVec3": {
      "type_kind": {
        "val": "glam::DVec3"
      },
      "is_static": true
    },
    "ClearColorConfig": {
      "type_kind": {
        "val": "bevy_render::camera::clear_color::ClearColorConfig"
      },
      "is_static": true
    },
    "FocusPolicy": {
      "type_kind": {
        "val": "bevy_ui::focus::FocusPolicy"
      },
      "is_static": true
    },
    "Segment2d": {
      "type_kind": {
        "val": "bevy_math::primitives::dim2::Segment2d"
      },
      "is_static": true
    },
    "Hwba": {
      "type_kind": {
        "val": "bevy_color::hwba::Hwba"
      },
      "is_static": true
    },
    "DMat3": {
      "type_kind": {
        "val": "glam::DMat3"
      },
      "is_static": true
    },
    "Identifier": {
      "type_kind": {
        "val": "bevy_ecs::identifier::Identifier"
      },
      "is_static": true
    },
    "RepeatedGridTrack": {
      "type_kind": {
        "val": "bevy_ui::ui_node::RepeatedGridTrack"
      },
      "is_static": true
    },
    "DynamicScriptFunctionMut": {
      "type_kind": {
        "val": "DynamicFunctionMut"
      },
      "is_static": true
    },
    "MotionVectorPrepass": {
      "type_kind": {
        "val": "bevy_core_pipeline::prepass::MotionVectorPrepass"
      },
      "is_static": true
    },
    "ButtonAxisSettings": {
      "type_kind": {
        "val": "bevy_input::gamepad::ButtonAxisSettings"
      },
      "is_static": true
    },
    "GltfMaterialExtras": {
      "type_kind": {
        "val": "bevy_gltf::assets::GltfMaterialExtras"
      },
      "is_static": true
    },
    "PointLight": {
      "type_kind": {
        "val": "bevy_pbr::light::point_light::PointLight"
      },
      "is_static": true
    },
    "OrthographicProjection": {
      "type_kind": {
        "val": "bevy_render::camera::projection::OrthographicProjection"
      },
      "is_static": true
    },
    "SystemCursorIcon": {
      "type_kind": {
        "val": "bevy_window::system_cursor::SystemCursorIcon"
      },
      "is_static": true
    },
    "LightProbe": {
      "type_kind": {
        "val": "bevy_pbr::light_probe::LightProbe"
      },
      "is_static": true
    },
    "U64Vec3": {
      "type_kind": {
        "val": "glam::U64Vec3"
      },
      "is_static": true
    },
    "BVec4": {
      "type_kind": {
        "val": "glam::BVec4"
      },
      "is_static": true
    },
    "Uuid": {
      "type_kind": {
        "val": "uuid::Uuid"
      },
      "is_static": true
    },
    "Mesh2d": {
      "type_kind": {
        "val": "bevy_render::mesh::components::Mesh2d"
      },
      "is_static": true
    },
    "ShaderStorageBuffer": {
      "type_kind": {
        "val": "bevy_render::storage::ShaderStorageBuffer"
      },
      "is_static": true
    },
    "OpaqueRendererMethod": {
      "type_kind": {
        "val": "bevy_pbr::material::OpaqueRendererMethod"
      },
      "is_static": true
    },
    "GamepadButtonStateChangedEvent": {
      "type_kind": {
        "val": "bevy_input::gamepad::GamepadButtonStateChangedEvent"
      },
      "is_static": true
    },
    "ClusteredDecal": {
      "type_kind": {
        "val": "bevy_pbr::decal::clustered::ClusteredDecal"
      },
      "is_static": true
    },
    "GltfMaterialName": {
      "type_kind": {
        "val": "bevy_gltf::assets::GltfMaterialName"
      },
      "is_static": true
    },
    "AabbCast2d": {
      "type_kind": {
        "val": "bevy_math::bounding::raycast2d::AabbCast2d"
      },
      "is_static": true
    },
    "ReflectableScheduleLabel": {
      "type_kind": {
        "val": "bevy_system_reflection::ReflectableScheduleLabel"
      },
      "is_static": true
    },
    "AnimationTarget": {
      "type_kind": {
        "val": "bevy_animation::AnimationTarget"
      },
      "is_static": true
    },
    "GridTrack": {
      "type_kind": {
        "val": "bevy_ui::ui_node::GridTrack"
      },
      "is_static": true
    },
    "ClearColor": {
      "type_kind": {
        "val": "bevy_render::camera::clear_color::ClearColor"
      },
      "is_static": true
    },
    "Plane3d": {
      "type_kind": {
        "val": "bevy_math::primitives::dim3::Plane3d"
      },
      "is_static": true
    },
    "PointerInputPlugin": {
      "type_kind": {
        "val": "bevy_picking::input::PointerInputPlugin"
      },
      "is_static": true
    },
    "Button": {
      "type_kind": {
        "val": "bevy_ui::widget::button::Button"
      },
      "is_static": true
    },
    "Capsule3d": {
      "type_kind": {
        "val": "bevy_math::primitives::dim3::Capsule3d"
      },
      "is_static": true
    },
    "WindowDestroyed": {
      "type_kind": {
        "val": "bevy_window::event::WindowDestroyed"
      },
      "is_static": true
    },
    "MouseWheel": {
      "type_kind": {
        "val": "bevy_input::mouse::MouseWheel"
      },
      "is_static": true
    },
    "JustifyText": {
      "type_kind": {
        "val": "bevy_text::text::JustifyText"
      },
      "is_static": true
    },
    "CircularSectorMeshBuilder": {
      "type_kind": {
        "val": "bevy_mesh::primitives::dim2::CircularSectorMeshBuilder"
      },
      "is_static": true
    },
    "BoundingSphereCast": {
      "type_kind": {
        "val": "bevy_math::bounding::raycast3d::BoundingSphereCast"
      },
      "is_static": true
    },
    "NativeKeyCode": {
      "type_kind": {
        "val": "bevy_input::keyboard::NativeKeyCode"
      },
      "is_static": true
    },
    "DMat2": {
      "type_kind": {
        "val": "glam::DMat2"
      },
      "is_static": true
    },
    "PositionType": {
      "type_kind": {
        "val": "bevy_ui::ui_node::PositionType"
      },
      "is_static": true
    },
    "IVec2": {
      "type_kind": {
        "val": "glam::IVec2"
      },
      "is_static": true
    },
    "AabbGizmoConfigGroup": {
      "type_kind": {
        "val": "bevy_gizmos::aabb::AabbGizmoConfigGroup"
      },
      "is_static": true
    },
    "ReflectSchedule": {
      "type_kind": {
        "val": "bevy_system_reflection::ReflectSchedule"
      },
      "is_static": true
    },
    "UiAntiAlias": {
      "type_kind": {
        "val": "bevy_ui::ui_node::UiAntiAlias"
      },
      "is_static": true
    },
    "DefaultQueryFilters": {
      "type_kind": {
        "val": "bevy_ecs::entity_disabling::DefaultQueryFilters"
      },
      "is_static": true
    },
    "FloatOrd": {
      "type_kind": {
        "val": "bevy_math::float_ord::FloatOrd"
      },
      "is_static": true
    },
    "Capsule2d": {
      "type_kind": {
        "val": "bevy_math::primitives::dim2::Capsule2d"
      },
      "is_static": true
    },
    "Anchor": {
      "type_kind": {
        "val": "bevy_sprite::sprite::Anchor"
      },
      "is_static": true
    },
    "ComponentTicks": {
      "type_kind": {
        "val": "bevy_ecs::component::ComponentTicks"
      },
      "is_static": true
    },
    "UiRect": {
      "type_kind": {
        "val": "bevy_ui::geometry::UiRect"
      },
      "is_static": true
    },
    "NormalPrepass": {
      "type_kind": {
        "val": "bevy_core_pipeline::prepass::NormalPrepass"
      },
      "is_static": true
    },
    "Torus": {
      "type_kind": {
        "val": "bevy_math::primitives::dim3::Torus"
      },
      "is_static": true
    },
    "NodeIndex": {
      "type_kind": {
        "val": "petgraph::graph::NodeIndex"
      },
      "is_static": true
    },
    "ScriptSystemBuilder": {
      "type_kind": {
        "val": "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder"
      },
      "is_static": true
    },
    "Interval": {
      "type_kind": {
        "val": "bevy_math::curve::interval::Interval"
      },
      "is_static": true
    },
    "Hsla": {
      "type_kind": {
        "val": "bevy_color::hsla::Hsla"
      },
      "is_static": true
    },
    "AtomicU64": {
      "type_kind": {
        "val": "core::sync::atomic::AtomicU64"
      },
      "is_static": true
    },
    "AtomicU8": {
      "type_kind": {
        "val": "core::sync::atomic::AtomicU8"
      },
      "is_static": true
    },
    "CompassQuadrant": {
      "type_kind": {
        "val": "bevy_math::compass::CompassQuadrant"
      },
      "is_static": true
    },
    "DepthPrepass": {
      "type_kind": {
        "val": "bevy_core_pipeline::prepass::DepthPrepass"
      },
      "is_static": true
    },
    "IVec3": {
      "type_kind": {
        "val": "glam::IVec3"
      },
      "is_static": true
    },
    "AlphaMode2d": {
      "type_kind": {
        "val": "bevy_sprite::mesh2d::material::AlphaMode2d"
      },
      "is_static": true
    },
    "SocketAddr": {
      "type_kind": {
        "val": "core::net::SocketAddr"
      },
      "is_static": true
    },
    "NativeKey": {
      "type_kind": {
        "val": "bevy_input::keyboard::NativeKey"
      },
      "is_static": true
    },
    "TextLayout": {
      "type_kind": {
        "val": "bevy_text::text::TextLayout"
      },
      "is_static": true
    },
    "DVec2": {
      "type_kind": {
        "val": "glam::DVec2"
      },
      "is_static": true
    },
    "Viewport": {
      "type_kind": {
        "val": "bevy_render::camera::camera::Viewport"
      },
      "is_static": true
    },
    "I64Vec3": {
      "type_kind": {
        "val": "glam::I64Vec3"
      },
      "is_static": true
    },
    "AnimationPlayer": {
      "type_kind": {
        "val": "bevy_animation::AnimationPlayer"
      },
      "is_static": true
    },
    "Cuboid": {
      "type_kind": {
        "val": "bevy_math::primitives::dim3::Cuboid"
      },
      "is_static": true
    },
    "WindowFocused": {
      "type_kind": {
        "val": "bevy_window::event::WindowFocused"
      },
      "is_static": true
    },
    "VisibleMeshEntities": {
      "type_kind": {
        "val": "bevy_pbr::components::VisibleMeshEntities"
      },
      "is_static": true
    },
    "Oklaba": {
      "type_kind": {
        "val": "bevy_color::oklaba::Oklaba"
      },
      "is_static": true
    },
    "Vec4": {
      "type_kind": {
        "val": "glam::Vec4"
      },
      "is_static": true
    },
    "ScriptAttachment": {
      "type_kind": {
        "val": "bevy_mod_scripting_core::script::context_key::ScriptAttachment"
      },
      "is_static": true
    },
    "BVec3": {
      "type_kind": {
        "val": "glam::BVec3"
      },
      "is_static": true
    },
    "WindowOccluded": {
      "type_kind": {
        "val": "bevy_window::event::WindowOccluded"
      },
      "is_static": true
    },
    "ScreenshotCaptured": {
      "type_kind": {
        "val": "bevy_render::view::window::screenshot::ScreenshotCaptured"
      },
      "is_static": true
    },
    "RawGamepadAxisChangedEvent": {
      "type_kind": {
        "val": "bevy_input::gamepad::RawGamepadAxisChangedEvent"
      },
      "is_static": true
    },
    "TextFont": {
      "type_kind": {
        "val": "bevy_text::text::TextFont"
      },
      "is_static": true
    },
    "MouseMotion": {
      "type_kind": {
        "val": "bevy_input::mouse::MouseMotion"
      },
      "is_static": true
    },
    "PointLightShadowMap": {
      "type_kind": {
        "val": "bevy_pbr::light::PointLightShadowMap"
      },
      "is_static": true
    },
    "TextNodeFlags": {
      "type_kind": {
        "val": "bevy_ui::widget::text::TextNodeFlags"
      },
      "is_static": true
    },
    "SpotLight": {
      "type_kind": {
        "val": "bevy_pbr::light::spot_light::SpotLight"
      },
      "is_static": true
    },
    "Volume": {
      "type_kind": {
        "val": "bevy_audio::volume::Volume"
      },
      "is_static": true
    },
    "PinchGesture": {
      "type_kind": {
        "val": "bevy_input::gestures::PinchGesture"
      },
      "is_static": true
    },
    "Key": {
      "type_kind": {
        "val": "bevy_input::keyboard::Key"
      },
      "is_static": true
    },
    "Cone": {
      "type_kind": {
        "val": "bevy_math::primitives::dim3::Cone"
      },
      "is_static": true
    },
    "CircularSegmentMeshBuilder": {
      "type_kind": {
        "val": "bevy_mesh::primitives::dim2::CircularSegmentMeshBuilder"
      },
      "is_static": true
    },
    "OnRemove": {
      "type_kind": {
        "val": "bevy_ecs::world::component_constants::OnRemove"
      },
      "is_static": true
    },
    "Msaa": {
      "type_kind": {
        "val": "bevy_render::view::Msaa"
      },
      "is_static": true
    },
    "AtomicI8": {
      "type_kind": {
        "val": "core::sync::atomic::AtomicI8"
      },
      "is_static": true
    },
    "Monitor": {
      "type_kind": {
        "val": "bevy_window::monitor::Monitor"
      },
      "is_static": true
    },
    "GamepadButton": {
      "type_kind": {
        "val": "bevy_input::gamepad::GamepadButton"
      },
      "is_static": true
    },
    "TetrahedronMeshBuilder": {
      "type_kind": {
        "val": "bevy_mesh::primitives::dim3::tetrahedron::TetrahedronMeshBuilder"
      },
      "is_static": true
    },
    "WindowResized": {
      "type_kind": {
        "val": "bevy_window::event::WindowResized"
      },
      "is_static": true
    },
    "BVec2": {
      "type_kind": {
        "val": "glam::BVec2"
      },
      "is_static": true
    },
    "TextureAtlas": {
      "type_kind": {
        "val": "bevy_image::texture_atlas::TextureAtlas"
      },
      "is_static": true
    },
    "PlaybackSettings": {
      "type_kind": {
        "val": "bevy_audio::audio::PlaybackSettings"
      },
      "is_static": true
    },
    "AtomicI32": {
      "type_kind": {
        "val": "core::sync::atomic::AtomicI32"
      },
      "is_static": true
    },
    "WindowMode": {
      "type_kind": {
        "val": "bevy_window::window::WindowMode"
      },
      "is_static": true
    },
    "Dir3": {
      "type_kind": {
        "val": "bevy_math::direction::Dir3"
      },
      "is_static": true
    },
    "Mesh3d": {
      "type_kind": {
        "val": "bevy_render::mesh::components::Mesh3d"
      },
      "is_static": true
    },
    "BoxSizing": {
      "type_kind": {
        "val": "bevy_ui::ui_node::BoxSizing"
      },
      "is_static": true
    },
    "FlexWrap": {
      "type_kind": {
        "val": "bevy_ui::ui_node::FlexWrap"
      },
      "is_static": true
    },
    "ResolvedBorderRadius": {
      "type_kind": {
        "val": "bevy_ui::ui_node::ResolvedBorderRadius"
      },
      "is_static": true
    },
    "PerspectiveProjection": {
      "type_kind": {
        "val": "bevy_render::camera::projection::PerspectiveProjection"
      },
      "is_static": true
    },
    "WindowThemeChanged": {
      "type_kind": {
        "val": "bevy_window::event::WindowThemeChanged"
      },
      "is_static": true
    },
    "Mat2": {
      "type_kind": {
        "val": "glam::Mat2"
      },
      "is_static": true
    },
    "IRect": {
      "type_kind": {
        "val": "bevy_math::rects::irect::IRect"
      },
      "is_static": true
    },
    "GltfSceneExtras": {
      "type_kind": {
        "val": "bevy_gltf::assets::GltfSceneExtras"
      },
      "is_static": true
    },
    "ContrastAdaptiveSharpening": {
      "type_kind": {
        "val": "bevy_core_pipeline::contrast_adaptive_sharpening::ContrastAdaptiveSharpening"
      },
      "is_static": true
    },
    "CameraMainTextureUsages": {
      "type_kind": {
        "val": "bevy_render::camera::camera::CameraMainTextureUsages"
      },
      "is_static": true
    },
    "SphereKind": {
      "type_kind": {
        "val": "bevy_mesh::primitives::dim3::sphere::SphereKind"
      },
      "is_static": true
    },
    "AlphaMode": {
      "type_kind": {
        "val": "bevy_render::alpha::AlphaMode"
      },
      "is_static": true
    },
    "CubemapFrusta": {
      "type_kind": {
        "val": "bevy_render::primitives::CubemapFrusta"
      },
      "is_static": true
    },
    "ScalingMode": {
      "type_kind": {
        "val": "bevy_sprite::sprite::ScalingMode"
      },
      "is_static": true
    },
    "Exposure": {
      "type_kind": {
        "val": "bevy_render::camera::camera::Exposure"
      },
      "is_static": true
    },
    "SpritePickingCamera": {
      "type_kind": {
        "val": "bevy_sprite::picking_backend::SpritePickingCamera"
      },
      "is_static": true
    },
    "Transform": {
      "type_kind": {
        "val": "bevy_transform::components::transform::Transform"
      },
      "is_static": true
    },
    "i64": {
      "type_kind": {
        "val": "i64"
      },
      "is_static": true
    },
    "ScriptQueryBuilder": {
      "type_kind": {
        "val": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder"
      },
      "is_static": true
    },
    "UVec4": {
      "type_kind": {
        "val": "glam::UVec4"
      },
      "is_static": true
    },
    "ButtonState": {
      "type_kind": {
        "val": "bevy_input::ButtonState"
      },
      "is_static": true
    },
    "Hsva": {
      "type_kind": {
        "val": "bevy_color::hsva::Hsva"
      },
      "is_static": true
    },
    "WindowMoved": {
      "type_kind": {
        "val": "bevy_window::event::WindowMoved"
      },
      "is_static": true
    },
    "RegularPolygon": {
      "type_kind": {
        "val": "bevy_math::primitives::dim2::RegularPolygon"
      },
      "is_static": true
    },
    "ScriptValue": {
      "type_kind": {
        "val": "bevy_mod_scripting_core::bindings::script_value::ScriptValue"
      },
      "is_static": true
    },
    "CircleMeshBuilder": {
      "type_kind": {
        "val": "bevy_mesh::primitives::dim2::CircleMeshBuilder"
      },
      "is_static": true
    },
    "Lcha": {
      "type_kind": {
        "val": "bevy_color::lcha::Lcha"
      },
      "is_static": true
    },
    "CursorGrabMode": {
      "type_kind": {
        "val": "bevy_window::window::CursorGrabMode"
      },
      "is_static": true
    },
    "Duration": {
      "type_kind": {
        "val": "core::time::Duration"
      },
      "is_static": true
    },
    "AmbientLight": {
      "type_kind": {
        "val": "bevy_pbr::light::ambient_light::AmbientLight"
      },
      "is_static": true
    },
    "JustifyItems": {
      "type_kind": {
        "val": "bevy_ui::ui_node::JustifyItems"
      },
      "is_static": true
    },
    "AssetPath": {
      "type_kind": {
        "val": "bevy_asset::path::AssetPath"
      },
      "is_static": true
    },
    "EllipseMeshBuilder": {
      "type_kind": {
        "val": "bevy_mesh::primitives::dim2::EllipseMeshBuilder"
      },
      "is_static": true
    },
    "GamepadAxisChangedEvent": {
      "type_kind": {
        "val": "bevy_input::gamepad::GamepadAxisChangedEvent"
      },
      "is_static": true
    },
    "VisibleEntities": {
      "type_kind": {
        "val": "bevy_render::view::visibility::VisibleEntities"
      },
      "is_static": true
    },
    "SpatialListener": {
      "type_kind": {
        "val": "bevy_audio::audio::SpatialListener"
      },
      "is_static": true
    },
    "AnimationTransition": {
      "type_kind": {
        "val": "bevy_animation::transition::AnimationTransition"
      },
      "is_static": true
    },
    "MipBias": {
      "type_kind": {
        "val": "bevy_render::camera::camera::MipBias"
      },
      "is_static": true
    },
    "CascadesFrusta": {
      "type_kind": {
        "val": "bevy_render::primitives::CascadesFrusta"
      },
      "is_static": true
    },
    "RawGamepadButtonChangedEvent": {
      "type_kind": {
        "val": "bevy_input::gamepad::RawGamepadButtonChangedEvent"
      },
      "is_static": true
    },
    "MorphWeights": {
      "type_kind": {
        "val": "bevy_mesh::morph::MorphWeights"
      },
      "is_static": true
    },
    "Rect": {
      "type_kind": {
        "val": "bevy_math::rects::rect::Rect"
      },
      "is_static": true
    },
    "ScriptResourceRegistration": {
      "type_kind": {
        "val": "bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration"
      },
      "is_static": true
    },
    "Node": {
      "type_kind": {
        "val": "bevy_ui::ui_node::Node"
      },
      "is_static": true
    },
    "AxisSettings": {
      "type_kind": {
        "val": "bevy_input::gamepad::AxisSettings"
      },
      "is_static": true
    },
    "Vec3": {
      "type_kind": {
        "val": "glam::Vec3"
      },
      "is_static": true
    },
    "Overflow": {
      "type_kind": {
        "val": "bevy_ui::ui_node::Overflow"
      },
      "is_static": true
    },
    "AssetIndex": {
      "type_kind": {
        "val": "bevy_asset::assets::AssetIndex"
      },
      "is_static": true
    },
    "CascadeShadowConfig": {
      "type_kind": {
        "val": "bevy_pbr::light::CascadeShadowConfig"
      },
      "is_static": true
    },
    "GlobalVolume": {
      "type_kind": {
        "val": "bevy_audio::volume::GlobalVolume"
      },
      "is_static": true
    },
    "Fxaa": {
      "type_kind": {
        "val": "bevy_core_pipeline::fxaa::Fxaa"
      },
      "is_static": true
    },
    "Ray2d": {
      "type_kind": {
        "val": "bevy_math::ray::Ray2d"
      },
      "is_static": true
    },
    "UiTargetCamera": {
      "type_kind": {
        "val": "bevy_ui::ui_node::UiTargetCamera"
      },
      "is_static": true
    },
    "ComputedTextBlock": {
      "type_kind": {
        "val": "bevy_text::text::ComputedTextBlock"
      },
      "is_static": true
    },
    "AtomicIsize": {
      "type_kind": {
        "val": "core::sync::atomic::AtomicIsize"
      },
      "is_static": true
    },
    "TransformTreeChanged": {
      "type_kind": {
        "val": "bevy_transform::components::transform::TransformTreeChanged"
      },
      "is_static": true
    },
    "ScriptComponentRegistration": {
      "type_kind": {
        "val": "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration"
      },
      "is_static": true
    },
    "AtomicI64": {
      "type_kind": {
        "val": "core::sync::atomic::AtomicI64"
      },
      "is_static": true
    },
    "GlyphAtlasInfo": {
      "type_kind": {
        "val": "bevy_text::glyph::GlyphAtlasInfo"
      },
      "is_static": true
    },
    "CircularSector": {
      "type_kind": {
        "val": "bevy_math::primitives::dim2::CircularSector"
      },
      "is_static": true
    },
    "RayCast2d": {
      "type_kind": {
        "val": "bevy_math::bounding::raycast2d::RayCast2d"
      },
      "is_static": true
    },
    "Rot2": {
      "type_kind": {
        "val": "bevy_math::rotation2d::Rot2"
      },
      "is_static": true
    },
    "TextureSlicer": {
      "type_kind": {
        "val": "bevy_sprite::texture_slice::slicer::TextureSlicer"
      },
      "is_static": true
    },
    "Srgba": {
      "type_kind": {
        "val": "bevy_color::srgba::Srgba"
      },
      "is_static": true
    },
    "CustomCursor": {
      "type_kind": {
        "val": "bevy_winit::custom_cursor::CustomCursor"
      },
      "is_static": true
    },
    "DVec4": {
      "type_kind": {
        "val": "glam::DVec4"
      },
      "is_static": true
    },
    "Visibility": {
      "type_kind": {
        "val": "bevy_render::view::visibility::Visibility"
      },
      "is_static": true
    },
    "Camera2d": {
      "type_kind": {
        "val": "bevy_core_pipeline::core_2d::camera_2d::Camera2d"
      },
      "is_static": true
    },
    "Instant": {
      "type_kind": {
        "val": "bevy_platform::time::Instant"
      },
      "is_static": true
    },
    "CuboidMeshBuilder": {
      "type_kind": {
        "val": "bevy_mesh::primitives::dim3::cuboid::CuboidMeshBuilder"
      },
      "is_static": true
    },
    "NonZeroU16": {
      "type_kind": {
        "val": "core::num::NonZeroU16"
      },
      "is_static": true
    },
    "ActiveAnimation": {
      "type_kind": {
        "val": "bevy_animation::ActiveAnimation"
      },
      "is_static": true
    },
    "GizmoConfigStore": {
      "type_kind": {
        "val": "bevy_gizmos::config::GizmoConfigStore"
      },
      "is_static": true
    },
    "SpritePickingMode": {
      "type_kind": {
        "val": "bevy_sprite::picking_backend::SpritePickingMode"
      },
      "is_static": true
    },
    "BoundingSphere": {
      "type_kind": {
        "val": "bevy_math::bounding::bounded3d::BoundingSphere"
      },
      "is_static": true
    },
    "GamepadAxis": {
      "type_kind": {
        "val": "bevy_input::gamepad::GamepadAxis"
      },
      "is_static": true
    },
    "Mesh": {
      "type_kind": {
        "val": "bevy_mesh::mesh::Mesh"
      },
      "is_static": true
    },
    "ColorGradingGlobal": {
      "type_kind": {
        "val": "bevy_render::view::ColorGradingGlobal"
      },
      "is_static": true
    },
    "MonitorSelection": {
      "type_kind": {
        "val": "bevy_window::window::MonitorSelection"
      },
      "is_static": true
    },
    "isize": {
      "type_kind": {
        "val": "isize"
      },
      "is_static": true
    },
    "Cascades": {
      "type_kind": {
        "val": "bevy_pbr::light::Cascades"
      },
      "is_static": true
    },
    "FunctionCallContext": {
      "type_kind": {
        "val": "FunctionCallContext"
      },
      "is_static": true
    },
    "Isometry3d": {
      "type_kind": {
        "val": "bevy_math::isometry::Isometry3d"
      },
      "is_static": true
    },
    "Circle": {
      "type_kind": {
        "val": "bevy_math::primitives::dim2::Circle"
      },
      "is_static": true
    },
    "GridPlacement": {
      "type_kind": {
        "val": "bevy_ui::ui_node::GridPlacement"
      },
      "is_static": true
    },
    "FunctionArgInfo": {
      "type_kind": {
        "val": "bevy_mod_scripting_core::docgen::info::FunctionArgInfo"
      },
      "is_static": true
    },
    "SpriteImageMode": {
      "type_kind": {
        "val": "bevy_sprite::sprite::SpriteImageMode"
      },
      "is_static": true
    },
    "i128": {
      "type_kind": {
        "val": "i128"
      },
      "is_static": true
    },
    "RangeFull": {
      "type_kind": {
        "val": "core::ops::RangeFull"
      },
      "is_static": true
    },
    "LightGizmoColor": {
      "type_kind": {
        "val": "bevy_gizmos::light::LightGizmoColor"
      },
      "is_static": true
    },
    "Pickable": {
      "type_kind": {
        "val": "bevy_picking::Pickable"
      },
      "is_static": true
    },
    "OcclusionCulling": {
      "type_kind": {
        "val": "bevy_render::experimental::occlusion_culling::OcclusionCulling"
      },
      "is_static": true
    },
    "PointerInteraction": {
      "type_kind": {
        "val": "bevy_picking::pointer::PointerInteraction"
      },
      "is_static": true
    },
    "GridAutoFlow": {
      "type_kind": {
        "val": "bevy_ui::ui_node::GridAutoFlow"
      },
      "is_static": true
    },
    "ScriptTypeRegistration": {
      "type_kind": {
        "val": "bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration"
      },
      "is_static": true
    },
    "AnimationGraphHandle": {
      "type_kind": {
        "val": "bevy_animation::graph::AnimationGraphHandle"
      },
      "is_static": true
    },
    "RelativeCursorPosition": {
      "type_kind": {
        "val": "bevy_ui::focus::RelativeCursorPosition"
      },
      "is_static": true
    },
    "Disabled": {
      "type_kind": {
        "val": "bevy_ecs::entity_disabling::Disabled"
      },
      "is_static": true
    },
    "U16Vec3": {
      "type_kind": {
        "val": "glam::U16Vec3"
      },
      "is_static": true
    },
    "u32": {
      "type_kind": {
        "val": "u32"
      },
      "is_static": true
    },
    "ScriptQueryResult": {
      "type_kind": {
        "val": "bevy_mod_scripting_core::bindings::query::ScriptQueryResult"
      },
      "is_static": true
    },
    "CascadesVisibleEntities": {
      "type_kind": {
        "val": "bevy_pbr::components::CascadesVisibleEntities"
      },
      "is_static": true
    },
    "ColorGrading": {
      "type_kind": {
        "val": "bevy_render::view::ColorGrading"
      },
      "is_static": true
    },
    "Timer": {
      "type_kind": {
        "val": "bevy_time::timer::Timer"
      },
      "is_static": true
    },
    "RepeatAnimation": {
      "type_kind": {
        "val": "bevy_animation::RepeatAnimation"
      },
      "is_static": true
    },
    "GltfMeshExtras": {
      "type_kind": {
        "val": "bevy_gltf::assets::GltfMeshExtras"
      },
      "is_static": true
    },
    "usize": {
      "type_kind": {
        "val": "usize"
      },
      "is_static": true
    },
    "RenderTarget": {
      "type_kind": {
        "val": "bevy_render::camera::camera::RenderTarget"
      },
      "is_static": true
    },
    "WindowScaleFactorChanged": {
      "type_kind": {
        "val": "bevy_window::event::WindowScaleFactorChanged"
      },
      "is_static": true
    },
    "DAffine2": {
      "type_kind": {
        "val": "glam::DAffine2"
      },
      "is_static": true
    },
    "AnnulusMeshBuilder": {
      "type_kind": {
        "val": "bevy_mesh::primitives::dim2::AnnulusMeshBuilder"
      },
      "is_static": true
    },
    "Interaction": {
      "type_kind": {
        "val": "bevy_ui::focus::Interaction"
      },
      "is_static": true
    },
    "ForceTouch": {
      "type_kind": {
        "val": "bevy_input::touch::ForceTouch"
      },
      "is_static": true
    },
    "SpritePickingSettings": {
      "type_kind": {
        "val": "bevy_sprite::picking_backend::SpritePickingSettings"
      },
      "is_static": true
    },
    "InteropError": {
      "type_kind": {
        "val": "bevy_mod_scripting_core::error::InteropError"
      },
      "is_static": true
    },
    "WindowResolution": {
      "type_kind": {
        "val": "bevy_window::window::WindowResolution"
      },
      "is_static": true
    },
    "Val": {
      "type_kind": {
        "val": "bevy_ui::geometry::Val"
      },
      "is_static": true
    },
    "AccumulatedMouseScroll": {
      "type_kind": {
        "val": "bevy_input::mouse::AccumulatedMouseScroll"
      },
      "is_static": true
    },
    "WindowEvent": {
      "type_kind": {
        "val": "bevy_window::event::WindowEvent"
      },
      "is_static": true
    },
    "UiPickingSettings": {
      "type_kind": {
        "val": "bevy_ui::picking_backend::UiPickingSettings"
      },
      "is_static": true
    },
    "LineHeight": {
      "type_kind": {
        "val": "bevy_text::text::LineHeight"
      },
      "is_static": true
    },
    "ConicalFrustum": {
      "type_kind": {
        "val": "bevy_math::primitives::dim3::ConicalFrustum"
      },
      "is_static": true
    },
    "Sphere": {
      "type_kind": {
        "val": "bevy_math::primitives::dim3::Sphere"
      },
      "is_static": true
    },
    "NoFrustumCulling": {
      "type_kind": {
        "val": "bevy_render::view::visibility::NoFrustumCulling"
      },
      "is_static": true
    },
    "DepthOfFieldMode": {
      "type_kind": {
        "val": "bevy_core_pipeline::dof::DepthOfFieldMode"
      },
      "is_static": true
    },
    "Name": {
      "type_kind": {
        "val": "bevy_ecs::name::Name"
      },
      "is_static": true
    },
    "KeyboardInput": {
      "type_kind": {
        "val": "bevy_input::keyboard::KeyboardInput"
      },
      "is_static": true
    },
    "AppLifecycle": {
      "type_kind": {
        "val": "bevy_window::event::AppLifecycle"
      },
      "is_static": true
    },
    "PositionedGlyph": {
      "type_kind": {
        "val": "bevy_text::glyph::PositionedGlyph"
      },
      "is_static": true
    },
    "MouseScrollUnit": {
      "type_kind": {
        "val": "bevy_input::mouse::MouseScrollUnit"
      },
      "is_static": true
    },
    "char": {
      "type_kind": {
        "val": "char"
      },
      "is_static": true
    },
    "TouchInput": {
      "type_kind": {
        "val": "bevy_input::touch::TouchInput"
      },
      "is_static": true
    },
    "ShadowFilteringMethod": {
      "type_kind": {
        "val": "bevy_pbr::light::ShadowFilteringMethod"
      },
      "is_static": true
    },
    "EaseFunction": {
      "type_kind": {
        "val": "bevy_math::curve::easing::EaseFunction"
      },
      "is_static": true
    },
    "DefaultOpaqueRendererMethod": {
      "type_kind": {
        "val": "bevy_pbr::material::DefaultOpaqueRendererMethod"
      },
      "is_static": true
    },
    "ConeAnchor": {
      "type_kind": {
        "val": "bevy_mesh::primitives::dim3::cone::ConeAnchor"
      },
      "is_static": true
    },
    "u16": {
      "type_kind": {
        "val": "u16"
      },
      "is_static": true
    },
    "GamepadEvent": {
      "type_kind": {
        "val": "bevy_input::gamepad::GamepadEvent"
      },
      "is_static": true
    },
    "String": {
      "type_kind": {
        "val": "String"
      },
      "is_static": true
    },
    "Triangle2d": {
      "type_kind": {
        "val": "bevy_math::primitives::dim2::Triangle2d"
      },
      "is_static": true
    },
    "MouseButtonInput": {
      "type_kind": {
        "val": "bevy_input::mouse::MouseButtonInput"
      },
      "is_static": true
    },
    "SpatialScale": {
      "type_kind": {
        "val": "bevy_audio::audio::SpatialScale"
      },
      "is_static": true
    },
    "TextSpan": {
      "type_kind": {
        "val": "bevy_text::text::TextSpan"
      },
      "is_static": true
    },
    "MaxTrackSizingFunction": {
      "type_kind": {
        "val": "bevy_ui::ui_node::MaxTrackSizingFunction"
      },
      "is_static": true
    },
    "GamepadInput": {
      "type_kind": {
        "val": "bevy_input::gamepad::GamepadInput"
      },
      "is_static": true
    },
    "AtmosphereSettings": {
      "type_kind": {
        "val": "bevy_pbr::atmosphere::AtmosphereSettings"
      },
      "is_static": true
    },
    "CursorMoved": {
      "type_kind": {
        "val": "bevy_window::event::CursorMoved"
      },
      "is_static": true
    },
    "UiPickingCamera": {
      "type_kind": {
        "val": "bevy_ui::picking_backend::UiPickingCamera"
      },
      "is_static": true
    },
    "BorderRadius": {
      "type_kind": {
        "val": "bevy_ui::ui_node::BorderRadius"
      },
      "is_static": true
    },
    "BVec4A": {
      "type_kind": {
        "val": "glam::BVec4A"
      },
      "is_static": true
    },
    "ColorMaterial": {
      "type_kind": {
        "val": "bevy_sprite::mesh2d::color_material::ColorMaterial"
      },
      "is_static": true
    },
    "Tick": {
      "type_kind": {
        "val": "bevy_ecs::component::Tick"
      },
      "is_static": true
    },
    "GlobalsUniform": {
      "type_kind": {
        "val": "bevy_render::globals::GlobalsUniform"
      },
      "is_static": true
    },
    "OnReplace": {
      "type_kind": {
        "val": "bevy_ecs::world::component_constants::OnReplace"
      },
      "is_static": true
    },
    "PlaybackMode": {
      "type_kind": {
        "val": "bevy_audio::audio::PlaybackMode"
      },
      "is_static": true
    },
    "RhombusMeshBuilder": {
      "type_kind": {
        "val": "bevy_mesh::primitives::dim2::RhombusMeshBuilder"
      },
      "is_static": true
    },
    "Affine3A": {
      "type_kind": {
        "val": "glam::Affine3A"
      },
      "is_static": true
    },
    "Atmosphere": {
      "type_kind": {
        "val": "bevy_pbr::atmosphere::Atmosphere"
      },
      "is_static": true
    },
    "ClusterConfig": {
      "type_kind": {
        "val": "bevy_pbr::cluster::ClusterConfig"
      },
      "is_static": true
    },
    "DoubleTapGesture": {
      "type_kind": {
        "val": "bevy_input::gestures::DoubleTapGesture"
      },
      "is_static": true
    },
    "Stopwatch": {
      "type_kind": {
        "val": "bevy_time::stopwatch::Stopwatch"
      },
      "is_static": true
    },
    "AlignContent": {
      "type_kind": {
        "val": "bevy_ui::ui_node::AlignContent"
      },
      "is_static": true
    },
    "WindowTheme": {
      "type_kind": {
        "val": "bevy_window::window::WindowTheme"
      },
      "is_static": true
    },
    "PlaneMeshBuilder": {
      "type_kind": {
        "val": "bevy_mesh::primitives::dim3::plane::PlaneMeshBuilder"
      },
      "is_static": true
    },
    "Mat3A": {
      "type_kind": {
        "val": "glam::Mat3A"
      },
      "is_static": true
    },
    "SkinnedMesh": {
      "type_kind": {
        "val": "bevy_mesh::skinning::SkinnedMesh"
      },
      "is_static": true
    },
    "EntityHash": {
      "type_kind": {
        "val": "bevy_ecs::entity::hash::EntityHash"
      },
      "is_static": true
    },
    "PresentMode": {
      "type_kind": {
        "val": "bevy_window::window::PresentMode"
      },
      "is_static": true
    },
    "NotShadowReceiver": {
      "type_kind": {
        "val": "bevy_pbr::light::NotShadowReceiver"
      },
      "is_static": true
    },
    "UVec2": {
      "type_kind": {
        "val": "glam::UVec2"
      },
      "is_static": true
    },
    "JustifyContent": {
      "type_kind": {
        "val": "bevy_ui::ui_node::JustifyContent"
      },
      "is_static": true
    },
    "CursorEntered": {
      "type_kind": {
        "val": "bevy_window::event::CursorEntered"
      },
      "is_static": true
    },
    "Aabb": {
      "type_kind": {
        "val": "bevy_render::primitives::Aabb"
      },
      "is_static": true
    },
    "PickingInteraction": {
      "type_kind": {
        "val": "bevy_picking::hover::PickingInteraction"
      },
      "is_static": true
    },
    "PanGesture": {
      "type_kind": {
        "val": "bevy_input::gestures::PanGesture"
      },
      "is_static": true
    },
    "DefaultSpatialScale": {
      "type_kind": {
        "val": "bevy_audio::audio::DefaultSpatialScale"
      },
      "is_static": true
    },
    "Rhombus": {
      "type_kind": {
        "val": "bevy_math::primitives::dim2::Rhombus"
      },
      "is_static": true
    },
    "NodeImageMode": {
      "type_kind": {
        "val": "bevy_ui::widget::image::NodeImageMode"
      },
      "is_static": true
    },
    "WindowResizeConstraints": {
      "type_kind": {
        "val": "bevy_window::window::WindowResizeConstraints"
      },
      "is_static": true
    },
    "Cylinder": {
      "type_kind": {
        "val": "bevy_math::primitives::dim3::Cylinder"
      },
      "is_static": true
    },
    "script_asset": {
      "type_kind": {
        "val": "bevy_asset::handle::Handle<bevy_mod_scripting_core::asset::ScriptAsset>"
      },
      "is_static": false
    },
    "world": {
      "type_kind": {
        "val": "World"
      },
      "is_static": false
    },
    "entity": {
      "type_kind": {
        "val": "bevy_ecs::entity::Entity"
      },
      "is_static": false
    }
  },
  "types": {
    "World": {
      "identifier": "World",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::world::World",
      "documentation": "The ECS world containing all Components, Resources and Systems. Main point of interaction with a Bevy App.",
      "associated_functions": [
        "World::exit",
        "World::has_component",
        "World::remove_component",
        "World::register_new_component",
        "World::push_children",
        "World::get_resource",
        "World::despawn_descendants",
        "World::get_schedule_by_name",
        "World::get_type_by_name",
        "World::insert_children",
        "World::insert_component",
        "World::despawn_recursive",
        "World::spawn",
        "World::get_component",
        "World::has_resource",
        "World::has_entity",
        "World::get_children",
        "World::add_system",
        "World::add_default_component",
        "World::query",
        "World::despawn",
        "World::get_parent",
        "World::remove_resource"
      ],
      "layout": null,
      "generated": false,
      "insignificance": 499
    },
    "ReflectReference": {
      "identifier": "ReflectReference",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::bindings::reference::ReflectReference",
      "documentation": " A reference to an arbitrary reflected instance.\n\n The reference can point to either the ECS, or to the allocator.\n\n References are composed of two parts:\n - The base kind, which specifies where the reference points to\n - The path, which specifies how to access the value from the base.\n\n Bindings defined on this type, apply to ALL references.",
      "associated_functions": [
        "ReflectReference::display_ref",
        "ReflectReference::functions",
        "ReflectReference::clear",
        "ReflectReference::pop",
        "ReflectReference::map_get",
        "ReflectReference::len",
        "ReflectReference::insert",
        "ReflectReference::iter",
        "ReflectReference::display_value",
        "ReflectReference::push",
        "ReflectReference::remove",
        "ReflectReference::variant_name"
      ],
      "layout": null,
      "generated": false,
      "insignificance": 500
    },
    "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration": {
      "identifier": "ScriptComponentRegistration",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration",
      "documentation": " A reference to a component type's reflection registration.\n\n In general think of this as a handle to a type.\n\n Not to be confused with script registered dynamic components, although this can point to a script registered component.",
      "associated_functions": [
        "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration::short_name",
        "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration::type_name"
      ],
      "layout": {
        "kind": "Struct",
        "name": "ScriptComponentRegistration",
        "fields": [
          {
            "name": "registration",
            "type": "bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration"
          },
          {
            "name": "component_id",
            "type": "bevy_ecs::component::ComponentId"
          },
          {
            "name": "is_dynamic_script_component",
            "type": "bool"
          }
        ]
      },
      "generated": false,
      "insignificance": 500
    },
    "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder": {
      "identifier": "ScriptQueryBuilder",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder",
      "documentation": " The query builder is used to build ECS queries which retrieve spefific components filtered by specific conditions.\n\n For example:\n ```rust,ignore\n builder.component(componentA)\n     .component(componentB)\n     .with(componentC)\n     .without(componentD)  \n ```\n\n Will retrieve entities which:\n - Have componentA\n - Have componentB\n - Have componentC\n - Do not have componentD\n\n As well as references to components:\n - componentA\n - componentB",
      "associated_functions": [
        "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder::without",
        "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder::component",
        "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder::with",
        "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder::build"
      ],
      "layout": null,
      "generated": false,
      "insignificance": 500
    },
    "bevy_mod_scripting_core::bindings::query::ScriptQueryResult": {
      "identifier": "ScriptQueryResult",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::bindings::query::ScriptQueryResult",
      "documentation": " A result from a query.",
      "associated_functions": [
        "bevy_mod_scripting_core::bindings::query::ScriptQueryResult::entity",
        "bevy_mod_scripting_core::bindings::query::ScriptQueryResult::components"
      ],
      "layout": null,
      "generated": false,
      "insignificance": 500
    },
    "bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration": {
      "identifier": "ScriptResourceRegistration",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration",
      "documentation": " A reference to a resource type's reflection registration.\n\n In general think of this as a handle to a type.",
      "associated_functions": [
        "bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration::type_name",
        "bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration::short_name"
      ],
      "layout": {
        "kind": "Struct",
        "name": "ScriptResourceRegistration",
        "fields": [
          {
            "name": "registration",
            "type": "bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration"
          },
          {
            "name": "resource_id",
            "type": "bevy_ecs::component::ComponentId"
          }
        ]
      },
      "generated": false,
      "insignificance": 500
    },
    "bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration": {
      "identifier": "ScriptTypeRegistration",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration",
      "documentation": " A reference to a type which is not a `Resource` or `Component`.\n\n In general think of this as a handle to a type.",
      "associated_functions": [
        "bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration::type_name",
        "bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration::short_name"
      ],
      "layout": null,
      "generated": false,
      "insignificance": 500
    },
    "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder": {
      "identifier": "ScriptSystemBuilder",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder",
      "documentation": " A builder for systems living in scripts",
      "associated_functions": [
        "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder::query",
        "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder::after",
        "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder::exclusive",
        "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder::resource",
        "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder::before"
      ],
      "layout": null,
      "generated": false,
      "insignificance": 500
    },
    "bevy_mod_scripting_core::script::context_key::ScriptAttachment": {
      "identifier": "ScriptAttachment",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::script::context_key::ScriptAttachment",
      "documentation": " Specifies a unique attachment of a script. These attachments are mapped to [`ContextKey`]'s depending on the context policy used.",
      "associated_functions": [
        "bevy_mod_scripting_core::script::context_key::ScriptAttachment::new_entity_script",
        "bevy_mod_scripting_core::script::context_key::ScriptAttachment::new_static_script"
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "EntityScript",
          "fields": [
            {
              "type": "bevy_ecs::entity::Entity"
            },
            {
              "type": "bevy_asset::handle::Handle<bevy_mod_scripting_core::asset::ScriptAsset>"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "StaticScript",
          "fields": [
            {
              "type": "bevy_asset::handle::Handle<bevy_mod_scripting_core::asset::ScriptAsset>"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 500
    },
    "bevy_system_reflection::ReflectSchedule": {
      "identifier": "ReflectSchedule",
      "crate": "bevy_system_reflection",
      "path": "bevy_system_reflection::ReflectSchedule",
      "documentation": " A reflectable schedule.",
      "associated_functions": [
        "bevy_system_reflection::ReflectSchedule::systems",
        "bevy_system_reflection::ReflectSchedule::render_dot",
        "bevy_system_reflection::ReflectSchedule::get_system_by_name"
      ],
      "layout": {
        "kind": "Struct",
        "name": "ReflectSchedule",
        "fields": [
          {
            "name": "type_path",
            "type": "str"
          },
          {
            "name": "label",
            "type": "bevy_system_reflection::ReflectableScheduleLabel"
          }
        ]
      },
      "generated": false,
      "insignificance": 500
    },
    "bevy_system_reflection::ReflectSystem": {
      "identifier": "ReflectSystem",
      "crate": "bevy_system_reflection",
      "path": "bevy_system_reflection::ReflectSystem",
      "documentation": " A reflectable system.",
      "associated_functions": [
        "bevy_system_reflection::ReflectSystem::identifier",
        "bevy_system_reflection::ReflectSystem::path"
      ],
      "layout": null,
      "generated": false,
      "insignificance": 500
    },
    "bevy_asset::handle::Handle<bevy_mod_scripting_core::asset::ScriptAsset>": {
      "identifier": "Handle",
      "crate": "bevy_asset",
      "path": "bevy_asset::handle::Handle<bevy_mod_scripting_core::asset::ScriptAsset>",
      "generics": [
        {
          "type_id": "bevy_mod_scripting_core::asset::ScriptAsset",
          "name": "A"
        }
      ],
      "documentation": " A handle to a specific [`Asset`] of type `A`. Handles act as abstract \"references\" to\n assets, whose data are stored in the [`Assets<A>`](crate::prelude::Assets) resource,\n avoiding the need to store multiple copies of the same data.\n\n If a [`Handle`] is [`Handle::Strong`], the [`Asset`] will be kept\n alive until the [`Handle`] is dropped. If a [`Handle`] is [`Handle::Weak`], it does not necessarily reference a live [`Asset`],\n nor will it keep assets alive.\n\n Modifying a *handle* will change which existing asset is referenced, but modifying the *asset*\n (by mutating the [`Assets`](crate::prelude::Assets) resource) will change the asset for all handles referencing it.\n\n [`Handle`] can be cloned. If a [`Handle::Strong`] is cloned, the referenced [`Asset`] will not be freed until _all_ instances\n of the [`Handle`] are dropped.\n\n [`Handle::Strong`], via [`StrongHandle`] also provides access to useful [`Asset`] metadata, such as the [`AssetPath`] (if it exists).",
      "associated_functions": [
        "bevy_asset::handle::Handle<bevy_mod_scripting_core::asset::ScriptAsset>::asset_path"
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Strong",
          "fields": [
            {
              "type": "bevy_platform::sync::Arc<bevy_asset::handle::StrongHandle>"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Weak",
          "fields": [
            {
              "type": "bevy_asset::id::AssetId<bevy_mod_scripting_core::asset::ScriptAsset>"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 500
    },
    "bevy_ecs::component::ComponentId": {
      "identifier": "ComponentId",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::component::ComponentId",
      "documentation": " A value which uniquely identifies the type of a [`Component`] or [`Resource`] within a\n [`World`].\n\n Each time a new `Component` type is registered within a `World` using\n e.g. [`World::register_component`] or [`World::register_component_with_descriptor`]\n or a Resource with e.g. [`World::init_resource`],\n a corresponding `ComponentId` is created to track it.\n\n While the distinction between `ComponentId` and [`TypeId`] may seem superficial, breaking them\n into two separate but related concepts allows components to exist outside of Rust's type system.\n Each Rust type registered as a `Component` will have a corresponding `ComponentId`, but additional\n `ComponentId`s may exist in a `World` to track components which cannot be\n represented as Rust types for scripting or other advanced use-cases.\n\n A `ComponentId` is tightly coupled to its parent `World`. Attempting to use a `ComponentId` from\n one `World` to access the metadata of a `Component` in a different `World` is undefined behavior\n and must not be attempted.\n\n Given a type `T` which implements [`Component`], the `ComponentId` for `T` can be retrieved\n from a `World` using [`World::component_id()`] or via [`Components::component_id()`]. Access\n to the `ComponentId` for a [`Resource`] is available via [`Components::resource_id()`].",
      "associated_functions": [
        "bevy_ecs::component::ComponentId::clone",
        "bevy_ecs::component::ComponentId::new",
        "bevy_ecs::component::ComponentId::index",
        "bevy_ecs::component::ComponentId::eq",
        "bevy_ecs::component::ComponentId::assert_receiver_is_total_eq"
      ],
      "layout": {
        "kind": "TupleStruct",
        "name": "ComponentId",
        "fields": [
          {
            "type": "usize"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_ecs::component::ComponentTicks": {
      "identifier": "ComponentTicks",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::component::ComponentTicks",
      "documentation": " Records when a component or resource was added and when it was last mutably dereferenced (or added).",
      "associated_functions": [
        "bevy_ecs::component::ComponentTicks::new",
        "bevy_ecs::component::ComponentTicks::is_added",
        "bevy_ecs::component::ComponentTicks::set_changed",
        "bevy_ecs::component::ComponentTicks::clone",
        "bevy_ecs::component::ComponentTicks::is_changed"
      ],
      "layout": {
        "kind": "Struct",
        "name": "ComponentTicks",
        "fields": [
          {
            "name": "added",
            "type": "bevy_ecs::component::Tick"
          },
          {
            "name": "changed",
            "type": "bevy_ecs::component::Tick"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_ecs::component::Tick": {
      "identifier": "Tick",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::component::Tick",
      "documentation": " A value that tracks when a system ran relative to other systems.\n This is used to power change detection.\n\n *Note* that a system that hasn't been run yet has a `Tick` of 0.",
      "associated_functions": [
        "bevy_ecs::component::Tick::eq",
        "bevy_ecs::component::Tick::get",
        "bevy_ecs::component::Tick::is_newer_than",
        "bevy_ecs::component::Tick::set",
        "bevy_ecs::component::Tick::new",
        "bevy_ecs::component::Tick::assert_receiver_is_total_eq",
        "bevy_ecs::component::Tick::clone"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Tick",
        "fields": [
          {
            "name": "tick",
            "type": "u32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_ecs::entity::Entity": {
      "identifier": "Entity",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::entity::Entity",
      "documentation": " Lightweight identifier of an [entity](crate::entity).\n\n The identifier is implemented using a [generational index]: a combination of an index and a generation.\n This allows fast insertion after data removal in an array while minimizing loss of spatial locality.\n\n These identifiers are only valid on the [`World`] it's sourced from. Attempting to use an `Entity` to\n fetch entity components or metadata from a different world will either fail or return unexpected results.\n\n [generational index]: https://lucassardois.medium.com/generational-indices-guide-8e3c5f7fd594\n\n # Stability warning\n For all intents and purposes, `Entity` should be treated as an opaque identifier. The internal bit\n representation is liable to change from release to release as are the behaviors or performance\n characteristics of any of its trait implementations (i.e. `Ord`, `Hash`, etc.). This means that changes in\n `Entity`'s representation, though made readable through various functions on the type, are not considered\n breaking changes under [SemVer].\n\n In particular, directly serializing with `Serialize` and `Deserialize` make zero guarantee of long\n term wire format compatibility. Changes in behavior will cause serialized `Entity` values persisted\n to long term storage (i.e. disk, databases, etc.) will fail to deserialize upon being updated.\n\n # Usage\n\n This data type is returned by iterating a `Query` that has `Entity` as part of its query fetch type parameter ([learn more]).\n It can also be obtained by calling [`EntityCommands::id`] or [`EntityWorldMut::id`].\n\n ```\n # use bevy_ecs::prelude::*;\n # #[derive(Component)]\n # struct SomeComponent;\n fn setup(mut commands: Commands) {\n     // Calling `spawn` returns `EntityCommands`.\n     let entity = commands.spawn(SomeComponent).id();\n }\n\n fn exclusive_system(world: &mut World) {\n     // Calling `spawn` returns `EntityWorldMut`.\n     let entity = world.spawn(SomeComponent).id();\n }\n #\n # bevy_ecs::system::assert_is_system(setup);\n # bevy_ecs::system::assert_is_system(exclusive_system);\n ```\n\n It can be used to refer to a specific entity to apply [`EntityCommands`], or to call [`Query::get`] (or similar methods) to access its components.\n\n ```\n # use bevy_ecs::prelude::*;\n #\n # #[derive(Component)]\n # struct Expired;\n #\n fn dispose_expired_food(mut commands: Commands, query: Query<Entity, With<Expired>>) {\n     for food_entity in &query {\n         commands.entity(food_entity).despawn();\n     }\n }\n #\n # bevy_ecs::system::assert_is_system(dispose_expired_food);\n ```\n\n [learn more]: crate::system::Query#entity-id-access\n [`EntityCommands::id`]: crate::system::EntityCommands::id\n [`EntityWorldMut::id`]: crate::world::EntityWorldMut::id\n [`EntityCommands`]: crate::system::EntityCommands\n [`Query::get`]: crate::system::Query::get\n [`World`]: crate::world::World\n [SemVer]: https://semver.org/",
      "associated_functions": [
        "bevy_ecs::entity::Entity::to_bits",
        "bevy_ecs::entity::Entity::eq",
        "bevy_ecs::entity::Entity::index",
        "bevy_ecs::entity::Entity::from_raw",
        "bevy_ecs::entity::Entity::clone",
        "bevy_ecs::entity::Entity::generation",
        "bevy_ecs::entity::Entity::from_bits"
      ],
      "layout": null,
      "generated": true,
      "insignificance": 1000
    },
    "bevy_ecs::entity::hash::EntityHash": {
      "identifier": "EntityHash",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::entity::hash::EntityHash",
      "documentation": " A [`BuildHasher`] that results in a [`EntityHasher`].",
      "associated_functions": [
        "bevy_ecs::entity::hash::EntityHash::clone"
      ],
      "layout": {
        "kind": "Struct",
        "name": "EntityHash"
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_ecs::entity::hash_set::EntityHashSet": {
      "identifier": "EntityHashSet",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::entity::hash_set::EntityHashSet",
      "documentation": " A [`HashSet`] pre-configured to use [`EntityHash`] hashing.",
      "associated_functions": [
        "bevy_ecs::entity::hash_set::EntityHashSet::new",
        "bevy_ecs::entity::hash_set::EntityHashSet::clone",
        "bevy_ecs::entity::hash_set::EntityHashSet::eq",
        "bevy_ecs::entity::hash_set::EntityHashSet::with_capacity",
        "bevy_ecs::entity::hash_set::EntityHashSet::len",
        "bevy_ecs::entity::hash_set::EntityHashSet::is_empty",
        "bevy_ecs::entity::hash_set::EntityHashSet::assert_receiver_is_total_eq"
      ],
      "layout": {
        "kind": "TupleStruct",
        "name": "EntityHashSet",
        "fields": [
          {
            "type": "bevy_platform::collections::HashSet<bevy_ecs::entity::Entity, bevy_ecs::entity::hash::EntityHash>"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_ecs::entity_disabling::DefaultQueryFilters": {
      "identifier": "DefaultQueryFilters",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::entity_disabling::DefaultQueryFilters",
      "documentation": " Default query filters work by excluding entities with certain components from most queries.\n\n If a query does not explicitly mention a given disabling component, it will not include entities with that component.\n To be more precise, this checks if the query's [`FilteredAccess`] contains the component,\n and if it does not, adds a [`Without`](crate::prelude::Without) filter for that component to the query.\n\n This resource is initialized in the [`World`] whenever a new world is created,\n with the [`Disabled`] component as a disabling component.\n\n Note that you can remove default query filters by overwriting the [`DefaultQueryFilters`] resource.\n This can be useful as a last resort escape hatch, but is liable to break compatibility with other libraries.\n\n See the [module docs](crate::entity_disabling) for more info.\n\n\n # Warning\n\n Default query filters are a global setting that affects all queries in the [`World`],\n and incur a small performance cost for each query.\n\n They can cause significant interoperability issues within the ecosystem,\n as users must be aware of each disabling component in use.\n\n Think carefully about whether you need to use a new disabling component,\n and clearly communicate their presence in any libraries you publish.",
      "associated_functions": [
        "bevy_ecs::entity_disabling::DefaultQueryFilters::register_disabling_component",
        "bevy_ecs::entity_disabling::DefaultQueryFilters::empty"
      ],
      "layout": {
        "kind": "Struct",
        "name": "DefaultQueryFilters",
        "fields": [
          {
            "name": "disabling",
            "type": "smallvec::SmallVec<[bevy_ecs::component::ComponentId; 4]>"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_ecs::entity_disabling::Disabled": {
      "identifier": "Disabled",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::entity_disabling::Disabled",
      "documentation": " A marker component for disabled entities.\n\n Semantically, this component is used to mark entities that are temporarily disabled (typically for gameplay reasons),\n but will likely be re-enabled at some point.\n\n Like all disabling components, this only disables the entity itself,\n not its children or other entities that reference it.\n To disable an entire tree of entities, use [`EntityCommands::insert_recursive`](crate::prelude::EntityCommands::insert_recursive).\n\n Every [`World`] has a default query filter that excludes entities with this component,\n registered in the [`DefaultQueryFilters`] resource.\n See [the module docs] for more info.\n\n [the module docs]: crate::entity_disabling",
      "associated_functions": [
        "bevy_ecs::entity_disabling::Disabled::clone"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Disabled"
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_ecs::hierarchy::ChildOf": {
      "identifier": "ChildOf",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::hierarchy::ChildOf",
      "documentation": " Stores the parent entity of this child entity with this component.\n\n This is a [`Relationship`] component, and creates the canonical\n \"parent / child\" hierarchy. This is the \"source of truth\" component, and it pairs with\n the [`Children`] [`RelationshipTarget`](crate::relationship::RelationshipTarget).\n\n This relationship should be used for things like:\n\n 1. Organizing entities in a scene\n 2. Propagating configuration or data inherited from a parent, such as \"visibility\" or \"world-space global transforms\".\n 3. Ensuring a hierarchy is despawned when an entity is despawned.\n\n [`ChildOf`] contains a single \"target\" [`Entity`]. When [`ChildOf`] is inserted on a \"source\" entity,\n the \"target\" entity will automatically (and immediately, via a component hook) have a [`Children`]\n component inserted, and the \"source\" entity will be added to that [`Children`] instance.\n\n If the [`ChildOf`] component is replaced with a different \"target\" entity, the old target's [`Children`]\n will be automatically (and immediately, via a component hook) be updated to reflect that change.\n\n Likewise, when the [`ChildOf`] component is removed, the \"source\" entity will be removed from the old\n target's [`Children`]. If this results in [`Children`] being empty, [`Children`] will be automatically removed.\n\n When a parent is despawned, all children (and their descendants) will _also_ be despawned.\n\n You can create parent-child relationships in a variety of ways. The most direct way is to insert a [`ChildOf`] component:\n\n ```\n # use bevy_ecs::prelude::*;\n # let mut world = World::new();\n let root = world.spawn_empty().id();\n let child1 = world.spawn(ChildOf(root)).id();\n let child2 = world.spawn(ChildOf(root)).id();\n let grandchild = world.spawn(ChildOf(child1)).id();\n\n assert_eq!(&**world.entity(root).get::<Children>().unwrap(), &[child1, child2]);\n assert_eq!(&**world.entity(child1).get::<Children>().unwrap(), &[grandchild]);\n\n world.entity_mut(child2).remove::<ChildOf>();\n assert_eq!(&**world.entity(root).get::<Children>().unwrap(), &[child1]);\n\n world.entity_mut(root).despawn();\n assert!(world.get_entity(root).is_err());\n assert!(world.get_entity(child1).is_err());\n assert!(world.get_entity(grandchild).is_err());\n ```\n\n However if you are spawning many children, you might want to use the [`EntityWorldMut::with_children`] helper instead:\n\n ```\n # use bevy_ecs::prelude::*;\n # let mut world = World::new();\n let mut child1 = Entity::PLACEHOLDER;\n let mut child2 = Entity::PLACEHOLDER;\n let mut grandchild = Entity::PLACEHOLDER;\n let root = world.spawn_empty().with_children(|p| {\n     child1 = p.spawn_empty().with_children(|p| {\n         grandchild = p.spawn_empty().id();\n     }).id();\n     child2 = p.spawn_empty().id();\n }).id();\n\n assert_eq!(&**world.entity(root).get::<Children>().unwrap(), &[child1, child2]);\n assert_eq!(&**world.entity(child1).get::<Children>().unwrap(), &[grandchild]);\n ```\n\n [`Relationship`]: crate::relationship::Relationship",
      "associated_functions": [
        "bevy_ecs::hierarchy::ChildOf::eq",
        "bevy_ecs::hierarchy::ChildOf::get",
        "bevy_ecs::hierarchy::ChildOf::clone",
        "bevy_ecs::hierarchy::ChildOf::assert_receiver_is_total_eq",
        "bevy_ecs::hierarchy::ChildOf::parent"
      ],
      "layout": {
        "kind": "TupleStruct",
        "name": "ChildOf",
        "fields": [
          {
            "type": "bevy_ecs::entity::Entity"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_ecs::hierarchy::Children": {
      "identifier": "Children",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::hierarchy::Children",
      "documentation": " Tracks which entities are children of this parent entity.\n\n A [`RelationshipTarget`] collection component that is populated\n with entities that \"target\" this entity with the [`ChildOf`] [`Relationship`] component.\n\n Together, these components form the \"canonical parent-child hierarchy\". See the [`ChildOf`] component for the full\n description of this relationship and instructions on how to use it.\n\n # Usage\n\n Like all [`RelationshipTarget`] components, this data should not be directly manipulated to avoid desynchronization.\n Instead, modify the [`ChildOf`] components on the \"source\" entities.\n\n To access the children of an entity, you can iterate over the [`Children`] component,\n using the [`IntoIterator`] trait.\n For more complex access patterns, see the [`RelationshipTarget`] trait.\n\n [`Relationship`]: crate::relationship::Relationship\n [`RelationshipTarget`]: crate::relationship::RelationshipTarget",
      "associated_functions": [
        "bevy_ecs::hierarchy::Children::eq",
        "bevy_ecs::hierarchy::Children::swap",
        "bevy_ecs::hierarchy::Children::assert_receiver_is_total_eq"
      ],
      "layout": {
        "kind": "TupleStruct",
        "name": "Children",
        "fields": [
          {
            "type": "alloc::vec::Vec<bevy_ecs::entity::Entity>"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_ecs::identifier::Identifier": {
      "identifier": "Identifier",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::identifier::Identifier",
      "documentation": " A unified identifier for all entity and similar IDs.\n\n Has the same size as a `u64` integer, but the layout is split between a 32-bit low\n segment, a 31-bit high segment, and the significant bit reserved as type flags to denote\n entity kinds.",
      "associated_functions": [
        "bevy_ecs::identifier::Identifier::to_bits",
        "bevy_ecs::identifier::Identifier::from_bits",
        "bevy_ecs::identifier::Identifier::masked_high",
        "bevy_ecs::identifier::Identifier::clone",
        "bevy_ecs::identifier::Identifier::eq",
        "bevy_ecs::identifier::Identifier::low"
      ],
      "layout": null,
      "generated": true,
      "insignificance": 1000
    },
    "bevy_ecs::name::Name": {
      "identifier": "Name",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::name::Name",
      "documentation": " Component used to identify an entity. Stores a hash for faster comparisons.\n\n The hash is eagerly re-computed upon each update to the name.\n\n [`Name`] should not be treated as a globally unique identifier for entities,\n as multiple entities can have the same name.  [`Entity`] should be\n used instead as the default unique identifier.",
      "associated_functions": [
        "bevy_ecs::name::Name::eq",
        "bevy_ecs::name::Name::clone"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Name",
        "fields": [
          {
            "name": "hash",
            "type": "u64"
          },
          {
            "name": "name",
            "type": "alloc::borrow::Cow<str>"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_ecs::removal_detection::RemovedComponentEntity": {
      "identifier": "RemovedComponentEntity",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::removal_detection::RemovedComponentEntity",
      "documentation": " Wrapper around [`Entity`] for [`RemovedComponents`].\n Internally, `RemovedComponents` uses these as an `Events<RemovedComponentEntity>`.",
      "associated_functions": [
        "bevy_ecs::removal_detection::RemovedComponentEntity::clone"
      ],
      "layout": {
        "kind": "TupleStruct",
        "name": "RemovedComponentEntity",
        "fields": [
          {
            "type": "bevy_ecs::entity::Entity"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::ButtonState": {
      "identifier": "ButtonState",
      "crate": "bevy_input",
      "path": "bevy_input::ButtonState",
      "documentation": " The current \"press\" state of an element",
      "associated_functions": [
        "bevy_input::ButtonState::eq",
        "bevy_input::ButtonState::assert_receiver_is_total_eq",
        "bevy_input::ButtonState::clone",
        "bevy_input::ButtonState::is_pressed"
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "Pressed"
        },
        {
          "kind": "Unit",
          "name": "Released"
        }
      ],
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::gamepad::AxisSettings": {
      "identifier": "AxisSettings",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::AxisSettings",
      "documentation": " Settings for a [`GamepadAxis`].\n\n It is used inside the [`GamepadSettings`] to define the sensitivity range and\n threshold for an axis.\n Values that are higher than `livezone_upperbound` will be rounded up to 1.0.\n Values that are lower than `livezone_lowerbound` will be rounded down to -1.0.\n Values that are in-between `deadzone_lowerbound` and `deadzone_upperbound` will be rounded to 0.0.\n Otherwise, values will be linearly rescaled to fit into the sensitivity range.\n For example, a value that is one fourth of the way from `deadzone_upperbound` to `livezone_upperbound` will be scaled to 0.25.\n\n The valid range is `[-1.0, 1.0]`.",
      "associated_functions": [
        "bevy_input::gamepad::AxisSettings::set_threshold",
        "bevy_input::gamepad::AxisSettings::clamp",
        "bevy_input::gamepad::AxisSettings::set_deadzone_lowerbound",
        "bevy_input::gamepad::AxisSettings::set_livezone_lowerbound",
        "bevy_input::gamepad::AxisSettings::livezone_lowerbound",
        "bevy_input::gamepad::AxisSettings::eq",
        "bevy_input::gamepad::AxisSettings::livezone_upperbound",
        "bevy_input::gamepad::AxisSettings::set_deadzone_upperbound",
        "bevy_input::gamepad::AxisSettings::deadzone_upperbound",
        "bevy_input::gamepad::AxisSettings::set_livezone_upperbound",
        "bevy_input::gamepad::AxisSettings::deadzone_lowerbound",
        "bevy_input::gamepad::AxisSettings::threshold",
        "bevy_input::gamepad::AxisSettings::clone"
      ],
      "layout": {
        "kind": "Struct",
        "name": "AxisSettings",
        "fields": [
          {
            "name": "livezone_upperbound",
            "type": "f32"
          },
          {
            "name": "deadzone_upperbound",
            "type": "f32"
          },
          {
            "name": "deadzone_lowerbound",
            "type": "f32"
          },
          {
            "name": "livezone_lowerbound",
            "type": "f32"
          },
          {
            "name": "threshold",
            "type": "f32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::gamepad::ButtonAxisSettings": {
      "identifier": "ButtonAxisSettings",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::ButtonAxisSettings",
      "documentation": " Settings for a [`GamepadButton`].\n\n It is used inside the [`GamepadSettings`] to define the sensitivity range and\n threshold for a button axis.\n\n ## Logic\n\n - Values that are higher than or equal to `high` will be rounded to 1.0.\n - Values that are lower than or equal to `low` will be rounded to 0.0.\n - Otherwise, values will not be rounded.\n\n The valid range is from 0.0 to 1.0, inclusive.",
      "associated_functions": [
        "bevy_input::gamepad::ButtonAxisSettings::clone"
      ],
      "layout": {
        "kind": "Struct",
        "name": "ButtonAxisSettings",
        "fields": [
          {
            "name": "high",
            "type": "f32"
          },
          {
            "name": "low",
            "type": "f32"
          },
          {
            "name": "threshold",
            "type": "f32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::gamepad::ButtonSettings": {
      "identifier": "ButtonSettings",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::ButtonSettings",
      "documentation": " Manages settings for gamepad buttons.\n\n It is used inside [`GamepadSettings`] to define the threshold for a [`GamepadButton`]\n to be considered pressed or released. A button is considered pressed if the `press_threshold`\n value is surpassed and released if the `release_threshold` value is undercut.\n\n Allowed values: `0.0 <= ``release_threshold`` <= ``press_threshold`` <= 1.0`",
      "associated_functions": [
        "bevy_input::gamepad::ButtonSettings::is_pressed",
        "bevy_input::gamepad::ButtonSettings::clone",
        "bevy_input::gamepad::ButtonSettings::set_press_threshold",
        "bevy_input::gamepad::ButtonSettings::set_release_threshold",
        "bevy_input::gamepad::ButtonSettings::press_threshold",
        "bevy_input::gamepad::ButtonSettings::eq",
        "bevy_input::gamepad::ButtonSettings::is_released",
        "bevy_input::gamepad::ButtonSettings::release_threshold"
      ],
      "layout": {
        "kind": "Struct",
        "name": "ButtonSettings",
        "fields": [
          {
            "name": "press_threshold",
            "type": "f32"
          },
          {
            "name": "release_threshold",
            "type": "f32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::gamepad::Gamepad": {
      "identifier": "Gamepad",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::Gamepad",
      "documentation": " Stores a connected gamepad's metadata such as the name and its [`GamepadButton`] and [`GamepadAxis`].\n\n An entity with this component is spawned automatically after [`GamepadConnectionEvent`]\n and updated by [`gamepad_event_processing_system`].\n\n See also [`GamepadSettings`] for configuration.\n\n # Examples\n\n ```\n # use bevy_input::gamepad::{Gamepad, GamepadAxis, GamepadButton};\n # use bevy_ecs::system::Query;\n # use bevy_ecs::name::Name;\n #\n fn gamepad_usage_system(gamepads: Query<(&Name, &Gamepad)>) {\n     for (name, gamepad) in &gamepads {\n         println!(\"{name}\");\n\n         if gamepad.just_pressed(GamepadButton::North) {\n             println!(\"{} just pressed North\", name)\n         }\n\n         if let Some(left_stick_x) = gamepad.get(GamepadAxis::LeftStickX)  {\n             println!(\"left stick X: {}\", left_stick_x)\n         }\n     }\n }\n ```",
      "associated_functions": [
        "bevy_input::gamepad::Gamepad::product_id",
        "bevy_input::gamepad::Gamepad::dpad",
        "bevy_input::gamepad::Gamepad::right_stick",
        "bevy_input::gamepad::Gamepad::just_pressed",
        "bevy_input::gamepad::Gamepad::just_released",
        "bevy_input::gamepad::Gamepad::pressed",
        "bevy_input::gamepad::Gamepad::vendor_id",
        "bevy_input::gamepad::Gamepad::left_stick"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Gamepad",
        "fields": [
          {
            "name": "vendor_id",
            "type": "core::option::Option<u16>"
          },
          {
            "name": "product_id",
            "type": "core::option::Option<u16>"
          },
          {
            "name": "digital",
            "type": "bevy_input::button_input::ButtonInput<bevy_input::gamepad::GamepadButton>"
          },
          {
            "name": "analog",
            "type": "bevy_input::axis::Axis<bevy_input::gamepad::GamepadInput>"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::gamepad::GamepadAxis": {
      "identifier": "GamepadAxis",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::GamepadAxis",
      "documentation": " Represents gamepad input types that are mapped in the range [-1.0, 1.0].\n\n ## Usage\n\n This is used to determine which axis has changed its value when receiving a\n gamepad axis event. It is also used in the [`Gamepad`] component.",
      "associated_functions": [
        "bevy_input::gamepad::GamepadAxis::eq",
        "bevy_input::gamepad::GamepadAxis::clone",
        "bevy_input::gamepad::GamepadAxis::assert_receiver_is_total_eq"
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "LeftStickX"
        },
        {
          "kind": "Unit",
          "name": "LeftStickY"
        },
        {
          "kind": "Unit",
          "name": "LeftZ"
        },
        {
          "kind": "Unit",
          "name": "RightStickX"
        },
        {
          "kind": "Unit",
          "name": "RightStickY"
        },
        {
          "kind": "Unit",
          "name": "RightZ"
        },
        {
          "kind": "TupleStruct",
          "name": "Other",
          "fields": [
            {
              "type": "u8"
            }
          ]
        }
      ],
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::gamepad::GamepadAxisChangedEvent": {
      "identifier": "GamepadAxisChangedEvent",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::GamepadAxisChangedEvent",
      "documentation": " [`GamepadAxis`] event triggered by an analog state change.",
      "associated_functions": [
        "bevy_input::gamepad::GamepadAxisChangedEvent::clone",
        "bevy_input::gamepad::GamepadAxisChangedEvent::new",
        "bevy_input::gamepad::GamepadAxisChangedEvent::eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "GamepadAxisChangedEvent",
        "fields": [
          {
            "name": "entity",
            "type": "bevy_ecs::entity::Entity"
          },
          {
            "name": "axis",
            "type": "bevy_input::gamepad::GamepadAxis"
          },
          {
            "name": "value",
            "type": "f32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::gamepad::GamepadButton": {
      "identifier": "GamepadButton",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::GamepadButton",
      "documentation": " Represents gamepad input types that are mapped in the range [0.0, 1.0].\n\n ## Usage\n\n This is used to determine which button has changed its value when receiving gamepad button events.\n It is also used in the [`Gamepad`] component.",
      "associated_functions": [
        "bevy_input::gamepad::GamepadButton::eq",
        "bevy_input::gamepad::GamepadButton::assert_receiver_is_total_eq",
        "bevy_input::gamepad::GamepadButton::clone"
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "South"
        },
        {
          "kind": "Unit",
          "name": "East"
        },
        {
          "kind": "Unit",
          "name": "North"
        },
        {
          "kind": "Unit",
          "name": "West"
        },
        {
          "kind": "Unit",
          "name": "C"
        },
        {
          "kind": "Unit",
          "name": "Z"
        },
        {
          "kind": "Unit",
          "name": "LeftTrigger"
        },
        {
          "kind": "Unit",
          "name": "LeftTrigger2"
        },
        {
          "kind": "Unit",
          "name": "RightTrigger"
        },
        {
          "kind": "Unit",
          "name": "RightTrigger2"
        },
        {
          "kind": "Unit",
          "name": "Select"
        },
        {
          "kind": "Unit",
          "name": "Start"
        },
        {
          "kind": "Unit",
          "name": "Mode"
        },
        {
          "kind": "Unit",
          "name": "LeftThumb"
        },
        {
          "kind": "Unit",
          "name": "RightThumb"
        },
        {
          "kind": "Unit",
          "name": "DPadUp"
        },
        {
          "kind": "Unit",
          "name": "DPadDown"
        },
        {
          "kind": "Unit",
          "name": "DPadLeft"
        },
        {
          "kind": "Unit",
          "name": "DPadRight"
        },
        {
          "kind": "TupleStruct",
          "name": "Other",
          "fields": [
            {
              "type": "u8"
            }
          ]
        }
      ],
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::gamepad::GamepadButtonChangedEvent": {
      "identifier": "GamepadButtonChangedEvent",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::GamepadButtonChangedEvent",
      "documentation": " [`GamepadButton`] event triggered by an analog state change.",
      "associated_functions": [
        "bevy_input::gamepad::GamepadButtonChangedEvent::eq",
        "bevy_input::gamepad::GamepadButtonChangedEvent::clone",
        "bevy_input::gamepad::GamepadButtonChangedEvent::new"
      ],
      "layout": {
        "kind": "Struct",
        "name": "GamepadButtonChangedEvent",
        "fields": [
          {
            "name": "entity",
            "type": "bevy_ecs::entity::Entity"
          },
          {
            "name": "button",
            "type": "bevy_input::gamepad::GamepadButton"
          },
          {
            "name": "state",
            "type": "bevy_input::ButtonState"
          },
          {
            "name": "value",
            "type": "f32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::gamepad::GamepadButtonStateChangedEvent": {
      "identifier": "GamepadButtonStateChangedEvent",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::GamepadButtonStateChangedEvent",
      "documentation": " [`GamepadButton`] event triggered by a digital state change.",
      "associated_functions": [
        "bevy_input::gamepad::GamepadButtonStateChangedEvent::clone",
        "bevy_input::gamepad::GamepadButtonStateChangedEvent::assert_receiver_is_total_eq",
        "bevy_input::gamepad::GamepadButtonStateChangedEvent::new",
        "bevy_input::gamepad::GamepadButtonStateChangedEvent::eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "GamepadButtonStateChangedEvent",
        "fields": [
          {
            "name": "entity",
            "type": "bevy_ecs::entity::Entity"
          },
          {
            "name": "button",
            "type": "bevy_input::gamepad::GamepadButton"
          },
          {
            "name": "state",
            "type": "bevy_input::ButtonState"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::gamepad::GamepadConnection": {
      "identifier": "GamepadConnection",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::GamepadConnection",
      "documentation": " The connection status of a gamepad.",
      "associated_functions": [
        "bevy_input::gamepad::GamepadConnection::eq",
        "bevy_input::gamepad::GamepadConnection::clone"
      ],
      "layout": [
        {
          "kind": "Struct",
          "name": "Connected",
          "fields": [
            {
              "name": "name",
              "type": "String"
            },
            {
              "name": "vendor_id",
              "type": "core::option::Option<u16>"
            },
            {
              "name": "product_id",
              "type": "core::option::Option<u16>"
            }
          ]
        },
        {
          "kind": "Unit",
          "name": "Disconnected"
        }
      ],
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::gamepad::GamepadConnectionEvent": {
      "identifier": "GamepadConnectionEvent",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::GamepadConnectionEvent",
      "documentation": " A Gamepad connection event. Created when a connection to a gamepad\n is established and when a gamepad is disconnected.",
      "associated_functions": [
        "bevy_input::gamepad::GamepadConnectionEvent::new",
        "bevy_input::gamepad::GamepadConnectionEvent::eq",
        "bevy_input::gamepad::GamepadConnectionEvent::connected",
        "bevy_input::gamepad::GamepadConnectionEvent::clone",
        "bevy_input::gamepad::GamepadConnectionEvent::disconnected"
      ],
      "layout": {
        "kind": "Struct",
        "name": "GamepadConnectionEvent",
        "fields": [
          {
            "name": "gamepad",
            "type": "bevy_ecs::entity::Entity"
          },
          {
            "name": "connection",
            "type": "bevy_input::gamepad::GamepadConnection"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::gamepad::GamepadEvent": {
      "identifier": "GamepadEvent",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::GamepadEvent",
      "documentation": " A gamepad event.\n\n This event type is used over the [`GamepadConnectionEvent`],\n [`GamepadButtonChangedEvent`] and [`GamepadAxisChangedEvent`] when\n the in-frame relative ordering of events is important.\n\n This event is produced by `bevy_input`.",
      "associated_functions": [
        "bevy_input::gamepad::GamepadEvent::eq",
        "bevy_input::gamepad::GamepadEvent::clone"
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Connection",
          "fields": [
            {
              "type": "bevy_input::gamepad::GamepadConnectionEvent"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Button",
          "fields": [
            {
              "type": "bevy_input::gamepad::GamepadButtonChangedEvent"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Axis",
          "fields": [
            {
              "type": "bevy_input::gamepad::GamepadAxisChangedEvent"
            }
          ]
        }
      ],
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::gamepad::GamepadInput": {
      "identifier": "GamepadInput",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::GamepadInput",
      "documentation": " Encapsulation over [`GamepadAxis`] and [`GamepadButton`].",
      "associated_functions": [
        "bevy_input::gamepad::GamepadInput::assert_receiver_is_total_eq",
        "bevy_input::gamepad::GamepadInput::clone",
        "bevy_input::gamepad::GamepadInput::eq"
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Axis",
          "fields": [
            {
              "type": "bevy_input::gamepad::GamepadAxis"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Button",
          "fields": [
            {
              "type": "bevy_input::gamepad::GamepadButton"
            }
          ]
        }
      ],
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::gamepad::GamepadRumbleIntensity": {
      "identifier": "GamepadRumbleIntensity",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::GamepadRumbleIntensity",
      "documentation": " The intensity at which a gamepad's force-feedback motors may rumble.",
      "associated_functions": [
        "bevy_input::gamepad::GamepadRumbleIntensity::eq",
        "bevy_input::gamepad::GamepadRumbleIntensity::weak_motor",
        "bevy_input::gamepad::GamepadRumbleIntensity::clone",
        "bevy_input::gamepad::GamepadRumbleIntensity::strong_motor"
      ],
      "layout": {
        "kind": "Struct",
        "name": "GamepadRumbleIntensity",
        "fields": [
          {
            "name": "strong_motor",
            "type": "f32"
          },
          {
            "name": "weak_motor",
            "type": "f32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::gamepad::GamepadRumbleRequest": {
      "identifier": "GamepadRumbleRequest",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::GamepadRumbleRequest",
      "documentation": " An event that controls force-feedback rumbling of a [`Gamepad`] [`entity`](Entity).\n\n # Notes\n\n Does nothing if the gamepad or platform does not support rumble.\n\n # Example\n\n ```\n # use bevy_input::gamepad::{Gamepad, GamepadRumbleRequest, GamepadRumbleIntensity};\n # use bevy_ecs::prelude::{EventWriter, Res, Query, Entity, With};\n # use core::time::Duration;\n fn rumble_gamepad_system(\n     mut rumble_requests: EventWriter<GamepadRumbleRequest>,\n     gamepads: Query<Entity, With<Gamepad>>,\n ) {\n     for entity in gamepads.iter() {\n         rumble_requests.write(GamepadRumbleRequest::Add {\n             gamepad: entity,\n             intensity: GamepadRumbleIntensity::MAX,\n             duration: Duration::from_secs_f32(0.5),\n         });\n     }\n }\n ```",
      "associated_functions": [
        "bevy_input::gamepad::GamepadRumbleRequest::clone",
        "bevy_input::gamepad::GamepadRumbleRequest::gamepad"
      ],
      "layout": [
        {
          "kind": "Struct",
          "name": "Add",
          "fields": [
            {
              "name": "duration",
              "type": "core::time::Duration"
            },
            {
              "name": "intensity",
              "type": "bevy_input::gamepad::GamepadRumbleIntensity"
            },
            {
              "name": "gamepad",
              "type": "bevy_ecs::entity::Entity"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "Stop",
          "fields": [
            {
              "name": "gamepad",
              "type": "bevy_ecs::entity::Entity"
            }
          ]
        }
      ],
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::gamepad::GamepadSettings": {
      "identifier": "GamepadSettings",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::GamepadSettings",
      "documentation": " Gamepad settings component.\n\n ## Usage\n\n It is used to create a `bevy` component that stores the settings of [`GamepadButton`] and [`GamepadAxis`] in [`Gamepad`].\n If no user defined [`ButtonSettings`], [`AxisSettings`], or [`ButtonAxisSettings`]\n are defined, the default settings of each are used as a fallback accordingly.\n\n ## Note\n\n The [`GamepadSettings`] are used to determine when raw gamepad events\n should register. Events that don't meet the change thresholds defined in [`GamepadSettings`]\n will not register. To modify these settings, mutate the corresponding component.",
      "associated_functions": [
        "bevy_input::gamepad::GamepadSettings::clone"
      ],
      "layout": {
        "kind": "Struct",
        "name": "GamepadSettings",
        "fields": [
          {
            "name": "default_button_settings",
            "type": "bevy_input::gamepad::ButtonSettings"
          },
          {
            "name": "default_axis_settings",
            "type": "bevy_input::gamepad::AxisSettings"
          },
          {
            "name": "default_button_axis_settings",
            "type": "bevy_input::gamepad::ButtonAxisSettings"
          },
          {
            "name": "button_settings",
            "type": "bevy_platform::collections::HashMap<bevy_input::gamepad::GamepadButton, bevy_input::gamepad::ButtonSettings, bevy_platform::hash::FixedHasher>"
          },
          {
            "name": "axis_settings",
            "type": "bevy_platform::collections::HashMap<bevy_input::gamepad::GamepadAxis, bevy_input::gamepad::AxisSettings, bevy_platform::hash::FixedHasher>"
          },
          {
            "name": "button_axis_settings",
            "type": "bevy_platform::collections::HashMap<bevy_input::gamepad::GamepadButton, bevy_input::gamepad::ButtonAxisSettings, bevy_platform::hash::FixedHasher>"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::gamepad::RawGamepadAxisChangedEvent": {
      "identifier": "RawGamepadAxisChangedEvent",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::RawGamepadAxisChangedEvent",
      "documentation": " [`GamepadAxis`] changed event unfiltered by [`GamepadSettings`].",
      "associated_functions": [
        "bevy_input::gamepad::RawGamepadAxisChangedEvent::clone",
        "bevy_input::gamepad::RawGamepadAxisChangedEvent::eq",
        "bevy_input::gamepad::RawGamepadAxisChangedEvent::new"
      ],
      "layout": {
        "kind": "Struct",
        "name": "RawGamepadAxisChangedEvent",
        "fields": [
          {
            "name": "gamepad",
            "type": "bevy_ecs::entity::Entity"
          },
          {
            "name": "axis",
            "type": "bevy_input::gamepad::GamepadAxis"
          },
          {
            "name": "value",
            "type": "f32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::gamepad::RawGamepadButtonChangedEvent": {
      "identifier": "RawGamepadButtonChangedEvent",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::RawGamepadButtonChangedEvent",
      "documentation": " [`GamepadButton`] changed event unfiltered by [`GamepadSettings`].",
      "associated_functions": [
        "bevy_input::gamepad::RawGamepadButtonChangedEvent::clone",
        "bevy_input::gamepad::RawGamepadButtonChangedEvent::new",
        "bevy_input::gamepad::RawGamepadButtonChangedEvent::eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "RawGamepadButtonChangedEvent",
        "fields": [
          {
            "name": "gamepad",
            "type": "bevy_ecs::entity::Entity"
          },
          {
            "name": "button",
            "type": "bevy_input::gamepad::GamepadButton"
          },
          {
            "name": "value",
            "type": "f32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::gamepad::RawGamepadEvent": {
      "identifier": "RawGamepadEvent",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::RawGamepadEvent",
      "documentation": " A raw gamepad event.\n\n This event type is used over the [`GamepadConnectionEvent`],\n [`RawGamepadButtonChangedEvent`] and [`RawGamepadAxisChangedEvent`] when\n the in-frame relative ordering of events is important.\n\n This event type is used by `bevy_input` to feed its components.",
      "associated_functions": [
        "bevy_input::gamepad::RawGamepadEvent::clone",
        "bevy_input::gamepad::RawGamepadEvent::eq"
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Connection",
          "fields": [
            {
              "type": "bevy_input::gamepad::GamepadConnectionEvent"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Button",
          "fields": [
            {
              "type": "bevy_input::gamepad::RawGamepadButtonChangedEvent"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Axis",
          "fields": [
            {
              "type": "bevy_input::gamepad::RawGamepadAxisChangedEvent"
            }
          ]
        }
      ],
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::gestures::DoubleTapGesture": {
      "identifier": "DoubleTapGesture",
      "crate": "bevy_input",
      "path": "bevy_input::gestures::DoubleTapGesture",
      "documentation": " Double tap gesture.\n\n ## Platform-specific\n\n - Only available on **`macOS`** and **`iOS`**.\n - On **`iOS`**, must be enabled first",
      "associated_functions": [
        "bevy_input::gestures::DoubleTapGesture::clone",
        "bevy_input::gestures::DoubleTapGesture::eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "DoubleTapGesture"
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::gestures::PanGesture": {
      "identifier": "PanGesture",
      "crate": "bevy_input",
      "path": "bevy_input::gestures::PanGesture",
      "documentation": " Pan gesture.\n\n ## Platform-specific\n\n - On **`iOS`**, must be enabled first",
      "associated_functions": [
        "bevy_input::gestures::PanGesture::eq",
        "bevy_input::gestures::PanGesture::clone"
      ],
      "layout": {
        "kind": "TupleStruct",
        "name": "PanGesture",
        "fields": [
          {
            "type": "glam::Vec2"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::gestures::PinchGesture": {
      "identifier": "PinchGesture",
      "crate": "bevy_input",
      "path": "bevy_input::gestures::PinchGesture",
      "documentation": " Two-finger pinch gesture, often used for magnifications.\n\n Positive delta values indicate magnification (zooming in) and\n negative delta values indicate shrinking (zooming out).\n\n ## Platform-specific\n\n - Only available on **`macOS`** and **`iOS`**.\n - On **`iOS`**, must be enabled first",
      "associated_functions": [
        "bevy_input::gestures::PinchGesture::eq",
        "bevy_input::gestures::PinchGesture::clone"
      ],
      "layout": {
        "kind": "TupleStruct",
        "name": "PinchGesture",
        "fields": [
          {
            "type": "f32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::gestures::RotationGesture": {
      "identifier": "RotationGesture",
      "crate": "bevy_input",
      "path": "bevy_input::gestures::RotationGesture",
      "documentation": " Two-finger rotation gesture.\n\n Positive delta values indicate rotation counterclockwise and\n negative delta values indicate rotation clockwise.\n\n ## Platform-specific\n\n - Only available on **`macOS`** and **`iOS`**.\n - On **`iOS`**, must be enabled first",
      "associated_functions": [
        "bevy_input::gestures::RotationGesture::eq",
        "bevy_input::gestures::RotationGesture::clone"
      ],
      "layout": {
        "kind": "TupleStruct",
        "name": "RotationGesture",
        "fields": [
          {
            "type": "f32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::keyboard::Key": {
      "identifier": "Key",
      "crate": "bevy_input",
      "path": "bevy_input::keyboard::Key",
      "documentation": " The logical key code of a [`KeyboardInput`].\n\n ## Technical\n\n Its values map 1 to 1 to winit's Key.",
      "associated_functions": [
        "bevy_input::keyboard::Key::clone",
        "bevy_input::keyboard::Key::assert_receiver_is_total_eq",
        "bevy_input::keyboard::Key::eq"
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Character",
          "fields": [
            {
              "type": "smol_str::SmolStr"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Unidentified",
          "fields": [
            {
              "type": "bevy_input::keyboard::NativeKey"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Dead",
          "fields": [
            {
              "type": "core::option::Option<char>"
            }
          ]
        },
        {
          "kind": "Unit",
          "name": "Alt"
        },
        {
          "kind": "Unit",
          "name": "AltGraph"
        },
        {
          "kind": "Unit",
          "name": "CapsLock"
        },
        {
          "kind": "Unit",
          "name": "Control"
        },
        {
          "kind": "Unit",
          "name": "Fn"
        },
        {
          "kind": "Unit",
          "name": "FnLock"
        },
        {
          "kind": "Unit",
          "name": "NumLock"
        },
        {
          "kind": "Unit",
          "name": "ScrollLock"
        },
        {
          "kind": "Unit",
          "name": "Shift"
        },
        {
          "kind": "Unit",
          "name": "Symbol"
        },
        {
          "kind": "Unit",
          "name": "SymbolLock"
        },
        {
          "kind": "Unit",
          "name": "Meta"
        },
        {
          "kind": "Unit",
          "name": "Hyper"
        },
        {
          "kind": "Unit",
          "name": "Super"
        },
        {
          "kind": "Unit",
          "name": "Enter"
        },
        {
          "kind": "Unit",
          "name": "Tab"
        },
        {
          "kind": "Unit",
          "name": "Space"
        },
        {
          "kind": "Unit",
          "name": "ArrowDown"
        },
        {
          "kind": "Unit",
          "name": "ArrowLeft"
        },
        {
          "kind": "Unit",
          "name": "ArrowRight"
        },
        {
          "kind": "Unit",
          "name": "ArrowUp"
        },
        {
          "kind": "Unit",
          "name": "End"
        },
        {
          "kind": "Unit",
          "name": "Home"
        },
        {
          "kind": "Unit",
          "name": "PageDown"
        },
        {
          "kind": "Unit",
          "name": "PageUp"
        },
        {
          "kind": "Unit",
          "name": "Backspace"
        },
        {
          "kind": "Unit",
          "name": "Clear"
        },
        {
          "kind": "Unit",
          "name": "Copy"
        },
        {
          "kind": "Unit",
          "name": "CrSel"
        },
        {
          "kind": "Unit",
          "name": "Cut"
        },
        {
          "kind": "Unit",
          "name": "Delete"
        },
        {
          "kind": "Unit",
          "name": "EraseEof"
        },
        {
          "kind": "Unit",
          "name": "ExSel"
        },
        {
          "kind": "Unit",
          "name": "Insert"
        },
        {
          "kind": "Unit",
          "name": "Paste"
        },
        {
          "kind": "Unit",
          "name": "Redo"
        },
        {
          "kind": "Unit",
          "name": "Undo"
        },
        {
          "kind": "Unit",
          "name": "Accept"
        },
        {
          "kind": "Unit",
          "name": "Again"
        },
        {
          "kind": "Unit",
          "name": "Attn"
        },
        {
          "kind": "Unit",
          "name": "Cancel"
        },
        {
          "kind": "Unit",
          "name": "ContextMenu"
        },
        {
          "kind": "Unit",
          "name": "Escape"
        },
        {
          "kind": "Unit",
          "name": "Execute"
        },
        {
          "kind": "Unit",
          "name": "Find"
        },
        {
          "kind": "Unit",
          "name": "Help"
        },
        {
          "kind": "Unit",
          "name": "Pause"
        },
        {
          "kind": "Unit",
          "name": "Play"
        },
        {
          "kind": "Unit",
          "name": "Props"
        },
        {
          "kind": "Unit",
          "name": "Select"
        },
        {
          "kind": "Unit",
          "name": "ZoomIn"
        },
        {
          "kind": "Unit",
          "name": "ZoomOut"
        },
        {
          "kind": "Unit",
          "name": "BrightnessDown"
        },
        {
          "kind": "Unit",
          "name": "BrightnessUp"
        },
        {
          "kind": "Unit",
          "name": "Eject"
        },
        {
          "kind": "Unit",
          "name": "LogOff"
        },
        {
          "kind": "Unit",
          "name": "Power"
        },
        {
          "kind": "Unit",
          "name": "PowerOff"
        },
        {
          "kind": "Unit",
          "name": "PrintScreen"
        },
        {
          "kind": "Unit",
          "name": "Hibernate"
        },
        {
          "kind": "Unit",
          "name": "Standby"
        },
        {
          "kind": "Unit",
          "name": "WakeUp"
        },
        {
          "kind": "Unit",
          "name": "AllCandidates"
        },
        {
          "kind": "Unit",
          "name": "Alphanumeric"
        },
        {
          "kind": "Unit",
          "name": "CodeInput"
        },
        {
          "kind": "Unit",
          "name": "Compose"
        },
        {
          "kind": "Unit",
          "name": "Convert"
        },
        {
          "kind": "Unit",
          "name": "FinalMode"
        },
        {
          "kind": "Unit",
          "name": "GroupFirst"
        },
        {
          "kind": "Unit",
          "name": "GroupLast"
        },
        {
          "kind": "Unit",
          "name": "GroupNext"
        },
        {
          "kind": "Unit",
          "name": "GroupPrevious"
        },
        {
          "kind": "Unit",
          "name": "ModeChange"
        },
        {
          "kind": "Unit",
          "name": "NextCandidate"
        },
        {
          "kind": "Unit",
          "name": "NonConvert"
        },
        {
          "kind": "Unit",
          "name": "PreviousCandidate"
        },
        {
          "kind": "Unit",
          "name": "Process"
        },
        {
          "kind": "Unit",
          "name": "SingleCandidate"
        },
        {
          "kind": "Unit",
          "name": "HangulMode"
        },
        {
          "kind": "Unit",
          "name": "HanjaMode"
        },
        {
          "kind": "Unit",
          "name": "JunjaMode"
        },
        {
          "kind": "Unit",
          "name": "Eisu"
        },
        {
          "kind": "Unit",
          "name": "Hankaku"
        },
        {
          "kind": "Unit",
          "name": "Hiragana"
        },
        {
          "kind": "Unit",
          "name": "HiraganaKatakana"
        },
        {
          "kind": "Unit",
          "name": "KanaMode"
        },
        {
          "kind": "Unit",
          "name": "KanjiMode"
        },
        {
          "kind": "Unit",
          "name": "Katakana"
        },
        {
          "kind": "Unit",
          "name": "Romaji"
        },
        {
          "kind": "Unit",
          "name": "Zenkaku"
        },
        {
          "kind": "Unit",
          "name": "ZenkakuHankaku"
        },
        {
          "kind": "Unit",
          "name": "Soft1"
        },
        {
          "kind": "Unit",
          "name": "Soft2"
        },
        {
          "kind": "Unit",
          "name": "Soft3"
        },
        {
          "kind": "Unit",
          "name": "Soft4"
        },
        {
          "kind": "Unit",
          "name": "ChannelDown"
        },
        {
          "kind": "Unit",
          "name": "ChannelUp"
        },
        {
          "kind": "Unit",
          "name": "Close"
        },
        {
          "kind": "Unit",
          "name": "MailForward"
        },
        {
          "kind": "Unit",
          "name": "MailReply"
        },
        {
          "kind": "Unit",
          "name": "MailSend"
        },
        {
          "kind": "Unit",
          "name": "MediaClose"
        },
        {
          "kind": "Unit",
          "name": "MediaFastForward"
        },
        {
          "kind": "Unit",
          "name": "MediaPause"
        },
        {
          "kind": "Unit",
          "name": "MediaPlay"
        },
        {
          "kind": "Unit",
          "name": "MediaPlayPause"
        },
        {
          "kind": "Unit",
          "name": "MediaRecord"
        },
        {
          "kind": "Unit",
          "name": "MediaRewind"
        },
        {
          "kind": "Unit",
          "name": "MediaStop"
        },
        {
          "kind": "Unit",
          "name": "MediaTrackNext"
        },
        {
          "kind": "Unit",
          "name": "MediaTrackPrevious"
        },
        {
          "kind": "Unit",
          "name": "New"
        },
        {
          "kind": "Unit",
          "name": "Open"
        },
        {
          "kind": "Unit",
          "name": "Print"
        },
        {
          "kind": "Unit",
          "name": "Save"
        },
        {
          "kind": "Unit",
          "name": "SpellCheck"
        },
        {
          "kind": "Unit",
          "name": "Key11"
        },
        {
          "kind": "Unit",
          "name": "Key12"
        },
        {
          "kind": "Unit",
          "name": "AudioBalanceLeft"
        },
        {
          "kind": "Unit",
          "name": "AudioBalanceRight"
        },
        {
          "kind": "Unit",
          "name": "AudioBassBoostDown"
        },
        {
          "kind": "Unit",
          "name": "AudioBassBoostToggle"
        },
        {
          "kind": "Unit",
          "name": "AudioBassBoostUp"
        },
        {
          "kind": "Unit",
          "name": "AudioFaderFront"
        },
        {
          "kind": "Unit",
          "name": "AudioFaderRear"
        },
        {
          "kind": "Unit",
          "name": "AudioSurroundModeNext"
        },
        {
          "kind": "Unit",
          "name": "AudioTrebleDown"
        },
        {
          "kind": "Unit",
          "name": "AudioTrebleUp"
        },
        {
          "kind": "Unit",
          "name": "AudioVolumeDown"
        },
        {
          "kind": "Unit",
          "name": "AudioVolumeUp"
        },
        {
          "kind": "Unit",
          "name": "AudioVolumeMute"
        },
        {
          "kind": "Unit",
          "name": "MicrophoneToggle"
        },
        {
          "kind": "Unit",
          "name": "MicrophoneVolumeDown"
        },
        {
          "kind": "Unit",
          "name": "MicrophoneVolumeUp"
        },
        {
          "kind": "Unit",
          "name": "MicrophoneVolumeMute"
        },
        {
          "kind": "Unit",
          "name": "SpeechCorrectionList"
        },
        {
          "kind": "Unit",
          "name": "SpeechInputToggle"
        },
        {
          "kind": "Unit",
          "name": "LaunchApplication1"
        },
        {
          "kind": "Unit",
          "name": "LaunchApplication2"
        },
        {
          "kind": "Unit",
          "name": "LaunchCalendar"
        },
        {
          "kind": "Unit",
          "name": "LaunchContacts"
        },
        {
          "kind": "Unit",
          "name": "LaunchMail"
        },
        {
          "kind": "Unit",
          "name": "LaunchMediaPlayer"
        },
        {
          "kind": "Unit",
          "name": "LaunchMusicPlayer"
        },
        {
          "kind": "Unit",
          "name": "LaunchPhone"
        },
        {
          "kind": "Unit",
          "name": "LaunchScreenSaver"
        },
        {
          "kind": "Unit",
          "name": "LaunchSpreadsheet"
        },
        {
          "kind": "Unit",
          "name": "LaunchWebBrowser"
        },
        {
          "kind": "Unit",
          "name": "LaunchWebCam"
        },
        {
          "kind": "Unit",
          "name": "LaunchWordProcessor"
        },
        {
          "kind": "Unit",
          "name": "BrowserBack"
        },
        {
          "kind": "Unit",
          "name": "BrowserFavorites"
        },
        {
          "kind": "Unit",
          "name": "BrowserForward"
        },
        {
          "kind": "Unit",
          "name": "BrowserHome"
        },
        {
          "kind": "Unit",
          "name": "BrowserRefresh"
        },
        {
          "kind": "Unit",
          "name": "BrowserSearch"
        },
        {
          "kind": "Unit",
          "name": "BrowserStop"
        },
        {
          "kind": "Unit",
          "name": "AppSwitch"
        },
        {
          "kind": "Unit",
          "name": "Call"
        },
        {
          "kind": "Unit",
          "name": "Camera"
        },
        {
          "kind": "Unit",
          "name": "CameraFocus"
        },
        {
          "kind": "Unit",
          "name": "EndCall"
        },
        {
          "kind": "Unit",
          "name": "GoBack"
        },
        {
          "kind": "Unit",
          "name": "GoHome"
        },
        {
          "kind": "Unit",
          "name": "HeadsetHook"
        },
        {
          "kind": "Unit",
          "name": "LastNumberRedial"
        },
        {
          "kind": "Unit",
          "name": "Notification"
        },
        {
          "kind": "Unit",
          "name": "MannerMode"
        },
        {
          "kind": "Unit",
          "name": "VoiceDial"
        },
        {
          "kind": "Unit",
          "name": "TV"
        },
        {
          "kind": "Unit",
          "name": "TV3DMode"
        },
        {
          "kind": "Unit",
          "name": "TVAntennaCable"
        },
        {
          "kind": "Unit",
          "name": "TVAudioDescription"
        },
        {
          "kind": "Unit",
          "name": "TVAudioDescriptionMixDown"
        },
        {
          "kind": "Unit",
          "name": "TVAudioDescriptionMixUp"
        },
        {
          "kind": "Unit",
          "name": "TVContentsMenu"
        },
        {
          "kind": "Unit",
          "name": "TVDataService"
        },
        {
          "kind": "Unit",
          "name": "TVInput"
        },
        {
          "kind": "Unit",
          "name": "TVInputComponent1"
        },
        {
          "kind": "Unit",
          "name": "TVInputComponent2"
        },
        {
          "kind": "Unit",
          "name": "TVInputComposite1"
        },
        {
          "kind": "Unit",
          "name": "TVInputComposite2"
        },
        {
          "kind": "Unit",
          "name": "TVInputHDMI1"
        },
        {
          "kind": "Unit",
          "name": "TVInputHDMI2"
        },
        {
          "kind": "Unit",
          "name": "TVInputHDMI3"
        },
        {
          "kind": "Unit",
          "name": "TVInputHDMI4"
        },
        {
          "kind": "Unit",
          "name": "TVInputVGA1"
        },
        {
          "kind": "Unit",
          "name": "TVMediaContext"
        },
        {
          "kind": "Unit",
          "name": "TVNetwork"
        },
        {
          "kind": "Unit",
          "name": "TVNumberEntry"
        },
        {
          "kind": "Unit",
          "name": "TVPower"
        },
        {
          "kind": "Unit",
          "name": "TVRadioService"
        },
        {
          "kind": "Unit",
          "name": "TVSatellite"
        },
        {
          "kind": "Unit",
          "name": "TVSatelliteBS"
        },
        {
          "kind": "Unit",
          "name": "TVSatelliteCS"
        },
        {
          "kind": "Unit",
          "name": "TVSatelliteToggle"
        },
        {
          "kind": "Unit",
          "name": "TVTerrestrialAnalog"
        },
        {
          "kind": "Unit",
          "name": "TVTerrestrialDigital"
        },
        {
          "kind": "Unit",
          "name": "TVTimer"
        },
        {
          "kind": "Unit",
          "name": "AVRInput"
        },
        {
          "kind": "Unit",
          "name": "AVRPower"
        },
        {
          "kind": "Unit",
          "name": "ColorF0Red"
        },
        {
          "kind": "Unit",
          "name": "ColorF1Green"
        },
        {
          "kind": "Unit",
          "name": "ColorF2Yellow"
        },
        {
          "kind": "Unit",
          "name": "ColorF3Blue"
        },
        {
          "kind": "Unit",
          "name": "ColorF4Grey"
        },
        {
          "kind": "Unit",
          "name": "ColorF5Brown"
        },
        {
          "kind": "Unit",
          "name": "ClosedCaptionToggle"
        },
        {
          "kind": "Unit",
          "name": "Dimmer"
        },
        {
          "kind": "Unit",
          "name": "DisplaySwap"
        },
        {
          "kind": "Unit",
          "name": "DVR"
        },
        {
          "kind": "Unit",
          "name": "Exit"
        },
        {
          "kind": "Unit",
          "name": "FavoriteClear0"
        },
        {
          "kind": "Unit",
          "name": "FavoriteClear1"
        },
        {
          "kind": "Unit",
          "name": "FavoriteClear2"
        },
        {
          "kind": "Unit",
          "name": "FavoriteClear3"
        },
        {
          "kind": "Unit",
          "name": "FavoriteRecall0"
        },
        {
          "kind": "Unit",
          "name": "FavoriteRecall1"
        },
        {
          "kind": "Unit",
          "name": "FavoriteRecall2"
        },
        {
          "kind": "Unit",
          "name": "FavoriteRecall3"
        },
        {
          "kind": "Unit",
          "name": "FavoriteStore0"
        },
        {
          "kind": "Unit",
          "name": "FavoriteStore1"
        },
        {
          "kind": "Unit",
          "name": "FavoriteStore2"
        },
        {
          "kind": "Unit",
          "name": "FavoriteStore3"
        },
        {
          "kind": "Unit",
          "name": "Guide"
        },
        {
          "kind": "Unit",
          "name": "GuideNextDay"
        },
        {
          "kind": "Unit",
          "name": "GuidePreviousDay"
        },
        {
          "kind": "Unit",
          "name": "Info"
        },
        {
          "kind": "Unit",
          "name": "InstantReplay"
        },
        {
          "kind": "Unit",
          "name": "Link"
        },
        {
          "kind": "Unit",
          "name": "ListProgram"
        },
        {
          "kind": "Unit",
          "name": "LiveContent"
        },
        {
          "kind": "Unit",
          "name": "Lock"
        },
        {
          "kind": "Unit",
          "name": "MediaApps"
        },
        {
          "kind": "Unit",
          "name": "MediaAudioTrack"
        },
        {
          "kind": "Unit",
          "name": "MediaLast"
        },
        {
          "kind": "Unit",
          "name": "MediaSkipBackward"
        },
        {
          "kind": "Unit",
          "name": "MediaSkipForward"
        },
        {
          "kind": "Unit",
          "name": "MediaStepBackward"
        },
        {
          "kind": "Unit",
          "name": "MediaStepForward"
        },
        {
          "kind": "Unit",
          "name": "MediaTopMenu"
        },
        {
          "kind": "Unit",
          "name": "NavigateIn"
        },
        {
          "kind": "Unit",
          "name": "NavigateNext"
        },
        {
          "kind": "Unit",
          "name": "NavigateOut"
        },
        {
          "kind": "Unit",
          "name": "NavigatePrevious"
        },
        {
          "kind": "Unit",
          "name": "NextFavoriteChannel"
        },
        {
          "kind": "Unit",
          "name": "NextUserProfile"
        },
        {
          "kind": "Unit",
          "name": "OnDemand"
        },
        {
          "kind": "Unit",
          "name": "Pairing"
        },
        {
          "kind": "Unit",
          "name": "PinPDown"
        },
        {
          "kind": "Unit",
          "name": "PinPMove"
        },
        {
          "kind": "Unit",
          "name": "PinPToggle"
        },
        {
          "kind": "Unit",
          "name": "PinPUp"
        },
        {
          "kind": "Unit",
          "name": "PlaySpeedDown"
        },
        {
          "kind": "Unit",
          "name": "PlaySpeedReset"
        },
        {
          "kind": "Unit",
          "name": "PlaySpeedUp"
        },
        {
          "kind": "Unit",
          "name": "RandomToggle"
        },
        {
          "kind": "Unit",
          "name": "RcLowBattery"
        },
        {
          "kind": "Unit",
          "name": "RecordSpeedNext"
        },
        {
          "kind": "Unit",
          "name": "RfBypass"
        },
        {
          "kind": "Unit",
          "name": "ScanChannelsToggle"
        },
        {
          "kind": "Unit",
          "name": "ScreenModeNext"
        },
        {
          "kind": "Unit",
          "name": "Settings"
        },
        {
          "kind": "Unit",
          "name": "SplitScreenToggle"
        },
        {
          "kind": "Unit",
          "name": "STBInput"
        },
        {
          "kind": "Unit",
          "name": "STBPower"
        },
        {
          "kind": "Unit",
          "name": "Subtitle"
        },
        {
          "kind": "Unit",
          "name": "Teletext"
        },
        {
          "kind": "Unit",
          "name": "VideoModeNext"
        },
        {
          "kind": "Unit",
          "name": "Wink"
        },
        {
          "kind": "Unit",
          "name": "ZoomToggle"
        },
        {
          "kind": "Unit",
          "name": "F1"
        },
        {
          "kind": "Unit",
          "name": "F2"
        },
        {
          "kind": "Unit",
          "name": "F3"
        },
        {
          "kind": "Unit",
          "name": "F4"
        },
        {
          "kind": "Unit",
          "name": "F5"
        },
        {
          "kind": "Unit",
          "name": "F6"
        },
        {
          "kind": "Unit",
          "name": "F7"
        },
        {
          "kind": "Unit",
          "name": "F8"
        },
        {
          "kind": "Unit",
          "name": "F9"
        },
        {
          "kind": "Unit",
          "name": "F10"
        },
        {
          "kind": "Unit",
          "name": "F11"
        },
        {
          "kind": "Unit",
          "name": "F12"
        },
        {
          "kind": "Unit",
          "name": "F13"
        },
        {
          "kind": "Unit",
          "name": "F14"
        },
        {
          "kind": "Unit",
          "name": "F15"
        },
        {
          "kind": "Unit",
          "name": "F16"
        },
        {
          "kind": "Unit",
          "name": "F17"
        },
        {
          "kind": "Unit",
          "name": "F18"
        },
        {
          "kind": "Unit",
          "name": "F19"
        },
        {
          "kind": "Unit",
          "name": "F20"
        },
        {
          "kind": "Unit",
          "name": "F21"
        },
        {
          "kind": "Unit",
          "name": "F22"
        },
        {
          "kind": "Unit",
          "name": "F23"
        },
        {
          "kind": "Unit",
          "name": "F24"
        },
        {
          "kind": "Unit",
          "name": "F25"
        },
        {
          "kind": "Unit",
          "name": "F26"
        },
        {
          "kind": "Unit",
          "name": "F27"
        },
        {
          "kind": "Unit",
          "name": "F28"
        },
        {
          "kind": "Unit",
          "name": "F29"
        },
        {
          "kind": "Unit",
          "name": "F30"
        },
        {
          "kind": "Unit",
          "name": "F31"
        },
        {
          "kind": "Unit",
          "name": "F32"
        },
        {
          "kind": "Unit",
          "name": "F33"
        },
        {
          "kind": "Unit",
          "name": "F34"
        },
        {
          "kind": "Unit",
          "name": "F35"
        }
      ],
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::keyboard::KeyCode": {
      "identifier": "KeyCode",
      "crate": "bevy_input",
      "path": "bevy_input::keyboard::KeyCode",
      "documentation": " The key code of a [`KeyboardInput`].\n\n ## Usage\n\n It is used as the generic `T` value of an [`ButtonInput`] to create a `Res<ButtonInput<KeyCode>>`.\n\n Code representing the location of a physical key\n This mostly conforms to the UI Events Specification's [`KeyboardEvent.code`] with a few\n exceptions:\n - The keys that the specification calls `MetaLeft` and `MetaRight` are named `SuperLeft` and\n   `SuperRight` here.\n - The key that the specification calls \"Super\" is reported as `Unidentified` here.\n\n [`KeyboardEvent.code`]: https://w3c.github.io/uievents-code/#code-value-tables\n\n ## Updating\n\n The resource is updated inside of the [`keyboard_input_system`].",
      "associated_functions": [
        "bevy_input::keyboard::KeyCode::eq",
        "bevy_input::keyboard::KeyCode::clone",
        "bevy_input::keyboard::KeyCode::assert_receiver_is_total_eq"
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Unidentified",
          "fields": [
            {
              "type": "bevy_input::keyboard::NativeKeyCode"
            }
          ]
        },
        {
          "kind": "Unit",
          "name": "Backquote"
        },
        {
          "kind": "Unit",
          "name": "Backslash"
        },
        {
          "kind": "Unit",
          "name": "BracketLeft"
        },
        {
          "kind": "Unit",
          "name": "BracketRight"
        },
        {
          "kind": "Unit",
          "name": "Comma"
        },
        {
          "kind": "Unit",
          "name": "Digit0"
        },
        {
          "kind": "Unit",
          "name": "Digit1"
        },
        {
          "kind": "Unit",
          "name": "Digit2"
        },
        {
          "kind": "Unit",
          "name": "Digit3"
        },
        {
          "kind": "Unit",
          "name": "Digit4"
        },
        {
          "kind": "Unit",
          "name": "Digit5"
        },
        {
          "kind": "Unit",
          "name": "Digit6"
        },
        {
          "kind": "Unit",
          "name": "Digit7"
        },
        {
          "kind": "Unit",
          "name": "Digit8"
        },
        {
          "kind": "Unit",
          "name": "Digit9"
        },
        {
          "kind": "Unit",
          "name": "Equal"
        },
        {
          "kind": "Unit",
          "name": "IntlBackslash"
        },
        {
          "kind": "Unit",
          "name": "IntlRo"
        },
        {
          "kind": "Unit",
          "name": "IntlYen"
        },
        {
          "kind": "Unit",
          "name": "KeyA"
        },
        {
          "kind": "Unit",
          "name": "KeyB"
        },
        {
          "kind": "Unit",
          "name": "KeyC"
        },
        {
          "kind": "Unit",
          "name": "KeyD"
        },
        {
          "kind": "Unit",
          "name": "KeyE"
        },
        {
          "kind": "Unit",
          "name": "KeyF"
        },
        {
          "kind": "Unit",
          "name": "KeyG"
        },
        {
          "kind": "Unit",
          "name": "KeyH"
        },
        {
          "kind": "Unit",
          "name": "KeyI"
        },
        {
          "kind": "Unit",
          "name": "KeyJ"
        },
        {
          "kind": "Unit",
          "name": "KeyK"
        },
        {
          "kind": "Unit",
          "name": "KeyL"
        },
        {
          "kind": "Unit",
          "name": "KeyM"
        },
        {
          "kind": "Unit",
          "name": "KeyN"
        },
        {
          "kind": "Unit",
          "name": "KeyO"
        },
        {
          "kind": "Unit",
          "name": "KeyP"
        },
        {
          "kind": "Unit",
          "name": "KeyQ"
        },
        {
          "kind": "Unit",
          "name": "KeyR"
        },
        {
          "kind": "Unit",
          "name": "KeyS"
        },
        {
          "kind": "Unit",
          "name": "KeyT"
        },
        {
          "kind": "Unit",
          "name": "KeyU"
        },
        {
          "kind": "Unit",
          "name": "KeyV"
        },
        {
          "kind": "Unit",
          "name": "KeyW"
        },
        {
          "kind": "Unit",
          "name": "KeyX"
        },
        {
          "kind": "Unit",
          "name": "KeyY"
        },
        {
          "kind": "Unit",
          "name": "KeyZ"
        },
        {
          "kind": "Unit",
          "name": "Minus"
        },
        {
          "kind": "Unit",
          "name": "Period"
        },
        {
          "kind": "Unit",
          "name": "Quote"
        },
        {
          "kind": "Unit",
          "name": "Semicolon"
        },
        {
          "kind": "Unit",
          "name": "Slash"
        },
        {
          "kind": "Unit",
          "name": "AltLeft"
        },
        {
          "kind": "Unit",
          "name": "AltRight"
        },
        {
          "kind": "Unit",
          "name": "Backspace"
        },
        {
          "kind": "Unit",
          "name": "CapsLock"
        },
        {
          "kind": "Unit",
          "name": "ContextMenu"
        },
        {
          "kind": "Unit",
          "name": "ControlLeft"
        },
        {
          "kind": "Unit",
          "name": "ControlRight"
        },
        {
          "kind": "Unit",
          "name": "Enter"
        },
        {
          "kind": "Unit",
          "name": "SuperLeft"
        },
        {
          "kind": "Unit",
          "name": "SuperRight"
        },
        {
          "kind": "Unit",
          "name": "ShiftLeft"
        },
        {
          "kind": "Unit",
          "name": "ShiftRight"
        },
        {
          "kind": "Unit",
          "name": "Space"
        },
        {
          "kind": "Unit",
          "name": "Tab"
        },
        {
          "kind": "Unit",
          "name": "Convert"
        },
        {
          "kind": "Unit",
          "name": "KanaMode"
        },
        {
          "kind": "Unit",
          "name": "Lang1"
        },
        {
          "kind": "Unit",
          "name": "Lang2"
        },
        {
          "kind": "Unit",
          "name": "Lang3"
        },
        {
          "kind": "Unit",
          "name": "Lang4"
        },
        {
          "kind": "Unit",
          "name": "Lang5"
        },
        {
          "kind": "Unit",
          "name": "NonConvert"
        },
        {
          "kind": "Unit",
          "name": "Delete"
        },
        {
          "kind": "Unit",
          "name": "End"
        },
        {
          "kind": "Unit",
          "name": "Help"
        },
        {
          "kind": "Unit",
          "name": "Home"
        },
        {
          "kind": "Unit",
          "name": "Insert"
        },
        {
          "kind": "Unit",
          "name": "PageDown"
        },
        {
          "kind": "Unit",
          "name": "PageUp"
        },
        {
          "kind": "Unit",
          "name": "ArrowDown"
        },
        {
          "kind": "Unit",
          "name": "ArrowLeft"
        },
        {
          "kind": "Unit",
          "name": "ArrowRight"
        },
        {
          "kind": "Unit",
          "name": "ArrowUp"
        },
        {
          "kind": "Unit",
          "name": "NumLock"
        },
        {
          "kind": "Unit",
          "name": "Numpad0"
        },
        {
          "kind": "Unit",
          "name": "Numpad1"
        },
        {
          "kind": "Unit",
          "name": "Numpad2"
        },
        {
          "kind": "Unit",
          "name": "Numpad3"
        },
        {
          "kind": "Unit",
          "name": "Numpad4"
        },
        {
          "kind": "Unit",
          "name": "Numpad5"
        },
        {
          "kind": "Unit",
          "name": "Numpad6"
        },
        {
          "kind": "Unit",
          "name": "Numpad7"
        },
        {
          "kind": "Unit",
          "name": "Numpad8"
        },
        {
          "kind": "Unit",
          "name": "Numpad9"
        },
        {
          "kind": "Unit",
          "name": "NumpadAdd"
        },
        {
          "kind": "Unit",
          "name": "NumpadBackspace"
        },
        {
          "kind": "Unit",
          "name": "NumpadClear"
        },
        {
          "kind": "Unit",
          "name": "NumpadClearEntry"
        },
        {
          "kind": "Unit",
          "name": "NumpadComma"
        },
        {
          "kind": "Unit",
          "name": "NumpadDecimal"
        },
        {
          "kind": "Unit",
          "name": "NumpadDivide"
        },
        {
          "kind": "Unit",
          "name": "NumpadEnter"
        },
        {
          "kind": "Unit",
          "name": "NumpadEqual"
        },
        {
          "kind": "Unit",
          "name": "NumpadHash"
        },
        {
          "kind": "Unit",
          "name": "NumpadMemoryAdd"
        },
        {
          "kind": "Unit",
          "name": "NumpadMemoryClear"
        },
        {
          "kind": "Unit",
          "name": "NumpadMemoryRecall"
        },
        {
          "kind": "Unit",
          "name": "NumpadMemoryStore"
        },
        {
          "kind": "Unit",
          "name": "NumpadMemorySubtract"
        },
        {
          "kind": "Unit",
          "name": "NumpadMultiply"
        },
        {
          "kind": "Unit",
          "name": "NumpadParenLeft"
        },
        {
          "kind": "Unit",
          "name": "NumpadParenRight"
        },
        {
          "kind": "Unit",
          "name": "NumpadStar"
        },
        {
          "kind": "Unit",
          "name": "NumpadSubtract"
        },
        {
          "kind": "Unit",
          "name": "Escape"
        },
        {
          "kind": "Unit",
          "name": "Fn"
        },
        {
          "kind": "Unit",
          "name": "FnLock"
        },
        {
          "kind": "Unit",
          "name": "PrintScreen"
        },
        {
          "kind": "Unit",
          "name": "ScrollLock"
        },
        {
          "kind": "Unit",
          "name": "Pause"
        },
        {
          "kind": "Unit",
          "name": "BrowserBack"
        },
        {
          "kind": "Unit",
          "name": "BrowserFavorites"
        },
        {
          "kind": "Unit",
          "name": "BrowserForward"
        },
        {
          "kind": "Unit",
          "name": "BrowserHome"
        },
        {
          "kind": "Unit",
          "name": "BrowserRefresh"
        },
        {
          "kind": "Unit",
          "name": "BrowserSearch"
        },
        {
          "kind": "Unit",
          "name": "BrowserStop"
        },
        {
          "kind": "Unit",
          "name": "Eject"
        },
        {
          "kind": "Unit",
          "name": "LaunchApp1"
        },
        {
          "kind": "Unit",
          "name": "LaunchApp2"
        },
        {
          "kind": "Unit",
          "name": "LaunchMail"
        },
        {
          "kind": "Unit",
          "name": "MediaPlayPause"
        },
        {
          "kind": "Unit",
          "name": "MediaSelect"
        },
        {
          "kind": "Unit",
          "name": "MediaStop"
        },
        {
          "kind": "Unit",
          "name": "MediaTrackNext"
        },
        {
          "kind": "Unit",
          "name": "MediaTrackPrevious"
        },
        {
          "kind": "Unit",
          "name": "Power"
        },
        {
          "kind": "Unit",
          "name": "Sleep"
        },
        {
          "kind": "Unit",
          "name": "AudioVolumeDown"
        },
        {
          "kind": "Unit",
          "name": "AudioVolumeMute"
        },
        {
          "kind": "Unit",
          "name": "AudioVolumeUp"
        },
        {
          "kind": "Unit",
          "name": "WakeUp"
        },
        {
          "kind": "Unit",
          "name": "Meta"
        },
        {
          "kind": "Unit",
          "name": "Hyper"
        },
        {
          "kind": "Unit",
          "name": "Turbo"
        },
        {
          "kind": "Unit",
          "name": "Abort"
        },
        {
          "kind": "Unit",
          "name": "Resume"
        },
        {
          "kind": "Unit",
          "name": "Suspend"
        },
        {
          "kind": "Unit",
          "name": "Again"
        },
        {
          "kind": "Unit",
          "name": "Copy"
        },
        {
          "kind": "Unit",
          "name": "Cut"
        },
        {
          "kind": "Unit",
          "name": "Find"
        },
        {
          "kind": "Unit",
          "name": "Open"
        },
        {
          "kind": "Unit",
          "name": "Paste"
        },
        {
          "kind": "Unit",
          "name": "Props"
        },
        {
          "kind": "Unit",
          "name": "Select"
        },
        {
          "kind": "Unit",
          "name": "Undo"
        },
        {
          "kind": "Unit",
          "name": "Hiragana"
        },
        {
          "kind": "Unit",
          "name": "Katakana"
        },
        {
          "kind": "Unit",
          "name": "F1"
        },
        {
          "kind": "Unit",
          "name": "F2"
        },
        {
          "kind": "Unit",
          "name": "F3"
        },
        {
          "kind": "Unit",
          "name": "F4"
        },
        {
          "kind": "Unit",
          "name": "F5"
        },
        {
          "kind": "Unit",
          "name": "F6"
        },
        {
          "kind": "Unit",
          "name": "F7"
        },
        {
          "kind": "Unit",
          "name": "F8"
        },
        {
          "kind": "Unit",
          "name": "F9"
        },
        {
          "kind": "Unit",
          "name": "F10"
        },
        {
          "kind": "Unit",
          "name": "F11"
        },
        {
          "kind": "Unit",
          "name": "F12"
        },
        {
          "kind": "Unit",
          "name": "F13"
        },
        {
          "kind": "Unit",
          "name": "F14"
        },
        {
          "kind": "Unit",
          "name": "F15"
        },
        {
          "kind": "Unit",
          "name": "F16"
        },
        {
          "kind": "Unit",
          "name": "F17"
        },
        {
          "kind": "Unit",
          "name": "F18"
        },
        {
          "kind": "Unit",
          "name": "F19"
        },
        {
          "kind": "Unit",
          "name": "F20"
        },
        {
          "kind": "Unit",
          "name": "F21"
        },
        {
          "kind": "Unit",
          "name": "F22"
        },
        {
          "kind": "Unit",
          "name": "F23"
        },
        {
          "kind": "Unit",
          "name": "F24"
        },
        {
          "kind": "Unit",
          "name": "F25"
        },
        {
          "kind": "Unit",
          "name": "F26"
        },
        {
          "kind": "Unit",
          "name": "F27"
        },
        {
          "kind": "Unit",
          "name": "F28"
        },
        {
          "kind": "Unit",
          "name": "F29"
        },
        {
          "kind": "Unit",
          "name": "F30"
        },
        {
          "kind": "Unit",
          "name": "F31"
        },
        {
          "kind": "Unit",
          "name": "F32"
        },
        {
          "kind": "Unit",
          "name": "F33"
        },
        {
          "kind": "Unit",
          "name": "F34"
        },
        {
          "kind": "Unit",
          "name": "F35"
        }
      ],
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::keyboard::KeyboardFocusLost": {
      "identifier": "KeyboardFocusLost",
      "crate": "bevy_input",
      "path": "bevy_input::keyboard::KeyboardFocusLost",
      "documentation": " Gets generated from `bevy_winit::winit_runner`\n\n Used for clearing all cached states to avoid having 'stuck' key presses\n when, for example, switching between windows with 'Alt-Tab' or using any other\n OS specific key combination that leads to Bevy window losing focus and not receiving any\n input events",
      "associated_functions": [
        "bevy_input::keyboard::KeyboardFocusLost::clone",
        "bevy_input::keyboard::KeyboardFocusLost::eq",
        "bevy_input::keyboard::KeyboardFocusLost::assert_receiver_is_total_eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "KeyboardFocusLost"
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::keyboard::KeyboardInput": {
      "identifier": "KeyboardInput",
      "crate": "bevy_input",
      "path": "bevy_input::keyboard::KeyboardInput",
      "documentation": " A keyboard input event.\n\n This event is the translated version of the `WindowEvent::KeyboardInput` from the `winit` crate.\n It is available to the end user and can be used for game logic.\n\n ## Usage\n\n The event is consumed inside of the [`keyboard_input_system`]\n to update the [`ButtonInput<KeyCode>`](ButtonInput<KeyCode>) resource.",
      "associated_functions": [
        "bevy_input::keyboard::KeyboardInput::assert_receiver_is_total_eq",
        "bevy_input::keyboard::KeyboardInput::clone",
        "bevy_input::keyboard::KeyboardInput::eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "KeyboardInput",
        "fields": [
          {
            "name": "key_code",
            "type": "bevy_input::keyboard::KeyCode"
          },
          {
            "name": "logical_key",
            "type": "bevy_input::keyboard::Key"
          },
          {
            "name": "state",
            "type": "bevy_input::ButtonState"
          },
          {
            "name": "text",
            "type": "core::option::Option<smol_str::SmolStr>"
          },
          {
            "name": "repeat",
            "type": "bool"
          },
          {
            "name": "window",
            "type": "bevy_ecs::entity::Entity"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::keyboard::NativeKey": {
      "identifier": "NativeKey",
      "crate": "bevy_input",
      "path": "bevy_input::keyboard::NativeKey",
      "documentation": " Contains the platform-native logical key identifier, known as keysym.\n\n Exactly what that means differs from platform to platform, but the values are to some degree\n tied to the currently active keyboard layout. The same key on the same keyboard may also report\n different values on different platforms, which is one of the reasons this is a per-platform\n enum.\n\n This enum is primarily used to store raw keysym when Winit doesn't map a given native logical\n key identifier to a meaningful [`Key`] variant. This lets you use [`Key`], and let the user\n define keybinds which work in the presence of identifiers we haven't mapped for you yet.",
      "associated_functions": [
        "bevy_input::keyboard::NativeKey::eq",
        "bevy_input::keyboard::NativeKey::clone",
        "bevy_input::keyboard::NativeKey::assert_receiver_is_total_eq"
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "Unidentified"
        },
        {
          "kind": "TupleStruct",
          "name": "Android",
          "fields": [
            {
              "type": "u32"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "MacOS",
          "fields": [
            {
              "type": "u16"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Windows",
          "fields": [
            {
              "type": "u16"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Xkb",
          "fields": [
            {
              "type": "u32"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Web",
          "fields": [
            {
              "type": "smol_str::SmolStr"
            }
          ]
        }
      ],
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::keyboard::NativeKeyCode": {
      "identifier": "NativeKeyCode",
      "crate": "bevy_input",
      "path": "bevy_input::keyboard::NativeKeyCode",
      "documentation": " Contains the platform-native physical key identifier\n\n The exact values vary from platform to platform (which is part of why this is a per-platform\n enum), but the values are primarily tied to the key's physical location on the keyboard.\n\n This enum is primarily used to store raw keycodes when Winit doesn't map a given native\n physical key identifier to a meaningful [`KeyCode`] variant. In the presence of identifiers we\n haven't mapped for you yet, this lets you use [`KeyCode`] to:\n\n - Correctly match key press and release events.\n - On non-web platforms, support assigning keybinds to virtually any key through a UI.",
      "associated_functions": [
        "bevy_input::keyboard::NativeKeyCode::assert_receiver_is_total_eq",
        "bevy_input::keyboard::NativeKeyCode::clone",
        "bevy_input::keyboard::NativeKeyCode::eq"
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "Unidentified"
        },
        {
          "kind": "TupleStruct",
          "name": "Android",
          "fields": [
            {
              "type": "u32"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "MacOS",
          "fields": [
            {
              "type": "u16"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Windows",
          "fields": [
            {
              "type": "u16"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Xkb",
          "fields": [
            {
              "type": "u32"
            }
          ]
        }
      ],
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::mouse::AccumulatedMouseMotion": {
      "identifier": "AccumulatedMouseMotion",
      "crate": "bevy_input",
      "path": "bevy_input::mouse::AccumulatedMouseMotion",
      "documentation": " Tracks how much the mouse has moved every frame.\n\n This resource is reset to zero every frame.\n\n This resource sums the total [`MouseMotion`] events received this frame.",
      "associated_functions": [
        "bevy_input::mouse::AccumulatedMouseMotion::eq",
        "bevy_input::mouse::AccumulatedMouseMotion::clone"
      ],
      "layout": {
        "kind": "Struct",
        "name": "AccumulatedMouseMotion",
        "fields": [
          {
            "name": "delta",
            "type": "glam::Vec2"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::mouse::AccumulatedMouseScroll": {
      "identifier": "AccumulatedMouseScroll",
      "crate": "bevy_input",
      "path": "bevy_input::mouse::AccumulatedMouseScroll",
      "documentation": " Tracks how much the mouse has scrolled every frame.\n\n This resource is reset to zero every frame.\n\n This resource sums the total [`MouseWheel`] events received this frame.",
      "associated_functions": [
        "bevy_input::mouse::AccumulatedMouseScroll::eq",
        "bevy_input::mouse::AccumulatedMouseScroll::clone"
      ],
      "layout": {
        "kind": "Struct",
        "name": "AccumulatedMouseScroll",
        "fields": [
          {
            "name": "unit",
            "type": "bevy_input::mouse::MouseScrollUnit"
          },
          {
            "name": "delta",
            "type": "glam::Vec2"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::mouse::MouseButton": {
      "identifier": "MouseButton",
      "crate": "bevy_input",
      "path": "bevy_input::mouse::MouseButton",
      "documentation": " A button on a mouse device.\n\n ## Usage\n\n It is used as the generic `T` value of an [`ButtonInput`] to create a `bevy`\n resource.\n\n ## Updating\n\n The resource is updated inside of the [`mouse_button_input_system`].",
      "associated_functions": [
        "bevy_input::mouse::MouseButton::eq",
        "bevy_input::mouse::MouseButton::assert_receiver_is_total_eq",
        "bevy_input::mouse::MouseButton::clone"
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "Left"
        },
        {
          "kind": "Unit",
          "name": "Right"
        },
        {
          "kind": "Unit",
          "name": "Middle"
        },
        {
          "kind": "Unit",
          "name": "Back"
        },
        {
          "kind": "Unit",
          "name": "Forward"
        },
        {
          "kind": "TupleStruct",
          "name": "Other",
          "fields": [
            {
              "type": "u16"
            }
          ]
        }
      ],
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::mouse::MouseButtonInput": {
      "identifier": "MouseButtonInput",
      "crate": "bevy_input",
      "path": "bevy_input::mouse::MouseButtonInput",
      "documentation": " A mouse button input event.\n\n This event is the translated version of the `WindowEvent::MouseInput` from the `winit` crate.\n\n ## Usage\n\n The event is read inside of the [`mouse_button_input_system`]\n to update the [`ButtonInput<MouseButton>`] resource.",
      "associated_functions": [
        "bevy_input::mouse::MouseButtonInput::clone",
        "bevy_input::mouse::MouseButtonInput::assert_receiver_is_total_eq",
        "bevy_input::mouse::MouseButtonInput::eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "MouseButtonInput",
        "fields": [
          {
            "name": "button",
            "type": "bevy_input::mouse::MouseButton"
          },
          {
            "name": "state",
            "type": "bevy_input::ButtonState"
          },
          {
            "name": "window",
            "type": "bevy_ecs::entity::Entity"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::mouse::MouseMotion": {
      "identifier": "MouseMotion",
      "crate": "bevy_input",
      "path": "bevy_input::mouse::MouseMotion",
      "documentation": " An event reporting the change in physical position of a pointing device.\n\n This represents raw, unfiltered physical motion.\n It is the translated version of [`DeviceEvent::MouseMotion`] from the `winit` crate.\n\n All pointing devices connected to a single machine at the same time can emit the event independently.\n However, the event data does not make it possible to distinguish which device it is referring to.\n\n [`DeviceEvent::MouseMotion`]: https://docs.rs/winit/latest/winit/event/enum.DeviceEvent.html#variant.MouseMotion",
      "associated_functions": [
        "bevy_input::mouse::MouseMotion::clone",
        "bevy_input::mouse::MouseMotion::eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "MouseMotion",
        "fields": [
          {
            "name": "delta",
            "type": "glam::Vec2"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::mouse::MouseScrollUnit": {
      "identifier": "MouseScrollUnit",
      "crate": "bevy_input",
      "path": "bevy_input::mouse::MouseScrollUnit",
      "documentation": " The scroll unit.\n\n Describes how a value of a [`MouseWheel`] event has to be interpreted.\n\n The value of the event can either be interpreted as the amount of lines or the amount of pixels\n to scroll.",
      "associated_functions": [
        "bevy_input::mouse::MouseScrollUnit::assert_receiver_is_total_eq",
        "bevy_input::mouse::MouseScrollUnit::clone",
        "bevy_input::mouse::MouseScrollUnit::eq"
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "Line"
        },
        {
          "kind": "Unit",
          "name": "Pixel"
        }
      ],
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::mouse::MouseWheel": {
      "identifier": "MouseWheel",
      "crate": "bevy_input",
      "path": "bevy_input::mouse::MouseWheel",
      "documentation": " A mouse wheel event.\n\n This event is the translated version of the `WindowEvent::MouseWheel` from the `winit` crate.",
      "associated_functions": [
        "bevy_input::mouse::MouseWheel::clone",
        "bevy_input::mouse::MouseWheel::eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "MouseWheel",
        "fields": [
          {
            "name": "unit",
            "type": "bevy_input::mouse::MouseScrollUnit"
          },
          {
            "name": "x",
            "type": "f32"
          },
          {
            "name": "y",
            "type": "f32"
          },
          {
            "name": "window",
            "type": "bevy_ecs::entity::Entity"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::touch::ForceTouch": {
      "identifier": "ForceTouch",
      "crate": "bevy_input",
      "path": "bevy_input::touch::ForceTouch",
      "documentation": " A force description of a [`Touch`] input.",
      "associated_functions": [
        "bevy_input::touch::ForceTouch::eq",
        "bevy_input::touch::ForceTouch::clone"
      ],
      "layout": [
        {
          "kind": "Struct",
          "name": "Calibrated",
          "fields": [
            {
              "name": "force",
              "type": "f64"
            },
            {
              "name": "max_possible_force",
              "type": "f64"
            },
            {
              "name": "altitude_angle",
              "type": "core::option::Option<f64>"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Normalized",
          "fields": [
            {
              "type": "f64"
            }
          ]
        }
      ],
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::touch::TouchInput": {
      "identifier": "TouchInput",
      "crate": "bevy_input",
      "path": "bevy_input::touch::TouchInput",
      "documentation": " A touch input event.\n\n ## Logic\n\n Every time the user touches the screen, a new [`TouchPhase::Started`] event with an unique\n identifier for the finger is generated. When the finger is lifted, the [`TouchPhase::Ended`]\n event is generated with the same finger id.\n\n After a [`TouchPhase::Started`] event has been emitted, there may be zero or more [`TouchPhase::Moved`]\n events when the finger is moved or the touch pressure changes.\n\n The finger id may be reused by the system after an [`TouchPhase::Ended`] event. The user\n should assume that a new [`TouchPhase::Started`] event received with the same id has nothing\n to do with the old finger and is a new finger.\n\n A [`TouchPhase::Canceled`] event is emitted when the system has canceled tracking this\n touch, such as when the window loses focus, or on iOS if the user moves the\n device against their face.\n\n ## Note\n\n This event is the translated version of the `WindowEvent::Touch` from the `winit` crate.\n It is available to the end user and can be used for game logic.",
      "associated_functions": [
        "bevy_input::touch::TouchInput::eq",
        "bevy_input::touch::TouchInput::clone"
      ],
      "layout": {
        "kind": "Struct",
        "name": "TouchInput",
        "fields": [
          {
            "name": "phase",
            "type": "bevy_input::touch::TouchPhase"
          },
          {
            "name": "position",
            "type": "glam::Vec2"
          },
          {
            "name": "window",
            "type": "bevy_ecs::entity::Entity"
          },
          {
            "name": "force",
            "type": "core::option::Option<bevy_input::touch::ForceTouch>"
          },
          {
            "name": "id",
            "type": "u64"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_input::touch::TouchPhase": {
      "identifier": "TouchPhase",
      "crate": "bevy_input",
      "path": "bevy_input::touch::TouchPhase",
      "documentation": " A phase of a [`TouchInput`].\n\n ## Usage\n\n It is used to describe the phase of the touch input that is currently active.\n This includes a phase that indicates that a touch input has started or ended,\n or that a finger has moved. There is also a canceled phase that indicates that\n the system canceled the tracking of the finger.",
      "associated_functions": [
        "bevy_input::touch::TouchPhase::eq",
        "bevy_input::touch::TouchPhase::clone",
        "bevy_input::touch::TouchPhase::assert_receiver_is_total_eq"
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "Started"
        },
        {
          "kind": "Unit",
          "name": "Moved"
        },
        {
          "kind": "Unit",
          "name": "Ended"
        },
        {
          "kind": "Unit",
          "name": "Canceled"
        }
      ],
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::aspect_ratio::AspectRatio": {
      "identifier": "AspectRatio",
      "crate": "bevy_math",
      "path": "bevy_math::aspect_ratio::AspectRatio",
      "documentation": " An `AspectRatio` is the ratio of width to height.",
      "associated_functions": [
        "bevy_math::aspect_ratio::AspectRatio::inverse",
        "bevy_math::aspect_ratio::AspectRatio::clone",
        "bevy_math::aspect_ratio::AspectRatio::is_square",
        "bevy_math::aspect_ratio::AspectRatio::is_portrait",
        "bevy_math::aspect_ratio::AspectRatio::ratio",
        "bevy_math::aspect_ratio::AspectRatio::eq",
        "bevy_math::aspect_ratio::AspectRatio::is_landscape"
      ],
      "layout": {
        "kind": "TupleStruct",
        "name": "AspectRatio",
        "fields": [
          {
            "type": "f32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::bounding::bounded2d::Aabb2d": {
      "identifier": "Aabb2d",
      "crate": "bevy_math",
      "path": "bevy_math::bounding::bounded2d::Aabb2d",
      "documentation": " A 2D axis-aligned bounding box, or bounding rectangle",
      "associated_functions": [
        "bevy_math::bounding::bounded2d::Aabb2d::closest_point",
        "bevy_math::bounding::bounded2d::Aabb2d::clone",
        "bevy_math::bounding::bounded2d::Aabb2d::new",
        "bevy_math::bounding::bounded2d::Aabb2d::bounding_circle",
        "bevy_math::bounding::bounded2d::Aabb2d::eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Aabb2d",
        "fields": [
          {
            "name": "min",
            "type": "glam::Vec2"
          },
          {
            "name": "max",
            "type": "glam::Vec2"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::bounding::bounded2d::BoundingCircle": {
      "identifier": "BoundingCircle",
      "crate": "bevy_math",
      "path": "bevy_math::bounding::bounded2d::BoundingCircle",
      "documentation": " A bounding circle",
      "associated_functions": [
        "bevy_math::bounding::bounded2d::BoundingCircle::new",
        "bevy_math::bounding::bounded2d::BoundingCircle::closest_point",
        "bevy_math::bounding::bounded2d::BoundingCircle::radius",
        "bevy_math::bounding::bounded2d::BoundingCircle::aabb_2d",
        "bevy_math::bounding::bounded2d::BoundingCircle::clone",
        "bevy_math::bounding::bounded2d::BoundingCircle::eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "BoundingCircle",
        "fields": [
          {
            "name": "center",
            "type": "glam::Vec2"
          },
          {
            "name": "circle",
            "type": "bevy_math::primitives::dim2::Circle"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::bounding::bounded3d::Aabb3d": {
      "identifier": "Aabb3d",
      "crate": "bevy_math",
      "path": "bevy_math::bounding::bounded3d::Aabb3d",
      "documentation": " A 3D axis-aligned bounding box",
      "associated_functions": [
        "bevy_math::bounding::bounded3d::Aabb3d::eq",
        "bevy_math::bounding::bounded3d::Aabb3d::clone",
        "bevy_math::bounding::bounded3d::Aabb3d::bounding_sphere"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Aabb3d",
        "fields": [
          {
            "name": "min",
            "type": "glam::Vec3A"
          },
          {
            "name": "max",
            "type": "glam::Vec3A"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::bounding::bounded3d::BoundingSphere": {
      "identifier": "BoundingSphere",
      "crate": "bevy_math",
      "path": "bevy_math::bounding::bounded3d::BoundingSphere",
      "documentation": " A bounding sphere",
      "associated_functions": [
        "bevy_math::bounding::bounded3d::BoundingSphere::clone",
        "bevy_math::bounding::bounded3d::BoundingSphere::radius",
        "bevy_math::bounding::bounded3d::BoundingSphere::aabb_3d",
        "bevy_math::bounding::bounded3d::BoundingSphere::eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "BoundingSphere",
        "fields": [
          {
            "name": "center",
            "type": "glam::Vec3A"
          },
          {
            "name": "sphere",
            "type": "bevy_math::primitives::dim3::Sphere"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::bounding::raycast2d::AabbCast2d": {
      "identifier": "AabbCast2d",
      "crate": "bevy_math",
      "path": "bevy_math::bounding::raycast2d::AabbCast2d",
      "documentation": " An intersection test that casts an [`Aabb2d`] along a ray.",
      "associated_functions": [
        "bevy_math::bounding::raycast2d::AabbCast2d::clone",
        "bevy_math::bounding::raycast2d::AabbCast2d::aabb_collision_at",
        "bevy_math::bounding::raycast2d::AabbCast2d::from_ray",
        "bevy_math::bounding::raycast2d::AabbCast2d::new"
      ],
      "layout": {
        "kind": "Struct",
        "name": "AabbCast2d",
        "fields": [
          {
            "name": "ray",
            "type": "bevy_math::bounding::raycast2d::RayCast2d"
          },
          {
            "name": "aabb",
            "type": "bevy_math::bounding::bounded2d::Aabb2d"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::bounding::raycast2d::BoundingCircleCast": {
      "identifier": "BoundingCircleCast",
      "crate": "bevy_math",
      "path": "bevy_math::bounding::raycast2d::BoundingCircleCast",
      "documentation": " An intersection test that casts a [`BoundingCircle`] along a ray.",
      "associated_functions": [
        "bevy_math::bounding::raycast2d::BoundingCircleCast::new",
        "bevy_math::bounding::raycast2d::BoundingCircleCast::circle_collision_at",
        "bevy_math::bounding::raycast2d::BoundingCircleCast::clone",
        "bevy_math::bounding::raycast2d::BoundingCircleCast::from_ray"
      ],
      "layout": {
        "kind": "Struct",
        "name": "BoundingCircleCast",
        "fields": [
          {
            "name": "ray",
            "type": "bevy_math::bounding::raycast2d::RayCast2d"
          },
          {
            "name": "circle",
            "type": "bevy_math::bounding::bounded2d::BoundingCircle"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::bounding::raycast2d::RayCast2d": {
      "identifier": "RayCast2d",
      "crate": "bevy_math",
      "path": "bevy_math::bounding::raycast2d::RayCast2d",
      "documentation": " A raycast intersection test for 2D bounding volumes",
      "associated_functions": [
        "bevy_math::bounding::raycast2d::RayCast2d::from_ray",
        "bevy_math::bounding::raycast2d::RayCast2d::circle_intersection_at",
        "bevy_math::bounding::raycast2d::RayCast2d::aabb_intersection_at",
        "bevy_math::bounding::raycast2d::RayCast2d::new",
        "bevy_math::bounding::raycast2d::RayCast2d::direction_recip",
        "bevy_math::bounding::raycast2d::RayCast2d::clone"
      ],
      "layout": {
        "kind": "Struct",
        "name": "RayCast2d",
        "fields": [
          {
            "name": "ray",
            "type": "bevy_math::ray::Ray2d"
          },
          {
            "name": "max",
            "type": "f32"
          },
          {
            "name": "direction_recip",
            "type": "glam::Vec2"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::bounding::raycast3d::AabbCast3d": {
      "identifier": "AabbCast3d",
      "crate": "bevy_math",
      "path": "bevy_math::bounding::raycast3d::AabbCast3d",
      "documentation": " An intersection test that casts an [`Aabb3d`] along a ray.",
      "associated_functions": [
        "bevy_math::bounding::raycast3d::AabbCast3d::from_ray",
        "bevy_math::bounding::raycast3d::AabbCast3d::aabb_collision_at",
        "bevy_math::bounding::raycast3d::AabbCast3d::clone"
      ],
      "layout": {
        "kind": "Struct",
        "name": "AabbCast3d",
        "fields": [
          {
            "name": "ray",
            "type": "bevy_math::bounding::raycast3d::RayCast3d"
          },
          {
            "name": "aabb",
            "type": "bevy_math::bounding::bounded3d::Aabb3d"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::bounding::raycast3d::BoundingSphereCast": {
      "identifier": "BoundingSphereCast",
      "crate": "bevy_math",
      "path": "bevy_math::bounding::raycast3d::BoundingSphereCast",
      "documentation": " An intersection test that casts a [`BoundingSphere`] along a ray.",
      "associated_functions": [
        "bevy_math::bounding::raycast3d::BoundingSphereCast::sphere_collision_at",
        "bevy_math::bounding::raycast3d::BoundingSphereCast::from_ray",
        "bevy_math::bounding::raycast3d::BoundingSphereCast::clone"
      ],
      "layout": {
        "kind": "Struct",
        "name": "BoundingSphereCast",
        "fields": [
          {
            "name": "ray",
            "type": "bevy_math::bounding::raycast3d::RayCast3d"
          },
          {
            "name": "sphere",
            "type": "bevy_math::bounding::bounded3d::BoundingSphere"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::bounding::raycast3d::RayCast3d": {
      "identifier": "RayCast3d",
      "crate": "bevy_math",
      "path": "bevy_math::bounding::raycast3d::RayCast3d",
      "documentation": " A raycast intersection test for 3D bounding volumes",
      "associated_functions": [
        "bevy_math::bounding::raycast3d::RayCast3d::aabb_intersection_at",
        "bevy_math::bounding::raycast3d::RayCast3d::clone",
        "bevy_math::bounding::raycast3d::RayCast3d::from_ray",
        "bevy_math::bounding::raycast3d::RayCast3d::direction_recip",
        "bevy_math::bounding::raycast3d::RayCast3d::sphere_intersection_at"
      ],
      "layout": {
        "kind": "Struct",
        "name": "RayCast3d",
        "fields": [
          {
            "name": "origin",
            "type": "glam::Vec3A"
          },
          {
            "name": "direction",
            "type": "bevy_math::direction::Dir3A"
          },
          {
            "name": "max",
            "type": "f32"
          },
          {
            "name": "direction_recip",
            "type": "glam::Vec3A"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::compass::CompassOctant": {
      "identifier": "CompassOctant",
      "crate": "bevy_math",
      "path": "bevy_math::compass::CompassOctant",
      "documentation": " A compass enum with 8 directions.\n ```text\n          N (North)\n          ▲\n     NW   │   NE\n        ╲ │ ╱\n W (West) ┼─────► E (East)\n        ╱ │ ╲\n     SW   │   SE\n          ▼\n          S (South)\n ```",
      "associated_functions": [
        "bevy_math::compass::CompassOctant::clone",
        "bevy_math::compass::CompassOctant::neg",
        "bevy_math::compass::CompassOctant::to_index",
        "bevy_math::compass::CompassOctant::opposite",
        "bevy_math::compass::CompassOctant::eq",
        "bevy_math::compass::CompassOctant::assert_receiver_is_total_eq"
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "North"
        },
        {
          "kind": "Unit",
          "name": "NorthEast"
        },
        {
          "kind": "Unit",
          "name": "East"
        },
        {
          "kind": "Unit",
          "name": "SouthEast"
        },
        {
          "kind": "Unit",
          "name": "South"
        },
        {
          "kind": "Unit",
          "name": "SouthWest"
        },
        {
          "kind": "Unit",
          "name": "West"
        },
        {
          "kind": "Unit",
          "name": "NorthWest"
        }
      ],
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::compass::CompassQuadrant": {
      "identifier": "CompassQuadrant",
      "crate": "bevy_math",
      "path": "bevy_math::compass::CompassQuadrant",
      "documentation": " A compass enum with 4 directions.\n ```text\n          N (North)\n          ▲\n          │\n          │\n W (West) ┼─────► E (East)\n          │\n          │\n          ▼\n          S (South)\n ```",
      "associated_functions": [
        "bevy_math::compass::CompassQuadrant::eq",
        "bevy_math::compass::CompassQuadrant::neg",
        "bevy_math::compass::CompassQuadrant::to_index",
        "bevy_math::compass::CompassQuadrant::assert_receiver_is_total_eq",
        "bevy_math::compass::CompassQuadrant::clone",
        "bevy_math::compass::CompassQuadrant::opposite"
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "North"
        },
        {
          "kind": "Unit",
          "name": "East"
        },
        {
          "kind": "Unit",
          "name": "South"
        },
        {
          "kind": "Unit",
          "name": "West"
        }
      ],
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::curve::easing::EaseFunction": {
      "identifier": "EaseFunction",
      "crate": "bevy_math",
      "path": "bevy_math::curve::easing::EaseFunction",
      "documentation": " Curve functions over the [unit interval], commonly used for easing transitions.\n\n `EaseFunction` can be used on its own to interpolate between `0.0` and `1.0`.\n It can also be combined with [`EasingCurve`] to interpolate between other\n intervals and types, including vectors and rotations.\n\n # Example\n\n [`sample`] the smoothstep function at various points. This will return `None`\n if the parameter is outside the unit interval.\n\n ```\n # use bevy_math::prelude::*;\n let f = EaseFunction::SmoothStep;\n\n assert_eq!(f.sample(-1.0), None);\n assert_eq!(f.sample(0.0), Some(0.0));\n assert_eq!(f.sample(0.5), Some(0.5));\n assert_eq!(f.sample(1.0), Some(1.0));\n assert_eq!(f.sample(2.0), None);\n ```\n\n [`sample_clamped`] will clamp the parameter to the unit interval, so it\n always returns a value.\n\n ```\n # use bevy_math::prelude::*;\n # let f = EaseFunction::SmoothStep;\n assert_eq!(f.sample_clamped(-1.0), 0.0);\n assert_eq!(f.sample_clamped(0.0), 0.0);\n assert_eq!(f.sample_clamped(0.5), 0.5);\n assert_eq!(f.sample_clamped(1.0), 1.0);\n assert_eq!(f.sample_clamped(2.0), 1.0);\n ```\n\n [`sample`]: EaseFunction::sample\n [`sample_clamped`]: EaseFunction::sample_clamped\n [unit interval]: `Interval::UNIT`",
      "associated_functions": [
        "bevy_math::curve::easing::EaseFunction::eq",
        "bevy_math::curve::easing::EaseFunction::clone"
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "Linear"
        },
        {
          "kind": "Unit",
          "name": "QuadraticIn"
        },
        {
          "kind": "Unit",
          "name": "QuadraticOut"
        },
        {
          "kind": "Unit",
          "name": "QuadraticInOut"
        },
        {
          "kind": "Unit",
          "name": "CubicIn"
        },
        {
          "kind": "Unit",
          "name": "CubicOut"
        },
        {
          "kind": "Unit",
          "name": "CubicInOut"
        },
        {
          "kind": "Unit",
          "name": "QuarticIn"
        },
        {
          "kind": "Unit",
          "name": "QuarticOut"
        },
        {
          "kind": "Unit",
          "name": "QuarticInOut"
        },
        {
          "kind": "Unit",
          "name": "QuinticIn"
        },
        {
          "kind": "Unit",
          "name": "QuinticOut"
        },
        {
          "kind": "Unit",
          "name": "QuinticInOut"
        },
        {
          "kind": "Unit",
          "name": "SmoothStepIn"
        },
        {
          "kind": "Unit",
          "name": "SmoothStepOut"
        },
        {
          "kind": "Unit",
          "name": "SmoothStep"
        },
        {
          "kind": "Unit",
          "name": "SmootherStepIn"
        },
        {
          "kind": "Unit",
          "name": "SmootherStepOut"
        },
        {
          "kind": "Unit",
          "name": "SmootherStep"
        },
        {
          "kind": "Unit",
          "name": "SineIn"
        },
        {
          "kind": "Unit",
          "name": "SineOut"
        },
        {
          "kind": "Unit",
          "name": "SineInOut"
        },
        {
          "kind": "Unit",
          "name": "CircularIn"
        },
        {
          "kind": "Unit",
          "name": "CircularOut"
        },
        {
          "kind": "Unit",
          "name": "CircularInOut"
        },
        {
          "kind": "Unit",
          "name": "ExponentialIn"
        },
        {
          "kind": "Unit",
          "name": "ExponentialOut"
        },
        {
          "kind": "Unit",
          "name": "ExponentialInOut"
        },
        {
          "kind": "Unit",
          "name": "ElasticIn"
        },
        {
          "kind": "Unit",
          "name": "ElasticOut"
        },
        {
          "kind": "Unit",
          "name": "ElasticInOut"
        },
        {
          "kind": "Unit",
          "name": "BackIn"
        },
        {
          "kind": "Unit",
          "name": "BackOut"
        },
        {
          "kind": "Unit",
          "name": "BackInOut"
        },
        {
          "kind": "Unit",
          "name": "BounceIn"
        },
        {
          "kind": "Unit",
          "name": "BounceOut"
        },
        {
          "kind": "Unit",
          "name": "BounceInOut"
        },
        {
          "kind": "TupleStruct",
          "name": "Steps",
          "fields": [
            {
              "type": "usize"
            },
            {
              "type": "bevy_math::curve::easing::JumpAt"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Elastic",
          "fields": [
            {
              "type": "f32"
            }
          ]
        }
      ],
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::curve::easing::JumpAt": {
      "identifier": "JumpAt",
      "crate": "bevy_math",
      "path": "bevy_math::curve::easing::JumpAt",
      "documentation": " Configuration options for the [`EaseFunction::Steps`] curves. This closely replicates the\n [CSS step function specification].\n\n [CSS step function specification]: https://developer.mozilla.org/en-US/docs/Web/CSS/easing-function/steps#description",
      "associated_functions": [
        "bevy_math::curve::easing::JumpAt::clone",
        "bevy_math::curve::easing::JumpAt::eq",
        "bevy_math::curve::easing::JumpAt::assert_receiver_is_total_eq"
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "Start"
        },
        {
          "kind": "Unit",
          "name": "End"
        },
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "Unit",
          "name": "Both"
        }
      ],
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::curve::interval::Interval": {
      "identifier": "Interval",
      "crate": "bevy_math",
      "path": "bevy_math::curve::interval::Interval",
      "documentation": " A nonempty closed interval, possibly unbounded in either direction.\n\n In other words, the interval may stretch all the way to positive or negative infinity, but it\n will always have some nonempty interior.",
      "associated_functions": [
        "bevy_math::curve::interval::Interval::clamp",
        "bevy_math::curve::interval::Interval::contains_interval",
        "bevy_math::curve::interval::Interval::has_finite_start",
        "bevy_math::curve::interval::Interval::eq",
        "bevy_math::curve::interval::Interval::end",
        "bevy_math::curve::interval::Interval::contains",
        "bevy_math::curve::interval::Interval::length",
        "bevy_math::curve::interval::Interval::is_bounded",
        "bevy_math::curve::interval::Interval::has_finite_end",
        "bevy_math::curve::interval::Interval::start",
        "bevy_math::curve::interval::Interval::clone"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Interval",
        "fields": [
          {
            "name": "start",
            "type": "f32"
          },
          {
            "name": "end",
            "type": "f32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::direction::Dir2": {
      "identifier": "Dir2",
      "crate": "bevy_math",
      "path": "bevy_math::direction::Dir2",
      "documentation": " A normalized vector pointing in a direction in 2D space",
      "associated_functions": [
        "bevy_math::direction::Dir2::clone",
        "bevy_math::direction::Dir2::slerp",
        "bevy_math::direction::Dir2::new_unchecked",
        "bevy_math::direction::Dir2::rotation_from_y",
        "bevy_math::direction::Dir2::neg",
        "bevy_math::direction::Dir2::rotation_to_x",
        "bevy_math::direction::Dir2::rotation_to",
        "bevy_math::direction::Dir2::mul",
        "bevy_math::direction::Dir2::eq",
        "bevy_math::direction::Dir2::rotation_to_y",
        "bevy_math::direction::Dir2::fast_renormalize",
        "bevy_math::direction::Dir2::rotation_from",
        "bevy_math::direction::Dir2::as_vec2",
        "bevy_math::direction::Dir2::rotation_from_x",
        "bevy_math::direction::Dir2::from_xy_unchecked"
      ],
      "layout": {
        "kind": "TupleStruct",
        "name": "Dir2",
        "fields": [
          {
            "type": "glam::Vec2"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::direction::Dir3": {
      "identifier": "Dir3",
      "crate": "bevy_math",
      "path": "bevy_math::direction::Dir3",
      "documentation": " A normalized vector pointing in a direction in 3D space",
      "associated_functions": [
        "bevy_math::direction::Dir3::new_unchecked",
        "bevy_math::direction::Dir3::from_xyz_unchecked",
        "bevy_math::direction::Dir3::fast_renormalize",
        "bevy_math::direction::Dir3::neg",
        "bevy_math::direction::Dir3::as_vec3",
        "bevy_math::direction::Dir3::mul",
        "bevy_math::direction::Dir3::slerp",
        "bevy_math::direction::Dir3::clone",
        "bevy_math::direction::Dir3::eq"
      ],
      "layout": {
        "kind": "TupleStruct",
        "name": "Dir3",
        "fields": [
          {
            "type": "glam::Vec3"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::direction::Dir3A": {
      "identifier": "Dir3A",
      "crate": "bevy_math",
      "path": "bevy_math::direction::Dir3A",
      "documentation": " A normalized SIMD vector pointing in a direction in 3D space.\n\n This type stores a 16 byte aligned [`Vec3A`].\n This may or may not be faster than [`Dir3`]: make sure to benchmark!",
      "associated_functions": [
        "bevy_math::direction::Dir3A::new_unchecked",
        "bevy_math::direction::Dir3A::as_vec3a",
        "bevy_math::direction::Dir3A::clone",
        "bevy_math::direction::Dir3A::fast_renormalize",
        "bevy_math::direction::Dir3A::mul",
        "bevy_math::direction::Dir3A::neg",
        "bevy_math::direction::Dir3A::slerp",
        "bevy_math::direction::Dir3A::from_xyz_unchecked",
        "bevy_math::direction::Dir3A::eq"
      ],
      "layout": {
        "kind": "TupleStruct",
        "name": "Dir3A",
        "fields": [
          {
            "type": "glam::Vec3A"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::float_ord::FloatOrd": {
      "identifier": "FloatOrd",
      "crate": "bevy_math",
      "path": "bevy_math::float_ord::FloatOrd",
      "documentation": " A wrapper for floats that implements [`Ord`], [`Eq`], and [`Hash`] traits.\n\n This is a work around for the fact that the IEEE 754-2008 standard,\n implemented by Rust's [`f32`] type,\n doesn't define an ordering for [`NaN`](f32::NAN),\n and `NaN` is not considered equal to any other `NaN`.\n\n Wrapping a float with `FloatOrd` breaks conformance with the standard\n by sorting `NaN` as less than all other numbers and equal to any other `NaN`.",
      "associated_functions": [
        "bevy_math::float_ord::FloatOrd::clone",
        "bevy_math::float_ord::FloatOrd::neg",
        "bevy_math::float_ord::FloatOrd::lt",
        "bevy_math::float_ord::FloatOrd::gt",
        "bevy_math::float_ord::FloatOrd::eq",
        "bevy_math::float_ord::FloatOrd::ge",
        "bevy_math::float_ord::FloatOrd::le"
      ],
      "layout": {
        "kind": "TupleStruct",
        "name": "FloatOrd",
        "fields": [
          {
            "type": "f32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::isometry::Isometry2d": {
      "identifier": "Isometry2d",
      "crate": "bevy_math",
      "path": "bevy_math::isometry::Isometry2d",
      "documentation": " An isometry in two dimensions, representing a rotation followed by a translation.\n This can often be useful for expressing relative positions and transformations from one position to another.\n\n In particular, this type represents a distance-preserving transformation known as a *rigid motion* or a *direct motion*,\n and belongs to the special [Euclidean group] SE(2). This includes translation and rotation, but excludes reflection.\n\n For the three-dimensional version, see [`Isometry3d`].\n\n [Euclidean group]: https://en.wikipedia.org/wiki/Euclidean_group\n\n # Example\n\n Isometries can be created from a given translation and rotation:\n\n ```\n # use bevy_math::{Isometry2d, Rot2, Vec2};\n #\n let iso = Isometry2d::new(Vec2::new(2.0, 1.0), Rot2::degrees(90.0));\n ```\n\n Or from separate parts:\n\n ```\n # use bevy_math::{Isometry2d, Rot2, Vec2};\n #\n let iso1 = Isometry2d::from_translation(Vec2::new(2.0, 1.0));\n let iso2 = Isometry2d::from_rotation(Rot2::degrees(90.0));\n ```\n\n The isometries can be used to transform points:\n\n ```\n # use approx::assert_abs_diff_eq;\n # use bevy_math::{Isometry2d, Rot2, Vec2};\n #\n let iso = Isometry2d::new(Vec2::new(2.0, 1.0), Rot2::degrees(90.0));\n let point = Vec2::new(4.0, 4.0);\n\n // These are equivalent\n let result = iso.transform_point(point);\n let result = iso * point;\n\n assert_eq!(result, Vec2::new(-2.0, 5.0));\n ```\n\n Isometries can also be composed together:\n\n ```\n # use bevy_math::{Isometry2d, Rot2, Vec2};\n #\n # let iso = Isometry2d::new(Vec2::new(2.0, 1.0), Rot2::degrees(90.0));\n # let iso1 = Isometry2d::from_translation(Vec2::new(2.0, 1.0));\n # let iso2 = Isometry2d::from_rotation(Rot2::degrees(90.0));\n #\n assert_eq!(iso1 * iso2, iso);\n ```\n\n One common operation is to compute an isometry representing the relative positions of two objects\n for things like intersection tests. This can be done with an inverse transformation:\n\n ```\n # use bevy_math::{Isometry2d, Rot2, Vec2};\n #\n let circle_iso = Isometry2d::from_translation(Vec2::new(2.0, 1.0));\n let rectangle_iso = Isometry2d::from_rotation(Rot2::degrees(90.0));\n\n // Compute the relative position and orientation between the two shapes\n let relative_iso = circle_iso.inverse() * rectangle_iso;\n\n // Or alternatively, to skip an extra rotation operation:\n let relative_iso = circle_iso.inverse_mul(rectangle_iso);\n ```",
      "associated_functions": [
        "bevy_math::isometry::Isometry2d::mul",
        "bevy_math::isometry::Isometry2d::mul-2",
        "bevy_math::isometry::Isometry2d::from_xy",
        "bevy_math::isometry::Isometry2d::from_translation",
        "bevy_math::isometry::Isometry2d::clone",
        "bevy_math::isometry::Isometry2d::new",
        "bevy_math::isometry::Isometry2d::eq",
        "bevy_math::isometry::Isometry2d::inverse_transform_point",
        "bevy_math::isometry::Isometry2d::from_rotation",
        "bevy_math::isometry::Isometry2d::inverse_mul",
        "bevy_math::isometry::Isometry2d::mul-1",
        "bevy_math::isometry::Isometry2d::inverse",
        "bevy_math::isometry::Isometry2d::transform_point"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Isometry2d",
        "fields": [
          {
            "name": "rotation",
            "type": "bevy_math::rotation2d::Rot2"
          },
          {
            "name": "translation",
            "type": "glam::Vec2"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::isometry::Isometry3d": {
      "identifier": "Isometry3d",
      "crate": "bevy_math",
      "path": "bevy_math::isometry::Isometry3d",
      "documentation": " An isometry in three dimensions, representing a rotation followed by a translation.\n This can often be useful for expressing relative positions and transformations from one position to another.\n\n In particular, this type represents a distance-preserving transformation known as a *rigid motion* or a *direct motion*,\n and belongs to the special [Euclidean group] SE(3). This includes translation and rotation, but excludes reflection.\n\n For the two-dimensional version, see [`Isometry2d`].\n\n [Euclidean group]: https://en.wikipedia.org/wiki/Euclidean_group\n\n # Example\n\n Isometries can be created from a given translation and rotation:\n\n ```\n # use bevy_math::{Isometry3d, Quat, Vec3};\n # use std::f32::consts::FRAC_PI_2;\n #\n let iso = Isometry3d::new(Vec3::new(2.0, 1.0, 3.0), Quat::from_rotation_z(FRAC_PI_2));\n ```\n\n Or from separate parts:\n\n ```\n # use bevy_math::{Isometry3d, Quat, Vec3};\n # use std::f32::consts::FRAC_PI_2;\n #\n let iso1 = Isometry3d::from_translation(Vec3::new(2.0, 1.0, 3.0));\n let iso2 = Isometry3d::from_rotation(Quat::from_rotation_z(FRAC_PI_2));\n ```\n\n The isometries can be used to transform points:\n\n ```\n # use approx::assert_relative_eq;\n # use bevy_math::{Isometry3d, Quat, Vec3};\n # use std::f32::consts::FRAC_PI_2;\n #\n let iso = Isometry3d::new(Vec3::new(2.0, 1.0, 3.0), Quat::from_rotation_z(FRAC_PI_2));\n let point = Vec3::new(4.0, 4.0, 4.0);\n\n // These are equivalent\n let result = iso.transform_point(point);\n let result = iso * point;\n\n assert_relative_eq!(result, Vec3::new(-2.0, 5.0, 7.0));\n ```\n\n Isometries can also be composed together:\n\n ```\n # use bevy_math::{Isometry3d, Quat, Vec3};\n # use std::f32::consts::FRAC_PI_2;\n #\n # let iso = Isometry3d::new(Vec3::new(2.0, 1.0, 3.0), Quat::from_rotation_z(FRAC_PI_2));\n # let iso1 = Isometry3d::from_translation(Vec3::new(2.0, 1.0, 3.0));\n # let iso2 = Isometry3d::from_rotation(Quat::from_rotation_z(FRAC_PI_2));\n #\n assert_eq!(iso1 * iso2, iso);\n ```\n\n One common operation is to compute an isometry representing the relative positions of two objects\n for things like intersection tests. This can be done with an inverse transformation:\n\n ```\n # use bevy_math::{Isometry3d, Quat, Vec3};\n # use std::f32::consts::FRAC_PI_2;\n #\n let sphere_iso = Isometry3d::from_translation(Vec3::new(2.0, 1.0, 3.0));\n let cuboid_iso = Isometry3d::from_rotation(Quat::from_rotation_z(FRAC_PI_2));\n\n // Compute the relative position and orientation between the two shapes\n let relative_iso = sphere_iso.inverse() * cuboid_iso;\n\n // Or alternatively, to skip an extra rotation operation:\n let relative_iso = sphere_iso.inverse_mul(cuboid_iso);\n ```",
      "associated_functions": [
        "bevy_math::isometry::Isometry3d::eq",
        "bevy_math::isometry::Isometry3d::inverse_mul",
        "bevy_math::isometry::Isometry3d::mul",
        "bevy_math::isometry::Isometry3d::inverse",
        "bevy_math::isometry::Isometry3d::mul-3",
        "bevy_math::isometry::Isometry3d::mul-1",
        "bevy_math::isometry::Isometry3d::from_xyz",
        "bevy_math::isometry::Isometry3d::clone",
        "bevy_math::isometry::Isometry3d::mul-2",
        "bevy_math::isometry::Isometry3d::from_rotation"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Isometry3d",
        "fields": [
          {
            "name": "rotation",
            "type": "glam::Quat"
          },
          {
            "name": "translation",
            "type": "glam::Vec3A"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::primitives::dim2::Annulus": {
      "identifier": "Annulus",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim2::Annulus",
      "documentation": " A primitive shape formed by the region between two circles, also known as a ring.",
      "associated_functions": [
        "bevy_math::primitives::dim2::Annulus::thickness",
        "bevy_math::primitives::dim2::Annulus::eq",
        "bevy_math::primitives::dim2::Annulus::new",
        "bevy_math::primitives::dim2::Annulus::diameter",
        "bevy_math::primitives::dim2::Annulus::closest_point",
        "bevy_math::primitives::dim2::Annulus::clone"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Annulus",
        "fields": [
          {
            "name": "inner_circle",
            "type": "bevy_math::primitives::dim2::Circle"
          },
          {
            "name": "outer_circle",
            "type": "bevy_math::primitives::dim2::Circle"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::primitives::dim2::Arc2d": {
      "identifier": "Arc2d",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim2::Arc2d",
      "documentation": " A primitive representing an arc between two points on a circle.\n\n An arc has no area.\n If you want to include the portion of a circle's area swept out by the arc,\n use the pie-shaped [`CircularSector`].\n If you want to include only the space inside the convex hull of the arc,\n use the bowl-shaped [`CircularSegment`].\n\n The arc is drawn starting from [`Vec2::Y`], extending by `half_angle` radians on\n either side. The center of the circle is the origin [`Vec2::ZERO`]. Note that this\n means that the origin may not be within the `Arc2d`'s convex hull.\n\n **Warning:** Arcs with negative angle or radius, or with angle greater than an entire circle, are not officially supported.\n It is recommended to normalize arcs to have an angle in [0, 2π].",
      "associated_functions": [
        "bevy_math::primitives::dim2::Arc2d::sagitta",
        "bevy_math::primitives::dim2::Arc2d::from_degrees",
        "bevy_math::primitives::dim2::Arc2d::length",
        "bevy_math::primitives::dim2::Arc2d::is_minor",
        "bevy_math::primitives::dim2::Arc2d::eq",
        "bevy_math::primitives::dim2::Arc2d::from_radians",
        "bevy_math::primitives::dim2::Arc2d::clone",
        "bevy_math::primitives::dim2::Arc2d::chord_midpoint",
        "bevy_math::primitives::dim2::Arc2d::right_endpoint",
        "bevy_math::primitives::dim2::Arc2d::angle",
        "bevy_math::primitives::dim2::Arc2d::from_turns",
        "bevy_math::primitives::dim2::Arc2d::new",
        "bevy_math::primitives::dim2::Arc2d::chord_length",
        "bevy_math::primitives::dim2::Arc2d::left_endpoint",
        "bevy_math::primitives::dim2::Arc2d::apothem",
        "bevy_math::primitives::dim2::Arc2d::midpoint",
        "bevy_math::primitives::dim2::Arc2d::is_major",
        "bevy_math::primitives::dim2::Arc2d::half_chord_length"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Arc2d",
        "fields": [
          {
            "name": "radius",
            "type": "f32"
          },
          {
            "name": "half_angle",
            "type": "f32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::primitives::dim2::Capsule2d": {
      "identifier": "Capsule2d",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim2::Capsule2d",
      "documentation": " A 2D capsule primitive, also known as a stadium or pill shape.\n\n A two-dimensional capsule is defined as a neighborhood of points at a distance (radius) from a line",
      "associated_functions": [
        "bevy_math::primitives::dim2::Capsule2d::new",
        "bevy_math::primitives::dim2::Capsule2d::clone",
        "bevy_math::primitives::dim2::Capsule2d::to_inner_rectangle",
        "bevy_math::primitives::dim2::Capsule2d::eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Capsule2d",
        "fields": [
          {
            "name": "radius",
            "type": "f32"
          },
          {
            "name": "half_length",
            "type": "f32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::primitives::dim2::Circle": {
      "identifier": "Circle",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim2::Circle",
      "documentation": " A circle primitive, representing the set of points some distance from the origin",
      "associated_functions": [
        "bevy_math::primitives::dim2::Circle::diameter",
        "bevy_math::primitives::dim2::Circle::closest_point",
        "bevy_math::primitives::dim2::Circle::new",
        "bevy_math::primitives::dim2::Circle::clone",
        "bevy_math::primitives::dim2::Circle::eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Circle",
        "fields": [
          {
            "name": "radius",
            "type": "f32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::primitives::dim2::CircularSector": {
      "identifier": "CircularSector",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim2::CircularSector",
      "documentation": " A primitive representing a circular sector: a pie slice of a circle.\n\n The segment is positioned so that it always includes [`Vec2::Y`] and is vertically symmetrical.\n To orient the sector differently, apply a rotation.\n The sector is drawn with the center of its circle at the origin [`Vec2::ZERO`].\n\n **Warning:** Circular sectors with negative angle or radius, or with angle greater than an entire circle, are not officially supported.\n We recommend normalizing circular sectors to have an angle in [0, 2π].",
      "associated_functions": [
        "bevy_math::primitives::dim2::CircularSector::chord_midpoint",
        "bevy_math::primitives::dim2::CircularSector::from_degrees",
        "bevy_math::primitives::dim2::CircularSector::sagitta",
        "bevy_math::primitives::dim2::CircularSector::angle",
        "bevy_math::primitives::dim2::CircularSector::half_angle",
        "bevy_math::primitives::dim2::CircularSector::eq",
        "bevy_math::primitives::dim2::CircularSector::from_turns",
        "bevy_math::primitives::dim2::CircularSector::clone",
        "bevy_math::primitives::dim2::CircularSector::half_chord_length",
        "bevy_math::primitives::dim2::CircularSector::from_radians",
        "bevy_math::primitives::dim2::CircularSector::apothem",
        "bevy_math::primitives::dim2::CircularSector::radius",
        "bevy_math::primitives::dim2::CircularSector::chord_length",
        "bevy_math::primitives::dim2::CircularSector::arc_length",
        "bevy_math::primitives::dim2::CircularSector::new"
      ],
      "layout": {
        "kind": "Struct",
        "name": "CircularSector",
        "fields": [
          {
            "name": "arc",
            "type": "bevy_math::primitives::dim2::Arc2d"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::primitives::dim2::CircularSegment": {
      "identifier": "CircularSegment",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim2::CircularSegment",
      "documentation": " A primitive representing a circular segment:\n the area enclosed by the arc of a circle and its chord (the line between its endpoints).\n\n The segment is drawn starting from [`Vec2::Y`], extending equally on either side.\n To orient the segment differently, apply a rotation.\n The segment is drawn with the center of its circle at the origin [`Vec2::ZERO`].\n When positioning a segment, the [`apothem`](Self::apothem) function may be particularly useful.\n\n **Warning:** Circular segments with negative angle or radius, or with angle greater than an entire circle, are not officially supported.\n We recommend normalizing circular segments to have an angle in [0, 2π].",
      "associated_functions": [
        "bevy_math::primitives::dim2::CircularSegment::new",
        "bevy_math::primitives::dim2::CircularSegment::half_angle",
        "bevy_math::primitives::dim2::CircularSegment::clone",
        "bevy_math::primitives::dim2::CircularSegment::sagitta",
        "bevy_math::primitives::dim2::CircularSegment::chord_midpoint",
        "bevy_math::primitives::dim2::CircularSegment::eq",
        "bevy_math::primitives::dim2::CircularSegment::apothem",
        "bevy_math::primitives::dim2::CircularSegment::from_degrees",
        "bevy_math::primitives::dim2::CircularSegment::from_radians",
        "bevy_math::primitives::dim2::CircularSegment::half_chord_length",
        "bevy_math::primitives::dim2::CircularSegment::chord_length",
        "bevy_math::primitives::dim2::CircularSegment::radius",
        "bevy_math::primitives::dim2::CircularSegment::arc_length",
        "bevy_math::primitives::dim2::CircularSegment::from_turns",
        "bevy_math::primitives::dim2::CircularSegment::angle"
      ],
      "layout": {
        "kind": "Struct",
        "name": "CircularSegment",
        "fields": [
          {
            "name": "arc",
            "type": "bevy_math::primitives::dim2::Arc2d"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::primitives::dim2::Ellipse": {
      "identifier": "Ellipse",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim2::Ellipse",
      "documentation": " An ellipse primitive, which is like a circle, but the width and height can be different",
      "associated_functions": [
        "bevy_math::primitives::dim2::Ellipse::new",
        "bevy_math::primitives::dim2::Ellipse::focal_length",
        "bevy_math::primitives::dim2::Ellipse::from_size",
        "bevy_math::primitives::dim2::Ellipse::eq",
        "bevy_math::primitives::dim2::Ellipse::semi_major",
        "bevy_math::primitives::dim2::Ellipse::clone",
        "bevy_math::primitives::dim2::Ellipse::eccentricity",
        "bevy_math::primitives::dim2::Ellipse::semi_minor"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Ellipse",
        "fields": [
          {
            "name": "half_size",
            "type": "glam::Vec2"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::primitives::dim2::Line2d": {
      "identifier": "Line2d",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim2::Line2d",
      "documentation": " An infinite line going through the origin along a direction in 2D space.\n\n For a finite line: [`Segment2d`]",
      "associated_functions": [
        "bevy_math::primitives::dim2::Line2d::eq",
        "bevy_math::primitives::dim2::Line2d::clone"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Line2d",
        "fields": [
          {
            "name": "direction",
            "type": "bevy_math::direction::Dir2"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::primitives::dim2::Plane2d": {
      "identifier": "Plane2d",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim2::Plane2d",
      "documentation": " An unbounded plane in 2D space. It forms a separating surface through the origin,\n stretching infinitely far",
      "associated_functions": [
        "bevy_math::primitives::dim2::Plane2d::new",
        "bevy_math::primitives::dim2::Plane2d::eq",
        "bevy_math::primitives::dim2::Plane2d::clone"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Plane2d",
        "fields": [
          {
            "name": "normal",
            "type": "bevy_math::direction::Dir2"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::primitives::dim2::Rectangle": {
      "identifier": "Rectangle",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim2::Rectangle",
      "documentation": " A rectangle primitive, which is like a square, except that the width and height can be different",
      "associated_functions": [
        "bevy_math::primitives::dim2::Rectangle::closest_point",
        "bevy_math::primitives::dim2::Rectangle::from_size",
        "bevy_math::primitives::dim2::Rectangle::clone",
        "bevy_math::primitives::dim2::Rectangle::eq",
        "bevy_math::primitives::dim2::Rectangle::new",
        "bevy_math::primitives::dim2::Rectangle::from_corners",
        "bevy_math::primitives::dim2::Rectangle::from_length",
        "bevy_math::primitives::dim2::Rectangle::size"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Rectangle",
        "fields": [
          {
            "name": "half_size",
            "type": "glam::Vec2"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::primitives::dim2::RegularPolygon": {
      "identifier": "RegularPolygon",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim2::RegularPolygon",
      "documentation": " A polygon centered on the origin where all vertices lie on a circle, equally far apart.",
      "associated_functions": [
        "bevy_math::primitives::dim2::RegularPolygon::internal_angle_degrees",
        "bevy_math::primitives::dim2::RegularPolygon::internal_angle_radians",
        "bevy_math::primitives::dim2::RegularPolygon::new",
        "bevy_math::primitives::dim2::RegularPolygon::inradius",
        "bevy_math::primitives::dim2::RegularPolygon::eq",
        "bevy_math::primitives::dim2::RegularPolygon::external_angle_radians",
        "bevy_math::primitives::dim2::RegularPolygon::clone",
        "bevy_math::primitives::dim2::RegularPolygon::external_angle_degrees",
        "bevy_math::primitives::dim2::RegularPolygon::side_length",
        "bevy_math::primitives::dim2::RegularPolygon::circumradius"
      ],
      "layout": {
        "kind": "Struct",
        "name": "RegularPolygon",
        "fields": [
          {
            "name": "circumcircle",
            "type": "bevy_math::primitives::dim2::Circle"
          },
          {
            "name": "sides",
            "type": "u32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::primitives::dim2::Rhombus": {
      "identifier": "Rhombus",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim2::Rhombus",
      "documentation": " A rhombus primitive, also known as a diamond shape.\n A four sided polygon, centered on the origin, where opposite sides are parallel but without\n requiring right angles.",
      "associated_functions": [
        "bevy_math::primitives::dim2::Rhombus::from_inradius",
        "bevy_math::primitives::dim2::Rhombus::circumradius",
        "bevy_math::primitives::dim2::Rhombus::eq",
        "bevy_math::primitives::dim2::Rhombus::inradius",
        "bevy_math::primitives::dim2::Rhombus::from_side",
        "bevy_math::primitives::dim2::Rhombus::closest_point",
        "bevy_math::primitives::dim2::Rhombus::new",
        "bevy_math::primitives::dim2::Rhombus::clone",
        "bevy_math::primitives::dim2::Rhombus::side"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Rhombus",
        "fields": [
          {
            "name": "half_diagonals",
            "type": "glam::Vec2"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::primitives::dim2::Segment2d": {
      "identifier": "Segment2d",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim2::Segment2d",
      "documentation": " A line segment defined by two endpoints in 2D space.",
      "associated_functions": [
        "bevy_math::primitives::dim2::Segment2d::rotated_around",
        "bevy_math::primitives::dim2::Segment2d::reverse",
        "bevy_math::primitives::dim2::Segment2d::centered",
        "bevy_math::primitives::dim2::Segment2d::scaled_direction",
        "bevy_math::primitives::dim2::Segment2d::scaled_left_normal",
        "bevy_math::primitives::dim2::Segment2d::length_squared",
        "bevy_math::primitives::dim2::Segment2d::left_normal",
        "bevy_math::primitives::dim2::Segment2d::scaled_right_normal",
        "bevy_math::primitives::dim2::Segment2d::rotated_around_center",
        "bevy_math::primitives::dim2::Segment2d::point2",
        "bevy_math::primitives::dim2::Segment2d::reversed",
        "bevy_math::primitives::dim2::Segment2d::from_scaled_direction",
        "bevy_math::primitives::dim2::Segment2d::new",
        "bevy_math::primitives::dim2::Segment2d::resized",
        "bevy_math::primitives::dim2::Segment2d::from_direction_and_length",
        "bevy_math::primitives::dim2::Segment2d::length",
        "bevy_math::primitives::dim2::Segment2d::rotated",
        "bevy_math::primitives::dim2::Segment2d::center",
        "bevy_math::primitives::dim2::Segment2d::right_normal",
        "bevy_math::primitives::dim2::Segment2d::point1",
        "bevy_math::primitives::dim2::Segment2d::direction",
        "bevy_math::primitives::dim2::Segment2d::clone",
        "bevy_math::primitives::dim2::Segment2d::eq",
        "bevy_math::primitives::dim2::Segment2d::from_ray_and_length",
        "bevy_math::primitives::dim2::Segment2d::translated"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Segment2d",
        "fields": [
          {
            "name": "vertices",
            "type": "[glam::Vec2; 2]"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::primitives::dim2::Triangle2d": {
      "identifier": "Triangle2d",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim2::Triangle2d",
      "documentation": " A triangle in 2D space",
      "associated_functions": [
        "bevy_math::primitives::dim2::Triangle2d::reversed",
        "bevy_math::primitives::dim2::Triangle2d::eq",
        "bevy_math::primitives::dim2::Triangle2d::is_acute",
        "bevy_math::primitives::dim2::Triangle2d::is_degenerate",
        "bevy_math::primitives::dim2::Triangle2d::clone",
        "bevy_math::primitives::dim2::Triangle2d::is_obtuse",
        "bevy_math::primitives::dim2::Triangle2d::reverse",
        "bevy_math::primitives::dim2::Triangle2d::new"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Triangle2d",
        "fields": [
          {
            "name": "vertices",
            "type": "[glam::Vec2; 3]"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::primitives::dim3::Capsule3d": {
      "identifier": "Capsule3d",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim3::Capsule3d",
      "documentation": " A 3D capsule primitive centered on the origin\n A three-dimensional capsule is defined as a surface at a distance (radius) from a line",
      "associated_functions": [
        "bevy_math::primitives::dim3::Capsule3d::to_cylinder",
        "bevy_math::primitives::dim3::Capsule3d::clone",
        "bevy_math::primitives::dim3::Capsule3d::eq",
        "bevy_math::primitives::dim3::Capsule3d::new"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Capsule3d",
        "fields": [
          {
            "name": "radius",
            "type": "f32"
          },
          {
            "name": "half_length",
            "type": "f32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::primitives::dim3::Cone": {
      "identifier": "Cone",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim3::Cone",
      "documentation": " A cone primitive centered on the midpoint between the tip of the cone and the center of its base.\n\n The cone is oriented with its tip pointing towards the Y axis.",
      "associated_functions": [
        "bevy_math::primitives::dim3::Cone::base_area",
        "bevy_math::primitives::dim3::Cone::new",
        "bevy_math::primitives::dim3::Cone::slant_height",
        "bevy_math::primitives::dim3::Cone::eq",
        "bevy_math::primitives::dim3::Cone::base",
        "bevy_math::primitives::dim3::Cone::lateral_area",
        "bevy_math::primitives::dim3::Cone::clone"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Cone",
        "fields": [
          {
            "name": "radius",
            "type": "f32"
          },
          {
            "name": "height",
            "type": "f32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::primitives::dim3::ConicalFrustum": {
      "identifier": "ConicalFrustum",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim3::ConicalFrustum",
      "documentation": " A conical frustum primitive.\n A conical frustum can be created\n by slicing off a section of a cone.",
      "associated_functions": [
        "bevy_math::primitives::dim3::ConicalFrustum::eq",
        "bevy_math::primitives::dim3::ConicalFrustum::clone"
      ],
      "layout": {
        "kind": "Struct",
        "name": "ConicalFrustum",
        "fields": [
          {
            "name": "radius_top",
            "type": "f32"
          },
          {
            "name": "radius_bottom",
            "type": "f32"
          },
          {
            "name": "height",
            "type": "f32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::primitives::dim3::Cuboid": {
      "identifier": "Cuboid",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim3::Cuboid",
      "documentation": " A cuboid primitive, which is like a cube, except that the x, y, and z dimensions are not\n required to be the same.",
      "associated_functions": [
        "bevy_math::primitives::dim3::Cuboid::from_length",
        "bevy_math::primitives::dim3::Cuboid::closest_point",
        "bevy_math::primitives::dim3::Cuboid::new",
        "bevy_math::primitives::dim3::Cuboid::size",
        "bevy_math::primitives::dim3::Cuboid::eq",
        "bevy_math::primitives::dim3::Cuboid::from_corners",
        "bevy_math::primitives::dim3::Cuboid::clone",
        "bevy_math::primitives::dim3::Cuboid::from_size"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Cuboid",
        "fields": [
          {
            "name": "half_size",
            "type": "glam::Vec3"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::primitives::dim3::Cylinder": {
      "identifier": "Cylinder",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim3::Cylinder",
      "documentation": " A cylinder primitive centered on the origin",
      "associated_functions": [
        "bevy_math::primitives::dim3::Cylinder::new",
        "bevy_math::primitives::dim3::Cylinder::base",
        "bevy_math::primitives::dim3::Cylinder::base_area",
        "bevy_math::primitives::dim3::Cylinder::eq",
        "bevy_math::primitives::dim3::Cylinder::lateral_area",
        "bevy_math::primitives::dim3::Cylinder::clone"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Cylinder",
        "fields": [
          {
            "name": "radius",
            "type": "f32"
          },
          {
            "name": "half_height",
            "type": "f32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::primitives::dim3::InfinitePlane3d": {
      "identifier": "InfinitePlane3d",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim3::InfinitePlane3d",
      "documentation": " An unbounded plane in 3D space. It forms a separating surface through the origin,\n stretching infinitely far",
      "associated_functions": [
        "bevy_math::primitives::dim3::InfinitePlane3d::eq",
        "bevy_math::primitives::dim3::InfinitePlane3d::isometry_into_xy",
        "bevy_math::primitives::dim3::InfinitePlane3d::clone",
        "bevy_math::primitives::dim3::InfinitePlane3d::isometry_from_xy"
      ],
      "layout": {
        "kind": "Struct",
        "name": "InfinitePlane3d",
        "fields": [
          {
            "name": "normal",
            "type": "bevy_math::direction::Dir3"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::primitives::dim3::Line3d": {
      "identifier": "Line3d",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim3::Line3d",
      "documentation": " An infinite line going through the origin along a direction in 3D space.\n\n For a finite line: [`Segment3d`]",
      "associated_functions": [
        "bevy_math::primitives::dim3::Line3d::clone",
        "bevy_math::primitives::dim3::Line3d::eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Line3d",
        "fields": [
          {
            "name": "direction",
            "type": "bevy_math::direction::Dir3"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::primitives::dim3::Plane3d": {
      "identifier": "Plane3d",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim3::Plane3d",
      "documentation": " A bounded plane in 3D space. It forms a surface starting from the origin with a defined height and width.",
      "associated_functions": [
        "bevy_math::primitives::dim3::Plane3d::clone",
        "bevy_math::primitives::dim3::Plane3d::eq",
        "bevy_math::primitives::dim3::Plane3d::new"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Plane3d",
        "fields": [
          {
            "name": "normal",
            "type": "bevy_math::direction::Dir3"
          },
          {
            "name": "half_size",
            "type": "glam::Vec2"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::primitives::dim3::Segment3d": {
      "identifier": "Segment3d",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim3::Segment3d",
      "documentation": " A line segment defined by two endpoints in 3D space.",
      "associated_functions": [
        "bevy_math::primitives::dim3::Segment3d::scaled_direction",
        "bevy_math::primitives::dim3::Segment3d::reversed",
        "bevy_math::primitives::dim3::Segment3d::point2",
        "bevy_math::primitives::dim3::Segment3d::centered",
        "bevy_math::primitives::dim3::Segment3d::length",
        "bevy_math::primitives::dim3::Segment3d::reverse",
        "bevy_math::primitives::dim3::Segment3d::resized",
        "bevy_math::primitives::dim3::Segment3d::point1",
        "bevy_math::primitives::dim3::Segment3d::clone",
        "bevy_math::primitives::dim3::Segment3d::from_ray_and_length",
        "bevy_math::primitives::dim3::Segment3d::rotated_around_center",
        "bevy_math::primitives::dim3::Segment3d::from_scaled_direction",
        "bevy_math::primitives::dim3::Segment3d::translated",
        "bevy_math::primitives::dim3::Segment3d::center",
        "bevy_math::primitives::dim3::Segment3d::from_direction_and_length",
        "bevy_math::primitives::dim3::Segment3d::rotated",
        "bevy_math::primitives::dim3::Segment3d::length_squared",
        "bevy_math::primitives::dim3::Segment3d::new",
        "bevy_math::primitives::dim3::Segment3d::eq",
        "bevy_math::primitives::dim3::Segment3d::rotated_around",
        "bevy_math::primitives::dim3::Segment3d::direction"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Segment3d",
        "fields": [
          {
            "name": "vertices",
            "type": "[glam::Vec3; 2]"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::primitives::dim3::Sphere": {
      "identifier": "Sphere",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim3::Sphere",
      "documentation": " A sphere primitive, representing the set of all points some distance from the origin",
      "associated_functions": [
        "bevy_math::primitives::dim3::Sphere::eq",
        "bevy_math::primitives::dim3::Sphere::closest_point",
        "bevy_math::primitives::dim3::Sphere::diameter",
        "bevy_math::primitives::dim3::Sphere::clone",
        "bevy_math::primitives::dim3::Sphere::new"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Sphere",
        "fields": [
          {
            "name": "radius",
            "type": "f32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::primitives::dim3::Tetrahedron": {
      "identifier": "Tetrahedron",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim3::Tetrahedron",
      "documentation": " A tetrahedron primitive.",
      "associated_functions": [
        "bevy_math::primitives::dim3::Tetrahedron::signed_volume",
        "bevy_math::primitives::dim3::Tetrahedron::eq",
        "bevy_math::primitives::dim3::Tetrahedron::new",
        "bevy_math::primitives::dim3::Tetrahedron::clone",
        "bevy_math::primitives::dim3::Tetrahedron::centroid"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Tetrahedron",
        "fields": [
          {
            "name": "vertices",
            "type": "[glam::Vec3; 4]"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::primitives::dim3::Torus": {
      "identifier": "Torus",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim3::Torus",
      "documentation": " A torus primitive, often representing a ring or donut shape\n The set of points some distance from a circle centered at the origin",
      "associated_functions": [
        "bevy_math::primitives::dim3::Torus::outer_radius",
        "bevy_math::primitives::dim3::Torus::inner_radius",
        "bevy_math::primitives::dim3::Torus::clone",
        "bevy_math::primitives::dim3::Torus::new",
        "bevy_math::primitives::dim3::Torus::eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Torus",
        "fields": [
          {
            "name": "minor_radius",
            "type": "f32"
          },
          {
            "name": "major_radius",
            "type": "f32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::primitives::dim3::Triangle3d": {
      "identifier": "Triangle3d",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim3::Triangle3d",
      "documentation": " A 3D triangle primitive.",
      "associated_functions": [
        "bevy_math::primitives::dim3::Triangle3d::is_degenerate",
        "bevy_math::primitives::dim3::Triangle3d::is_obtuse",
        "bevy_math::primitives::dim3::Triangle3d::reverse",
        "bevy_math::primitives::dim3::Triangle3d::eq",
        "bevy_math::primitives::dim3::Triangle3d::clone",
        "bevy_math::primitives::dim3::Triangle3d::is_acute",
        "bevy_math::primitives::dim3::Triangle3d::new",
        "bevy_math::primitives::dim3::Triangle3d::circumcenter",
        "bevy_math::primitives::dim3::Triangle3d::reversed",
        "bevy_math::primitives::dim3::Triangle3d::centroid"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Triangle3d",
        "fields": [
          {
            "name": "vertices",
            "type": "[glam::Vec3; 3]"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::ray::Ray2d": {
      "identifier": "Ray2d",
      "crate": "bevy_math",
      "path": "bevy_math::ray::Ray2d",
      "documentation": " An infinite half-line starting at `origin` and going in `direction` in 2D space.",
      "associated_functions": [
        "bevy_math::ray::Ray2d::clone",
        "bevy_math::ray::Ray2d::get_point",
        "bevy_math::ray::Ray2d::intersect_plane",
        "bevy_math::ray::Ray2d::eq",
        "bevy_math::ray::Ray2d::new"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Ray2d",
        "fields": [
          {
            "name": "origin",
            "type": "glam::Vec2"
          },
          {
            "name": "direction",
            "type": "bevy_math::direction::Dir2"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::ray::Ray3d": {
      "identifier": "Ray3d",
      "crate": "bevy_math",
      "path": "bevy_math::ray::Ray3d",
      "documentation": " An infinite half-line starting at `origin` and going in `direction` in 3D space.",
      "associated_functions": [
        "bevy_math::ray::Ray3d::clone",
        "bevy_math::ray::Ray3d::get_point",
        "bevy_math::ray::Ray3d::eq",
        "bevy_math::ray::Ray3d::new",
        "bevy_math::ray::Ray3d::intersect_plane"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Ray3d",
        "fields": [
          {
            "name": "origin",
            "type": "glam::Vec3"
          },
          {
            "name": "direction",
            "type": "bevy_math::direction::Dir3"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::rects::irect::IRect": {
      "identifier": "IRect",
      "crate": "bevy_math",
      "path": "bevy_math::rects::irect::IRect",
      "documentation": " A rectangle defined by two opposite corners.\n\n The rectangle is axis aligned, and defined by its minimum and maximum coordinates,\n stored in `IRect::min` and `IRect::max`, respectively. The minimum/maximum invariant\n must be upheld by the user when directly assigning the fields, otherwise some methods\n produce invalid results. It is generally recommended to use one of the constructor\n methods instead, which will ensure this invariant is met, unless you already have\n the minimum and maximum corners.",
      "associated_functions": [
        "bevy_math::rects::irect::IRect::inflate",
        "bevy_math::rects::irect::IRect::from_corners",
        "bevy_math::rects::irect::IRect::from_center_half_size",
        "bevy_math::rects::irect::IRect::contains",
        "bevy_math::rects::irect::IRect::as_urect",
        "bevy_math::rects::irect::IRect::new",
        "bevy_math::rects::irect::IRect::union",
        "bevy_math::rects::irect::IRect::assert_receiver_is_total_eq",
        "bevy_math::rects::irect::IRect::center",
        "bevy_math::rects::irect::IRect::from_center_size",
        "bevy_math::rects::irect::IRect::width",
        "bevy_math::rects::irect::IRect::union_point",
        "bevy_math::rects::irect::IRect::size",
        "bevy_math::rects::irect::IRect::as_rect",
        "bevy_math::rects::irect::IRect::half_size",
        "bevy_math::rects::irect::IRect::intersect",
        "bevy_math::rects::irect::IRect::eq",
        "bevy_math::rects::irect::IRect::is_empty",
        "bevy_math::rects::irect::IRect::clone",
        "bevy_math::rects::irect::IRect::height"
      ],
      "layout": {
        "kind": "Struct",
        "name": "IRect",
        "fields": [
          {
            "name": "min",
            "type": "glam::IVec2"
          },
          {
            "name": "max",
            "type": "glam::IVec2"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::rects::rect::Rect": {
      "identifier": "Rect",
      "crate": "bevy_math",
      "path": "bevy_math::rects::rect::Rect",
      "documentation": " A rectangle defined by two opposite corners.\n\n The rectangle is axis aligned, and defined by its minimum and maximum coordinates,\n stored in `Rect::min` and `Rect::max`, respectively. The minimum/maximum invariant\n must be upheld by the user when directly assigning the fields, otherwise some methods\n produce invalid results. It is generally recommended to use one of the constructor\n methods instead, which will ensure this invariant is met, unless you already have\n the minimum and maximum corners.",
      "associated_functions": [
        "bevy_math::rects::rect::Rect::as_urect",
        "bevy_math::rects::rect::Rect::from_corners",
        "bevy_math::rects::rect::Rect::half_size",
        "bevy_math::rects::rect::Rect::is_empty",
        "bevy_math::rects::rect::Rect::as_irect",
        "bevy_math::rects::rect::Rect::union",
        "bevy_math::rects::rect::Rect::size",
        "bevy_math::rects::rect::Rect::union_point",
        "bevy_math::rects::rect::Rect::from_center_size",
        "bevy_math::rects::rect::Rect::inflate",
        "bevy_math::rects::rect::Rect::width",
        "bevy_math::rects::rect::Rect::from_center_half_size",
        "bevy_math::rects::rect::Rect::normalize",
        "bevy_math::rects::rect::Rect::eq",
        "bevy_math::rects::rect::Rect::clone",
        "bevy_math::rects::rect::Rect::center",
        "bevy_math::rects::rect::Rect::contains",
        "bevy_math::rects::rect::Rect::height",
        "bevy_math::rects::rect::Rect::new",
        "bevy_math::rects::rect::Rect::intersect"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Rect",
        "fields": [
          {
            "name": "min",
            "type": "glam::Vec2"
          },
          {
            "name": "max",
            "type": "glam::Vec2"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::rects::urect::URect": {
      "identifier": "URect",
      "crate": "bevy_math",
      "path": "bevy_math::rects::urect::URect",
      "documentation": " A rectangle defined by two opposite corners.\n\n The rectangle is axis aligned, and defined by its minimum and maximum coordinates,\n stored in `URect::min` and `URect::max`, respectively. The minimum/maximum invariant\n must be upheld by the user when directly assigning the fields, otherwise some methods\n produce invalid results. It is generally recommended to use one of the constructor\n methods instead, which will ensure this invariant is met, unless you already have\n the minimum and maximum corners.",
      "associated_functions": [
        "bevy_math::rects::urect::URect::clone",
        "bevy_math::rects::urect::URect::size",
        "bevy_math::rects::urect::URect::as_rect",
        "bevy_math::rects::urect::URect::half_size",
        "bevy_math::rects::urect::URect::height",
        "bevy_math::rects::urect::URect::eq",
        "bevy_math::rects::urect::URect::as_irect",
        "bevy_math::rects::urect::URect::from_center_half_size",
        "bevy_math::rects::urect::URect::assert_receiver_is_total_eq",
        "bevy_math::rects::urect::URect::intersect",
        "bevy_math::rects::urect::URect::new",
        "bevy_math::rects::urect::URect::union",
        "bevy_math::rects::urect::URect::is_empty",
        "bevy_math::rects::urect::URect::inflate",
        "bevy_math::rects::urect::URect::contains",
        "bevy_math::rects::urect::URect::union_point",
        "bevy_math::rects::urect::URect::from_corners",
        "bevy_math::rects::urect::URect::from_center_size",
        "bevy_math::rects::urect::URect::center",
        "bevy_math::rects::urect::URect::width"
      ],
      "layout": {
        "kind": "Struct",
        "name": "URect",
        "fields": [
          {
            "name": "min",
            "type": "glam::UVec2"
          },
          {
            "name": "max",
            "type": "glam::UVec2"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_math::rotation2d::Rot2": {
      "identifier": "Rot2",
      "crate": "bevy_math",
      "path": "bevy_math::rotation2d::Rot2",
      "documentation": " A counterclockwise 2D rotation.\n\n # Example\n\n ```\n # use approx::assert_relative_eq;\n # use bevy_math::{Rot2, Vec2};\n use std::f32::consts::PI;\n\n // Create rotations from radians or degrees\n let rotation1 = Rot2::radians(PI / 2.0);\n let rotation2 = Rot2::degrees(45.0);\n\n // Get the angle back as radians or degrees\n assert_eq!(rotation1.as_degrees(), 90.0);\n assert_eq!(rotation2.as_radians(), PI / 4.0);\n\n // \"Add\" rotations together using `*`\n #[cfg(feature = \"approx\")]\n assert_relative_eq!(rotation1 * rotation2, Rot2::degrees(135.0));\n\n // Rotate vectors\n #[cfg(feature = \"approx\")]\n assert_relative_eq!(rotation1 * Vec2::X, Vec2::Y);\n ```",
      "associated_functions": [
        "bevy_math::rotation2d::Rot2::nlerp",
        "bevy_math::rotation2d::Rot2::inverse",
        "bevy_math::rotation2d::Rot2::sin_cos",
        "bevy_math::rotation2d::Rot2::is_near_identity",
        "bevy_math::rotation2d::Rot2::normalize",
        "bevy_math::rotation2d::Rot2::is_normalized",
        "bevy_math::rotation2d::Rot2::as_turn_fraction",
        "bevy_math::rotation2d::Rot2::is_nan",
        "bevy_math::rotation2d::Rot2::clone",
        "bevy_math::rotation2d::Rot2::mul",
        "bevy_math::rotation2d::Rot2::angle_to",
        "bevy_math::rotation2d::Rot2::length_squared",
        "bevy_math::rotation2d::Rot2::degrees",
        "bevy_math::rotation2d::Rot2::as_radians",
        "bevy_math::rotation2d::Rot2::length_recip",
        "bevy_math::rotation2d::Rot2::from_sin_cos",
        "bevy_math::rotation2d::Rot2::fast_renormalize",
        "bevy_math::rotation2d::Rot2::mul-2",
        "bevy_math::rotation2d::Rot2::turn_fraction",
        "bevy_math::rotation2d::Rot2::slerp",
        "bevy_math::rotation2d::Rot2::as_degrees",
        "bevy_math::rotation2d::Rot2::mul-1",
        "bevy_math::rotation2d::Rot2::eq",
        "bevy_math::rotation2d::Rot2::length",
        "bevy_math::rotation2d::Rot2::is_finite",
        "bevy_math::rotation2d::Rot2::radians"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Rot2",
        "fields": [
          {
            "name": "cos",
            "type": "f32"
          },
          {
            "name": "sin",
            "type": "f32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_platform::time::Instant": {
      "identifier": "Instant",
      "crate": "bevy_platform",
      "path": "bevy_platform::time::Instant",
      "associated_functions": [
        "bevy_platform::time::Instant::assert_receiver_is_total_eq",
        "bevy_platform::time::Instant::clone",
        "bevy_platform::time::Instant::saturating_duration_since",
        "bevy_platform::time::Instant::sub",
        "bevy_platform::time::Instant::eq",
        "bevy_platform::time::Instant::add",
        "bevy_platform::time::Instant::sub-1",
        "bevy_platform::time::Instant::now",
        "bevy_platform::time::Instant::elapsed",
        "bevy_platform::time::Instant::duration_since"
      ],
      "layout": null,
      "generated": true,
      "insignificance": 1000
    },
    "bevy_time::fixed::Fixed": {
      "identifier": "Fixed",
      "crate": "bevy_time",
      "path": "bevy_time::fixed::Fixed",
      "documentation": " The fixed timestep game clock following virtual time.\n\n A specialization of the [`Time`] structure. **For method documentation, see\n [`Time<Fixed>#impl-Time<Fixed>`].**\n     \n It is automatically inserted as a resource by\n [`TimePlugin`](crate::TimePlugin) and updated based on\n [`Time<Virtual>`](Virtual). The fixed clock is automatically set as the\n generic [`Time`] resource during [`FixedUpdate`](bevy_app::FixedUpdate)\n schedule processing.\n\n The fixed timestep clock advances in fixed-size increments, which is\n extremely useful for writing logic (like physics) that should have\n consistent behavior, regardless of framerate.\n\n The default [`timestep()`](Time::timestep) is 64 hertz, or 15625\n microseconds. This value was chosen because using 60 hertz has the potential\n for a pathological interaction with the monitor refresh rate where the game\n alternates between running two fixed timesteps and zero fixed timesteps per\n frame (for example when running two fixed timesteps takes longer than a\n frame). Additionally, the value is a power of two which losslessly converts\n into [`f32`] and [`f64`].\n\n To run a system on a fixed timestep, add it to one of the [`FixedMain`]\n schedules, most commonly [`FixedUpdate`](bevy_app::FixedUpdate).\n\n This schedule is run a number of times between\n [`PreUpdate`](bevy_app::PreUpdate) and [`Update`](bevy_app::Update)\n according to the accumulated [`overstep()`](Time::overstep) time divided by\n the [`timestep()`](Time::timestep). This means the schedule may run 0, 1 or\n more times during a single update (which typically corresponds to a rendered\n frame).\n\n `Time<Fixed>` and the generic [`Time`] resource will report a\n [`delta()`](Time::delta) equal to [`timestep()`](Time::timestep) and always\n grow [`elapsed()`](Time::elapsed) by one [`timestep()`](Time::timestep) per\n iteration.\n\n The fixed timestep clock follows the [`Time<Virtual>`](Virtual) clock, which\n means it is affected by [`pause()`](Time::pause),\n [`set_relative_speed()`](Time::set_relative_speed) and\n [`set_max_delta()`](Time::set_max_delta) from virtual time. If the virtual\n clock is paused, the [`FixedUpdate`](bevy_app::FixedUpdate) schedule will\n not run. It is guaranteed that the [`elapsed()`](Time::elapsed) time in\n `Time<Fixed>` is always between the previous `elapsed()` and the current\n `elapsed()` value in `Time<Virtual>`, so the values are compatible.\n\n Changing the timestep size while the game is running should not normally be\n done, as having a regular interval is the point of this schedule, but it may\n be necessary for effects like \"bullet-time\" if the normal granularity of the\n fixed timestep is too big for the slowed down time. In this case,\n [`set_timestep()`](Time::set_timestep) and be called to set a new value. The\n new value will be used immediately for the next run of the\n [`FixedUpdate`](bevy_app::FixedUpdate) schedule, meaning that it will affect\n the [`delta()`](Time::delta) value for the very next\n [`FixedUpdate`](bevy_app::FixedUpdate), even if it is still during the same\n frame. Any [`overstep()`](Time::overstep) present in the accumulator will be\n processed according to the new [`timestep()`](Time::timestep) value.",
      "associated_functions": [
        "bevy_time::fixed::Fixed::clone"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Fixed",
        "fields": [
          {
            "name": "timestep",
            "type": "core::time::Duration"
          },
          {
            "name": "overstep",
            "type": "core::time::Duration"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_time::real::Real": {
      "identifier": "Real",
      "crate": "bevy_time",
      "path": "bevy_time::real::Real",
      "documentation": " Real time clock representing elapsed wall clock time.\n\n A specialization of the [`Time`] structure. **For method documentation, see\n [`Time<Real>#impl-Time<Real>`].**\n\n It is automatically inserted as a resource by\n [`TimePlugin`](crate::TimePlugin) and updated with time instants according\n to [`TimeUpdateStrategy`](crate::TimeUpdateStrategy).[^disclaimer]\n\n Note:\n Using [`TimeUpdateStrategy::ManualDuration`](crate::TimeUpdateStrategy::ManualDuration)\n allows for mocking the wall clock for testing purposes.\n Besides this use case, it is not recommended to do this, as it will no longer\n represent \"wall clock\" time as intended.\n\n The [`delta()`](Time::delta) and [`elapsed()`](Time::elapsed) values of this\n clock should be used for anything which deals specifically with real time\n (wall clock time). It will not be affected by relative game speed\n adjustments, pausing or other adjustments.[^disclaimer]\n\n The clock does not count time from [`startup()`](Time::startup) to\n [`first_update()`](Time::first_update()) into elapsed, but instead will\n start counting time from the first update call. [`delta()`](Time::delta) and\n [`elapsed()`](Time::elapsed) will report zero on the first update as there\n is no previous update instant. This means that a [`delta()`](Time::delta) of\n zero must be handled without errors in application logic, as it may\n theoretically also happen at other times.\n\n [`Instant`]s for [`startup()`](Time::startup),\n [`first_update()`](Time::first_update) and\n [`last_update()`](Time::last_update) are recorded and accessible.\n\n [^disclaimer]: When using [`TimeUpdateStrategy::ManualDuration`](crate::TimeUpdateStrategy::ManualDuration),\n     [`Time<Real>#impl-Time<Real>`] is only a *mock* of wall clock time.\n",
      "associated_functions": [
        "bevy_time::real::Real::clone"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Real",
        "fields": [
          {
            "name": "startup",
            "type": "bevy_platform::time::Instant"
          },
          {
            "name": "first_update",
            "type": "core::option::Option<bevy_platform::time::Instant>"
          },
          {
            "name": "last_update",
            "type": "core::option::Option<bevy_platform::time::Instant>"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_time::stopwatch::Stopwatch": {
      "identifier": "Stopwatch",
      "crate": "bevy_time",
      "path": "bevy_time::stopwatch::Stopwatch",
      "documentation": " A Stopwatch is a struct that tracks elapsed time when started.\n\n Note that in order to advance the stopwatch [`tick`](Stopwatch::tick) **MUST** be called.\n # Examples\n\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut stopwatch = Stopwatch::new();\n assert_eq!(stopwatch.elapsed_secs(), 0.0);\n\n stopwatch.tick(Duration::from_secs_f32(1.0)); // tick one second\n assert_eq!(stopwatch.elapsed_secs(), 1.0);\n\n stopwatch.pause();\n stopwatch.tick(Duration::from_secs_f32(1.0)); // paused stopwatches don't tick\n assert_eq!(stopwatch.elapsed_secs(), 1.0);\n\n stopwatch.reset(); // reset the stopwatch\n assert!(stopwatch.is_paused());\n assert_eq!(stopwatch.elapsed_secs(), 0.0);\n ```",
      "associated_functions": [
        "bevy_time::stopwatch::Stopwatch::elapsed_secs",
        "bevy_time::stopwatch::Stopwatch::new",
        "bevy_time::stopwatch::Stopwatch::assert_receiver_is_total_eq",
        "bevy_time::stopwatch::Stopwatch::elapsed_secs_f64",
        "bevy_time::stopwatch::Stopwatch::set_elapsed",
        "bevy_time::stopwatch::Stopwatch::elapsed",
        "bevy_time::stopwatch::Stopwatch::clone",
        "bevy_time::stopwatch::Stopwatch::is_paused",
        "bevy_time::stopwatch::Stopwatch::eq",
        "bevy_time::stopwatch::Stopwatch::reset",
        "bevy_time::stopwatch::Stopwatch::pause",
        "bevy_time::stopwatch::Stopwatch::unpause"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Stopwatch",
        "fields": [
          {
            "name": "elapsed",
            "type": "core::time::Duration"
          },
          {
            "name": "is_paused",
            "type": "bool"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_time::timer::Timer": {
      "identifier": "Timer",
      "crate": "bevy_time",
      "path": "bevy_time::timer::Timer",
      "documentation": " Tracks elapsed time. Enters the finished state once `duration` is reached.\n\n Non repeating timers will stop tracking and stay in the finished state until reset.\n Repeating timers will only be in the finished state on each tick `duration` is reached or\n exceeded, and can still be reset at any given point.\n\n Paused timers will not have elapsed time increased.\n\n Note that in order to advance the timer [`tick`](Timer::tick) **MUST** be called.",
      "associated_functions": [
        "bevy_time::timer::Timer::new",
        "bevy_time::timer::Timer::set_elapsed",
        "bevy_time::timer::Timer::set_mode",
        "bevy_time::timer::Timer::elapsed",
        "bevy_time::timer::Timer::pause",
        "bevy_time::timer::Timer::duration",
        "bevy_time::timer::Timer::reset",
        "bevy_time::timer::Timer::eq",
        "bevy_time::timer::Timer::from_seconds",
        "bevy_time::timer::Timer::clone",
        "bevy_time::timer::Timer::elapsed_secs",
        "bevy_time::timer::Timer::paused",
        "bevy_time::timer::Timer::mode",
        "bevy_time::timer::Timer::fraction_remaining",
        "bevy_time::timer::Timer::remaining",
        "bevy_time::timer::Timer::elapsed_secs_f64",
        "bevy_time::timer::Timer::remaining_secs",
        "bevy_time::timer::Timer::times_finished_this_tick",
        "bevy_time::timer::Timer::set_duration",
        "bevy_time::timer::Timer::assert_receiver_is_total_eq",
        "bevy_time::timer::Timer::unpause",
        "bevy_time::timer::Timer::fraction",
        "bevy_time::timer::Timer::just_finished",
        "bevy_time::timer::Timer::finished"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Timer",
        "fields": [
          {
            "name": "stopwatch",
            "type": "bevy_time::stopwatch::Stopwatch"
          },
          {
            "name": "duration",
            "type": "core::time::Duration"
          },
          {
            "name": "mode",
            "type": "bevy_time::timer::TimerMode"
          },
          {
            "name": "finished",
            "type": "bool"
          },
          {
            "name": "times_finished_this_tick",
            "type": "u32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_time::timer::TimerMode": {
      "identifier": "TimerMode",
      "crate": "bevy_time",
      "path": "bevy_time::timer::TimerMode",
      "documentation": " Specifies [`Timer`] behavior.",
      "associated_functions": [
        "bevy_time::timer::TimerMode::eq",
        "bevy_time::timer::TimerMode::assert_receiver_is_total_eq",
        "bevy_time::timer::TimerMode::clone"
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "Once"
        },
        {
          "kind": "Unit",
          "name": "Repeating"
        }
      ],
      "generated": true,
      "insignificance": 1000
    },
    "bevy_time::virt::Virtual": {
      "identifier": "Virtual",
      "crate": "bevy_time",
      "path": "bevy_time::virt::Virtual",
      "documentation": " The virtual game clock representing game time.\n\n A specialization of the [`Time`] structure. **For method documentation, see\n [`Time<Virtual>#impl-Time<Virtual>`].**\n\n Normally used as `Time<Virtual>`. It is automatically inserted as a resource\n by [`TimePlugin`](crate::TimePlugin) and updated based on\n [`Time<Real>`](Real). The virtual clock is automatically set as the default\n generic [`Time`] resource for the update.\n\n The virtual clock differs from real time clock in that it can be paused, sped up\n and slowed down. It also limits how much it can advance in a single update\n in order to prevent unexpected behavior in cases where updates do not happen\n at regular intervals (e.g. coming back after the program was suspended a long time).\n\n The virtual clock can be paused by calling [`pause()`](Time::pause) and\n unpaused by calling [`unpause()`](Time::unpause). When the game clock is\n paused [`delta()`](Time::delta) will be zero on each update, and\n [`elapsed()`](Time::elapsed) will not grow.\n [`effective_speed()`](Time::effective_speed) will return `0.0`. Calling\n [`pause()`](Time::pause) will not affect value the [`delta()`](Time::delta)\n value for the update currently being processed.\n\n The speed of the virtual clock can be changed by calling\n [`set_relative_speed()`](Time::set_relative_speed). A value of `2.0` means\n that virtual clock should advance twice as fast as real time, meaning that\n [`delta()`](Time::delta) values will be double of what\n [`Time<Real>::delta()`](Time::delta) reports and\n [`elapsed()`](Time::elapsed) will go twice as fast as\n [`Time<Real>::elapsed()`](Time::elapsed). Calling\n [`set_relative_speed()`](Time::set_relative_speed) will not affect the\n [`delta()`](Time::delta) value for the update currently being processed.\n\n The maximum amount of delta time that can be added by a single update can be\n set by [`set_max_delta()`](Time::set_max_delta). This value serves a dual\n purpose in the virtual clock.\n\n If the game temporarily freezes due to any reason, such as disk access, a\n blocking system call, or operating system level suspend, reporting the full\n elapsed delta time is likely to cause bugs in game logic. Usually if a\n laptop is suspended for an hour, it doesn't make sense to try to simulate\n the game logic for the elapsed hour when resuming. Instead it is better to\n lose the extra time and pretend a shorter duration of time passed. Setting\n [`max_delta()`](Time::max_delta) to a relatively short time means that the\n impact on game logic will be minimal.\n\n If the game lags for some reason, meaning that it will take a longer time to\n compute a frame than the real time that passes during the computation, then\n we would fall behind in processing virtual time. If this situation persists,\n and computing a frame takes longer depending on how much virtual time has\n passed, the game would enter a \"death spiral\" where computing each frame\n takes longer and longer and the game will appear to freeze. By limiting the\n maximum time that can be added at once, we also limit the amount of virtual\n time the game needs to compute for each frame. This means that the game will\n run slow, and it will run slower than real time, but it will not freeze and\n it will recover as soon as computation becomes fast again.\n\n You should set [`max_delta()`](Time::max_delta) to a value that is\n approximately the minimum FPS your game should have even if heavily lagged\n for a moment. The actual FPS when lagged will be somewhat lower than this,\n depending on how much more time it takes to compute a frame compared to real\n time. You should also consider how stable your FPS is, as the limit will\n also dictate how big of an FPS drop you can accept without losing time and\n falling behind real time.",
      "associated_functions": [
        "bevy_time::virt::Virtual::clone"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Virtual",
        "fields": [
          {
            "name": "max_delta",
            "type": "core::time::Duration"
          },
          {
            "name": "paused",
            "type": "bool"
          },
          {
            "name": "relative_speed",
            "type": "f64"
          },
          {
            "name": "effective_speed",
            "type": "f64"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_transform::components::global_transform::GlobalTransform": {
      "identifier": "GlobalTransform",
      "crate": "bevy_transform",
      "path": "bevy_transform::components::global_transform::GlobalTransform",
      "documentation": " [`GlobalTransform`] is an affine transformation from entity-local coordinates to worldspace coordinates.\n\n You cannot directly mutate [`GlobalTransform`]; instead, you change an entity's transform by manipulating\n its [`Transform`], which indirectly causes Bevy to update its [`GlobalTransform`].\n\n * To get the global transform of an entity, you should get its [`GlobalTransform`].\n * For transform hierarchies to work correctly, you must have both a [`Transform`] and a [`GlobalTransform`].\n   [`GlobalTransform`] is automatically inserted whenever [`Transform`] is inserted.\n\n ## [`Transform`] and [`GlobalTransform`]\n\n [`Transform`] transforms an entity relative to its parent's reference frame, or relative to world space coordinates,\n if it doesn't have a [`ChildOf`](bevy_ecs::hierarchy::ChildOf) component.\n\n [`GlobalTransform`] is managed by Bevy; it is computed by successively applying the [`Transform`] of each ancestor\n entity which has a Transform. This is done automatically by Bevy-internal systems in the system set\n [`TransformPropagate`](crate::TransformSystem::TransformPropagate).\n\n This system runs during [`PostUpdate`](bevy_app::PostUpdate). If you\n update the [`Transform`] of an entity in this schedule or after, you will notice a 1 frame lag\n before the [`GlobalTransform`] is updated.\n\n # Examples\n\n - [`transform`][transform_example]\n\n [transform_example]: https://github.com/bevyengine/bevy/blob/latest/examples/transforms/transform.rs",
      "associated_functions": [
        "bevy_transform::components::global_transform::GlobalTransform::back",
        "bevy_transform::components::global_transform::GlobalTransform::compute_matrix",
        "bevy_transform::components::global_transform::GlobalTransform::mul-1",
        "bevy_transform::components::global_transform::GlobalTransform::forward",
        "bevy_transform::components::global_transform::GlobalTransform::reparented_to",
        "bevy_transform::components::global_transform::GlobalTransform::clone",
        "bevy_transform::components::global_transform::GlobalTransform::transform_point",
        "bevy_transform::components::global_transform::GlobalTransform::mul",
        "bevy_transform::components::global_transform::GlobalTransform::radius_vec3a",
        "bevy_transform::components::global_transform::GlobalTransform::from_isometry",
        "bevy_transform::components::global_transform::GlobalTransform::down",
        "bevy_transform::components::global_transform::GlobalTransform::mul-2",
        "bevy_transform::components::global_transform::GlobalTransform::rotation",
        "bevy_transform::components::global_transform::GlobalTransform::from_xyz",
        "bevy_transform::components::global_transform::GlobalTransform::mul_transform",
        "bevy_transform::components::global_transform::GlobalTransform::compute_transform",
        "bevy_transform::components::global_transform::GlobalTransform::from_translation",
        "bevy_transform::components::global_transform::GlobalTransform::translation_vec3a",
        "bevy_transform::components::global_transform::GlobalTransform::eq",
        "bevy_transform::components::global_transform::GlobalTransform::up",
        "bevy_transform::components::global_transform::GlobalTransform::right",
        "bevy_transform::components::global_transform::GlobalTransform::left",
        "bevy_transform::components::global_transform::GlobalTransform::scale",
        "bevy_transform::components::global_transform::GlobalTransform::from_scale",
        "bevy_transform::components::global_transform::GlobalTransform::from_rotation",
        "bevy_transform::components::global_transform::GlobalTransform::translation",
        "bevy_transform::components::global_transform::GlobalTransform::affine",
        "bevy_transform::components::global_transform::GlobalTransform::to_isometry"
      ],
      "layout": {
        "kind": "TupleStruct",
        "name": "GlobalTransform",
        "fields": [
          {
            "type": "glam::Affine3A"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_transform::components::transform::Transform": {
      "identifier": "Transform",
      "crate": "bevy_transform",
      "path": "bevy_transform::components::transform::Transform",
      "documentation": " Describe the position of an entity. If the entity has a parent, the position is relative\n to its parent position.\n\n * To place or move an entity, you should set its [`Transform`].\n * To get the global transform of an entity, you should get its [`GlobalTransform`].\n * To be displayed, an entity must have both a [`Transform`] and a [`GlobalTransform`].\n   [`GlobalTransform`] is automatically inserted whenever [`Transform`] is inserted.\n\n ## [`Transform`] and [`GlobalTransform`]\n\n [`Transform`] is the position of an entity relative to its parent position, or the reference\n frame if it doesn't have a [`ChildOf`](bevy_ecs::hierarchy::ChildOf) component.\n\n [`GlobalTransform`] is the position of an entity relative to the reference frame.\n\n [`GlobalTransform`] is updated from [`Transform`] by systems in the system set\n [`TransformPropagate`](crate::TransformSystem::TransformPropagate).\n\n This system runs during [`PostUpdate`](bevy_app::PostUpdate). If you\n update the [`Transform`] of an entity during this set or after, you will notice a 1 frame lag\n before the [`GlobalTransform`] is updated.\n\n # Examples\n\n - [`transform`][transform_example]\n\n [transform_example]: https://github.com/bevyengine/bevy/blob/latest/examples/transforms/transform.rs",
      "associated_functions": [
        "bevy_transform::components::transform::Transform::rotate_local",
        "bevy_transform::components::transform::Transform::rotate_local_z",
        "bevy_transform::components::transform::Transform::local_x",
        "bevy_transform::components::transform::Transform::rotate_local_x",
        "bevy_transform::components::transform::Transform::compute_matrix",
        "bevy_transform::components::transform::Transform::with_scale",
        "bevy_transform::components::transform::Transform::compute_affine",
        "bevy_transform::components::transform::Transform::left",
        "bevy_transform::components::transform::Transform::from_scale",
        "bevy_transform::components::transform::Transform::rotate_x",
        "bevy_transform::components::transform::Transform::rotate_z",
        "bevy_transform::components::transform::Transform::rotate_around",
        "bevy_transform::components::transform::Transform::from_isometry",
        "bevy_transform::components::transform::Transform::from_xyz",
        "bevy_transform::components::transform::Transform::to_isometry",
        "bevy_transform::components::transform::Transform::forward",
        "bevy_transform::components::transform::Transform::rotate_local_y",
        "bevy_transform::components::transform::Transform::eq",
        "bevy_transform::components::transform::Transform::with_rotation",
        "bevy_transform::components::transform::Transform::mul-2",
        "bevy_transform::components::transform::Transform::with_translation",
        "bevy_transform::components::transform::Transform::from_rotation",
        "bevy_transform::components::transform::Transform::is_finite",
        "bevy_transform::components::transform::Transform::rotate_local_axis",
        "bevy_transform::components::transform::Transform::down",
        "bevy_transform::components::transform::Transform::translate_around",
        "bevy_transform::components::transform::Transform::local_z",
        "bevy_transform::components::transform::Transform::from_translation",
        "bevy_transform::components::transform::Transform::up",
        "bevy_transform::components::transform::Transform::local_y",
        "bevy_transform::components::transform::Transform::from_matrix",
        "bevy_transform::components::transform::Transform::rotate_axis",
        "bevy_transform::components::transform::Transform::transform_point",
        "bevy_transform::components::transform::Transform::rotate",
        "bevy_transform::components::transform::Transform::mul-1",
        "bevy_transform::components::transform::Transform::clone",
        "bevy_transform::components::transform::Transform::rotate_y",
        "bevy_transform::components::transform::Transform::right",
        "bevy_transform::components::transform::Transform::mul",
        "bevy_transform::components::transform::Transform::back",
        "bevy_transform::components::transform::Transform::mul_transform"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Transform",
        "fields": [
          {
            "name": "translation",
            "type": "glam::Vec3"
          },
          {
            "name": "rotation",
            "type": "glam::Quat"
          },
          {
            "name": "scale",
            "type": "glam::Vec3"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_transform::components::transform::TransformTreeChanged": {
      "identifier": "TransformTreeChanged",
      "crate": "bevy_transform",
      "path": "bevy_transform::components::transform::TransformTreeChanged",
      "documentation": " An optimization for transform propagation. This ZST marker component uses change detection to\n mark all entities of the hierarchy as \"dirty\" if any of their descendants have a changed\n `Transform`. If this component is *not* marked `is_changed()`, propagation will halt.",
      "associated_functions": [
        "bevy_transform::components::transform::TransformTreeChanged::eq",
        "bevy_transform::components::transform::TransformTreeChanged::clone"
      ],
      "layout": {
        "kind": "Struct",
        "name": "TransformTreeChanged"
      },
      "generated": true,
      "insignificance": 1000
    },
    "core::any::TypeId": {
      "identifier": "TypeId",
      "crate": "core",
      "path": "core::any::TypeId",
      "associated_functions": [
        "core::any::TypeId::assert_receiver_is_total_eq",
        "core::any::TypeId::eq",
        "core::any::TypeId::clone"
      ],
      "layout": null,
      "generated": true,
      "insignificance": 1000
    },
    "core::net::SocketAddr": {
      "identifier": "SocketAddr",
      "crate": "core",
      "path": "core::net::SocketAddr",
      "associated_functions": [
        "core::net::SocketAddr::is_ipv6",
        "core::net::SocketAddr::eq",
        "core::net::SocketAddr::assert_receiver_is_total_eq",
        "core::net::SocketAddr::is_ipv4",
        "core::net::SocketAddr::port",
        "core::net::SocketAddr::set_port",
        "core::net::SocketAddr::clone"
      ],
      "layout": null,
      "generated": true,
      "insignificance": 1000
    },
    "core::ops::RangeFull": {
      "identifier": "RangeFull",
      "crate": "core",
      "path": "core::ops::RangeFull",
      "associated_functions": [
        "core::ops::RangeFull::eq",
        "core::ops::RangeFull::assert_receiver_is_total_eq",
        "core::ops::RangeFull::clone"
      ],
      "layout": null,
      "generated": true,
      "insignificance": 1000
    },
    "core::sync::atomic::AtomicBool": {
      "identifier": "AtomicBool",
      "crate": "core",
      "path": "core::sync::atomic::AtomicBool",
      "associated_functions": [
        "core::sync::atomic::AtomicBool::into_inner",
        "core::sync::atomic::AtomicBool::new"
      ],
      "layout": null,
      "generated": true,
      "insignificance": 1000
    },
    "core::sync::atomic::AtomicI16": {
      "identifier": "AtomicI16",
      "crate": "core",
      "path": "core::sync::atomic::AtomicI16",
      "associated_functions": [
        "core::sync::atomic::AtomicI16::into_inner",
        "core::sync::atomic::AtomicI16::new"
      ],
      "layout": null,
      "generated": true,
      "insignificance": 1000
    },
    "core::sync::atomic::AtomicI32": {
      "identifier": "AtomicI32",
      "crate": "core",
      "path": "core::sync::atomic::AtomicI32",
      "associated_functions": [
        "core::sync::atomic::AtomicI32::new",
        "core::sync::atomic::AtomicI32::into_inner"
      ],
      "layout": null,
      "generated": true,
      "insignificance": 1000
    },
    "core::sync::atomic::AtomicI64": {
      "identifier": "AtomicI64",
      "crate": "core",
      "path": "core::sync::atomic::AtomicI64",
      "associated_functions": [
        "core::sync::atomic::AtomicI64::new",
        "core::sync::atomic::AtomicI64::into_inner"
      ],
      "layout": null,
      "generated": true,
      "insignificance": 1000
    },
    "core::sync::atomic::AtomicI8": {
      "identifier": "AtomicI8",
      "crate": "core",
      "path": "core::sync::atomic::AtomicI8",
      "associated_functions": [
        "core::sync::atomic::AtomicI8::into_inner",
        "core::sync::atomic::AtomicI8::new"
      ],
      "layout": null,
      "generated": true,
      "insignificance": 1000
    },
    "core::sync::atomic::AtomicIsize": {
      "identifier": "AtomicIsize",
      "crate": "core",
      "path": "core::sync::atomic::AtomicIsize",
      "associated_functions": [
        "core::sync::atomic::AtomicIsize::into_inner",
        "core::sync::atomic::AtomicIsize::new"
      ],
      "layout": null,
      "generated": true,
      "insignificance": 1000
    },
    "core::sync::atomic::AtomicU16": {
      "identifier": "AtomicU16",
      "crate": "core",
      "path": "core::sync::atomic::AtomicU16",
      "associated_functions": [
        "core::sync::atomic::AtomicU16::new",
        "core::sync::atomic::AtomicU16::into_inner"
      ],
      "layout": null,
      "generated": true,
      "insignificance": 1000
    },
    "core::sync::atomic::AtomicU32": {
      "identifier": "AtomicU32",
      "crate": "core",
      "path": "core::sync::atomic::AtomicU32",
      "associated_functions": [
        "core::sync::atomic::AtomicU32::into_inner",
        "core::sync::atomic::AtomicU32::new"
      ],
      "layout": null,
      "generated": true,
      "insignificance": 1000
    },
    "core::sync::atomic::AtomicU64": {
      "identifier": "AtomicU64",
      "crate": "core",
      "path": "core::sync::atomic::AtomicU64",
      "associated_functions": [
        "core::sync::atomic::AtomicU64::new",
        "core::sync::atomic::AtomicU64::into_inner"
      ],
      "layout": null,
      "generated": true,
      "insignificance": 1000
    },
    "core::sync::atomic::AtomicU8": {
      "identifier": "AtomicU8",
      "crate": "core",
      "path": "core::sync::atomic::AtomicU8",
      "associated_functions": [
        "core::sync::atomic::AtomicU8::new",
        "core::sync::atomic::AtomicU8::into_inner"
      ],
      "layout": null,
      "generated": true,
      "insignificance": 1000
    },
    "core::sync::atomic::AtomicUsize": {
      "identifier": "AtomicUsize",
      "crate": "core",
      "path": "core::sync::atomic::AtomicUsize",
      "associated_functions": [
        "core::sync::atomic::AtomicUsize::new",
        "core::sync::atomic::AtomicUsize::into_inner"
      ],
      "layout": null,
      "generated": true,
      "insignificance": 1000
    },
    "core::time::Duration": {
      "identifier": "Duration",
      "crate": "core",
      "path": "core::time::Duration",
      "associated_functions": [
        "core::time::Duration::div_duration_f32",
        "core::time::Duration::as_nanos",
        "core::time::Duration::mul_f64",
        "core::time::Duration::add",
        "core::time::Duration::saturating_mul",
        "core::time::Duration::clone",
        "core::time::Duration::div",
        "core::time::Duration::saturating_add",
        "core::time::Duration::new",
        "core::time::Duration::mul_f32",
        "core::time::Duration::from_secs_f64",
        "core::time::Duration::from_nanos",
        "core::time::Duration::abs_diff",
        "core::time::Duration::saturating_sub",
        "core::time::Duration::from_micros",
        "core::time::Duration::subsec_nanos",
        "core::time::Duration::as_secs_f64",
        "core::time::Duration::as_micros",
        "core::time::Duration::from_secs_f32",
        "core::time::Duration::as_secs",
        "core::time::Duration::div_f64",
        "core::time::Duration::as_millis",
        "core::time::Duration::div_duration_f64",
        "core::time::Duration::is_zero",
        "core::time::Duration::assert_receiver_is_total_eq",
        "core::time::Duration::from_millis",
        "core::time::Duration::sub",
        "core::time::Duration::from_secs",
        "core::time::Duration::div_f32",
        "core::time::Duration::eq",
        "core::time::Duration::subsec_millis",
        "core::time::Duration::as_secs_f32",
        "core::time::Duration::mul",
        "core::time::Duration::subsec_micros"
      ],
      "layout": null,
      "generated": true,
      "insignificance": 1000
    },
    "glam::Affine2": {
      "identifier": "Affine2",
      "crate": "glam",
      "path": "glam::Affine2",
      "associated_functions": [
        "glam::Affine2::from_angle",
        "glam::Affine2::abs_diff_eq",
        "glam::Affine2::transform_point2",
        "glam::Affine2::from_scale_angle_translation",
        "glam::Affine2::mul-2",
        "glam::Affine2::clone",
        "glam::Affine2::eq",
        "glam::Affine2::transform_vector2",
        "glam::Affine2::from_mat3",
        "glam::Affine2::from_mat2_translation",
        "glam::Affine2::from_scale",
        "glam::Affine2::is_finite",
        "glam::Affine2::to_cols_array_2d",
        "glam::Affine2::mul-1",
        "glam::Affine2::is_nan",
        "glam::Affine2::from_cols",
        "glam::Affine2::inverse",
        "glam::Affine2::mul",
        "glam::Affine2::from_mat3a",
        "glam::Affine2::from_translation",
        "glam::Affine2::from_angle_translation",
        "glam::Affine2::from_mat2",
        "glam::Affine2::to_cols_array"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Affine2",
        "fields": [
          {
            "name": "matrix2",
            "type": "glam::Mat2"
          },
          {
            "name": "translation",
            "type": "glam::Vec2"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::Affine3A": {
      "identifier": "Affine3A",
      "crate": "glam",
      "path": "glam::Affine3A",
      "associated_functions": [
        "glam::Affine3A::look_to_rh",
        "glam::Affine3A::from_rotation_x",
        "glam::Affine3A::from_mat3",
        "glam::Affine3A::clone",
        "glam::Affine3A::transform_vector3",
        "glam::Affine3A::transform_point3",
        "glam::Affine3A::is_nan",
        "glam::Affine3A::inverse",
        "glam::Affine3A::mul",
        "glam::Affine3A::to_cols_array_2d",
        "glam::Affine3A::from_mat4",
        "glam::Affine3A::eq",
        "glam::Affine3A::mul-1",
        "glam::Affine3A::from_rotation_y",
        "glam::Affine3A::look_at_lh",
        "glam::Affine3A::from_rotation_z",
        "glam::Affine3A::is_finite",
        "glam::Affine3A::abs_diff_eq",
        "glam::Affine3A::look_at_rh",
        "glam::Affine3A::from_quat",
        "glam::Affine3A::transform_vector3a",
        "glam::Affine3A::from_scale",
        "glam::Affine3A::from_cols",
        "glam::Affine3A::from_axis_angle",
        "glam::Affine3A::look_to_lh",
        "glam::Affine3A::from_translation",
        "glam::Affine3A::to_cols_array",
        "glam::Affine3A::from_scale_rotation_translation",
        "glam::Affine3A::transform_point3a",
        "glam::Affine3A::from_mat3_translation",
        "glam::Affine3A::from_rotation_translation"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Affine3A",
        "fields": [
          {
            "name": "matrix3",
            "type": "glam::Mat3A"
          },
          {
            "name": "translation",
            "type": "glam::Vec3A"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::BVec2": {
      "identifier": "BVec2",
      "crate": "glam",
      "path": "glam::BVec2",
      "associated_functions": [
        "glam::BVec2::all",
        "glam::BVec2::any",
        "glam::BVec2::set",
        "glam::BVec2::bitmask",
        "glam::BVec2::clone",
        "glam::BVec2::new",
        "glam::BVec2::splat",
        "glam::BVec2::assert_receiver_is_total_eq",
        "glam::BVec2::test",
        "glam::BVec2::from_array",
        "glam::BVec2::eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "BVec2",
        "fields": [
          {
            "name": "x",
            "type": "bool"
          },
          {
            "name": "y",
            "type": "bool"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::BVec3": {
      "identifier": "BVec3",
      "crate": "glam",
      "path": "glam::BVec3",
      "associated_functions": [
        "glam::BVec3::test",
        "glam::BVec3::eq",
        "glam::BVec3::set",
        "glam::BVec3::from_array",
        "glam::BVec3::splat",
        "glam::BVec3::clone",
        "glam::BVec3::assert_receiver_is_total_eq",
        "glam::BVec3::all",
        "glam::BVec3::bitmask",
        "glam::BVec3::new",
        "glam::BVec3::any"
      ],
      "layout": {
        "kind": "Struct",
        "name": "BVec3",
        "fields": [
          {
            "name": "x",
            "type": "bool"
          },
          {
            "name": "y",
            "type": "bool"
          },
          {
            "name": "z",
            "type": "bool"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::BVec3A": {
      "identifier": "BVec3A",
      "crate": "glam",
      "path": "glam::BVec3A",
      "associated_functions": [
        "glam::BVec3A::from_array",
        "glam::BVec3A::all",
        "glam::BVec3A::eq",
        "glam::BVec3A::test",
        "glam::BVec3A::new",
        "glam::BVec3A::bitmask",
        "glam::BVec3A::set",
        "glam::BVec3A::any",
        "glam::BVec3A::clone",
        "glam::BVec3A::splat"
      ],
      "layout": null,
      "generated": true,
      "insignificance": 1000
    },
    "glam::BVec4": {
      "identifier": "BVec4",
      "crate": "glam",
      "path": "glam::BVec4",
      "associated_functions": [
        "glam::BVec4::bitmask",
        "glam::BVec4::all",
        "glam::BVec4::splat",
        "glam::BVec4::from_array",
        "glam::BVec4::test",
        "glam::BVec4::any",
        "glam::BVec4::set",
        "glam::BVec4::eq",
        "glam::BVec4::new",
        "glam::BVec4::clone",
        "glam::BVec4::assert_receiver_is_total_eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "BVec4",
        "fields": [
          {
            "name": "x",
            "type": "bool"
          },
          {
            "name": "y",
            "type": "bool"
          },
          {
            "name": "z",
            "type": "bool"
          },
          {
            "name": "w",
            "type": "bool"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::BVec4A": {
      "identifier": "BVec4A",
      "crate": "glam",
      "path": "glam::BVec4A",
      "associated_functions": [
        "glam::BVec4A::set",
        "glam::BVec4A::any",
        "glam::BVec4A::from_array",
        "glam::BVec4A::all",
        "glam::BVec4A::splat",
        "glam::BVec4A::test",
        "glam::BVec4A::eq",
        "glam::BVec4A::bitmask",
        "glam::BVec4A::clone",
        "glam::BVec4A::new"
      ],
      "layout": null,
      "generated": true,
      "insignificance": 1000
    },
    "glam::DAffine2": {
      "identifier": "DAffine2",
      "crate": "glam",
      "path": "glam::DAffine2",
      "associated_functions": [
        "glam::DAffine2::from_translation",
        "glam::DAffine2::from_cols",
        "glam::DAffine2::to_cols_array_2d",
        "glam::DAffine2::abs_diff_eq",
        "glam::DAffine2::from_mat3",
        "glam::DAffine2::transform_vector2",
        "glam::DAffine2::from_scale",
        "glam::DAffine2::mul-1",
        "glam::DAffine2::to_cols_array",
        "glam::DAffine2::from_scale_angle_translation",
        "glam::DAffine2::inverse",
        "glam::DAffine2::clone",
        "glam::DAffine2::from_angle_translation",
        "glam::DAffine2::is_nan",
        "glam::DAffine2::from_mat2_translation",
        "glam::DAffine2::is_finite",
        "glam::DAffine2::from_angle",
        "glam::DAffine2::from_mat2",
        "glam::DAffine2::eq",
        "glam::DAffine2::transform_point2",
        "glam::DAffine2::mul"
      ],
      "layout": {
        "kind": "Struct",
        "name": "DAffine2",
        "fields": [
          {
            "name": "matrix2",
            "type": "glam::DMat2"
          },
          {
            "name": "translation",
            "type": "glam::DVec2"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::DAffine3": {
      "identifier": "DAffine3",
      "crate": "glam",
      "path": "glam::DAffine3",
      "associated_functions": [
        "glam::DAffine3::from_rotation_y",
        "glam::DAffine3::from_cols",
        "glam::DAffine3::abs_diff_eq",
        "glam::DAffine3::look_at_rh",
        "glam::DAffine3::mul-1",
        "glam::DAffine3::from_quat",
        "glam::DAffine3::from_rotation_x",
        "glam::DAffine3::from_mat4",
        "glam::DAffine3::clone",
        "glam::DAffine3::from_rotation_translation",
        "glam::DAffine3::inverse",
        "glam::DAffine3::is_finite",
        "glam::DAffine3::look_at_lh",
        "glam::DAffine3::transform_point3",
        "glam::DAffine3::from_scale_rotation_translation",
        "glam::DAffine3::from_rotation_z",
        "glam::DAffine3::mul",
        "glam::DAffine3::from_scale",
        "glam::DAffine3::to_cols_array",
        "glam::DAffine3::to_cols_array_2d",
        "glam::DAffine3::transform_vector3",
        "glam::DAffine3::from_translation",
        "glam::DAffine3::look_to_lh",
        "glam::DAffine3::from_axis_angle",
        "glam::DAffine3::from_mat3_translation",
        "glam::DAffine3::is_nan",
        "glam::DAffine3::from_mat3",
        "glam::DAffine3::look_to_rh",
        "glam::DAffine3::eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "DAffine3",
        "fields": [
          {
            "name": "matrix3",
            "type": "glam::DMat3"
          },
          {
            "name": "translation",
            "type": "glam::DVec3"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::DMat2": {
      "identifier": "DMat2",
      "crate": "glam",
      "path": "glam::DMat2",
      "associated_functions": [
        "glam::DMat2::mul_scalar",
        "glam::DMat2::div_scalar",
        "glam::DMat2::from_cols",
        "glam::DMat2::mul-2",
        "glam::DMat2::inverse",
        "glam::DMat2::abs",
        "glam::DMat2::transpose",
        "glam::DMat2::determinant",
        "glam::DMat2::abs_diff_eq",
        "glam::DMat2::is_nan",
        "glam::DMat2::neg",
        "glam::DMat2::from_mat3",
        "glam::DMat2::as_mat2",
        "glam::DMat2::is_finite",
        "glam::DMat2::clone",
        "glam::DMat2::from_mat3_minor",
        "glam::DMat2::sub",
        "glam::DMat2::sub_mat2",
        "glam::DMat2::from_angle",
        "glam::DMat2::add",
        "glam::DMat2::row",
        "glam::DMat2::add_mat2",
        "glam::DMat2::mul_mat2",
        "glam::DMat2::mul_vec2",
        "glam::DMat2::div",
        "glam::DMat2::eq",
        "glam::DMat2::col",
        "glam::DMat2::mul",
        "glam::DMat2::to_cols_array_2d",
        "glam::DMat2::mul-1",
        "glam::DMat2::from_scale_angle",
        "glam::DMat2::from_diagonal",
        "glam::DMat2::to_cols_array"
      ],
      "layout": {
        "kind": "Struct",
        "name": "DMat2",
        "fields": [
          {
            "name": "x_axis",
            "type": "glam::DVec2"
          },
          {
            "name": "y_axis",
            "type": "glam::DVec2"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::DMat3": {
      "identifier": "DMat3",
      "crate": "glam",
      "path": "glam::DMat3",
      "associated_functions": [
        "glam::DMat3::col",
        "glam::DMat3::from_mat4",
        "glam::DMat3::mul-1",
        "glam::DMat3::is_nan",
        "glam::DMat3::from_scale",
        "glam::DMat3::mul",
        "glam::DMat3::eq",
        "glam::DMat3::mul-3",
        "glam::DMat3::abs_diff_eq",
        "glam::DMat3::from_cols",
        "glam::DMat3::neg",
        "glam::DMat3::div_scalar",
        "glam::DMat3::div",
        "glam::DMat3::abs",
        "glam::DMat3::from_mat4_minor",
        "glam::DMat3::inverse",
        "glam::DMat3::from_translation",
        "glam::DMat3::as_mat3",
        "glam::DMat3::from_axis_angle",
        "glam::DMat3::mul_scalar",
        "glam::DMat3::add_mat3",
        "glam::DMat3::mul-2",
        "glam::DMat3::mul_vec3",
        "glam::DMat3::transform_point2",
        "glam::DMat3::from_rotation_z",
        "glam::DMat3::determinant",
        "glam::DMat3::transform_vector2",
        "glam::DMat3::row",
        "glam::DMat3::sub_mat3",
        "glam::DMat3::from_rotation_x",
        "glam::DMat3::to_cols_array_2d",
        "glam::DMat3::clone",
        "glam::DMat3::from_angle",
        "glam::DMat3::transpose",
        "glam::DMat3::from_scale_angle_translation",
        "glam::DMat3::sub",
        "glam::DMat3::to_euler",
        "glam::DMat3::from_mat2",
        "glam::DMat3::add",
        "glam::DMat3::is_finite",
        "glam::DMat3::from_quat",
        "glam::DMat3::from_euler",
        "glam::DMat3::from_rotation_y",
        "glam::DMat3::mul_mat3",
        "glam::DMat3::to_cols_array",
        "glam::DMat3::from_diagonal"
      ],
      "layout": {
        "kind": "Struct",
        "name": "DMat3",
        "fields": [
          {
            "name": "x_axis",
            "type": "glam::DVec3"
          },
          {
            "name": "y_axis",
            "type": "glam::DVec3"
          },
          {
            "name": "z_axis",
            "type": "glam::DVec3"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::DMat4": {
      "identifier": "DMat4",
      "crate": "glam",
      "path": "glam::DMat4",
      "associated_functions": [
        "glam::DMat4::from_rotation_x",
        "glam::DMat4::from_scale",
        "glam::DMat4::row",
        "glam::DMat4::mul-3",
        "glam::DMat4::orthographic_lh",
        "glam::DMat4::from_rotation_y",
        "glam::DMat4::perspective_infinite_lh",
        "glam::DMat4::div",
        "glam::DMat4::clone",
        "glam::DMat4::from_rotation_translation",
        "glam::DMat4::neg",
        "glam::DMat4::from_euler",
        "glam::DMat4::from_diagonal",
        "glam::DMat4::abs_diff_eq",
        "glam::DMat4::add",
        "glam::DMat4::mul",
        "glam::DMat4::eq",
        "glam::DMat4::mul_mat4",
        "glam::DMat4::look_at_rh",
        "glam::DMat4::perspective_rh_gl",
        "glam::DMat4::transform_vector3",
        "glam::DMat4::from_mat3",
        "glam::DMat4::from_scale_rotation_translation",
        "glam::DMat4::determinant",
        "glam::DMat4::from_quat",
        "glam::DMat4::transform_point3",
        "glam::DMat4::perspective_rh",
        "glam::DMat4::project_point3",
        "glam::DMat4::to_euler",
        "glam::DMat4::add_mat4",
        "glam::DMat4::look_at_lh",
        "glam::DMat4::sub_mat4",
        "glam::DMat4::transpose",
        "glam::DMat4::from_axis_angle",
        "glam::DMat4::look_to_lh",
        "glam::DMat4::from_translation",
        "glam::DMat4::div_scalar",
        "glam::DMat4::perspective_lh",
        "glam::DMat4::inverse",
        "glam::DMat4::mul_scalar",
        "glam::DMat4::perspective_infinite_reverse_lh",
        "glam::DMat4::from_cols",
        "glam::DMat4::abs",
        "glam::DMat4::orthographic_rh_gl",
        "glam::DMat4::is_nan",
        "glam::DMat4::sub",
        "glam::DMat4::mul-1",
        "glam::DMat4::col",
        "glam::DMat4::look_to_rh",
        "glam::DMat4::is_finite",
        "glam::DMat4::mul-2",
        "glam::DMat4::as_mat4",
        "glam::DMat4::mul_vec4",
        "glam::DMat4::from_rotation_z",
        "glam::DMat4::to_cols_array",
        "glam::DMat4::perspective_infinite_reverse_rh",
        "glam::DMat4::perspective_infinite_rh",
        "glam::DMat4::to_cols_array_2d",
        "glam::DMat4::orthographic_rh"
      ],
      "layout": {
        "kind": "Struct",
        "name": "DMat4",
        "fields": [
          {
            "name": "x_axis",
            "type": "glam::DVec4"
          },
          {
            "name": "y_axis",
            "type": "glam::DVec4"
          },
          {
            "name": "z_axis",
            "type": "glam::DVec4"
          },
          {
            "name": "w_axis",
            "type": "glam::DVec4"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::DQuat": {
      "identifier": "DQuat",
      "crate": "glam",
      "path": "glam::DQuat",
      "associated_functions": [
        "glam::DQuat::is_normalized",
        "glam::DQuat::as_quat",
        "glam::DQuat::is_near_identity",
        "glam::DQuat::angle_between",
        "glam::DQuat::add",
        "glam::DQuat::rotate_towards",
        "glam::DQuat::div",
        "glam::DQuat::from_axis_angle",
        "glam::DQuat::lerp",
        "glam::DQuat::from_rotation_arc_2d",
        "glam::DQuat::length_recip",
        "glam::DQuat::from_rotation_y",
        "glam::DQuat::to_scaled_axis",
        "glam::DQuat::from_mat3",
        "glam::DQuat::abs_diff_eq",
        "glam::DQuat::slerp",
        "glam::DQuat::from_rotation_arc_colinear",
        "glam::DQuat::xyz",
        "glam::DQuat::mul-1",
        "glam::DQuat::from_scaled_axis",
        "glam::DQuat::length",
        "glam::DQuat::is_finite",
        "glam::DQuat::from_vec4",
        "glam::DQuat::from_euler",
        "glam::DQuat::is_nan",
        "glam::DQuat::conjugate",
        "glam::DQuat::sub",
        "glam::DQuat::from_mat4",
        "glam::DQuat::dot",
        "glam::DQuat::mul_quat",
        "glam::DQuat::inverse",
        "glam::DQuat::normalize",
        "glam::DQuat::to_array",
        "glam::DQuat::clone",
        "glam::DQuat::mul_vec3",
        "glam::DQuat::from_rotation_arc",
        "glam::DQuat::from_affine3",
        "glam::DQuat::from_array",
        "glam::DQuat::to_euler",
        "glam::DQuat::from_rotation_x",
        "glam::DQuat::length_squared",
        "glam::DQuat::neg",
        "glam::DQuat::eq",
        "glam::DQuat::mul-2",
        "glam::DQuat::from_rotation_z",
        "glam::DQuat::from_xyzw",
        "glam::DQuat::mul"
      ],
      "layout": {
        "kind": "Struct",
        "name": "DQuat",
        "fields": [
          {
            "name": "x",
            "type": "f64"
          },
          {
            "name": "y",
            "type": "f64"
          },
          {
            "name": "z",
            "type": "f64"
          },
          {
            "name": "w",
            "type": "f64"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::DVec2": {
      "identifier": "DVec2",
      "crate": "glam",
      "path": "glam::DVec2",
      "associated_functions": [
        "glam::DVec2::max_element",
        "glam::DVec2::as_uvec2",
        "glam::DVec2::round",
        "glam::DVec2::length_squared",
        "glam::DVec2::min_element",
        "glam::DVec2::fract_gl",
        "glam::DVec2::is_finite_mask",
        "glam::DVec2::abs_diff_eq",
        "glam::DVec2::abs",
        "glam::DVec2::ceil",
        "glam::DVec2::mul",
        "glam::DVec2::as_i16vec2",
        "glam::DVec2::cmpge",
        "glam::DVec2::reject_from",
        "glam::DVec2::signum",
        "glam::DVec2::distance_squared",
        "glam::DVec2::floor",
        "glam::DVec2::rotate",
        "glam::DVec2::rem",
        "glam::DVec2::cmpne",
        "glam::DVec2::as_i64vec2",
        "glam::DVec2::with_x",
        "glam::DVec2::max",
        "glam::DVec2::div_euclid",
        "glam::DVec2::element_product",
        "glam::DVec2::mul-1",
        "glam::DVec2::perp",
        "glam::DVec2::dot",
        "glam::DVec2::midpoint",
        "glam::DVec2::fract",
        "glam::DVec2::normalize_or_zero",
        "glam::DVec2::to_array",
        "glam::DVec2::sub-2",
        "glam::DVec2::clamp_length_min",
        "glam::DVec2::refract",
        "glam::DVec2::perp_dot",
        "glam::DVec2::is_finite",
        "glam::DVec2::clamp_length",
        "glam::DVec2::angle_between",
        "glam::DVec2::as_ivec2",
        "glam::DVec2::extend",
        "glam::DVec2::length_recip",
        "glam::DVec2::project_onto_normalized",
        "glam::DVec2::rotate_towards",
        "glam::DVec2::recip",
        "glam::DVec2::sub",
        "glam::DVec2::clamp_length_max",
        "glam::DVec2::rem-1",
        "glam::DVec2::add-1",
        "glam::DVec2::neg",
        "glam::DVec2::add-2",
        "glam::DVec2::div-2",
        "glam::DVec2::new",
        "glam::DVec2::rem-2",
        "glam::DVec2::as_u8vec2",
        "glam::DVec2::cmplt",
        "glam::DVec2::from_angle",
        "glam::DVec2::div",
        "glam::DVec2::normalize",
        "glam::DVec2::lerp",
        "glam::DVec2::mul-2",
        "glam::DVec2::as_vec2",
        "glam::DVec2::is_nan_mask",
        "glam::DVec2::add",
        "glam::DVec2::from_array",
        "glam::DVec2::is_nan",
        "glam::DVec2::mul_add",
        "glam::DVec2::cmpgt",
        "glam::DVec2::length",
        "glam::DVec2::to_angle",
        "glam::DVec2::as_i8vec2",
        "glam::DVec2::as_u16vec2",
        "glam::DVec2::rem_euclid",
        "glam::DVec2::sub-1",
        "glam::DVec2::splat",
        "glam::DVec2::cmple",
        "glam::DVec2::element_sum",
        "glam::DVec2::select",
        "glam::DVec2::clone",
        "glam::DVec2::trunc",
        "glam::DVec2::reject_from_normalized",
        "glam::DVec2::dot_into_vec",
        "glam::DVec2::with_y",
        "glam::DVec2::project_onto",
        "glam::DVec2::clamp",
        "glam::DVec2::powf",
        "glam::DVec2::reflect",
        "glam::DVec2::eq",
        "glam::DVec2::is_normalized",
        "glam::DVec2::distance",
        "glam::DVec2::is_negative_bitmask",
        "glam::DVec2::copysign",
        "glam::DVec2::as_u64vec2",
        "glam::DVec2::move_towards",
        "glam::DVec2::normalize_or",
        "glam::DVec2::div-1",
        "glam::DVec2::exp",
        "glam::DVec2::min",
        "glam::DVec2::cmpeq",
        "glam::DVec2::angle_to"
      ],
      "layout": {
        "kind": "Struct",
        "name": "DVec2",
        "fields": [
          {
            "name": "x",
            "type": "f64"
          },
          {
            "name": "y",
            "type": "f64"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::DVec3": {
      "identifier": "DVec3",
      "crate": "glam",
      "path": "glam::DVec3",
      "associated_functions": [
        "glam::DVec3::cmpne",
        "glam::DVec3::mul-2",
        "glam::DVec3::move_towards",
        "glam::DVec3::eq",
        "glam::DVec3::with_x",
        "glam::DVec3::as_ivec3",
        "glam::DVec3::rem-1",
        "glam::DVec3::length_recip",
        "glam::DVec3::cmple",
        "glam::DVec3::distance",
        "glam::DVec3::cross",
        "glam::DVec3::is_nan_mask",
        "glam::DVec3::floor",
        "glam::DVec3::dot_into_vec",
        "glam::DVec3::is_normalized",
        "glam::DVec3::cmplt",
        "glam::DVec3::sub-2",
        "glam::DVec3::any_orthogonal_vector",
        "glam::DVec3::normalize",
        "glam::DVec3::sub-1",
        "glam::DVec3::ceil",
        "glam::DVec3::is_finite",
        "glam::DVec3::reflect",
        "glam::DVec3::cmpeq",
        "glam::DVec3::rem-2",
        "glam::DVec3::clone",
        "glam::DVec3::mul_add",
        "glam::DVec3::element_product",
        "glam::DVec3::from_array",
        "glam::DVec3::fract",
        "glam::DVec3::recip",
        "glam::DVec3::splat",
        "glam::DVec3::fract_gl",
        "glam::DVec3::extend",
        "glam::DVec3::normalize_or",
        "glam::DVec3::mul",
        "glam::DVec3::angle_between",
        "glam::DVec3::new",
        "glam::DVec3::exp",
        "glam::DVec3::sub",
        "glam::DVec3::distance_squared",
        "glam::DVec3::add-1",
        "glam::DVec3::normalize_or_zero",
        "glam::DVec3::element_sum",
        "glam::DVec3::as_i64vec3",
        "glam::DVec3::length",
        "glam::DVec3::cmpgt",
        "glam::DVec3::cmpge",
        "glam::DVec3::lerp",
        "glam::DVec3::is_finite_mask",
        "glam::DVec3::as_uvec3",
        "glam::DVec3::reject_from",
        "glam::DVec3::with_y",
        "glam::DVec3::trunc",
        "glam::DVec3::any_orthonormal_vector",
        "glam::DVec3::div-1",
        "glam::DVec3::select",
        "glam::DVec3::as_u8vec3",
        "glam::DVec3::clamp",
        "glam::DVec3::is_negative_bitmask",
        "glam::DVec3::signum",
        "glam::DVec3::div-2",
        "glam::DVec3::refract",
        "glam::DVec3::to_array",
        "glam::DVec3::midpoint",
        "glam::DVec3::copysign",
        "glam::DVec3::round",
        "glam::DVec3::max_element",
        "glam::DVec3::abs",
        "glam::DVec3::add-2",
        "glam::DVec3::as_i16vec3",
        "glam::DVec3::div_euclid",
        "glam::DVec3::rem",
        "glam::DVec3::neg",
        "glam::DVec3::min",
        "glam::DVec3::clamp_length_max",
        "glam::DVec3::with_z",
        "glam::DVec3::as_u16vec3",
        "glam::DVec3::min_element",
        "glam::DVec3::powf",
        "glam::DVec3::as_vec3a",
        "glam::DVec3::as_u64vec3",
        "glam::DVec3::as_i8vec3",
        "glam::DVec3::is_nan",
        "glam::DVec3::add",
        "glam::DVec3::project_onto_normalized",
        "glam::DVec3::length_squared",
        "glam::DVec3::clamp_length_min",
        "glam::DVec3::dot",
        "glam::DVec3::abs_diff_eq",
        "glam::DVec3::div",
        "glam::DVec3::project_onto",
        "glam::DVec3::clamp_length",
        "glam::DVec3::mul-1",
        "glam::DVec3::max",
        "glam::DVec3::as_vec3",
        "glam::DVec3::rem_euclid",
        "glam::DVec3::reject_from_normalized",
        "glam::DVec3::truncate"
      ],
      "layout": {
        "kind": "Struct",
        "name": "DVec3",
        "fields": [
          {
            "name": "x",
            "type": "f64"
          },
          {
            "name": "y",
            "type": "f64"
          },
          {
            "name": "z",
            "type": "f64"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::DVec4": {
      "identifier": "DVec4",
      "crate": "glam",
      "path": "glam::DVec4",
      "associated_functions": [
        "glam::DVec4::from_array",
        "glam::DVec4::clamp_length_max",
        "glam::DVec4::as_u8vec4",
        "glam::DVec4::eq",
        "glam::DVec4::new",
        "glam::DVec4::dot",
        "glam::DVec4::to_array",
        "glam::DVec4::cmpgt",
        "glam::DVec4::add-2",
        "glam::DVec4::cmpeq",
        "glam::DVec4::div-2",
        "glam::DVec4::signum",
        "glam::DVec4::cmpne",
        "glam::DVec4::sub",
        "glam::DVec4::as_i8vec4",
        "glam::DVec4::element_product",
        "glam::DVec4::copysign",
        "glam::DVec4::truncate",
        "glam::DVec4::add",
        "glam::DVec4::rem-1",
        "glam::DVec4::as_i64vec4",
        "glam::DVec4::recip",
        "glam::DVec4::trunc",
        "glam::DVec4::div_euclid",
        "glam::DVec4::sub-1",
        "glam::DVec4::mul-2",
        "glam::DVec4::abs_diff_eq",
        "glam::DVec4::max_element",
        "glam::DVec4::splat",
        "glam::DVec4::mul_add",
        "glam::DVec4::dot_into_vec",
        "glam::DVec4::is_nan_mask",
        "glam::DVec4::ceil",
        "glam::DVec4::mul-1",
        "glam::DVec4::is_nan",
        "glam::DVec4::is_finite",
        "glam::DVec4::midpoint",
        "glam::DVec4::is_negative_bitmask",
        "glam::DVec4::cmple",
        "glam::DVec4::round",
        "glam::DVec4::clamp",
        "glam::DVec4::fract",
        "glam::DVec4::project_onto_normalized",
        "glam::DVec4::reject_from",
        "glam::DVec4::refract",
        "glam::DVec4::cmpge",
        "glam::DVec4::with_z",
        "glam::DVec4::normalize",
        "glam::DVec4::length",
        "glam::DVec4::powf",
        "glam::DVec4::clamp_length",
        "glam::DVec4::rem",
        "glam::DVec4::mul",
        "glam::DVec4::as_u16vec4",
        "glam::DVec4::distance",
        "glam::DVec4::min",
        "glam::DVec4::normalize_or",
        "glam::DVec4::as_uvec4",
        "glam::DVec4::exp",
        "glam::DVec4::clamp_length_min",
        "glam::DVec4::with_x",
        "glam::DVec4::length_recip",
        "glam::DVec4::reflect",
        "glam::DVec4::move_towards",
        "glam::DVec4::is_finite_mask",
        "glam::DVec4::with_w",
        "glam::DVec4::rem_euclid",
        "glam::DVec4::add-1",
        "glam::DVec4::max",
        "glam::DVec4::abs",
        "glam::DVec4::as_vec4",
        "glam::DVec4::element_sum",
        "glam::DVec4::select",
        "glam::DVec4::div-1",
        "glam::DVec4::as_i16vec4",
        "glam::DVec4::sub-2",
        "glam::DVec4::clone",
        "glam::DVec4::length_squared",
        "glam::DVec4::is_normalized",
        "glam::DVec4::distance_squared",
        "glam::DVec4::min_element",
        "glam::DVec4::project_onto",
        "glam::DVec4::rem-2",
        "glam::DVec4::as_ivec4",
        "glam::DVec4::as_u64vec4",
        "glam::DVec4::normalize_or_zero",
        "glam::DVec4::cmplt",
        "glam::DVec4::reject_from_normalized",
        "glam::DVec4::with_y",
        "glam::DVec4::lerp",
        "glam::DVec4::floor",
        "glam::DVec4::fract_gl",
        "glam::DVec4::div",
        "glam::DVec4::neg"
      ],
      "layout": {
        "kind": "Struct",
        "name": "DVec4",
        "fields": [
          {
            "name": "x",
            "type": "f64"
          },
          {
            "name": "y",
            "type": "f64"
          },
          {
            "name": "z",
            "type": "f64"
          },
          {
            "name": "w",
            "type": "f64"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::EulerRot": {
      "identifier": "EulerRot",
      "crate": "glam",
      "path": "glam::EulerRot",
      "associated_functions": [
        "glam::EulerRot::assert_receiver_is_total_eq",
        "glam::EulerRot::clone",
        "glam::EulerRot::eq"
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "ZYX"
        },
        {
          "kind": "Unit",
          "name": "ZXY"
        },
        {
          "kind": "Unit",
          "name": "YXZ"
        },
        {
          "kind": "Unit",
          "name": "YZX"
        },
        {
          "kind": "Unit",
          "name": "XYZ"
        },
        {
          "kind": "Unit",
          "name": "XZY"
        },
        {
          "kind": "Unit",
          "name": "ZYZ"
        },
        {
          "kind": "Unit",
          "name": "ZXZ"
        },
        {
          "kind": "Unit",
          "name": "YXY"
        },
        {
          "kind": "Unit",
          "name": "YZY"
        },
        {
          "kind": "Unit",
          "name": "XYX"
        },
        {
          "kind": "Unit",
          "name": "XZX"
        },
        {
          "kind": "Unit",
          "name": "ZYXEx"
        },
        {
          "kind": "Unit",
          "name": "ZXYEx"
        },
        {
          "kind": "Unit",
          "name": "YXZEx"
        },
        {
          "kind": "Unit",
          "name": "YZXEx"
        },
        {
          "kind": "Unit",
          "name": "XYZEx"
        },
        {
          "kind": "Unit",
          "name": "XZYEx"
        },
        {
          "kind": "Unit",
          "name": "ZYZEx"
        },
        {
          "kind": "Unit",
          "name": "ZXZEx"
        },
        {
          "kind": "Unit",
          "name": "YXYEx"
        },
        {
          "kind": "Unit",
          "name": "YZYEx"
        },
        {
          "kind": "Unit",
          "name": "XYXEx"
        },
        {
          "kind": "Unit",
          "name": "XZXEx"
        }
      ],
      "generated": true,
      "insignificance": 1000
    },
    "glam::I16Vec2": {
      "identifier": "I16Vec2",
      "crate": "glam",
      "path": "glam::I16Vec2",
      "associated_functions": [
        "glam::I16Vec2::cmpne",
        "glam::I16Vec2::as_uvec2",
        "glam::I16Vec2::perp_dot",
        "glam::I16Vec2::dot_into_vec",
        "glam::I16Vec2::with_y",
        "glam::I16Vec2::new",
        "glam::I16Vec2::cmple",
        "glam::I16Vec2::is_negative_bitmask",
        "glam::I16Vec2::max",
        "glam::I16Vec2::wrapping_add_unsigned",
        "glam::I16Vec2::cmpge",
        "glam::I16Vec2::mul-2",
        "glam::I16Vec2::abs",
        "glam::I16Vec2::rem-1",
        "glam::I16Vec2::sub-1",
        "glam::I16Vec2::wrapping_mul",
        "glam::I16Vec2::as_vec2",
        "glam::I16Vec2::clone",
        "glam::I16Vec2::div-1",
        "glam::I16Vec2::element_sum",
        "glam::I16Vec2::min",
        "glam::I16Vec2::saturating_add_unsigned",
        "glam::I16Vec2::cmpeq",
        "glam::I16Vec2::mul-1",
        "glam::I16Vec2::from_array",
        "glam::I16Vec2::saturating_mul",
        "glam::I16Vec2::sub-2",
        "glam::I16Vec2::as_i8vec2",
        "glam::I16Vec2::wrapping_add",
        "glam::I16Vec2::signum",
        "glam::I16Vec2::mul",
        "glam::I16Vec2::max_element",
        "glam::I16Vec2::perp",
        "glam::I16Vec2::saturating_div",
        "glam::I16Vec2::distance_squared",
        "glam::I16Vec2::dot",
        "glam::I16Vec2::as_i64vec2",
        "glam::I16Vec2::div",
        "glam::I16Vec2::min_element",
        "glam::I16Vec2::add-1",
        "glam::I16Vec2::wrapping_sub",
        "glam::I16Vec2::add",
        "glam::I16Vec2::clamp",
        "glam::I16Vec2::extend",
        "glam::I16Vec2::with_x",
        "glam::I16Vec2::wrapping_div",
        "glam::I16Vec2::div-2",
        "glam::I16Vec2::rem_euclid",
        "glam::I16Vec2::splat",
        "glam::I16Vec2::rotate",
        "glam::I16Vec2::length_squared",
        "glam::I16Vec2::select",
        "glam::I16Vec2::rem",
        "glam::I16Vec2::cmplt",
        "glam::I16Vec2::assert_receiver_is_total_eq",
        "glam::I16Vec2::saturating_add",
        "glam::I16Vec2::add-2",
        "glam::I16Vec2::element_product",
        "glam::I16Vec2::as_dvec2",
        "glam::I16Vec2::neg",
        "glam::I16Vec2::sub",
        "glam::I16Vec2::as_u8vec2",
        "glam::I16Vec2::rem-2",
        "glam::I16Vec2::as_u16vec2",
        "glam::I16Vec2::saturating_sub",
        "glam::I16Vec2::wrapping_sub_unsigned",
        "glam::I16Vec2::eq",
        "glam::I16Vec2::div_euclid",
        "glam::I16Vec2::to_array",
        "glam::I16Vec2::cmpgt",
        "glam::I16Vec2::as_u64vec2",
        "glam::I16Vec2::as_ivec2",
        "glam::I16Vec2::saturating_sub_unsigned"
      ],
      "layout": {
        "kind": "Struct",
        "name": "I16Vec2",
        "fields": [
          {
            "name": "x",
            "type": "i16"
          },
          {
            "name": "y",
            "type": "i16"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::I16Vec3": {
      "identifier": "I16Vec3",
      "crate": "glam",
      "path": "glam::I16Vec3",
      "associated_functions": [
        "glam::I16Vec3::cmpeq",
        "glam::I16Vec3::as_i64vec3",
        "glam::I16Vec3::splat",
        "glam::I16Vec3::saturating_mul",
        "glam::I16Vec3::add",
        "glam::I16Vec3::saturating_div",
        "glam::I16Vec3::cross",
        "glam::I16Vec3::with_x",
        "glam::I16Vec3::saturating_sub_unsigned",
        "glam::I16Vec3::dot",
        "glam::I16Vec3::from_array",
        "glam::I16Vec3::with_z",
        "glam::I16Vec3::as_uvec3",
        "glam::I16Vec3::wrapping_add",
        "glam::I16Vec3::dot_into_vec",
        "glam::I16Vec3::rem-1",
        "glam::I16Vec3::min_element",
        "glam::I16Vec3::signum",
        "glam::I16Vec3::saturating_sub",
        "glam::I16Vec3::div-1",
        "glam::I16Vec3::cmpgt",
        "glam::I16Vec3::wrapping_add_unsigned",
        "glam::I16Vec3::clamp",
        "glam::I16Vec3::wrapping_mul",
        "glam::I16Vec3::clone",
        "glam::I16Vec3::sub",
        "glam::I16Vec3::saturating_add_unsigned",
        "glam::I16Vec3::mul-1",
        "glam::I16Vec3::new",
        "glam::I16Vec3::with_y",
        "glam::I16Vec3::extend",
        "glam::I16Vec3::truncate",
        "glam::I16Vec3::element_sum",
        "glam::I16Vec3::as_ivec3",
        "glam::I16Vec3::cmpne",
        "glam::I16Vec3::max_element",
        "glam::I16Vec3::div",
        "glam::I16Vec3::select",
        "glam::I16Vec3::as_vec3",
        "glam::I16Vec3::as_dvec3",
        "glam::I16Vec3::sub-2",
        "glam::I16Vec3::mul",
        "glam::I16Vec3::abs",
        "glam::I16Vec3::wrapping_div",
        "glam::I16Vec3::is_negative_bitmask",
        "glam::I16Vec3::rem-2",
        "glam::I16Vec3::cmplt",
        "glam::I16Vec3::as_u8vec3",
        "glam::I16Vec3::element_product",
        "glam::I16Vec3::rem",
        "glam::I16Vec3::assert_receiver_is_total_eq",
        "glam::I16Vec3::mul-2",
        "glam::I16Vec3::as_u16vec3",
        "glam::I16Vec3::add-1",
        "glam::I16Vec3::wrapping_sub",
        "glam::I16Vec3::neg",
        "glam::I16Vec3::saturating_add",
        "glam::I16Vec3::cmple",
        "glam::I16Vec3::as_u64vec3",
        "glam::I16Vec3::distance_squared",
        "glam::I16Vec3::wrapping_sub_unsigned",
        "glam::I16Vec3::eq",
        "glam::I16Vec3::div-2",
        "glam::I16Vec3::div_euclid",
        "glam::I16Vec3::cmpge",
        "glam::I16Vec3::as_i8vec3",
        "glam::I16Vec3::rem_euclid",
        "glam::I16Vec3::length_squared",
        "glam::I16Vec3::max",
        "glam::I16Vec3::add-2",
        "glam::I16Vec3::as_vec3a",
        "glam::I16Vec3::to_array",
        "glam::I16Vec3::sub-1",
        "glam::I16Vec3::min"
      ],
      "layout": {
        "kind": "Struct",
        "name": "I16Vec3",
        "fields": [
          {
            "name": "x",
            "type": "i16"
          },
          {
            "name": "y",
            "type": "i16"
          },
          {
            "name": "z",
            "type": "i16"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::I16Vec4": {
      "identifier": "I16Vec4",
      "crate": "glam",
      "path": "glam::I16Vec4",
      "associated_functions": [
        "glam::I16Vec4::div_euclid",
        "glam::I16Vec4::max",
        "glam::I16Vec4::element_product",
        "glam::I16Vec4::as_i64vec4",
        "glam::I16Vec4::distance_squared",
        "glam::I16Vec4::mul-2",
        "glam::I16Vec4::max_element",
        "glam::I16Vec4::mul",
        "glam::I16Vec4::min_element",
        "glam::I16Vec4::element_sum",
        "glam::I16Vec4::div-1",
        "glam::I16Vec4::wrapping_add_unsigned",
        "glam::I16Vec4::with_y",
        "glam::I16Vec4::mul-1",
        "glam::I16Vec4::dot_into_vec",
        "glam::I16Vec4::as_dvec4",
        "glam::I16Vec4::signum",
        "glam::I16Vec4::cmpeq",
        "glam::I16Vec4::min",
        "glam::I16Vec4::is_negative_bitmask",
        "glam::I16Vec4::rem-2",
        "glam::I16Vec4::cmpgt",
        "glam::I16Vec4::eq",
        "glam::I16Vec4::as_vec4",
        "glam::I16Vec4::cmple",
        "glam::I16Vec4::saturating_div",
        "glam::I16Vec4::sub",
        "glam::I16Vec4::wrapping_sub",
        "glam::I16Vec4::length_squared",
        "glam::I16Vec4::truncate",
        "glam::I16Vec4::saturating_sub_unsigned",
        "glam::I16Vec4::div-2",
        "glam::I16Vec4::cmplt",
        "glam::I16Vec4::wrapping_add",
        "glam::I16Vec4::abs",
        "glam::I16Vec4::wrapping_div",
        "glam::I16Vec4::as_uvec4",
        "glam::I16Vec4::cmpge",
        "glam::I16Vec4::add",
        "glam::I16Vec4::cmpne",
        "glam::I16Vec4::rem-1",
        "glam::I16Vec4::saturating_add",
        "glam::I16Vec4::assert_receiver_is_total_eq",
        "glam::I16Vec4::as_u16vec4",
        "glam::I16Vec4::div",
        "glam::I16Vec4::sub-1",
        "glam::I16Vec4::with_z",
        "glam::I16Vec4::clone",
        "glam::I16Vec4::as_u64vec4",
        "glam::I16Vec4::from_array",
        "glam::I16Vec4::select",
        "glam::I16Vec4::to_array",
        "glam::I16Vec4::rem_euclid",
        "glam::I16Vec4::dot",
        "glam::I16Vec4::splat",
        "glam::I16Vec4::neg",
        "glam::I16Vec4::sub-2",
        "glam::I16Vec4::as_u8vec4",
        "glam::I16Vec4::as_ivec4",
        "glam::I16Vec4::add-2",
        "glam::I16Vec4::rem",
        "glam::I16Vec4::wrapping_mul",
        "glam::I16Vec4::wrapping_sub_unsigned",
        "glam::I16Vec4::with_w",
        "glam::I16Vec4::new",
        "glam::I16Vec4::add-1",
        "glam::I16Vec4::saturating_sub",
        "glam::I16Vec4::clamp",
        "glam::I16Vec4::saturating_mul",
        "glam::I16Vec4::as_i8vec4",
        "glam::I16Vec4::with_x",
        "glam::I16Vec4::saturating_add_unsigned"
      ],
      "layout": {
        "kind": "Struct",
        "name": "I16Vec4",
        "fields": [
          {
            "name": "x",
            "type": "i16"
          },
          {
            "name": "y",
            "type": "i16"
          },
          {
            "name": "z",
            "type": "i16"
          },
          {
            "name": "w",
            "type": "i16"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::I64Vec2": {
      "identifier": "I64Vec2",
      "crate": "glam",
      "path": "glam::I64Vec2",
      "associated_functions": [
        "glam::I64Vec2::as_dvec2",
        "glam::I64Vec2::saturating_div",
        "glam::I64Vec2::div-2",
        "glam::I64Vec2::wrapping_sub",
        "glam::I64Vec2::wrapping_sub_unsigned",
        "glam::I64Vec2::add",
        "glam::I64Vec2::dot",
        "glam::I64Vec2::cmpge",
        "glam::I64Vec2::sub",
        "glam::I64Vec2::as_u64vec2",
        "glam::I64Vec2::with_y",
        "glam::I64Vec2::as_vec2",
        "glam::I64Vec2::as_i8vec2",
        "glam::I64Vec2::saturating_mul",
        "glam::I64Vec2::perp",
        "glam::I64Vec2::signum",
        "glam::I64Vec2::cmpne",
        "glam::I64Vec2::wrapping_add",
        "glam::I64Vec2::div_euclid",
        "glam::I64Vec2::extend",
        "glam::I64Vec2::min_element",
        "glam::I64Vec2::div",
        "glam::I64Vec2::rotate",
        "glam::I64Vec2::mul",
        "glam::I64Vec2::cmple",
        "glam::I64Vec2::max_element",
        "glam::I64Vec2::div-1",
        "glam::I64Vec2::as_u16vec2",
        "glam::I64Vec2::saturating_sub_unsigned",
        "glam::I64Vec2::add-1",
        "glam::I64Vec2::as_i16vec2",
        "glam::I64Vec2::select",
        "glam::I64Vec2::assert_receiver_is_total_eq",
        "glam::I64Vec2::rem",
        "glam::I64Vec2::cmpeq",
        "glam::I64Vec2::is_negative_bitmask",
        "glam::I64Vec2::sub-1",
        "glam::I64Vec2::wrapping_mul",
        "glam::I64Vec2::as_ivec2",
        "glam::I64Vec2::rem-2",
        "glam::I64Vec2::perp_dot",
        "glam::I64Vec2::clone",
        "glam::I64Vec2::with_x",
        "glam::I64Vec2::cmpgt",
        "glam::I64Vec2::mul-1",
        "glam::I64Vec2::abs",
        "glam::I64Vec2::mul-2",
        "glam::I64Vec2::neg",
        "glam::I64Vec2::element_sum",
        "glam::I64Vec2::splat",
        "glam::I64Vec2::rem_euclid",
        "glam::I64Vec2::saturating_sub",
        "glam::I64Vec2::from_array",
        "glam::I64Vec2::dot_into_vec",
        "glam::I64Vec2::wrapping_div",
        "glam::I64Vec2::as_u8vec2",
        "glam::I64Vec2::clamp",
        "glam::I64Vec2::saturating_add",
        "glam::I64Vec2::element_product",
        "glam::I64Vec2::saturating_add_unsigned",
        "glam::I64Vec2::cmplt",
        "glam::I64Vec2::distance_squared",
        "glam::I64Vec2::eq",
        "glam::I64Vec2::min",
        "glam::I64Vec2::wrapping_add_unsigned",
        "glam::I64Vec2::length_squared",
        "glam::I64Vec2::new",
        "glam::I64Vec2::rem-1",
        "glam::I64Vec2::sub-2",
        "glam::I64Vec2::as_uvec2",
        "glam::I64Vec2::to_array",
        "glam::I64Vec2::max",
        "glam::I64Vec2::add-2"
      ],
      "layout": {
        "kind": "Struct",
        "name": "I64Vec2",
        "fields": [
          {
            "name": "x",
            "type": "i64"
          },
          {
            "name": "y",
            "type": "i64"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::I64Vec3": {
      "identifier": "I64Vec3",
      "crate": "glam",
      "path": "glam::I64Vec3",
      "associated_functions": [
        "glam::I64Vec3::sub",
        "glam::I64Vec3::mul-1",
        "glam::I64Vec3::cmplt",
        "glam::I64Vec3::rem-1",
        "glam::I64Vec3::dot_into_vec",
        "glam::I64Vec3::abs",
        "glam::I64Vec3::saturating_mul",
        "glam::I64Vec3::extend",
        "glam::I64Vec3::rem_euclid",
        "glam::I64Vec3::signum",
        "glam::I64Vec3::sub-1",
        "glam::I64Vec3::add-2",
        "glam::I64Vec3::wrapping_add",
        "glam::I64Vec3::cross",
        "glam::I64Vec3::saturating_sub_unsigned",
        "glam::I64Vec3::rem",
        "glam::I64Vec3::new",
        "glam::I64Vec3::as_u8vec3",
        "glam::I64Vec3::mul-2",
        "glam::I64Vec3::as_dvec3",
        "glam::I64Vec3::truncate",
        "glam::I64Vec3::sub-2",
        "glam::I64Vec3::wrapping_sub_unsigned",
        "glam::I64Vec3::saturating_sub",
        "glam::I64Vec3::add",
        "glam::I64Vec3::dot",
        "glam::I64Vec3::with_z",
        "glam::I64Vec3::cmpeq",
        "glam::I64Vec3::wrapping_mul",
        "glam::I64Vec3::saturating_add_unsigned",
        "glam::I64Vec3::length_squared",
        "glam::I64Vec3::add-1",
        "glam::I64Vec3::cmpge",
        "glam::I64Vec3::as_vec3a",
        "glam::I64Vec3::wrapping_sub",
        "glam::I64Vec3::as_vec3",
        "glam::I64Vec3::eq",
        "glam::I64Vec3::element_sum",
        "glam::I64Vec3::mul",
        "glam::I64Vec3::neg",
        "glam::I64Vec3::with_x",
        "glam::I64Vec3::div-2",
        "glam::I64Vec3::cmpgt",
        "glam::I64Vec3::rem-2",
        "glam::I64Vec3::as_u16vec3",
        "glam::I64Vec3::as_ivec3",
        "glam::I64Vec3::as_u64vec3",
        "glam::I64Vec3::clone",
        "glam::I64Vec3::as_uvec3",
        "glam::I64Vec3::is_negative_bitmask",
        "glam::I64Vec3::as_i16vec3",
        "glam::I64Vec3::with_y",
        "glam::I64Vec3::select",
        "glam::I64Vec3::cmpne",
        "glam::I64Vec3::element_product",
        "glam::I64Vec3::to_array",
        "glam::I64Vec3::splat",
        "glam::I64Vec3::div-1",
        "glam::I64Vec3::saturating_div",
        "glam::I64Vec3::wrapping_div",
        "glam::I64Vec3::as_i8vec3",
        "glam::I64Vec3::from_array",
        "glam::I64Vec3::saturating_add",
        "glam::I64Vec3::div_euclid",
        "glam::I64Vec3::max",
        "glam::I64Vec3::min_element",
        "glam::I64Vec3::wrapping_add_unsigned",
        "glam::I64Vec3::cmple",
        "glam::I64Vec3::max_element",
        "glam::I64Vec3::clamp",
        "glam::I64Vec3::min",
        "glam::I64Vec3::div",
        "glam::I64Vec3::distance_squared",
        "glam::I64Vec3::assert_receiver_is_total_eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "I64Vec3",
        "fields": [
          {
            "name": "x",
            "type": "i64"
          },
          {
            "name": "y",
            "type": "i64"
          },
          {
            "name": "z",
            "type": "i64"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::I64Vec4": {
      "identifier": "I64Vec4",
      "crate": "glam",
      "path": "glam::I64Vec4",
      "associated_functions": [
        "glam::I64Vec4::as_vec4",
        "glam::I64Vec4::div-1",
        "glam::I64Vec4::wrapping_add_unsigned",
        "glam::I64Vec4::as_dvec4",
        "glam::I64Vec4::splat",
        "glam::I64Vec4::saturating_add",
        "glam::I64Vec4::truncate",
        "glam::I64Vec4::wrapping_mul",
        "glam::I64Vec4::mul-2",
        "glam::I64Vec4::with_z",
        "glam::I64Vec4::as_i8vec4",
        "glam::I64Vec4::with_w",
        "glam::I64Vec4::as_i16vec4",
        "glam::I64Vec4::wrapping_sub",
        "glam::I64Vec4::mul",
        "glam::I64Vec4::max_element",
        "glam::I64Vec4::rem",
        "glam::I64Vec4::saturating_sub",
        "glam::I64Vec4::signum",
        "glam::I64Vec4::rem_euclid",
        "glam::I64Vec4::add-2",
        "glam::I64Vec4::saturating_add_unsigned",
        "glam::I64Vec4::length_squared",
        "glam::I64Vec4::rem-2",
        "glam::I64Vec4::div",
        "glam::I64Vec4::neg",
        "glam::I64Vec4::with_x",
        "glam::I64Vec4::min_element",
        "glam::I64Vec4::wrapping_div",
        "glam::I64Vec4::sub",
        "glam::I64Vec4::div-2",
        "glam::I64Vec4::eq",
        "glam::I64Vec4::as_u8vec4",
        "glam::I64Vec4::sub-1",
        "glam::I64Vec4::saturating_mul",
        "glam::I64Vec4::distance_squared",
        "glam::I64Vec4::saturating_div",
        "glam::I64Vec4::clone",
        "glam::I64Vec4::add-1",
        "glam::I64Vec4::new",
        "glam::I64Vec4::cmple",
        "glam::I64Vec4::mul-1",
        "glam::I64Vec4::element_product",
        "glam::I64Vec4::div_euclid",
        "glam::I64Vec4::with_y",
        "glam::I64Vec4::wrapping_sub_unsigned",
        "glam::I64Vec4::element_sum",
        "glam::I64Vec4::min",
        "glam::I64Vec4::cmpne",
        "glam::I64Vec4::cmpeq",
        "glam::I64Vec4::cmpge",
        "glam::I64Vec4::as_u16vec4",
        "glam::I64Vec4::as_u64vec4",
        "glam::I64Vec4::clamp",
        "glam::I64Vec4::dot_into_vec",
        "glam::I64Vec4::cmplt",
        "glam::I64Vec4::rem-1",
        "glam::I64Vec4::saturating_sub_unsigned",
        "glam::I64Vec4::assert_receiver_is_total_eq",
        "glam::I64Vec4::as_uvec4",
        "glam::I64Vec4::cmpgt",
        "glam::I64Vec4::sub-2",
        "glam::I64Vec4::max",
        "glam::I64Vec4::is_negative_bitmask",
        "glam::I64Vec4::from_array",
        "glam::I64Vec4::as_ivec4",
        "glam::I64Vec4::add",
        "glam::I64Vec4::wrapping_add",
        "glam::I64Vec4::select",
        "glam::I64Vec4::abs",
        "glam::I64Vec4::to_array",
        "glam::I64Vec4::dot"
      ],
      "layout": {
        "kind": "Struct",
        "name": "I64Vec4",
        "fields": [
          {
            "name": "x",
            "type": "i64"
          },
          {
            "name": "y",
            "type": "i64"
          },
          {
            "name": "z",
            "type": "i64"
          },
          {
            "name": "w",
            "type": "i64"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::I8Vec2": {
      "identifier": "I8Vec2",
      "crate": "glam",
      "path": "glam::I8Vec2",
      "associated_functions": [
        "glam::I8Vec2::with_x",
        "glam::I8Vec2::length_squared",
        "glam::I8Vec2::assert_receiver_is_total_eq",
        "glam::I8Vec2::dot_into_vec",
        "glam::I8Vec2::select",
        "glam::I8Vec2::rem-2",
        "glam::I8Vec2::min",
        "glam::I8Vec2::add",
        "glam::I8Vec2::neg",
        "glam::I8Vec2::saturating_sub_unsigned",
        "glam::I8Vec2::mul",
        "glam::I8Vec2::rem-1",
        "glam::I8Vec2::div_euclid",
        "glam::I8Vec2::saturating_div",
        "glam::I8Vec2::cmplt",
        "glam::I8Vec2::from_array",
        "glam::I8Vec2::as_ivec2",
        "glam::I8Vec2::eq",
        "glam::I8Vec2::new",
        "glam::I8Vec2::with_y",
        "glam::I8Vec2::abs",
        "glam::I8Vec2::saturating_add",
        "glam::I8Vec2::as_u16vec2",
        "glam::I8Vec2::dot",
        "glam::I8Vec2::saturating_add_unsigned",
        "glam::I8Vec2::saturating_mul",
        "glam::I8Vec2::as_uvec2",
        "glam::I8Vec2::cmpgt",
        "glam::I8Vec2::as_vec2",
        "glam::I8Vec2::as_dvec2",
        "glam::I8Vec2::max_element",
        "glam::I8Vec2::add-2",
        "glam::I8Vec2::rem",
        "glam::I8Vec2::distance_squared",
        "glam::I8Vec2::perp",
        "glam::I8Vec2::min_element",
        "glam::I8Vec2::rem_euclid",
        "glam::I8Vec2::to_array",
        "glam::I8Vec2::saturating_sub",
        "glam::I8Vec2::element_sum",
        "glam::I8Vec2::sub-2",
        "glam::I8Vec2::extend",
        "glam::I8Vec2::rotate",
        "glam::I8Vec2::wrapping_add_unsigned",
        "glam::I8Vec2::max",
        "glam::I8Vec2::is_negative_bitmask",
        "glam::I8Vec2::splat",
        "glam::I8Vec2::div-2",
        "glam::I8Vec2::wrapping_add",
        "glam::I8Vec2::signum",
        "glam::I8Vec2::as_u64vec2",
        "glam::I8Vec2::mul-1",
        "glam::I8Vec2::div-1",
        "glam::I8Vec2::element_product",
        "glam::I8Vec2::as_u8vec2",
        "glam::I8Vec2::wrapping_sub",
        "glam::I8Vec2::as_i64vec2",
        "glam::I8Vec2::sub",
        "glam::I8Vec2::wrapping_mul",
        "glam::I8Vec2::div",
        "glam::I8Vec2::add-1",
        "glam::I8Vec2::perp_dot",
        "glam::I8Vec2::cmple",
        "glam::I8Vec2::cmpge",
        "glam::I8Vec2::cmpeq",
        "glam::I8Vec2::wrapping_div",
        "glam::I8Vec2::clamp",
        "glam::I8Vec2::cmpne",
        "glam::I8Vec2::as_i16vec2",
        "glam::I8Vec2::mul-2",
        "glam::I8Vec2::sub-1",
        "glam::I8Vec2::clone",
        "glam::I8Vec2::wrapping_sub_unsigned"
      ],
      "layout": {
        "kind": "Struct",
        "name": "I8Vec2",
        "fields": [
          {
            "name": "x",
            "type": "i8"
          },
          {
            "name": "y",
            "type": "i8"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::I8Vec3": {
      "identifier": "I8Vec3",
      "crate": "glam",
      "path": "glam::I8Vec3",
      "associated_functions": [
        "glam::I8Vec3::new",
        "glam::I8Vec3::mul-1",
        "glam::I8Vec3::div-2",
        "glam::I8Vec3::extend",
        "glam::I8Vec3::wrapping_mul",
        "glam::I8Vec3::splat",
        "glam::I8Vec3::sub",
        "glam::I8Vec3::wrapping_sub_unsigned",
        "glam::I8Vec3::assert_receiver_is_total_eq",
        "glam::I8Vec3::as_vec3",
        "glam::I8Vec3::as_u64vec3",
        "glam::I8Vec3::element_sum",
        "glam::I8Vec3::add-2",
        "glam::I8Vec3::signum",
        "glam::I8Vec3::cmplt",
        "glam::I8Vec3::select",
        "glam::I8Vec3::clone",
        "glam::I8Vec3::distance_squared",
        "glam::I8Vec3::as_i16vec3",
        "glam::I8Vec3::as_u16vec3",
        "glam::I8Vec3::rem",
        "glam::I8Vec3::wrapping_div",
        "glam::I8Vec3::wrapping_add",
        "glam::I8Vec3::min_element",
        "glam::I8Vec3::add",
        "glam::I8Vec3::rem-2",
        "glam::I8Vec3::rem_euclid",
        "glam::I8Vec3::cmpge",
        "glam::I8Vec3::clamp",
        "glam::I8Vec3::with_y",
        "glam::I8Vec3::from_array",
        "glam::I8Vec3::wrapping_sub",
        "glam::I8Vec3::length_squared",
        "glam::I8Vec3::saturating_add",
        "glam::I8Vec3::element_product",
        "glam::I8Vec3::mul-2",
        "glam::I8Vec3::div-1",
        "glam::I8Vec3::cmpgt",
        "glam::I8Vec3::rem-1",
        "glam::I8Vec3::div_euclid",
        "glam::I8Vec3::as_u8vec3",
        "glam::I8Vec3::truncate",
        "glam::I8Vec3::saturating_add_unsigned",
        "glam::I8Vec3::abs",
        "glam::I8Vec3::mul",
        "glam::I8Vec3::saturating_div",
        "glam::I8Vec3::dot",
        "glam::I8Vec3::dot_into_vec",
        "glam::I8Vec3::min",
        "glam::I8Vec3::with_z",
        "glam::I8Vec3::cmpne",
        "glam::I8Vec3::to_array",
        "glam::I8Vec3::saturating_sub",
        "glam::I8Vec3::saturating_mul",
        "glam::I8Vec3::as_uvec3",
        "glam::I8Vec3::add-1",
        "glam::I8Vec3::is_negative_bitmask",
        "glam::I8Vec3::cmple",
        "glam::I8Vec3::neg",
        "glam::I8Vec3::max",
        "glam::I8Vec3::as_ivec3",
        "glam::I8Vec3::saturating_sub_unsigned",
        "glam::I8Vec3::sub-2",
        "glam::I8Vec3::as_vec3a",
        "glam::I8Vec3::wrapping_add_unsigned",
        "glam::I8Vec3::max_element",
        "glam::I8Vec3::as_i64vec3",
        "glam::I8Vec3::as_dvec3",
        "glam::I8Vec3::sub-1",
        "glam::I8Vec3::cmpeq",
        "glam::I8Vec3::cross",
        "glam::I8Vec3::with_x",
        "glam::I8Vec3::eq",
        "glam::I8Vec3::div"
      ],
      "layout": {
        "kind": "Struct",
        "name": "I8Vec3",
        "fields": [
          {
            "name": "x",
            "type": "i8"
          },
          {
            "name": "y",
            "type": "i8"
          },
          {
            "name": "z",
            "type": "i8"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::I8Vec4": {
      "identifier": "I8Vec4",
      "crate": "glam",
      "path": "glam::I8Vec4",
      "associated_functions": [
        "glam::I8Vec4::as_i64vec4",
        "glam::I8Vec4::sub-1",
        "glam::I8Vec4::saturating_add",
        "glam::I8Vec4::abs",
        "glam::I8Vec4::rem-1",
        "glam::I8Vec4::add-2",
        "glam::I8Vec4::with_y",
        "glam::I8Vec4::distance_squared",
        "glam::I8Vec4::element_sum",
        "glam::I8Vec4::saturating_sub",
        "glam::I8Vec4::div",
        "glam::I8Vec4::wrapping_add_unsigned",
        "glam::I8Vec4::splat",
        "glam::I8Vec4::as_u16vec4",
        "glam::I8Vec4::select",
        "glam::I8Vec4::mul-1",
        "glam::I8Vec4::cmpge",
        "glam::I8Vec4::cmpne",
        "glam::I8Vec4::saturating_add_unsigned",
        "glam::I8Vec4::rem_euclid",
        "glam::I8Vec4::with_x",
        "glam::I8Vec4::eq",
        "glam::I8Vec4::element_product",
        "glam::I8Vec4::wrapping_div",
        "glam::I8Vec4::wrapping_mul",
        "glam::I8Vec4::max",
        "glam::I8Vec4::assert_receiver_is_total_eq",
        "glam::I8Vec4::saturating_sub_unsigned",
        "glam::I8Vec4::as_i16vec4",
        "glam::I8Vec4::max_element",
        "glam::I8Vec4::min_element",
        "glam::I8Vec4::saturating_div",
        "glam::I8Vec4::neg",
        "glam::I8Vec4::dot_into_vec",
        "glam::I8Vec4::as_uvec4",
        "glam::I8Vec4::sub-2",
        "glam::I8Vec4::rem",
        "glam::I8Vec4::mul-2",
        "glam::I8Vec4::from_array",
        "glam::I8Vec4::signum",
        "glam::I8Vec4::min",
        "glam::I8Vec4::saturating_mul",
        "glam::I8Vec4::truncate",
        "glam::I8Vec4::as_u64vec4",
        "glam::I8Vec4::as_ivec4",
        "glam::I8Vec4::length_squared",
        "glam::I8Vec4::is_negative_bitmask",
        "glam::I8Vec4::sub",
        "glam::I8Vec4::mul",
        "glam::I8Vec4::wrapping_sub",
        "glam::I8Vec4::wrapping_add",
        "glam::I8Vec4::with_w",
        "glam::I8Vec4::cmpgt",
        "glam::I8Vec4::add",
        "glam::I8Vec4::clone",
        "glam::I8Vec4::as_vec4",
        "glam::I8Vec4::div-2",
        "glam::I8Vec4::cmplt",
        "glam::I8Vec4::as_dvec4",
        "glam::I8Vec4::cmpeq",
        "glam::I8Vec4::clamp",
        "glam::I8Vec4::add-1",
        "glam::I8Vec4::with_z",
        "glam::I8Vec4::div-1",
        "glam::I8Vec4::div_euclid",
        "glam::I8Vec4::to_array",
        "glam::I8Vec4::new",
        "glam::I8Vec4::as_u8vec4",
        "glam::I8Vec4::rem-2",
        "glam::I8Vec4::dot",
        "glam::I8Vec4::cmple",
        "glam::I8Vec4::wrapping_sub_unsigned"
      ],
      "layout": {
        "kind": "Struct",
        "name": "I8Vec4",
        "fields": [
          {
            "name": "x",
            "type": "i8"
          },
          {
            "name": "y",
            "type": "i8"
          },
          {
            "name": "z",
            "type": "i8"
          },
          {
            "name": "w",
            "type": "i8"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::IVec2": {
      "identifier": "IVec2",
      "crate": "glam",
      "path": "glam::IVec2",
      "associated_functions": [
        "glam::IVec2::wrapping_mul",
        "glam::IVec2::as_u16vec2",
        "glam::IVec2::div",
        "glam::IVec2::sub",
        "glam::IVec2::div_euclid",
        "glam::IVec2::perp_dot",
        "glam::IVec2::wrapping_add",
        "glam::IVec2::cmpge",
        "glam::IVec2::rotate",
        "glam::IVec2::distance_squared",
        "glam::IVec2::min_element",
        "glam::IVec2::cmple",
        "glam::IVec2::rem-2",
        "glam::IVec2::wrapping_add_unsigned",
        "glam::IVec2::to_array",
        "glam::IVec2::as_uvec2",
        "glam::IVec2::wrapping_div",
        "glam::IVec2::rem-1",
        "glam::IVec2::length_squared",
        "glam::IVec2::mul-2",
        "glam::IVec2::div-1",
        "glam::IVec2::mul",
        "glam::IVec2::as_u64vec2",
        "glam::IVec2::saturating_add_unsigned",
        "glam::IVec2::cmpeq",
        "glam::IVec2::saturating_sub",
        "glam::IVec2::add-1",
        "glam::IVec2::saturating_div",
        "glam::IVec2::saturating_sub_unsigned",
        "glam::IVec2::neg",
        "glam::IVec2::perp",
        "glam::IVec2::as_i16vec2",
        "glam::IVec2::as_i8vec2",
        "glam::IVec2::mul-1",
        "glam::IVec2::signum",
        "glam::IVec2::saturating_mul",
        "glam::IVec2::as_vec2",
        "glam::IVec2::cmpne",
        "glam::IVec2::rem_euclid",
        "glam::IVec2::element_sum",
        "glam::IVec2::cmpgt",
        "glam::IVec2::is_negative_bitmask",
        "glam::IVec2::as_dvec2",
        "glam::IVec2::as_u8vec2",
        "glam::IVec2::element_product",
        "glam::IVec2::wrapping_sub_unsigned",
        "glam::IVec2::min",
        "glam::IVec2::assert_receiver_is_total_eq",
        "glam::IVec2::with_x",
        "glam::IVec2::max",
        "glam::IVec2::extend",
        "glam::IVec2::rem",
        "glam::IVec2::cmplt",
        "glam::IVec2::sub-2",
        "glam::IVec2::from_array",
        "glam::IVec2::wrapping_sub",
        "glam::IVec2::sub-1",
        "glam::IVec2::saturating_add",
        "glam::IVec2::max_element",
        "glam::IVec2::clone",
        "glam::IVec2::dot",
        "glam::IVec2::add",
        "glam::IVec2::dot_into_vec",
        "glam::IVec2::add-2",
        "glam::IVec2::select",
        "glam::IVec2::as_i64vec2",
        "glam::IVec2::with_y",
        "glam::IVec2::splat",
        "glam::IVec2::clamp",
        "glam::IVec2::div-2",
        "glam::IVec2::eq",
        "glam::IVec2::abs",
        "glam::IVec2::new"
      ],
      "layout": {
        "kind": "Struct",
        "name": "IVec2",
        "fields": [
          {
            "name": "x",
            "type": "i32"
          },
          {
            "name": "y",
            "type": "i32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::IVec3": {
      "identifier": "IVec3",
      "crate": "glam",
      "path": "glam::IVec3",
      "associated_functions": [
        "glam::IVec3::with_z",
        "glam::IVec3::cmpge",
        "glam::IVec3::max",
        "glam::IVec3::mul-2",
        "glam::IVec3::wrapping_add_unsigned",
        "glam::IVec3::div-2",
        "glam::IVec3::cmple",
        "glam::IVec3::saturating_sub_unsigned",
        "glam::IVec3::with_x",
        "glam::IVec3::distance_squared",
        "glam::IVec3::rem_euclid",
        "glam::IVec3::assert_receiver_is_total_eq",
        "glam::IVec3::new",
        "glam::IVec3::as_i8vec3",
        "glam::IVec3::wrapping_sub_unsigned",
        "glam::IVec3::abs",
        "glam::IVec3::mul-1",
        "glam::IVec3::min",
        "glam::IVec3::from_array",
        "glam::IVec3::as_u16vec3",
        "glam::IVec3::add",
        "glam::IVec3::select",
        "glam::IVec3::saturating_add_unsigned",
        "glam::IVec3::wrapping_mul",
        "glam::IVec3::sub",
        "glam::IVec3::truncate",
        "glam::IVec3::neg",
        "glam::IVec3::cmpgt",
        "glam::IVec3::saturating_sub",
        "glam::IVec3::cross",
        "glam::IVec3::rem",
        "glam::IVec3::element_sum",
        "glam::IVec3::div",
        "glam::IVec3::to_array",
        "glam::IVec3::max_element",
        "glam::IVec3::signum",
        "glam::IVec3::rem-2",
        "glam::IVec3::add-1",
        "glam::IVec3::wrapping_div",
        "glam::IVec3::as_vec3",
        "glam::IVec3::saturating_div",
        "glam::IVec3::as_u8vec3",
        "glam::IVec3::dot_into_vec",
        "glam::IVec3::as_i16vec3",
        "glam::IVec3::sub-2",
        "glam::IVec3::as_dvec3",
        "glam::IVec3::clone",
        "glam::IVec3::rem-1",
        "glam::IVec3::div_euclid",
        "glam::IVec3::is_negative_bitmask",
        "glam::IVec3::wrapping_add",
        "glam::IVec3::element_product",
        "glam::IVec3::min_element",
        "glam::IVec3::saturating_add",
        "glam::IVec3::div-1",
        "glam::IVec3::cmplt",
        "glam::IVec3::clamp",
        "glam::IVec3::as_uvec3",
        "glam::IVec3::mul",
        "glam::IVec3::cmpne",
        "glam::IVec3::saturating_mul",
        "glam::IVec3::eq",
        "glam::IVec3::dot",
        "glam::IVec3::splat",
        "glam::IVec3::as_i64vec3",
        "glam::IVec3::extend",
        "glam::IVec3::as_vec3a",
        "glam::IVec3::cmpeq",
        "glam::IVec3::wrapping_sub",
        "glam::IVec3::with_y",
        "glam::IVec3::as_u64vec3",
        "glam::IVec3::add-2",
        "glam::IVec3::sub-1",
        "glam::IVec3::length_squared"
      ],
      "layout": {
        "kind": "Struct",
        "name": "IVec3",
        "fields": [
          {
            "name": "x",
            "type": "i32"
          },
          {
            "name": "y",
            "type": "i32"
          },
          {
            "name": "z",
            "type": "i32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::IVec4": {
      "identifier": "IVec4",
      "crate": "glam",
      "path": "glam::IVec4",
      "associated_functions": [
        "glam::IVec4::saturating_div",
        "glam::IVec4::rem-1",
        "glam::IVec4::div",
        "glam::IVec4::cmpne",
        "glam::IVec4::element_product",
        "glam::IVec4::add",
        "glam::IVec4::add-1",
        "glam::IVec4::as_vec4",
        "glam::IVec4::neg",
        "glam::IVec4::is_negative_bitmask",
        "glam::IVec4::dot",
        "glam::IVec4::cmple",
        "glam::IVec4::clamp",
        "glam::IVec4::saturating_sub_unsigned",
        "glam::IVec4::clone",
        "glam::IVec4::sub-1",
        "glam::IVec4::from_array",
        "glam::IVec4::mul-1",
        "glam::IVec4::wrapping_sub_unsigned",
        "glam::IVec4::rem-2",
        "glam::IVec4::wrapping_div",
        "glam::IVec4::sub-2",
        "glam::IVec4::as_dvec4",
        "glam::IVec4::assert_receiver_is_total_eq",
        "glam::IVec4::signum",
        "glam::IVec4::new",
        "glam::IVec4::as_i64vec4",
        "glam::IVec4::wrapping_sub",
        "glam::IVec4::saturating_mul",
        "glam::IVec4::select",
        "glam::IVec4::truncate",
        "glam::IVec4::wrapping_add_unsigned",
        "glam::IVec4::as_i16vec4",
        "glam::IVec4::as_u8vec4",
        "glam::IVec4::div_euclid",
        "glam::IVec4::wrapping_mul",
        "glam::IVec4::rem",
        "glam::IVec4::saturating_sub",
        "glam::IVec4::dot_into_vec",
        "glam::IVec4::div-1",
        "glam::IVec4::cmpgt",
        "glam::IVec4::as_u16vec4",
        "glam::IVec4::as_u64vec4",
        "glam::IVec4::as_i8vec4",
        "glam::IVec4::add-2",
        "glam::IVec4::distance_squared",
        "glam::IVec4::with_w",
        "glam::IVec4::sub",
        "glam::IVec4::mul-2",
        "glam::IVec4::length_squared",
        "glam::IVec4::rem_euclid",
        "glam::IVec4::cmplt",
        "glam::IVec4::with_y",
        "glam::IVec4::cmpge",
        "glam::IVec4::max_element",
        "glam::IVec4::saturating_add",
        "glam::IVec4::with_z",
        "glam::IVec4::min_element",
        "glam::IVec4::max",
        "glam::IVec4::with_x",
        "glam::IVec4::div-2",
        "glam::IVec4::to_array",
        "glam::IVec4::splat",
        "glam::IVec4::min",
        "glam::IVec4::abs",
        "glam::IVec4::cmpeq",
        "glam::IVec4::wrapping_add",
        "glam::IVec4::eq",
        "glam::IVec4::mul",
        "glam::IVec4::saturating_add_unsigned",
        "glam::IVec4::element_sum",
        "glam::IVec4::as_uvec4"
      ],
      "layout": {
        "kind": "Struct",
        "name": "IVec4",
        "fields": [
          {
            "name": "x",
            "type": "i32"
          },
          {
            "name": "y",
            "type": "i32"
          },
          {
            "name": "z",
            "type": "i32"
          },
          {
            "name": "w",
            "type": "i32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::Mat2": {
      "identifier": "Mat2",
      "crate": "glam",
      "path": "glam::Mat2",
      "associated_functions": [
        "glam::Mat2::to_cols_array_2d",
        "glam::Mat2::mul_mat2",
        "glam::Mat2::from_scale_angle",
        "glam::Mat2::from_mat3",
        "glam::Mat2::row",
        "glam::Mat2::is_nan",
        "glam::Mat2::to_cols_array",
        "glam::Mat2::from_mat3a",
        "glam::Mat2::as_dmat2",
        "glam::Mat2::from_mat3_minor",
        "glam::Mat2::transpose",
        "glam::Mat2::mul_vec2",
        "glam::Mat2::from_mat3a_minor",
        "glam::Mat2::mul-1",
        "glam::Mat2::sub_mat2",
        "glam::Mat2::neg",
        "glam::Mat2::abs_diff_eq",
        "glam::Mat2::from_cols",
        "glam::Mat2::inverse",
        "glam::Mat2::add",
        "glam::Mat2::div_scalar",
        "glam::Mat2::abs",
        "glam::Mat2::eq",
        "glam::Mat2::div",
        "glam::Mat2::col",
        "glam::Mat2::mul",
        "glam::Mat2::from_angle",
        "glam::Mat2::is_finite",
        "glam::Mat2::mul-2",
        "glam::Mat2::mul_scalar",
        "glam::Mat2::clone",
        "glam::Mat2::add_mat2",
        "glam::Mat2::from_diagonal",
        "glam::Mat2::determinant",
        "glam::Mat2::sub"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Mat2",
        "fields": [
          {
            "name": "x_axis",
            "type": "glam::Vec2"
          },
          {
            "name": "y_axis",
            "type": "glam::Vec2"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::Mat3": {
      "identifier": "Mat3",
      "crate": "glam",
      "path": "glam::Mat3",
      "associated_functions": [
        "glam::Mat3::from_translation",
        "glam::Mat3::is_nan",
        "glam::Mat3::mul-4",
        "glam::Mat3::from_axis_angle",
        "glam::Mat3::abs",
        "glam::Mat3::add",
        "glam::Mat3::div",
        "glam::Mat3::determinant",
        "glam::Mat3::from_cols",
        "glam::Mat3::transform_vector2",
        "glam::Mat3::abs_diff_eq",
        "glam::Mat3::from_mat4",
        "glam::Mat3::as_dmat3",
        "glam::Mat3::transpose",
        "glam::Mat3::transform_point2",
        "glam::Mat3::mul_mat3",
        "glam::Mat3::neg",
        "glam::Mat3::mul_vec3",
        "glam::Mat3::eq",
        "glam::Mat3::clone",
        "glam::Mat3::from_rotation_z",
        "glam::Mat3::mul",
        "glam::Mat3::add_mat3",
        "glam::Mat3::from_angle",
        "glam::Mat3::from_diagonal",
        "glam::Mat3::sub_mat3",
        "glam::Mat3::mul_vec3a",
        "glam::Mat3::from_mat4_minor",
        "glam::Mat3::row",
        "glam::Mat3::mul_scalar",
        "glam::Mat3::from_euler",
        "glam::Mat3::from_quat",
        "glam::Mat3::sub",
        "glam::Mat3::col",
        "glam::Mat3::div_scalar",
        "glam::Mat3::from_scale",
        "glam::Mat3::mul-3",
        "glam::Mat3::inverse",
        "glam::Mat3::to_cols_array_2d",
        "glam::Mat3::from_rotation_x",
        "glam::Mat3::from_mat2",
        "glam::Mat3::to_euler",
        "glam::Mat3::from_rotation_y",
        "glam::Mat3::mul-2",
        "glam::Mat3::mul-1",
        "glam::Mat3::to_cols_array",
        "glam::Mat3::is_finite",
        "glam::Mat3::from_scale_angle_translation"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Mat3",
        "fields": [
          {
            "name": "x_axis",
            "type": "glam::Vec3"
          },
          {
            "name": "y_axis",
            "type": "glam::Vec3"
          },
          {
            "name": "z_axis",
            "type": "glam::Vec3"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::Mat3A": {
      "identifier": "Mat3A",
      "crate": "glam",
      "path": "glam::Mat3A",
      "associated_functions": [
        "glam::Mat3A::mul-2",
        "glam::Mat3A::transform_point2",
        "glam::Mat3A::from_mat4",
        "glam::Mat3A::sub",
        "glam::Mat3A::from_euler",
        "glam::Mat3A::mul-4",
        "glam::Mat3A::add",
        "glam::Mat3A::as_dmat3",
        "glam::Mat3A::from_translation",
        "glam::Mat3A::div",
        "glam::Mat3A::transpose",
        "glam::Mat3A::mul_vec3a",
        "glam::Mat3A::mul_vec3",
        "glam::Mat3A::from_axis_angle",
        "glam::Mat3A::mul-3",
        "glam::Mat3A::mul-1",
        "glam::Mat3A::row",
        "glam::Mat3A::div_scalar",
        "glam::Mat3A::abs_diff_eq",
        "glam::Mat3A::from_rotation_x",
        "glam::Mat3A::clone",
        "glam::Mat3A::from_diagonal",
        "glam::Mat3A::abs",
        "glam::Mat3A::from_scale",
        "glam::Mat3A::mul_mat3",
        "glam::Mat3A::inverse",
        "glam::Mat3A::is_nan",
        "glam::Mat3A::from_mat2",
        "glam::Mat3A::to_cols_array",
        "glam::Mat3A::from_rotation_y",
        "glam::Mat3A::add_mat3",
        "glam::Mat3A::sub_mat3",
        "glam::Mat3A::to_cols_array_2d",
        "glam::Mat3A::from_cols",
        "glam::Mat3A::from_scale_angle_translation",
        "glam::Mat3A::to_euler",
        "glam::Mat3A::mul",
        "glam::Mat3A::transform_vector2",
        "glam::Mat3A::from_mat4_minor",
        "glam::Mat3A::eq",
        "glam::Mat3A::from_angle",
        "glam::Mat3A::from_quat",
        "glam::Mat3A::col",
        "glam::Mat3A::mul_scalar",
        "glam::Mat3A::neg",
        "glam::Mat3A::determinant",
        "glam::Mat3A::from_rotation_z",
        "glam::Mat3A::is_finite"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Mat3A",
        "fields": [
          {
            "name": "x_axis",
            "type": "glam::Vec3A"
          },
          {
            "name": "y_axis",
            "type": "glam::Vec3A"
          },
          {
            "name": "z_axis",
            "type": "glam::Vec3A"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::Mat4": {
      "identifier": "Mat4",
      "crate": "glam",
      "path": "glam::Mat4",
      "associated_functions": [
        "glam::Mat4::from_scale",
        "glam::Mat4::from_rotation_y",
        "glam::Mat4::perspective_rh_gl",
        "glam::Mat4::mul-2",
        "glam::Mat4::mul",
        "glam::Mat4::perspective_infinite_reverse_rh",
        "glam::Mat4::from_euler",
        "glam::Mat4::mul_vec4",
        "glam::Mat4::perspective_rh",
        "glam::Mat4::transpose",
        "glam::Mat4::mul_scalar",
        "glam::Mat4::transform_point3",
        "glam::Mat4::is_finite",
        "glam::Mat4::eq",
        "glam::Mat4::div",
        "glam::Mat4::from_cols",
        "glam::Mat4::transform_vector3a",
        "glam::Mat4::as_dmat4",
        "glam::Mat4::from_translation",
        "glam::Mat4::from_rotation_translation",
        "glam::Mat4::look_at_lh",
        "glam::Mat4::perspective_lh",
        "glam::Mat4::look_at_rh",
        "glam::Mat4::from_axis_angle",
        "glam::Mat4::from_mat3a",
        "glam::Mat4::to_cols_array_2d",
        "glam::Mat4::orthographic_rh_gl",
        "glam::Mat4::from_mat3",
        "glam::Mat4::abs",
        "glam::Mat4::from_rotation_z",
        "glam::Mat4::row",
        "glam::Mat4::from_scale_rotation_translation",
        "glam::Mat4::to_cols_array",
        "glam::Mat4::clone",
        "glam::Mat4::transform_vector3",
        "glam::Mat4::col",
        "glam::Mat4::look_to_rh",
        "glam::Mat4::orthographic_rh",
        "glam::Mat4::inverse",
        "glam::Mat4::div_scalar",
        "glam::Mat4::mul-3",
        "glam::Mat4::orthographic_lh",
        "glam::Mat4::sub_mat4",
        "glam::Mat4::look_to_lh",
        "glam::Mat4::abs_diff_eq",
        "glam::Mat4::neg",
        "glam::Mat4::add_mat4",
        "glam::Mat4::sub",
        "glam::Mat4::transform_point3a",
        "glam::Mat4::from_diagonal",
        "glam::Mat4::project_point3a",
        "glam::Mat4::perspective_infinite_rh",
        "glam::Mat4::perspective_infinite_reverse_lh",
        "glam::Mat4::determinant",
        "glam::Mat4::perspective_infinite_lh",
        "glam::Mat4::from_rotation_x",
        "glam::Mat4::add",
        "glam::Mat4::mul-1",
        "glam::Mat4::mul_mat4",
        "glam::Mat4::to_euler",
        "glam::Mat4::is_nan",
        "glam::Mat4::from_quat",
        "glam::Mat4::project_point3"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Mat4",
        "fields": [
          {
            "name": "x_axis",
            "type": "glam::Vec4"
          },
          {
            "name": "y_axis",
            "type": "glam::Vec4"
          },
          {
            "name": "z_axis",
            "type": "glam::Vec4"
          },
          {
            "name": "w_axis",
            "type": "glam::Vec4"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::Quat": {
      "identifier": "Quat",
      "crate": "glam",
      "path": "glam::Quat",
      "associated_functions": [
        "glam::Quat::is_near_identity",
        "glam::Quat::from_affine3",
        "glam::Quat::xyz",
        "glam::Quat::from_mat4",
        "glam::Quat::from_rotation_arc",
        "glam::Quat::from_xyzw",
        "glam::Quat::mul_vec3a",
        "glam::Quat::mul-3",
        "glam::Quat::length_recip",
        "glam::Quat::from_rotation_y",
        "glam::Quat::is_normalized",
        "glam::Quat::is_finite",
        "glam::Quat::from_mat3a",
        "glam::Quat::div",
        "glam::Quat::mul",
        "glam::Quat::mul-2",
        "glam::Quat::from_rotation_z",
        "glam::Quat::from_rotation_x",
        "glam::Quat::conjugate",
        "glam::Quat::is_nan",
        "glam::Quat::inverse",
        "glam::Quat::neg",
        "glam::Quat::mul-1",
        "glam::Quat::eq",
        "glam::Quat::length",
        "glam::Quat::as_dquat",
        "glam::Quat::from_vec4",
        "glam::Quat::from_array",
        "glam::Quat::to_array",
        "glam::Quat::length_squared",
        "glam::Quat::mul_quat",
        "glam::Quat::sub",
        "glam::Quat::from_rotation_arc_2d",
        "glam::Quat::slerp",
        "glam::Quat::rotate_towards",
        "glam::Quat::to_euler",
        "glam::Quat::from_rotation_arc_colinear",
        "glam::Quat::from_mat3",
        "glam::Quat::from_axis_angle",
        "glam::Quat::lerp",
        "glam::Quat::to_scaled_axis",
        "glam::Quat::add",
        "glam::Quat::from_euler",
        "glam::Quat::normalize",
        "glam::Quat::abs_diff_eq",
        "glam::Quat::clone",
        "glam::Quat::dot",
        "glam::Quat::angle_between",
        "glam::Quat::mul_vec3",
        "glam::Quat::from_scaled_axis"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Quat",
        "fields": [
          {
            "name": "x",
            "type": "f32"
          },
          {
            "name": "y",
            "type": "f32"
          },
          {
            "name": "z",
            "type": "f32"
          },
          {
            "name": "w",
            "type": "f32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::U16Vec2": {
      "identifier": "U16Vec2",
      "crate": "glam",
      "path": "glam::U16Vec2",
      "associated_functions": [
        "glam::U16Vec2::dot_into_vec",
        "glam::U16Vec2::length_squared",
        "glam::U16Vec2::div",
        "glam::U16Vec2::div-1",
        "glam::U16Vec2::sub",
        "glam::U16Vec2::element_product",
        "glam::U16Vec2::max",
        "glam::U16Vec2::add-1",
        "glam::U16Vec2::select",
        "glam::U16Vec2::cmpne",
        "glam::U16Vec2::wrapping_add_signed",
        "glam::U16Vec2::add",
        "glam::U16Vec2::sub-2",
        "glam::U16Vec2::cmpge",
        "glam::U16Vec2::element_sum",
        "glam::U16Vec2::wrapping_mul",
        "glam::U16Vec2::wrapping_sub",
        "glam::U16Vec2::mul-1",
        "glam::U16Vec2::saturating_mul",
        "glam::U16Vec2::mul-2",
        "glam::U16Vec2::new",
        "glam::U16Vec2::wrapping_add",
        "glam::U16Vec2::with_y",
        "glam::U16Vec2::cmplt",
        "glam::U16Vec2::as_dvec2",
        "glam::U16Vec2::sub-1",
        "glam::U16Vec2::saturating_div",
        "glam::U16Vec2::as_i8vec2",
        "glam::U16Vec2::as_vec2",
        "glam::U16Vec2::assert_receiver_is_total_eq",
        "glam::U16Vec2::as_ivec2",
        "glam::U16Vec2::min_element",
        "glam::U16Vec2::with_x",
        "glam::U16Vec2::clone",
        "glam::U16Vec2::as_i64vec2",
        "glam::U16Vec2::cmpeq",
        "glam::U16Vec2::min",
        "glam::U16Vec2::splat",
        "glam::U16Vec2::to_array",
        "glam::U16Vec2::saturating_add",
        "glam::U16Vec2::cmple",
        "glam::U16Vec2::extend",
        "glam::U16Vec2::as_u64vec2",
        "glam::U16Vec2::div-2",
        "glam::U16Vec2::add-2",
        "glam::U16Vec2::max_element",
        "glam::U16Vec2::mul",
        "glam::U16Vec2::as_uvec2",
        "glam::U16Vec2::saturating_sub",
        "glam::U16Vec2::eq",
        "glam::U16Vec2::as_i16vec2",
        "glam::U16Vec2::dot",
        "glam::U16Vec2::from_array",
        "glam::U16Vec2::wrapping_div",
        "glam::U16Vec2::as_u8vec2",
        "glam::U16Vec2::saturating_add_signed",
        "glam::U16Vec2::rem-1",
        "glam::U16Vec2::clamp",
        "glam::U16Vec2::cmpgt",
        "glam::U16Vec2::rem-2",
        "glam::U16Vec2::rem"
      ],
      "layout": {
        "kind": "Struct",
        "name": "U16Vec2",
        "fields": [
          {
            "name": "x",
            "type": "u16"
          },
          {
            "name": "y",
            "type": "u16"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::U16Vec3": {
      "identifier": "U16Vec3",
      "crate": "glam",
      "path": "glam::U16Vec3",
      "associated_functions": [
        "glam::U16Vec3::div-2",
        "glam::U16Vec3::rem",
        "glam::U16Vec3::assert_receiver_is_total_eq",
        "glam::U16Vec3::add-1",
        "glam::U16Vec3::truncate",
        "glam::U16Vec3::from_array",
        "glam::U16Vec3::as_dvec3",
        "glam::U16Vec3::max_element",
        "glam::U16Vec3::saturating_div",
        "glam::U16Vec3::with_z",
        "glam::U16Vec3::cmpeq",
        "glam::U16Vec3::dot",
        "glam::U16Vec3::add-2",
        "glam::U16Vec3::wrapping_sub",
        "glam::U16Vec3::new",
        "glam::U16Vec3::as_uvec3",
        "glam::U16Vec3::rem-2",
        "glam::U16Vec3::as_i64vec3",
        "glam::U16Vec3::as_u8vec3",
        "glam::U16Vec3::saturating_mul",
        "glam::U16Vec3::as_i16vec3",
        "glam::U16Vec3::add",
        "glam::U16Vec3::cmpge",
        "glam::U16Vec3::wrapping_add",
        "glam::U16Vec3::cmpne",
        "glam::U16Vec3::clone",
        "glam::U16Vec3::clamp",
        "glam::U16Vec3::div",
        "glam::U16Vec3::wrapping_add_signed",
        "glam::U16Vec3::as_vec3a",
        "glam::U16Vec3::element_sum",
        "glam::U16Vec3::min",
        "glam::U16Vec3::wrapping_div",
        "glam::U16Vec3::saturating_add",
        "glam::U16Vec3::sub",
        "glam::U16Vec3::splat",
        "glam::U16Vec3::wrapping_mul",
        "glam::U16Vec3::extend",
        "glam::U16Vec3::cmple",
        "glam::U16Vec3::rem-1",
        "glam::U16Vec3::cmplt",
        "glam::U16Vec3::as_u64vec3",
        "glam::U16Vec3::sub-2",
        "glam::U16Vec3::cmpgt",
        "glam::U16Vec3::mul",
        "glam::U16Vec3::saturating_sub",
        "glam::U16Vec3::element_product",
        "glam::U16Vec3::length_squared",
        "glam::U16Vec3::saturating_add_signed",
        "glam::U16Vec3::mul-2",
        "glam::U16Vec3::cross",
        "glam::U16Vec3::with_x",
        "glam::U16Vec3::mul-1",
        "glam::U16Vec3::as_i8vec3",
        "glam::U16Vec3::dot_into_vec",
        "glam::U16Vec3::max",
        "glam::U16Vec3::eq",
        "glam::U16Vec3::select",
        "glam::U16Vec3::as_ivec3",
        "glam::U16Vec3::with_y",
        "glam::U16Vec3::to_array",
        "glam::U16Vec3::as_vec3",
        "glam::U16Vec3::div-1",
        "glam::U16Vec3::min_element",
        "glam::U16Vec3::sub-1"
      ],
      "layout": {
        "kind": "Struct",
        "name": "U16Vec3",
        "fields": [
          {
            "name": "x",
            "type": "u16"
          },
          {
            "name": "y",
            "type": "u16"
          },
          {
            "name": "z",
            "type": "u16"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::U16Vec4": {
      "identifier": "U16Vec4",
      "crate": "glam",
      "path": "glam::U16Vec4",
      "associated_functions": [
        "glam::U16Vec4::as_vec4",
        "glam::U16Vec4::as_i64vec4",
        "glam::U16Vec4::sub",
        "glam::U16Vec4::eq",
        "glam::U16Vec4::as_u64vec4",
        "glam::U16Vec4::as_u8vec4",
        "glam::U16Vec4::saturating_sub",
        "glam::U16Vec4::div-1",
        "glam::U16Vec4::div-2",
        "glam::U16Vec4::to_array",
        "glam::U16Vec4::as_i16vec4",
        "glam::U16Vec4::splat",
        "glam::U16Vec4::with_w",
        "glam::U16Vec4::dot",
        "glam::U16Vec4::div",
        "glam::U16Vec4::dot_into_vec",
        "glam::U16Vec4::cmplt",
        "glam::U16Vec4::as_uvec4",
        "glam::U16Vec4::as_dvec4",
        "glam::U16Vec4::clamp",
        "glam::U16Vec4::saturating_div",
        "glam::U16Vec4::wrapping_sub",
        "glam::U16Vec4::assert_receiver_is_total_eq",
        "glam::U16Vec4::max_element",
        "glam::U16Vec4::mul-1",
        "glam::U16Vec4::min_element",
        "glam::U16Vec4::from_array",
        "glam::U16Vec4::new",
        "glam::U16Vec4::select",
        "glam::U16Vec4::as_i8vec4",
        "glam::U16Vec4::add",
        "glam::U16Vec4::element_product",
        "glam::U16Vec4::add-2",
        "glam::U16Vec4::with_z",
        "glam::U16Vec4::max",
        "glam::U16Vec4::cmpge",
        "glam::U16Vec4::rem-2",
        "glam::U16Vec4::wrapping_add_signed",
        "glam::U16Vec4::cmpne",
        "glam::U16Vec4::sub-2",
        "glam::U16Vec4::rem-1",
        "glam::U16Vec4::wrapping_div",
        "glam::U16Vec4::rem",
        "glam::U16Vec4::mul",
        "glam::U16Vec4::cmple",
        "glam::U16Vec4::sub-1",
        "glam::U16Vec4::add-1",
        "glam::U16Vec4::clone",
        "glam::U16Vec4::cmpgt",
        "glam::U16Vec4::cmpeq",
        "glam::U16Vec4::min",
        "glam::U16Vec4::as_ivec4",
        "glam::U16Vec4::wrapping_add",
        "glam::U16Vec4::truncate",
        "glam::U16Vec4::mul-2",
        "glam::U16Vec4::length_squared",
        "glam::U16Vec4::element_sum",
        "glam::U16Vec4::wrapping_mul",
        "glam::U16Vec4::with_y",
        "glam::U16Vec4::saturating_add",
        "glam::U16Vec4::with_x",
        "glam::U16Vec4::saturating_mul",
        "glam::U16Vec4::saturating_add_signed"
      ],
      "layout": {
        "kind": "Struct",
        "name": "U16Vec4",
        "fields": [
          {
            "name": "x",
            "type": "u16"
          },
          {
            "name": "y",
            "type": "u16"
          },
          {
            "name": "z",
            "type": "u16"
          },
          {
            "name": "w",
            "type": "u16"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::U64Vec2": {
      "identifier": "U64Vec2",
      "crate": "glam",
      "path": "glam::U64Vec2",
      "associated_functions": [
        "glam::U64Vec2::sub-2",
        "glam::U64Vec2::element_sum",
        "glam::U64Vec2::max",
        "glam::U64Vec2::add-1",
        "glam::U64Vec2::as_ivec2",
        "glam::U64Vec2::mul-2",
        "glam::U64Vec2::rem-2",
        "glam::U64Vec2::with_y",
        "glam::U64Vec2::max_element",
        "glam::U64Vec2::cmple",
        "glam::U64Vec2::rem",
        "glam::U64Vec2::as_vec2",
        "glam::U64Vec2::sub",
        "glam::U64Vec2::cmpeq",
        "glam::U64Vec2::clone",
        "glam::U64Vec2::select",
        "glam::U64Vec2::as_uvec2",
        "glam::U64Vec2::as_u8vec2",
        "glam::U64Vec2::element_product",
        "glam::U64Vec2::eq",
        "glam::U64Vec2::dot",
        "glam::U64Vec2::mul-1",
        "glam::U64Vec2::cmpgt",
        "glam::U64Vec2::cmplt",
        "glam::U64Vec2::saturating_div",
        "glam::U64Vec2::add-2",
        "glam::U64Vec2::saturating_sub",
        "glam::U64Vec2::as_i64vec2",
        "glam::U64Vec2::min",
        "glam::U64Vec2::min_element",
        "glam::U64Vec2::dot_into_vec",
        "glam::U64Vec2::new",
        "glam::U64Vec2::wrapping_div",
        "glam::U64Vec2::as_i8vec2",
        "glam::U64Vec2::div",
        "glam::U64Vec2::div-2",
        "glam::U64Vec2::div-1",
        "glam::U64Vec2::from_array",
        "glam::U64Vec2::wrapping_mul",
        "glam::U64Vec2::assert_receiver_is_total_eq",
        "glam::U64Vec2::extend",
        "glam::U64Vec2::saturating_add_signed",
        "glam::U64Vec2::cmpge",
        "glam::U64Vec2::with_x",
        "glam::U64Vec2::clamp",
        "glam::U64Vec2::as_i16vec2",
        "glam::U64Vec2::as_u16vec2",
        "glam::U64Vec2::sub-1",
        "glam::U64Vec2::add",
        "glam::U64Vec2::length_squared",
        "glam::U64Vec2::saturating_mul",
        "glam::U64Vec2::splat",
        "glam::U64Vec2::wrapping_sub",
        "glam::U64Vec2::rem-1",
        "glam::U64Vec2::mul",
        "glam::U64Vec2::wrapping_add",
        "glam::U64Vec2::wrapping_add_signed",
        "glam::U64Vec2::to_array",
        "glam::U64Vec2::cmpne",
        "glam::U64Vec2::saturating_add",
        "glam::U64Vec2::as_dvec2"
      ],
      "layout": {
        "kind": "Struct",
        "name": "U64Vec2",
        "fields": [
          {
            "name": "x",
            "type": "u64"
          },
          {
            "name": "y",
            "type": "u64"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::U64Vec3": {
      "identifier": "U64Vec3",
      "crate": "glam",
      "path": "glam::U64Vec3",
      "associated_functions": [
        "glam::U64Vec3::sub",
        "glam::U64Vec3::min",
        "glam::U64Vec3::wrapping_add",
        "glam::U64Vec3::add-1",
        "glam::U64Vec3::add-2",
        "glam::U64Vec3::sub-2",
        "glam::U64Vec3::dot",
        "glam::U64Vec3::as_u8vec3",
        "glam::U64Vec3::as_vec3a",
        "glam::U64Vec3::assert_receiver_is_total_eq",
        "glam::U64Vec3::max",
        "glam::U64Vec3::cmpne",
        "glam::U64Vec3::saturating_sub",
        "glam::U64Vec3::div-2",
        "glam::U64Vec3::div-1",
        "glam::U64Vec3::cmplt",
        "glam::U64Vec3::as_vec3",
        "glam::U64Vec3::from_array",
        "glam::U64Vec3::to_array",
        "glam::U64Vec3::add",
        "glam::U64Vec3::as_dvec3",
        "glam::U64Vec3::length_squared",
        "glam::U64Vec3::div",
        "glam::U64Vec3::wrapping_add_signed",
        "glam::U64Vec3::rem",
        "glam::U64Vec3::as_i64vec3",
        "glam::U64Vec3::with_z",
        "glam::U64Vec3::clamp",
        "glam::U64Vec3::sub-1",
        "glam::U64Vec3::wrapping_div",
        "glam::U64Vec3::saturating_mul",
        "glam::U64Vec3::cmple",
        "glam::U64Vec3::rem-2",
        "glam::U64Vec3::select",
        "glam::U64Vec3::with_x",
        "glam::U64Vec3::extend",
        "glam::U64Vec3::cross",
        "glam::U64Vec3::truncate",
        "glam::U64Vec3::with_y",
        "glam::U64Vec3::as_ivec3",
        "glam::U64Vec3::max_element",
        "glam::U64Vec3::as_i16vec3",
        "glam::U64Vec3::min_element",
        "glam::U64Vec3::saturating_add_signed",
        "glam::U64Vec3::mul-2",
        "glam::U64Vec3::rem-1",
        "glam::U64Vec3::cmpeq",
        "glam::U64Vec3::element_sum",
        "glam::U64Vec3::as_u16vec3",
        "glam::U64Vec3::as_i8vec3",
        "glam::U64Vec3::wrapping_sub",
        "glam::U64Vec3::saturating_add",
        "glam::U64Vec3::clone",
        "glam::U64Vec3::cmpgt",
        "glam::U64Vec3::mul",
        "glam::U64Vec3::saturating_div",
        "glam::U64Vec3::mul-1",
        "glam::U64Vec3::cmpge",
        "glam::U64Vec3::dot_into_vec",
        "glam::U64Vec3::eq",
        "glam::U64Vec3::wrapping_mul",
        "glam::U64Vec3::new",
        "glam::U64Vec3::as_uvec3",
        "glam::U64Vec3::element_product",
        "glam::U64Vec3::splat"
      ],
      "layout": {
        "kind": "Struct",
        "name": "U64Vec3",
        "fields": [
          {
            "name": "x",
            "type": "u64"
          },
          {
            "name": "y",
            "type": "u64"
          },
          {
            "name": "z",
            "type": "u64"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::U64Vec4": {
      "identifier": "U64Vec4",
      "crate": "glam",
      "path": "glam::U64Vec4",
      "associated_functions": [
        "glam::U64Vec4::with_x",
        "glam::U64Vec4::cmplt",
        "glam::U64Vec4::cmple",
        "glam::U64Vec4::sub-2",
        "glam::U64Vec4::as_i16vec4",
        "glam::U64Vec4::wrapping_add",
        "glam::U64Vec4::add-1",
        "glam::U64Vec4::cmpne",
        "glam::U64Vec4::as_u8vec4",
        "glam::U64Vec4::with_y",
        "glam::U64Vec4::as_uvec4",
        "glam::U64Vec4::rem-1",
        "glam::U64Vec4::rem",
        "glam::U64Vec4::mul",
        "glam::U64Vec4::select",
        "glam::U64Vec4::div",
        "glam::U64Vec4::mul-1",
        "glam::U64Vec4::clone",
        "glam::U64Vec4::cmpeq",
        "glam::U64Vec4::element_product",
        "glam::U64Vec4::min_element",
        "glam::U64Vec4::wrapping_mul",
        "glam::U64Vec4::new",
        "glam::U64Vec4::sub",
        "glam::U64Vec4::rem-2",
        "glam::U64Vec4::as_ivec4",
        "glam::U64Vec4::cmpge",
        "glam::U64Vec4::from_array",
        "glam::U64Vec4::add",
        "glam::U64Vec4::eq",
        "glam::U64Vec4::as_dvec4",
        "glam::U64Vec4::dot",
        "glam::U64Vec4::wrapping_div",
        "glam::U64Vec4::to_array",
        "glam::U64Vec4::element_sum",
        "glam::U64Vec4::as_i64vec4",
        "glam::U64Vec4::assert_receiver_is_total_eq",
        "glam::U64Vec4::clamp",
        "glam::U64Vec4::max_element",
        "glam::U64Vec4::saturating_sub",
        "glam::U64Vec4::with_z",
        "glam::U64Vec4::wrapping_add_signed",
        "glam::U64Vec4::as_i8vec4",
        "glam::U64Vec4::mul-2",
        "glam::U64Vec4::with_w",
        "glam::U64Vec4::add-2",
        "glam::U64Vec4::max",
        "glam::U64Vec4::wrapping_sub",
        "glam::U64Vec4::truncate",
        "glam::U64Vec4::saturating_add_signed",
        "glam::U64Vec4::length_squared",
        "glam::U64Vec4::div-1",
        "glam::U64Vec4::as_vec4",
        "glam::U64Vec4::splat",
        "glam::U64Vec4::saturating_add",
        "glam::U64Vec4::div-2",
        "glam::U64Vec4::cmpgt",
        "glam::U64Vec4::as_u16vec4",
        "glam::U64Vec4::saturating_mul",
        "glam::U64Vec4::min",
        "glam::U64Vec4::saturating_div",
        "glam::U64Vec4::sub-1",
        "glam::U64Vec4::dot_into_vec"
      ],
      "layout": {
        "kind": "Struct",
        "name": "U64Vec4",
        "fields": [
          {
            "name": "x",
            "type": "u64"
          },
          {
            "name": "y",
            "type": "u64"
          },
          {
            "name": "z",
            "type": "u64"
          },
          {
            "name": "w",
            "type": "u64"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::U8Vec2": {
      "identifier": "U8Vec2",
      "crate": "glam",
      "path": "glam::U8Vec2",
      "associated_functions": [
        "glam::U8Vec2::extend",
        "glam::U8Vec2::as_u16vec2",
        "glam::U8Vec2::saturating_add_signed",
        "glam::U8Vec2::as_uvec2",
        "glam::U8Vec2::div",
        "glam::U8Vec2::mul-2",
        "glam::U8Vec2::wrapping_mul",
        "glam::U8Vec2::clone",
        "glam::U8Vec2::min_element",
        "glam::U8Vec2::clamp",
        "glam::U8Vec2::sub-1",
        "glam::U8Vec2::max",
        "glam::U8Vec2::sub-2",
        "glam::U8Vec2::with_y",
        "glam::U8Vec2::div-2",
        "glam::U8Vec2::mul",
        "glam::U8Vec2::wrapping_add",
        "glam::U8Vec2::assert_receiver_is_total_eq",
        "glam::U8Vec2::eq",
        "glam::U8Vec2::as_ivec2",
        "glam::U8Vec2::wrapping_add_signed",
        "glam::U8Vec2::dot_into_vec",
        "glam::U8Vec2::length_squared",
        "glam::U8Vec2::as_u64vec2",
        "glam::U8Vec2::sub",
        "glam::U8Vec2::as_i8vec2",
        "glam::U8Vec2::from_array",
        "glam::U8Vec2::mul-1",
        "glam::U8Vec2::to_array",
        "glam::U8Vec2::cmpne",
        "glam::U8Vec2::with_x",
        "glam::U8Vec2::cmplt",
        "glam::U8Vec2::splat",
        "glam::U8Vec2::select",
        "glam::U8Vec2::as_vec2",
        "glam::U8Vec2::cmpgt",
        "glam::U8Vec2::wrapping_div",
        "glam::U8Vec2::min",
        "glam::U8Vec2::saturating_sub",
        "glam::U8Vec2::saturating_add",
        "glam::U8Vec2::as_dvec2",
        "glam::U8Vec2::saturating_div",
        "glam::U8Vec2::element_sum",
        "glam::U8Vec2::rem",
        "glam::U8Vec2::as_i16vec2",
        "glam::U8Vec2::add",
        "glam::U8Vec2::new",
        "glam::U8Vec2::dot",
        "glam::U8Vec2::cmpeq",
        "glam::U8Vec2::cmple",
        "glam::U8Vec2::rem-2",
        "glam::U8Vec2::max_element",
        "glam::U8Vec2::saturating_mul",
        "glam::U8Vec2::div-1",
        "glam::U8Vec2::element_product",
        "glam::U8Vec2::as_i64vec2",
        "glam::U8Vec2::cmpge",
        "glam::U8Vec2::add-2",
        "glam::U8Vec2::rem-1",
        "glam::U8Vec2::wrapping_sub",
        "glam::U8Vec2::add-1"
      ],
      "layout": {
        "kind": "Struct",
        "name": "U8Vec2",
        "fields": [
          {
            "name": "x",
            "type": "u8"
          },
          {
            "name": "y",
            "type": "u8"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::U8Vec3": {
      "identifier": "U8Vec3",
      "crate": "glam",
      "path": "glam::U8Vec3",
      "associated_functions": [
        "glam::U8Vec3::sub-2",
        "glam::U8Vec3::cmple",
        "glam::U8Vec3::assert_receiver_is_total_eq",
        "glam::U8Vec3::saturating_add",
        "glam::U8Vec3::cmpgt",
        "glam::U8Vec3::add-1",
        "glam::U8Vec3::min",
        "glam::U8Vec3::sub",
        "glam::U8Vec3::as_vec3",
        "glam::U8Vec3::wrapping_div",
        "glam::U8Vec3::clamp",
        "glam::U8Vec3::element_sum",
        "glam::U8Vec3::max",
        "glam::U8Vec3::length_squared",
        "glam::U8Vec3::as_i64vec3",
        "glam::U8Vec3::select",
        "glam::U8Vec3::rem-2",
        "glam::U8Vec3::eq",
        "glam::U8Vec3::extend",
        "glam::U8Vec3::div-1",
        "glam::U8Vec3::wrapping_add_signed",
        "glam::U8Vec3::splat",
        "glam::U8Vec3::rem",
        "glam::U8Vec3::wrapping_sub",
        "glam::U8Vec3::cmpne",
        "glam::U8Vec3::as_i8vec3",
        "glam::U8Vec3::min_element",
        "glam::U8Vec3::mul-1",
        "glam::U8Vec3::as_i16vec3",
        "glam::U8Vec3::sub-1",
        "glam::U8Vec3::div-2",
        "glam::U8Vec3::add",
        "glam::U8Vec3::mul-2",
        "glam::U8Vec3::add-2",
        "glam::U8Vec3::new",
        "glam::U8Vec3::as_dvec3",
        "glam::U8Vec3::cmpeq",
        "glam::U8Vec3::saturating_mul",
        "glam::U8Vec3::with_y",
        "glam::U8Vec3::wrapping_add",
        "glam::U8Vec3::to_array",
        "glam::U8Vec3::element_product",
        "glam::U8Vec3::cmplt",
        "glam::U8Vec3::dot",
        "glam::U8Vec3::dot_into_vec",
        "glam::U8Vec3::max_element",
        "glam::U8Vec3::cross",
        "glam::U8Vec3::with_z",
        "glam::U8Vec3::from_array",
        "glam::U8Vec3::as_u64vec3",
        "glam::U8Vec3::saturating_sub",
        "glam::U8Vec3::as_ivec3",
        "glam::U8Vec3::as_vec3a",
        "glam::U8Vec3::mul",
        "glam::U8Vec3::div",
        "glam::U8Vec3::wrapping_mul",
        "glam::U8Vec3::saturating_add_signed",
        "glam::U8Vec3::cmpge",
        "glam::U8Vec3::saturating_div",
        "glam::U8Vec3::with_x",
        "glam::U8Vec3::as_u16vec3",
        "glam::U8Vec3::truncate",
        "glam::U8Vec3::as_uvec3",
        "glam::U8Vec3::clone",
        "glam::U8Vec3::rem-1"
      ],
      "layout": {
        "kind": "Struct",
        "name": "U8Vec3",
        "fields": [
          {
            "name": "x",
            "type": "u8"
          },
          {
            "name": "y",
            "type": "u8"
          },
          {
            "name": "z",
            "type": "u8"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::U8Vec4": {
      "identifier": "U8Vec4",
      "crate": "glam",
      "path": "glam::U8Vec4",
      "associated_functions": [
        "glam::U8Vec4::rem-2",
        "glam::U8Vec4::to_array",
        "glam::U8Vec4::wrapping_add",
        "glam::U8Vec4::saturating_mul",
        "glam::U8Vec4::rem-1",
        "glam::U8Vec4::as_i64vec4",
        "glam::U8Vec4::cmplt",
        "glam::U8Vec4::as_i8vec4",
        "glam::U8Vec4::eq",
        "glam::U8Vec4::element_product",
        "glam::U8Vec4::with_y",
        "glam::U8Vec4::element_sum",
        "glam::U8Vec4::sub",
        "glam::U8Vec4::rem",
        "glam::U8Vec4::saturating_add",
        "glam::U8Vec4::add",
        "glam::U8Vec4::clone",
        "glam::U8Vec4::div-2",
        "glam::U8Vec4::cmple",
        "glam::U8Vec4::min_element",
        "glam::U8Vec4::cmpge",
        "glam::U8Vec4::new",
        "glam::U8Vec4::max",
        "glam::U8Vec4::cmpne",
        "glam::U8Vec4::wrapping_div",
        "glam::U8Vec4::wrapping_mul",
        "glam::U8Vec4::select",
        "glam::U8Vec4::div-1",
        "glam::U8Vec4::wrapping_add_signed",
        "glam::U8Vec4::wrapping_sub",
        "glam::U8Vec4::as_dvec4",
        "glam::U8Vec4::clamp",
        "glam::U8Vec4::div",
        "glam::U8Vec4::mul-1",
        "glam::U8Vec4::mul-2",
        "glam::U8Vec4::add-1",
        "glam::U8Vec4::cmpeq",
        "glam::U8Vec4::as_u64vec4",
        "glam::U8Vec4::assert_receiver_is_total_eq",
        "glam::U8Vec4::as_vec4",
        "glam::U8Vec4::add-2",
        "glam::U8Vec4::max_element",
        "glam::U8Vec4::with_w",
        "glam::U8Vec4::splat",
        "glam::U8Vec4::sub-1",
        "glam::U8Vec4::truncate",
        "glam::U8Vec4::saturating_div",
        "glam::U8Vec4::with_x",
        "glam::U8Vec4::min",
        "glam::U8Vec4::as_i16vec4",
        "glam::U8Vec4::cmpgt",
        "glam::U8Vec4::dot_into_vec",
        "glam::U8Vec4::as_uvec4",
        "glam::U8Vec4::saturating_add_signed",
        "glam::U8Vec4::saturating_sub",
        "glam::U8Vec4::as_ivec4",
        "glam::U8Vec4::dot",
        "glam::U8Vec4::from_array",
        "glam::U8Vec4::mul",
        "glam::U8Vec4::as_u16vec4",
        "glam::U8Vec4::length_squared",
        "glam::U8Vec4::with_z",
        "glam::U8Vec4::sub-2"
      ],
      "layout": {
        "kind": "Struct",
        "name": "U8Vec4",
        "fields": [
          {
            "name": "x",
            "type": "u8"
          },
          {
            "name": "y",
            "type": "u8"
          },
          {
            "name": "z",
            "type": "u8"
          },
          {
            "name": "w",
            "type": "u8"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::UVec2": {
      "identifier": "UVec2",
      "crate": "glam",
      "path": "glam::UVec2",
      "associated_functions": [
        "glam::UVec2::new",
        "glam::UVec2::min",
        "glam::UVec2::mul-2",
        "glam::UVec2::saturating_add",
        "glam::UVec2::wrapping_add",
        "glam::UVec2::max_element",
        "glam::UVec2::wrapping_div",
        "glam::UVec2::dot",
        "glam::UVec2::min_element",
        "glam::UVec2::cmpne",
        "glam::UVec2::cmplt",
        "glam::UVec2::sub-1",
        "glam::UVec2::clone",
        "glam::UVec2::div",
        "glam::UVec2::as_dvec2",
        "glam::UVec2::to_array",
        "glam::UVec2::select",
        "glam::UVec2::as_u8vec2",
        "glam::UVec2::rem-1",
        "glam::UVec2::from_array",
        "glam::UVec2::sub",
        "glam::UVec2::add",
        "glam::UVec2::clamp",
        "glam::UVec2::saturating_div",
        "glam::UVec2::assert_receiver_is_total_eq",
        "glam::UVec2::mul",
        "glam::UVec2::sub-2",
        "glam::UVec2::eq",
        "glam::UVec2::cmpge",
        "glam::UVec2::cmpeq",
        "glam::UVec2::wrapping_mul",
        "glam::UVec2::div-2",
        "glam::UVec2::splat",
        "glam::UVec2::add-1",
        "glam::UVec2::as_u16vec2",
        "glam::UVec2::mul-1",
        "glam::UVec2::with_y",
        "glam::UVec2::cmpgt",
        "glam::UVec2::element_product",
        "glam::UVec2::add-2",
        "glam::UVec2::as_ivec2",
        "glam::UVec2::div-1",
        "glam::UVec2::as_i16vec2",
        "glam::UVec2::cmple",
        "glam::UVec2::as_vec2",
        "glam::UVec2::saturating_mul",
        "glam::UVec2::rem-2",
        "glam::UVec2::as_u64vec2",
        "glam::UVec2::extend",
        "glam::UVec2::saturating_add_signed",
        "glam::UVec2::wrapping_add_signed",
        "glam::UVec2::saturating_sub",
        "glam::UVec2::as_i8vec2",
        "glam::UVec2::wrapping_sub",
        "glam::UVec2::element_sum",
        "glam::UVec2::with_x",
        "glam::UVec2::max",
        "glam::UVec2::length_squared",
        "glam::UVec2::rem",
        "glam::UVec2::dot_into_vec",
        "glam::UVec2::as_i64vec2"
      ],
      "layout": {
        "kind": "Struct",
        "name": "UVec2",
        "fields": [
          {
            "name": "x",
            "type": "u32"
          },
          {
            "name": "y",
            "type": "u32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::UVec3": {
      "identifier": "UVec3",
      "crate": "glam",
      "path": "glam::UVec3",
      "associated_functions": [
        "glam::UVec3::saturating_div",
        "glam::UVec3::sub",
        "glam::UVec3::select",
        "glam::UVec3::rem-1",
        "glam::UVec3::wrapping_add",
        "glam::UVec3::as_ivec3",
        "glam::UVec3::clamp",
        "glam::UVec3::min_element",
        "glam::UVec3::mul-2",
        "glam::UVec3::cross",
        "glam::UVec3::element_sum",
        "glam::UVec3::assert_receiver_is_total_eq",
        "glam::UVec3::cmple",
        "glam::UVec3::cmplt",
        "glam::UVec3::with_z",
        "glam::UVec3::with_y",
        "glam::UVec3::mul-1",
        "glam::UVec3::extend",
        "glam::UVec3::truncate",
        "glam::UVec3::as_u8vec3",
        "glam::UVec3::as_vec3a",
        "glam::UVec3::div",
        "glam::UVec3::sub-1",
        "glam::UVec3::as_u64vec3",
        "glam::UVec3::new",
        "glam::UVec3::as_i16vec3",
        "glam::UVec3::dot",
        "glam::UVec3::div-2",
        "glam::UVec3::as_vec3",
        "glam::UVec3::cmpeq",
        "glam::UVec3::saturating_sub",
        "glam::UVec3::max",
        "glam::UVec3::rem-2",
        "glam::UVec3::to_array",
        "glam::UVec3::add-2",
        "glam::UVec3::max_element",
        "glam::UVec3::add",
        "glam::UVec3::length_squared",
        "glam::UVec3::div-1",
        "glam::UVec3::mul",
        "glam::UVec3::wrapping_mul",
        "glam::UVec3::cmpgt",
        "glam::UVec3::splat",
        "glam::UVec3::with_x",
        "glam::UVec3::min",
        "glam::UVec3::eq",
        "glam::UVec3::dot_into_vec",
        "glam::UVec3::wrapping_div",
        "glam::UVec3::saturating_add",
        "glam::UVec3::cmpge",
        "glam::UVec3::as_i8vec3",
        "glam::UVec3::clone",
        "glam::UVec3::rem",
        "glam::UVec3::wrapping_sub",
        "glam::UVec3::cmpne",
        "glam::UVec3::saturating_add_signed",
        "glam::UVec3::element_product",
        "glam::UVec3::add-1",
        "glam::UVec3::as_i64vec3",
        "glam::UVec3::wrapping_add_signed",
        "glam::UVec3::saturating_mul",
        "glam::UVec3::as_u16vec3",
        "glam::UVec3::from_array",
        "glam::UVec3::sub-2",
        "glam::UVec3::as_dvec3"
      ],
      "layout": {
        "kind": "Struct",
        "name": "UVec3",
        "fields": [
          {
            "name": "x",
            "type": "u32"
          },
          {
            "name": "y",
            "type": "u32"
          },
          {
            "name": "z",
            "type": "u32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::UVec4": {
      "identifier": "UVec4",
      "crate": "glam",
      "path": "glam::UVec4",
      "associated_functions": [
        "glam::UVec4::add-2",
        "glam::UVec4::min_element",
        "glam::UVec4::wrapping_add_signed",
        "glam::UVec4::rem-2",
        "glam::UVec4::assert_receiver_is_total_eq",
        "glam::UVec4::as_u8vec4",
        "glam::UVec4::max",
        "glam::UVec4::mul-2",
        "glam::UVec4::min",
        "glam::UVec4::wrapping_add",
        "glam::UVec4::saturating_add_signed",
        "glam::UVec4::cmplt",
        "glam::UVec4::dot_into_vec",
        "glam::UVec4::eq",
        "glam::UVec4::new",
        "glam::UVec4::to_array",
        "glam::UVec4::as_u16vec4",
        "glam::UVec4::splat",
        "glam::UVec4::from_array",
        "glam::UVec4::wrapping_mul",
        "glam::UVec4::sub-1",
        "glam::UVec4::as_u64vec4",
        "glam::UVec4::cmpeq",
        "glam::UVec4::sub",
        "glam::UVec4::length_squared",
        "glam::UVec4::mul",
        "glam::UVec4::saturating_sub",
        "glam::UVec4::with_y",
        "glam::UVec4::dot",
        "glam::UVec4::div-2",
        "glam::UVec4::rem-1",
        "glam::UVec4::wrapping_div",
        "glam::UVec4::clone",
        "glam::UVec4::cmpgt",
        "glam::UVec4::wrapping_sub",
        "glam::UVec4::as_vec4",
        "glam::UVec4::cmple",
        "glam::UVec4::max_element",
        "glam::UVec4::add-1",
        "glam::UVec4::as_dvec4",
        "glam::UVec4::saturating_add",
        "glam::UVec4::clamp",
        "glam::UVec4::div",
        "glam::UVec4::truncate",
        "glam::UVec4::cmpge",
        "glam::UVec4::saturating_div",
        "glam::UVec4::add",
        "glam::UVec4::as_ivec4",
        "glam::UVec4::as_i64vec4",
        "glam::UVec4::element_product",
        "glam::UVec4::saturating_mul",
        "glam::UVec4::div-1",
        "glam::UVec4::with_w",
        "glam::UVec4::sub-2",
        "glam::UVec4::rem",
        "glam::UVec4::as_i16vec4",
        "glam::UVec4::mul-1",
        "glam::UVec4::as_i8vec4",
        "glam::UVec4::select",
        "glam::UVec4::with_x",
        "glam::UVec4::cmpne",
        "glam::UVec4::element_sum",
        "glam::UVec4::with_z"
      ],
      "layout": {
        "kind": "Struct",
        "name": "UVec4",
        "fields": [
          {
            "name": "x",
            "type": "u32"
          },
          {
            "name": "y",
            "type": "u32"
          },
          {
            "name": "z",
            "type": "u32"
          },
          {
            "name": "w",
            "type": "u32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::Vec2": {
      "identifier": "Vec2",
      "crate": "glam",
      "path": "glam::Vec2",
      "associated_functions": [
        "glam::Vec2::new",
        "glam::Vec2::fract",
        "glam::Vec2::element_sum",
        "glam::Vec2::reject_from",
        "glam::Vec2::mul-1",
        "glam::Vec2::with_x",
        "glam::Vec2::clamp",
        "glam::Vec2::trunc",
        "glam::Vec2::reflect",
        "glam::Vec2::rem",
        "glam::Vec2::add",
        "glam::Vec2::as_uvec2",
        "glam::Vec2::sub-1",
        "glam::Vec2::is_negative_bitmask",
        "glam::Vec2::cmpeq",
        "glam::Vec2::ceil",
        "glam::Vec2::select",
        "glam::Vec2::angle_to",
        "glam::Vec2::is_nan",
        "glam::Vec2::max_element",
        "glam::Vec2::reject_from_normalized",
        "glam::Vec2::abs",
        "glam::Vec2::div-2",
        "glam::Vec2::div_euclid",
        "glam::Vec2::is_nan_mask",
        "glam::Vec2::perp",
        "glam::Vec2::div",
        "glam::Vec2::sub",
        "glam::Vec2::as_u16vec2",
        "glam::Vec2::clone",
        "glam::Vec2::powf",
        "glam::Vec2::neg",
        "glam::Vec2::as_i16vec2",
        "glam::Vec2::cmple",
        "glam::Vec2::sub-2",
        "glam::Vec2::project_onto",
        "glam::Vec2::from_angle",
        "glam::Vec2::signum",
        "glam::Vec2::length_squared",
        "glam::Vec2::midpoint",
        "glam::Vec2::clamp_length_max",
        "glam::Vec2::copysign",
        "glam::Vec2::is_normalized",
        "glam::Vec2::clamp_length_min",
        "glam::Vec2::dot",
        "glam::Vec2::cmpge",
        "glam::Vec2::floor",
        "glam::Vec2::move_towards",
        "glam::Vec2::cmpne",
        "glam::Vec2::as_i64vec2",
        "glam::Vec2::element_product",
        "glam::Vec2::rotate",
        "glam::Vec2::refract",
        "glam::Vec2::is_finite_mask",
        "glam::Vec2::splat",
        "glam::Vec2::recip",
        "glam::Vec2::cmpgt",
        "glam::Vec2::min",
        "glam::Vec2::as_u8vec2",
        "glam::Vec2::extend",
        "glam::Vec2::length_recip",
        "glam::Vec2::add-2",
        "glam::Vec2::exp",
        "glam::Vec2::with_y",
        "glam::Vec2::add-1",
        "glam::Vec2::abs_diff_eq",
        "glam::Vec2::is_finite",
        "glam::Vec2::mul",
        "glam::Vec2::min_element",
        "glam::Vec2::cmplt",
        "glam::Vec2::from_array",
        "glam::Vec2::to_angle",
        "glam::Vec2::mul-2",
        "glam::Vec2::length",
        "glam::Vec2::distance",
        "glam::Vec2::project_onto_normalized",
        "glam::Vec2::as_u64vec2",
        "glam::Vec2::mul_add",
        "glam::Vec2::max",
        "glam::Vec2::normalize",
        "glam::Vec2::as_ivec2",
        "glam::Vec2::rem-1",
        "glam::Vec2::eq",
        "glam::Vec2::rotate_towards",
        "glam::Vec2::normalize_or_zero",
        "glam::Vec2::perp_dot",
        "glam::Vec2::rem_euclid",
        "glam::Vec2::round",
        "glam::Vec2::fract_gl",
        "glam::Vec2::lerp",
        "glam::Vec2::rem-2",
        "glam::Vec2::div-1",
        "glam::Vec2::dot_into_vec",
        "glam::Vec2::distance_squared",
        "glam::Vec2::clamp_length",
        "glam::Vec2::normalize_or",
        "glam::Vec2::as_dvec2",
        "glam::Vec2::angle_between",
        "glam::Vec2::as_i8vec2",
        "glam::Vec2::to_array"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Vec2",
        "fields": [
          {
            "name": "x",
            "type": "f32"
          },
          {
            "name": "y",
            "type": "f32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::Vec3": {
      "identifier": "Vec3",
      "crate": "glam",
      "path": "glam::Vec3",
      "associated_functions": [
        "glam::Vec3::as_i16vec3",
        "glam::Vec3::clamp",
        "glam::Vec3::neg",
        "glam::Vec3::clamp_length_max",
        "glam::Vec3::min_element",
        "glam::Vec3::is_normalized",
        "glam::Vec3::project_onto",
        "glam::Vec3::clone",
        "glam::Vec3::normalize",
        "glam::Vec3::reflect",
        "glam::Vec3::mul",
        "glam::Vec3::round",
        "glam::Vec3::length_squared",
        "glam::Vec3::element_product",
        "glam::Vec3::reject_from",
        "glam::Vec3::cmplt",
        "glam::Vec3::as_ivec3",
        "glam::Vec3::floor",
        "glam::Vec3::clamp_length",
        "glam::Vec3::as_i64vec3",
        "glam::Vec3::with_z",
        "glam::Vec3::eq",
        "glam::Vec3::with_x",
        "glam::Vec3::copysign",
        "glam::Vec3::normalize_or_zero",
        "glam::Vec3::powf",
        "glam::Vec3::splat",
        "glam::Vec3::rem",
        "glam::Vec3::rem-2",
        "glam::Vec3::abs_diff_eq",
        "glam::Vec3::exp",
        "glam::Vec3::refract",
        "glam::Vec3::signum",
        "glam::Vec3::normalize_or",
        "glam::Vec3::rem_euclid",
        "glam::Vec3::extend",
        "glam::Vec3::abs",
        "glam::Vec3::new",
        "glam::Vec3::as_u8vec3",
        "glam::Vec3::cmpge",
        "glam::Vec3::div_euclid",
        "glam::Vec3::recip",
        "glam::Vec3::angle_between",
        "glam::Vec3::add-1",
        "glam::Vec3::is_nan_mask",
        "glam::Vec3::cmpgt",
        "glam::Vec3::sub-2",
        "glam::Vec3::is_negative_bitmask",
        "glam::Vec3::clamp_length_min",
        "glam::Vec3::from_array",
        "glam::Vec3::ceil",
        "glam::Vec3::length",
        "glam::Vec3::reject_from_normalized",
        "glam::Vec3::fract_gl",
        "glam::Vec3::cmple",
        "glam::Vec3::as_i8vec3",
        "glam::Vec3::distance_squared",
        "glam::Vec3::is_finite_mask",
        "glam::Vec3::lerp",
        "glam::Vec3::cmpne",
        "glam::Vec3::trunc",
        "glam::Vec3::div",
        "glam::Vec3::dot",
        "glam::Vec3::with_y",
        "glam::Vec3::project_onto_normalized",
        "glam::Vec3::as_dvec3",
        "glam::Vec3::as_uvec3",
        "glam::Vec3::is_nan",
        "glam::Vec3::as_u64vec3",
        "glam::Vec3::div-2",
        "glam::Vec3::min",
        "glam::Vec3::as_u16vec3",
        "glam::Vec3::mul-1",
        "glam::Vec3::element_sum",
        "glam::Vec3::cross",
        "glam::Vec3::distance",
        "glam::Vec3::add",
        "glam::Vec3::fract",
        "glam::Vec3::midpoint",
        "glam::Vec3::any_orthogonal_vector",
        "glam::Vec3::cmpeq",
        "glam::Vec3::sub-1",
        "glam::Vec3::truncate",
        "glam::Vec3::to_array",
        "glam::Vec3::mul-2",
        "glam::Vec3::move_towards",
        "glam::Vec3::dot_into_vec",
        "glam::Vec3::add-2",
        "glam::Vec3::length_recip",
        "glam::Vec3::is_finite",
        "glam::Vec3::mul_add",
        "glam::Vec3::max_element",
        "glam::Vec3::select",
        "glam::Vec3::max",
        "glam::Vec3::sub",
        "glam::Vec3::rem-1",
        "glam::Vec3::any_orthonormal_vector",
        "glam::Vec3::div-1"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Vec3",
        "fields": [
          {
            "name": "x",
            "type": "f32"
          },
          {
            "name": "y",
            "type": "f32"
          },
          {
            "name": "z",
            "type": "f32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::Vec3A": {
      "identifier": "Vec3A",
      "crate": "glam",
      "path": "glam::Vec3A",
      "associated_functions": [
        "glam::Vec3A::cmpgt",
        "glam::Vec3A::element_product",
        "glam::Vec3A::length_squared",
        "glam::Vec3A::as_u8vec3",
        "glam::Vec3A::lerp",
        "glam::Vec3A::div",
        "glam::Vec3A::rem",
        "glam::Vec3A::is_finite",
        "glam::Vec3A::is_negative_bitmask",
        "glam::Vec3A::normalize",
        "glam::Vec3A::normalize_or_zero",
        "glam::Vec3A::cmpge",
        "glam::Vec3A::splat",
        "glam::Vec3A::rem-2",
        "glam::Vec3A::exp",
        "glam::Vec3A::midpoint",
        "glam::Vec3A::sub-2",
        "glam::Vec3A::neg",
        "glam::Vec3A::move_towards",
        "glam::Vec3A::mul",
        "glam::Vec3A::project_onto",
        "glam::Vec3A::rem-1",
        "glam::Vec3A::clamp_length_min",
        "glam::Vec3A::normalize_or",
        "glam::Vec3A::sub-1",
        "glam::Vec3A::div-2",
        "glam::Vec3A::max_element",
        "glam::Vec3A::mul-1",
        "glam::Vec3A::cmplt",
        "glam::Vec3A::project_onto_normalized",
        "glam::Vec3A::cmpne",
        "glam::Vec3A::dot_into_vec",
        "glam::Vec3A::copysign",
        "glam::Vec3A::reject_from",
        "glam::Vec3A::max",
        "glam::Vec3A::is_normalized",
        "glam::Vec3A::add-2",
        "glam::Vec3A::is_finite_mask",
        "glam::Vec3A::add-1",
        "glam::Vec3A::clamp",
        "glam::Vec3A::reflect",
        "glam::Vec3A::cmple",
        "glam::Vec3A::powf",
        "glam::Vec3A::min_element",
        "glam::Vec3A::eq",
        "glam::Vec3A::reject_from_normalized",
        "glam::Vec3A::recip",
        "glam::Vec3A::as_uvec3",
        "glam::Vec3A::new",
        "glam::Vec3A::to_array",
        "glam::Vec3A::with_y",
        "glam::Vec3A::fract",
        "glam::Vec3A::trunc",
        "glam::Vec3A::abs",
        "glam::Vec3A::dot",
        "glam::Vec3A::is_nan",
        "glam::Vec3A::min",
        "glam::Vec3A::div_euclid",
        "glam::Vec3A::clamp_length_max",
        "glam::Vec3A::ceil",
        "glam::Vec3A::is_nan_mask",
        "glam::Vec3A::truncate",
        "glam::Vec3A::clone",
        "glam::Vec3A::as_i64vec3",
        "glam::Vec3A::mul-2",
        "glam::Vec3A::signum",
        "glam::Vec3A::mul_add",
        "glam::Vec3A::as_i16vec3",
        "glam::Vec3A::as_i8vec3",
        "glam::Vec3A::as_u16vec3",
        "glam::Vec3A::any_orthogonal_vector",
        "glam::Vec3A::abs_diff_eq",
        "glam::Vec3A::length_recip",
        "glam::Vec3A::floor",
        "glam::Vec3A::clamp_length",
        "glam::Vec3A::cmpeq",
        "glam::Vec3A::div-1",
        "glam::Vec3A::as_ivec3",
        "glam::Vec3A::angle_between",
        "glam::Vec3A::as_dvec3",
        "glam::Vec3A::round",
        "glam::Vec3A::from_array",
        "glam::Vec3A::refract",
        "glam::Vec3A::sub",
        "glam::Vec3A::from_vec4",
        "glam::Vec3A::rem_euclid",
        "glam::Vec3A::length",
        "glam::Vec3A::distance_squared",
        "glam::Vec3A::extend",
        "glam::Vec3A::fract_gl",
        "glam::Vec3A::with_z",
        "glam::Vec3A::distance",
        "glam::Vec3A::select",
        "glam::Vec3A::cross",
        "glam::Vec3A::any_orthonormal_vector",
        "glam::Vec3A::with_x",
        "glam::Vec3A::element_sum",
        "glam::Vec3A::as_u64vec3",
        "glam::Vec3A::add"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Vec3A",
        "fields": [
          {
            "name": "x",
            "type": "f32"
          },
          {
            "name": "y",
            "type": "f32"
          },
          {
            "name": "z",
            "type": "f32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "glam::Vec4": {
      "identifier": "Vec4",
      "crate": "glam",
      "path": "glam::Vec4",
      "associated_functions": [
        "glam::Vec4::refract",
        "glam::Vec4::rem_euclid",
        "glam::Vec4::rem-2",
        "glam::Vec4::fract_gl",
        "glam::Vec4::add-2",
        "glam::Vec4::move_towards",
        "glam::Vec4::is_finite",
        "glam::Vec4::sub-1",
        "glam::Vec4::with_x",
        "glam::Vec4::clamp_length",
        "glam::Vec4::as_u16vec4",
        "glam::Vec4::as_dvec4",
        "glam::Vec4::is_nan_mask",
        "glam::Vec4::to_array",
        "glam::Vec4::cmpge",
        "glam::Vec4::max",
        "glam::Vec4::abs_diff_eq",
        "glam::Vec4::abs",
        "glam::Vec4::trunc",
        "glam::Vec4::add",
        "glam::Vec4::midpoint",
        "glam::Vec4::neg",
        "glam::Vec4::sub",
        "glam::Vec4::is_negative_bitmask",
        "glam::Vec4::element_sum",
        "glam::Vec4::clamp_length_min",
        "glam::Vec4::eq",
        "glam::Vec4::as_i16vec4",
        "glam::Vec4::splat",
        "glam::Vec4::dot",
        "glam::Vec4::element_product",
        "glam::Vec4::rem-1",
        "glam::Vec4::new",
        "glam::Vec4::div_euclid",
        "glam::Vec4::copysign",
        "glam::Vec4::div-1",
        "glam::Vec4::from_array",
        "glam::Vec4::floor",
        "glam::Vec4::as_i8vec4",
        "glam::Vec4::as_ivec4",
        "glam::Vec4::distance_squared",
        "glam::Vec4::mul-2",
        "glam::Vec4::div",
        "glam::Vec4::cmpne",
        "glam::Vec4::with_y",
        "glam::Vec4::rem",
        "glam::Vec4::cmplt",
        "glam::Vec4::as_u8vec4",
        "glam::Vec4::is_finite_mask",
        "glam::Vec4::as_u64vec4",
        "glam::Vec4::is_nan",
        "glam::Vec4::normalize_or_zero",
        "glam::Vec4::length",
        "glam::Vec4::reject_from",
        "glam::Vec4::reject_from_normalized",
        "glam::Vec4::length_recip",
        "glam::Vec4::sub-2",
        "glam::Vec4::clamp_length_max",
        "glam::Vec4::ceil",
        "glam::Vec4::clamp",
        "glam::Vec4::div-2",
        "glam::Vec4::distance",
        "glam::Vec4::lerp",
        "glam::Vec4::project_onto_normalized",
        "glam::Vec4::powf",
        "glam::Vec4::exp",
        "glam::Vec4::truncate",
        "glam::Vec4::length_squared",
        "glam::Vec4::dot_into_vec",
        "glam::Vec4::round",
        "glam::Vec4::max_element",
        "glam::Vec4::min_element",
        "glam::Vec4::mul",
        "glam::Vec4::cmpeq",
        "glam::Vec4::reflect",
        "glam::Vec4::with_z",
        "glam::Vec4::as_uvec4",
        "glam::Vec4::project_onto",
        "glam::Vec4::signum",
        "glam::Vec4::clone",
        "glam::Vec4::add-1",
        "glam::Vec4::as_i64vec4",
        "glam::Vec4::with_w",
        "glam::Vec4::cmple",
        "glam::Vec4::fract",
        "glam::Vec4::recip",
        "glam::Vec4::mul_add",
        "glam::Vec4::normalize",
        "glam::Vec4::is_normalized",
        "glam::Vec4::cmpgt",
        "glam::Vec4::select",
        "glam::Vec4::normalize_or",
        "glam::Vec4::min",
        "glam::Vec4::mul-1"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Vec4",
        "fields": [
          {
            "name": "x",
            "type": "f32"
          },
          {
            "name": "y",
            "type": "f32"
          },
          {
            "name": "z",
            "type": "f32"
          },
          {
            "name": "w",
            "type": "f32"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "smol_str::SmolStr": {
      "identifier": "SmolStr",
      "crate": "smol_str",
      "path": "smol_str::SmolStr",
      "associated_functions": [
        "smol_str::SmolStr::len",
        "smol_str::SmolStr::eq",
        "smol_str::SmolStr::is_heap_allocated",
        "smol_str::SmolStr::clone",
        "smol_str::SmolStr::to_string",
        "smol_str::SmolStr::is_empty"
      ],
      "layout": null,
      "generated": true,
      "insignificance": 1000
    },
    "uuid::Uuid": {
      "identifier": "Uuid",
      "crate": "uuid",
      "path": "uuid::Uuid",
      "associated_functions": [
        "uuid::Uuid::as_u64_pair",
        "uuid::Uuid::max",
        "uuid::Uuid::eq",
        "uuid::Uuid::clone",
        "uuid::Uuid::into_bytes",
        "uuid::Uuid::get_version_num",
        "uuid::Uuid::from_bytes_le",
        "uuid::Uuid::from_bytes",
        "uuid::Uuid::to_bytes_le",
        "uuid::Uuid::is_max",
        "uuid::Uuid::from_u128_le",
        "uuid::Uuid::new_v4",
        "uuid::Uuid::from_u128",
        "uuid::Uuid::to_u128_le",
        "uuid::Uuid::as_u128",
        "uuid::Uuid::is_nil",
        "uuid::Uuid::from_u64_pair",
        "uuid::Uuid::assert_receiver_is_total_eq",
        "uuid::Uuid::nil",
        "uuid::Uuid::get_node_id",
        "uuid::Uuid::encode_buffer"
      ],
      "layout": null,
      "generated": true,
      "insignificance": 1000
    },
    "DynamicFunctionMut": {
      "identifier": "DynamicScriptFunctionMut",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::bindings::function::script_function::DynamicScriptFunctionMut",
      "documentation": " A dynamic mutable script function.",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "FunctionCallContext": {
      "identifier": "FunctionCallContext",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::bindings::function::script_function::FunctionCallContext",
      "documentation": " The caller context when calling a script function.\n Functions can choose to react to caller preferences such as converting 1-indexed numbers to 0-indexed numbers",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "PathBuf": {
      "identifier": "PathBuf",
      "crate": "std",
      "path": "std::path::PathBuf",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "String": {
      "identifier": "String",
      "crate": "alloc",
      "path": "alloc::string::String",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "bevy_animation::ActiveAnimation": {
      "identifier": "ActiveAnimation",
      "crate": "bevy_animation",
      "path": "bevy_animation::ActiveAnimation",
      "documentation": " An animation that an [`AnimationPlayer`] is currently either playing or was\n playing, but is presently paused.\n\n A stopped animation is considered no longer active.",
      "layout": {
        "kind": "Struct",
        "name": "ActiveAnimation",
        "fields": [
          {
            "name": "weight",
            "type": "f32"
          },
          {
            "name": "repeat",
            "type": "bevy_animation::RepeatAnimation"
          },
          {
            "name": "speed",
            "type": "f32"
          },
          {
            "name": "elapsed",
            "type": "f32"
          },
          {
            "name": "seek_time",
            "type": "f32"
          },
          {
            "name": "last_seek_time",
            "type": "core::option::Option<f32>"
          },
          {
            "name": "completions",
            "type": "u32"
          },
          {
            "name": "just_completed",
            "type": "bool"
          },
          {
            "name": "paused",
            "type": "bool"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_animation::AnimationClip": {
      "identifier": "AnimationClip",
      "crate": "bevy_animation",
      "path": "bevy_animation::AnimationClip",
      "documentation": " A list of [`VariableCurve`]s and the [`AnimationTargetId`]s to which they\n apply.\n\n Because animation clips refer to targets by UUID, they can target any\n [`AnimationTarget`] with that ID.",
      "layout": {
        "kind": "Struct",
        "name": "AnimationClip",
        "fields": [
          {
            "name": "events",
            "type": "bevy_platform::collections::HashMap<bevy_animation::AnimationEventTarget, alloc::vec::Vec<bevy_animation::TimedAnimationEvent>, bevy_platform::hash::FixedHasher>"
          },
          {
            "name": "duration",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_animation::AnimationEvent": {
      "identifier": "AnimationEvent",
      "crate": "bevy_animation",
      "path": "bevy_animation::AnimationEvent",
      "layout": {
        "kind": "Struct",
        "name": "AnimationEvent"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_animation::AnimationEventTarget": {
      "identifier": "AnimationEventTarget",
      "crate": "bevy_animation",
      "path": "bevy_animation::AnimationEventTarget",
      "layout": [
        {
          "kind": "Unit",
          "name": "Root"
        },
        {
          "kind": "TupleStruct",
          "name": "Node",
          "fields": [
            {
              "type": "bevy_animation::AnimationTargetId"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_animation::AnimationPlayer": {
      "identifier": "AnimationPlayer",
      "crate": "bevy_animation",
      "path": "bevy_animation::AnimationPlayer",
      "documentation": " Animation controls.\n\n Automatically added to any root animations of a scene when it is\n spawned.",
      "layout": {
        "kind": "Struct",
        "name": "AnimationPlayer",
        "fields": [
          {
            "name": "active_animations",
            "type": "bevy_platform::collections::HashMap<petgraph::graph::NodeIndex, bevy_animation::ActiveAnimation, bevy_platform::hash::FixedHasher>"
          },
          {
            "name": "blend_weights",
            "type": "bevy_platform::collections::HashMap<petgraph::graph::NodeIndex, f32, bevy_platform::hash::FixedHasher>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_animation::AnimationTarget": {
      "identifier": "AnimationTarget",
      "crate": "bevy_animation",
      "path": "bevy_animation::AnimationTarget",
      "documentation": " An entity that can be animated by an [`AnimationPlayer`].\n\n These are frequently referred to as *bones* or *joints*, because they often\n refer to individually-animatable parts of an armature.\n\n Asset loaders for armatures are responsible for adding these as necessary.\n Typically, they're generated from hashed versions of the entire name path\n from the root of the armature to the bone. See the [`AnimationTargetId`]\n documentation for more details.\n\n By convention, asset loaders add [`AnimationTarget`] components to the\n descendants of an [`AnimationPlayer`], as well as to the [`AnimationPlayer`]\n entity itself, but Bevy doesn't require this in any way. So, for example,\n it's entirely possible for an [`AnimationPlayer`] to animate a target that\n it isn't an ancestor of. If you add a new bone to or delete a bone from an\n armature at runtime, you may want to update the [`AnimationTarget`]\n component as appropriate, as Bevy won't do this automatically.\n\n Note that each entity can only be animated by one animation player at a\n time. However, you can change [`AnimationTarget`]'s `player` property at\n runtime to change which player is responsible for animating the entity.",
      "layout": {
        "kind": "Struct",
        "name": "AnimationTarget",
        "fields": [
          {
            "name": "id",
            "type": "bevy_animation::AnimationTargetId"
          },
          {
            "name": "player",
            "type": "bevy_ecs::entity::Entity"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_animation::AnimationTargetId": {
      "identifier": "AnimationTargetId",
      "crate": "bevy_animation",
      "path": "bevy_animation::AnimationTargetId",
      "documentation": " A unique [UUID] for an animation target (e.g. bone in a skinned mesh).\n\n The [`AnimationClip`] asset and the [`AnimationTarget`] component both use\n this to refer to targets (e.g. bones in a skinned mesh) to be animated.\n\n When importing an armature or an animation clip, asset loaders typically use\n the full path name from the armature to the bone to generate these UUIDs.\n The ID is unique to the full path name and based only on the names. So, for\n example, any imported armature with a bone at the root named `Hips` will\n assign the same [`AnimationTargetId`] to its root bone. Likewise, any\n imported animation clip that animates a root bone named `Hips` will\n reference the same [`AnimationTargetId`]. Any animation is playable on any\n armature as long as the bone names match, which allows for easy animation\n retargeting.\n\n Note that asset loaders generally use the *full* path name to generate the\n [`AnimationTargetId`]. Thus a bone named `Chest` directly connected to a\n bone named `Hips` will have a different ID from a bone named `Chest` that's\n connected to a bone named `Stomach`.\n\n [UUID]: https://en.wikipedia.org/wiki/Universally_unique_identifier",
      "layout": {
        "kind": "TupleStruct",
        "name": "AnimationTargetId",
        "fields": [
          {
            "type": "uuid::Uuid"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_animation::RepeatAnimation": {
      "identifier": "RepeatAnimation",
      "crate": "bevy_animation",
      "path": "bevy_animation::RepeatAnimation",
      "documentation": " Repetition behavior of an animation.",
      "layout": [
        {
          "kind": "Unit",
          "name": "Never"
        },
        {
          "kind": "TupleStruct",
          "name": "Count",
          "fields": [
            {
              "type": "u32"
            }
          ]
        },
        {
          "kind": "Unit",
          "name": "Forever"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_animation::TimedAnimationEvent": {
      "identifier": "TimedAnimationEvent",
      "crate": "bevy_animation",
      "path": "bevy_animation::TimedAnimationEvent",
      "layout": {
        "kind": "Struct",
        "name": "TimedAnimationEvent",
        "fields": [
          {
            "name": "time",
            "type": "f32"
          },
          {
            "name": "event",
            "type": "bevy_animation::AnimationEvent"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_animation::graph::AnimationGraph": {
      "identifier": "AnimationGraph",
      "crate": "bevy_animation",
      "path": "bevy_animation::graph::AnimationGraph",
      "documentation": " A graph structure that describes how animation clips are to be blended\n together.\n\n Applications frequently want to be able to play multiple animations at once\n and to fine-tune the influence that animations have on a skinned mesh. Bevy\n uses an *animation graph* to store this information. Animation graphs are a\n directed acyclic graph (DAG) that describes how animations are to be\n weighted and combined together. Every frame, Bevy evaluates the graph from\n the root and blends the animations together in a bottom-up fashion to\n produce the final pose.\n\n There are three types of nodes: *blend nodes*, *add nodes*, and *clip\n nodes*, all of which can have an associated weight. Blend nodes and add\n nodes have no associated animation clip and combine the animations of their\n children according to those children's weights. Clip nodes specify an\n animation clip to play. When a graph is created, it starts with only a\n single blend node, the root node.\n\n For example, consider the following graph:\n\n ```text\n ┌────────────┐                                      \n │            │                                      \n │    Idle    ├─────────────────────┐                \n │            │                     │                \n └────────────┘                     │                \n                                    │                \n ┌────────────┐                     │  ┌────────────┐\n │            │                     │  │            │\n │    Run     ├──┐                  ├──┤    Root    │\n │            │  │  ┌────────────┐  │  │            │\n └────────────┘  │  │   Blend    │  │  └────────────┘\n                 ├──┤            ├──┘                \n ┌────────────┐  │  │    0.5     │                   \n │            │  │  └────────────┘                   \n │    Walk    ├──┘                                   \n │            │                                      \n └────────────┘                                      \n ```\n\n In this case, assuming that Idle, Run, and Walk are all playing with weight\n 1.0, the Run and Walk animations will be equally blended together, then\n their weights will be halved and finally blended with the Idle animation.\n Thus the weight of Run and Walk are effectively half of the weight of Idle.\n\n Nodes can optionally have a *mask*, a bitfield that restricts the set of\n animation targets that the node and its descendants affect. Each bit in the\n mask corresponds to a *mask group*, which is a set of animation targets\n (bones). An animation target can belong to any number of mask groups within\n the context of an animation graph.\n\n When the appropriate bit is set in a node's mask, neither the node nor its\n descendants will animate any animation targets belonging to that mask group.\n That is, setting a mask bit to 1 *disables* the animation targets in that\n group. If an animation target belongs to multiple mask groups, masking any\n one of the mask groups that it belongs to will mask that animation target.\n (Thus an animation target will only be animated if *all* of its mask groups\n are unmasked.)\n\n A common use of masks is to allow characters to hold objects. For this, the\n typical workflow is to assign each character's hand to a mask group. Then,\n when the character picks up an object, the application masks out the hand\n that the object is held in for the character's animation set, then positions\n the hand's digits as necessary to grasp the object. The character's\n animations will continue to play but will not affect the hand, which will\n continue to be depicted as holding the object.\n\n Animation graphs are assets and can be serialized to and loaded from [RON]\n files. Canonically, such files have an `.animgraph.ron` extension.\n\n The animation graph implements [RFC 51]. See that document for more\n information.\n\n [RON]: https://github.com/ron-rs/ron\n\n [RFC 51]: https://github.com/bevyengine/rfcs/blob/main/rfcs/51-animation-composition.md",
      "layout": {
        "kind": "Struct",
        "name": "AnimationGraph",
        "fields": [
          {
            "name": "graph",
            "type": "petgraph::graph::DiGraph<bevy_animation::graph::AnimationGraphNode, (), u32>"
          },
          {
            "name": "root",
            "type": "petgraph::graph::NodeIndex"
          },
          {
            "name": "mask_groups",
            "type": "bevy_platform::collections::HashMap<bevy_animation::AnimationTargetId, u64, bevy_platform::hash::FixedHasher>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_animation::graph::AnimationGraphHandle": {
      "identifier": "AnimationGraphHandle",
      "crate": "bevy_animation",
      "path": "bevy_animation::graph::AnimationGraphHandle",
      "documentation": " A [`Handle`] to the [`AnimationGraph`] to be used by the [`AnimationPlayer`](crate::AnimationPlayer) on the same entity.",
      "layout": {
        "kind": "TupleStruct",
        "name": "AnimationGraphHandle",
        "fields": [
          {
            "type": "bevy_asset::handle::Handle<bevy_animation::graph::AnimationGraph>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_animation::graph::ThreadedAnimationGraph": {
      "identifier": "ThreadedAnimationGraph",
      "crate": "bevy_animation",
      "path": "bevy_animation::graph::ThreadedAnimationGraph",
      "documentation": " An acceleration structure for an animation graph that allows Bevy to\n evaluate it quickly.\n\n This is kept up to date as the associated [`AnimationGraph`] instance is\n added, modified, or removed.",
      "layout": {
        "kind": "Struct",
        "name": "ThreadedAnimationGraph",
        "fields": [
          {
            "name": "threaded_graph",
            "type": "alloc::vec::Vec<petgraph::graph::NodeIndex>"
          },
          {
            "name": "sorted_edge_ranges",
            "type": "alloc::vec::Vec<core::ops::Range<u32>>"
          },
          {
            "name": "sorted_edges",
            "type": "alloc::vec::Vec<petgraph::graph::NodeIndex>"
          },
          {
            "name": "computed_masks",
            "type": "alloc::vec::Vec<u64>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_animation::graph::ThreadedAnimationGraphs": {
      "identifier": "ThreadedAnimationGraphs",
      "crate": "bevy_animation",
      "path": "bevy_animation::graph::ThreadedAnimationGraphs",
      "documentation": " Acceleration structures for animation graphs that allows Bevy to evaluate\n them quickly.\n\n These are kept up to date as [`AnimationGraph`] instances are added,\n modified, and removed.",
      "layout": {
        "kind": "TupleStruct",
        "name": "ThreadedAnimationGraphs",
        "fields": [
          {
            "type": "bevy_platform::collections::HashMap<bevy_asset::id::AssetId<bevy_animation::graph::AnimationGraph>, bevy_animation::graph::ThreadedAnimationGraph, bevy_platform::hash::FixedHasher>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_animation::transition::AnimationTransition": {
      "identifier": "AnimationTransition",
      "crate": "bevy_animation",
      "path": "bevy_animation::transition::AnimationTransition",
      "documentation": " An animation that is being faded out as part of a transition",
      "layout": {
        "kind": "Struct",
        "name": "AnimationTransition",
        "fields": [
          {
            "name": "current_weight",
            "type": "f32"
          },
          {
            "name": "weight_decline_per_sec",
            "type": "f32"
          },
          {
            "name": "animation",
            "type": "petgraph::graph::NodeIndex"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_animation::transition::AnimationTransitions": {
      "identifier": "AnimationTransitions",
      "crate": "bevy_animation",
      "path": "bevy_animation::transition::AnimationTransitions",
      "documentation": " Manages fade-out of animation blend factors, allowing for smooth transitions\n between animations.\n\n To use this component, place it on the same entity as the\n [`AnimationPlayer`] and [`AnimationGraphHandle`](crate::AnimationGraphHandle). It'll take\n responsibility for adjusting the weight on the [`ActiveAnimation`] in order\n to fade out animations smoothly.\n\n When using an [`AnimationTransitions`] component, you should play all\n animations through the [`AnimationTransitions::play`] method, rather than by\n directly manipulating the [`AnimationPlayer`]. Playing animations through\n the [`AnimationPlayer`] directly will cause the [`AnimationTransitions`]\n component to get confused about which animation is the \"main\" animation, and\n transitions will usually be incorrect as a result.",
      "layout": {
        "kind": "Struct",
        "name": "AnimationTransitions",
        "fields": [
          {
            "name": "main_animation",
            "type": "core::option::Option<petgraph::graph::NodeIndex>"
          },
          {
            "name": "transitions",
            "type": "alloc::vec::Vec<bevy_animation::transition::AnimationTransition>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_asset::assets::AssetIndex": {
      "identifier": "AssetIndex",
      "crate": "bevy_asset",
      "path": "bevy_asset::assets::AssetIndex",
      "documentation": " A generational runtime-only identifier for a specific [`Asset`] stored in [`Assets`]. This is optimized for efficient runtime\n usage and is not suitable for identifying assets across app runs.",
      "layout": {
        "kind": "Struct",
        "name": "AssetIndex",
        "fields": [
          {
            "name": "generation",
            "type": "u32"
          },
          {
            "name": "index",
            "type": "u32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_asset::path::AssetPath": {
      "identifier": "AssetPath",
      "crate": "bevy_asset",
      "path": "bevy_asset::path::AssetPath",
      "documentation": " Represents a path to an asset in a \"virtual filesystem\".\n\n Asset paths consist of three main parts:\n * [`AssetPath::source`]: The name of the [`AssetSource`](crate::io::AssetSource) to load the asset from.\n   This is optional. If one is not set the default source will be used (which is the `assets` folder by default).\n * [`AssetPath::path`]: The \"virtual filesystem path\" pointing to an asset source file.\n * [`AssetPath::label`]: An optional \"named sub asset\". When assets are loaded, they are\n   allowed to load \"sub assets\" of any type, which are identified by a named \"label\".\n\n Asset paths are generally constructed (and visualized) as strings:\n\n ```no_run\n # use bevy_asset::{Asset, AssetServer, Handle};\n # use bevy_reflect::TypePath;\n #\n # #[derive(Asset, TypePath, Default)]\n # struct Mesh;\n #\n # #[derive(Asset, TypePath, Default)]\n # struct Scene;\n #\n # let asset_server: AssetServer = panic!();\n // This loads the `my_scene.scn` base asset from the default asset source.\n let scene: Handle<Scene> = asset_server.load(\"my_scene.scn\");\n\n // This loads the `PlayerMesh` labeled asset from the `my_scene.scn` base asset in the default asset source.\n let mesh: Handle<Mesh> = asset_server.load(\"my_scene.scn#PlayerMesh\");\n\n // This loads the `my_scene.scn` base asset from a custom 'remote' asset source.\n let scene: Handle<Scene> = asset_server.load(\"remote://my_scene.scn\");\n ```\n\n [`AssetPath`] implements [`From`] for `&'static str`, `&'static Path`, and `&'a String`,\n which allows us to optimize the static cases.\n This means that the common case of `asset_server.load(\"my_scene.scn\")` when it creates and\n clones internal owned [`AssetPaths`](AssetPath).\n This also means that you should use [`AssetPath::parse`] in cases where `&str` is the explicit type.",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "bevy_asset::render_asset::RenderAssetUsages": {
      "identifier": "RenderAssetUsages",
      "crate": "bevy_asset",
      "path": "bevy_asset::render_asset::RenderAssetUsages",
      "documentation": " Defines where the asset will be used.\n\n If an asset is set to the `RENDER_WORLD` but not the `MAIN_WORLD`, the asset will be\n unloaded from the asset server once it's been extracted and prepared in the render world.\n\n Unloading the asset saves on memory, as for most cases it is no longer necessary to keep\n it in RAM once it's been uploaded to the GPU's VRAM. However, this means you can no longer\n access the asset from the CPU (via the `Assets<T>` resource) once unloaded (without re-loading it).\n\n If you never need access to the asset from the CPU past the first frame it's loaded on,\n or only need very infrequent access, then set this to `RENDER_WORLD`. Otherwise, set this to\n `RENDER_WORLD | MAIN_WORLD`.\n\n If you have an asset that doesn't actually need to end up in the render world, like an Image\n that will be decoded into another Image asset, use `MAIN_WORLD` only.\n\n ## Platform-specific\n\n On Wasm, it is not possible for now to free reserved memory. To control memory usage, load assets\n in sequence and unload one before loading the next. See this\n [discussion about memory management](https://github.com/WebAssembly/design/issues/1397) for more\n details.",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "bevy_audio::audio::DefaultSpatialScale": {
      "identifier": "DefaultSpatialScale",
      "crate": "bevy_audio",
      "path": "bevy_audio::audio::DefaultSpatialScale",
      "documentation": " The default scale factor applied to the positions of audio sources and listeners for\n spatial audio. Can be overridden for individual sounds in [`PlaybackSettings`].\n\n You may need to adjust this scale to fit your world's units.\n\n Default is `Vec3::ONE`.",
      "layout": {
        "kind": "TupleStruct",
        "name": "DefaultSpatialScale",
        "fields": [
          {
            "type": "bevy_audio::audio::SpatialScale"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_audio::audio::PlaybackMode": {
      "identifier": "PlaybackMode",
      "crate": "bevy_audio",
      "path": "bevy_audio::audio::PlaybackMode",
      "documentation": " The way Bevy manages the sound playback.",
      "layout": [
        {
          "kind": "Unit",
          "name": "Once"
        },
        {
          "kind": "Unit",
          "name": "Loop"
        },
        {
          "kind": "Unit",
          "name": "Despawn"
        },
        {
          "kind": "Unit",
          "name": "Remove"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_audio::audio::PlaybackSettings": {
      "identifier": "PlaybackSettings",
      "crate": "bevy_audio",
      "path": "bevy_audio::audio::PlaybackSettings",
      "documentation": " Initial settings to be used when audio starts playing.\n\n If you would like to control the audio while it is playing, query for the\n [`AudioSink`][crate::AudioSink] or [`SpatialAudioSink`][crate::SpatialAudioSink]\n components. Changes to this component will *not* be applied to already-playing audio.",
      "layout": {
        "kind": "Struct",
        "name": "PlaybackSettings",
        "fields": [
          {
            "name": "mode",
            "type": "bevy_audio::audio::PlaybackMode"
          },
          {
            "name": "volume",
            "type": "bevy_audio::volume::Volume"
          },
          {
            "name": "speed",
            "type": "f32"
          },
          {
            "name": "paused",
            "type": "bool"
          },
          {
            "name": "muted",
            "type": "bool"
          },
          {
            "name": "spatial",
            "type": "bool"
          },
          {
            "name": "spatial_scale",
            "type": "core::option::Option<bevy_audio::audio::SpatialScale>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_audio::audio::SpatialListener": {
      "identifier": "SpatialListener",
      "crate": "bevy_audio",
      "path": "bevy_audio::audio::SpatialListener",
      "documentation": " Settings for the listener for spatial audio sources.\n\n This must be accompanied by `Transform` and `GlobalTransform`.\n Only one entity with a `SpatialListener` should be present at any given time.",
      "layout": {
        "kind": "Struct",
        "name": "SpatialListener",
        "fields": [
          {
            "name": "left_ear_offset",
            "type": "glam::Vec3"
          },
          {
            "name": "right_ear_offset",
            "type": "glam::Vec3"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_audio::audio::SpatialScale": {
      "identifier": "SpatialScale",
      "crate": "bevy_audio",
      "path": "bevy_audio::audio::SpatialScale",
      "documentation": " A scale factor applied to the positions of audio sources and listeners for\n spatial audio.\n\n Default is `Vec3::ONE`.",
      "layout": {
        "kind": "TupleStruct",
        "name": "SpatialScale",
        "fields": [
          {
            "type": "glam::Vec3"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_audio::volume::GlobalVolume": {
      "identifier": "GlobalVolume",
      "crate": "bevy_audio",
      "path": "bevy_audio::volume::GlobalVolume",
      "documentation": " Use this [`Resource`] to control the global volume of all audio.\n\n Note: Changing [`GlobalVolume`] does not affect already playing audio.",
      "layout": {
        "kind": "Struct",
        "name": "GlobalVolume",
        "fields": [
          {
            "name": "volume",
            "type": "bevy_audio::volume::Volume"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_audio::volume::Volume": {
      "identifier": "Volume",
      "crate": "bevy_audio",
      "path": "bevy_audio::volume::Volume",
      "documentation": " A [`Volume`] represents an audio source's volume level.\n\n To create a new [`Volume`] from a linear scale value, use\n [`Volume::Linear`].\n\n To create a new [`Volume`] from decibels, use [`Volume::Decibels`].",
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Linear",
          "fields": [
            {
              "type": "f32"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Decibels",
          "fields": [
            {
              "type": "f32"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_color::color::Color": {
      "identifier": "Color",
      "crate": "bevy_color",
      "path": "bevy_color::color::Color",
      "documentation": " An enumerated type that can represent any of the color types in this crate.\n\n This is useful when you need to store a color in a data structure that can't be generic over\n the color type.\n <div>\n </div>\n\n # Operations\n\n [`Color`] supports all the standard color operations, such as [mixing](Mix),\n [luminance](Luminance) and [hue](Hue) adjustment,\n and [diffing](EuclideanDistance). These operations delegate to the concrete color space contained\n by [`Color`], but will convert to [`Oklch`](Oklcha) for operations which aren't supported in the\n current space. After performing the operation, if a conversion was required, the result will be\n converted back into the original color space.\n\n ```rust\n # use bevy_color::{Hue, Color};\n let red_hsv = Color::hsv(0., 1., 1.);\n let red_srgb = Color::srgb(1., 0., 0.);\n\n // HSV has a definition of hue, so it will be returned.\n red_hsv.hue();\n\n // SRGB doesn't have a native definition for hue.\n // Converts to Oklch and returns that result.\n red_srgb.hue();\n ```\n\n [`Oklch`](Oklcha) has been chosen as the intermediary space in cases where conversion is required\n due to its perceptual uniformity and broad support for Bevy's color operations.\n To avoid the cost of repeated conversion, and ensure consistent results where that is desired,\n first convert this [`Color`] into your desired color space.",
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Srgba",
          "fields": [
            {
              "type": "bevy_color::srgba::Srgba"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "LinearRgba",
          "fields": [
            {
              "type": "bevy_color::linear_rgba::LinearRgba"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Hsla",
          "fields": [
            {
              "type": "bevy_color::hsla::Hsla"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Hsva",
          "fields": [
            {
              "type": "bevy_color::hsva::Hsva"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Hwba",
          "fields": [
            {
              "type": "bevy_color::hwba::Hwba"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Laba",
          "fields": [
            {
              "type": "bevy_color::laba::Laba"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Lcha",
          "fields": [
            {
              "type": "bevy_color::lcha::Lcha"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Oklaba",
          "fields": [
            {
              "type": "bevy_color::oklaba::Oklaba"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Oklcha",
          "fields": [
            {
              "type": "bevy_color::oklcha::Oklcha"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Xyza",
          "fields": [
            {
              "type": "bevy_color::xyza::Xyza"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_color::hsla::Hsla": {
      "identifier": "Hsla",
      "crate": "bevy_color",
      "path": "bevy_color::hsla::Hsla",
      "documentation": " Color in Hue-Saturation-Lightness (HSL) color space with alpha.\n Further information on this color model can be found on [Wikipedia](https://en.wikipedia.org/wiki/HSL_and_HSV).\n <div>\n </div>",
      "layout": {
        "kind": "Struct",
        "name": "Hsla",
        "fields": [
          {
            "name": "hue",
            "type": "f32"
          },
          {
            "name": "saturation",
            "type": "f32"
          },
          {
            "name": "lightness",
            "type": "f32"
          },
          {
            "name": "alpha",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_color::hsva::Hsva": {
      "identifier": "Hsva",
      "crate": "bevy_color",
      "path": "bevy_color::hsva::Hsva",
      "documentation": " Color in Hue-Saturation-Value (HSV) color space with alpha.\n Further information on this color model can be found on [Wikipedia](https://en.wikipedia.org/wiki/HSL_and_HSV).\n <div>\n </div>",
      "layout": {
        "kind": "Struct",
        "name": "Hsva",
        "fields": [
          {
            "name": "hue",
            "type": "f32"
          },
          {
            "name": "saturation",
            "type": "f32"
          },
          {
            "name": "value",
            "type": "f32"
          },
          {
            "name": "alpha",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_color::hwba::Hwba": {
      "identifier": "Hwba",
      "crate": "bevy_color",
      "path": "bevy_color::hwba::Hwba",
      "documentation": " Color in Hue-Whiteness-Blackness (HWB) color space with alpha.\n Further information on this color model can be found on [Wikipedia](https://en.wikipedia.org/wiki/HWB_color_model).\n <div>\n </div>",
      "layout": {
        "kind": "Struct",
        "name": "Hwba",
        "fields": [
          {
            "name": "hue",
            "type": "f32"
          },
          {
            "name": "whiteness",
            "type": "f32"
          },
          {
            "name": "blackness",
            "type": "f32"
          },
          {
            "name": "alpha",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_color::laba::Laba": {
      "identifier": "Laba",
      "crate": "bevy_color",
      "path": "bevy_color::laba::Laba",
      "documentation": " Color in LAB color space, with alpha\n <div>\n </div>",
      "layout": {
        "kind": "Struct",
        "name": "Laba",
        "fields": [
          {
            "name": "lightness",
            "type": "f32"
          },
          {
            "name": "a",
            "type": "f32"
          },
          {
            "name": "b",
            "type": "f32"
          },
          {
            "name": "alpha",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_color::lcha::Lcha": {
      "identifier": "Lcha",
      "crate": "bevy_color",
      "path": "bevy_color::lcha::Lcha",
      "documentation": " Color in LCH color space, with alpha\n <div>\n </div>",
      "layout": {
        "kind": "Struct",
        "name": "Lcha",
        "fields": [
          {
            "name": "lightness",
            "type": "f32"
          },
          {
            "name": "chroma",
            "type": "f32"
          },
          {
            "name": "hue",
            "type": "f32"
          },
          {
            "name": "alpha",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_color::linear_rgba::LinearRgba": {
      "identifier": "LinearRgba",
      "crate": "bevy_color",
      "path": "bevy_color::linear_rgba::LinearRgba",
      "documentation": " Linear RGB color with alpha.\n <div>\n </div>",
      "layout": {
        "kind": "Struct",
        "name": "LinearRgba",
        "fields": [
          {
            "name": "red",
            "type": "f32"
          },
          {
            "name": "green",
            "type": "f32"
          },
          {
            "name": "blue",
            "type": "f32"
          },
          {
            "name": "alpha",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_color::oklaba::Oklaba": {
      "identifier": "Oklaba",
      "crate": "bevy_color",
      "path": "bevy_color::oklaba::Oklaba",
      "documentation": " Color in Oklab color space, with alpha\n <div>\n </div>",
      "layout": {
        "kind": "Struct",
        "name": "Oklaba",
        "fields": [
          {
            "name": "lightness",
            "type": "f32"
          },
          {
            "name": "a",
            "type": "f32"
          },
          {
            "name": "b",
            "type": "f32"
          },
          {
            "name": "alpha",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_color::oklcha::Oklcha": {
      "identifier": "Oklcha",
      "crate": "bevy_color",
      "path": "bevy_color::oklcha::Oklcha",
      "documentation": " Color in Oklch color space, with alpha\n <div>\n </div>",
      "layout": {
        "kind": "Struct",
        "name": "Oklcha",
        "fields": [
          {
            "name": "lightness",
            "type": "f32"
          },
          {
            "name": "chroma",
            "type": "f32"
          },
          {
            "name": "hue",
            "type": "f32"
          },
          {
            "name": "alpha",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_color::srgba::Srgba": {
      "identifier": "Srgba",
      "crate": "bevy_color",
      "path": "bevy_color::srgba::Srgba",
      "documentation": " Non-linear standard RGB with alpha.\n <div>\n </div>",
      "layout": {
        "kind": "Struct",
        "name": "Srgba",
        "fields": [
          {
            "name": "red",
            "type": "f32"
          },
          {
            "name": "green",
            "type": "f32"
          },
          {
            "name": "blue",
            "type": "f32"
          },
          {
            "name": "alpha",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_color::xyza::Xyza": {
      "identifier": "Xyza",
      "crate": "bevy_color",
      "path": "bevy_color::xyza::Xyza",
      "documentation": " [CIE 1931](https://en.wikipedia.org/wiki/CIE_1931_color_space) color space, also known as XYZ, with an alpha channel.\n <div>\n </div>",
      "layout": {
        "kind": "Struct",
        "name": "Xyza",
        "fields": [
          {
            "name": "x",
            "type": "f32"
          },
          {
            "name": "y",
            "type": "f32"
          },
          {
            "name": "z",
            "type": "f32"
          },
          {
            "name": "alpha",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_core_pipeline::bloom::settings::Bloom": {
      "identifier": "Bloom",
      "crate": "bevy_core_pipeline",
      "path": "bevy_core_pipeline::bloom::settings::Bloom",
      "documentation": " Applies a bloom effect to an HDR-enabled 2d or 3d camera.\n\n Bloom emulates an effect found in real cameras and the human eye,\n causing halos to appear around very bright parts of the scene.\n\n See also <https://en.wikipedia.org/wiki/Bloom_(shader_effect)>.\n\n # Usage Notes\n\n **Bloom is currently not compatible with WebGL2.**\n\n Often used in conjunction with `bevy_pbr::StandardMaterial::emissive` for 3d meshes.\n\n Bloom is best used alongside a tonemapping function that desaturates bright colors,\n such as [`crate::tonemapping::Tonemapping::TonyMcMapface`].\n\n Bevy's implementation uses a parametric curve to blend between a set of\n blurred (lower frequency) images generated from the camera's view.\n See <https://starlederer.github.io/bloom/> for a visualization of the parametric curve\n used in Bevy as well as a visualization of the curve's respective scattering profile.",
      "layout": {
        "kind": "Struct",
        "name": "Bloom",
        "fields": [
          {
            "name": "intensity",
            "type": "f32"
          },
          {
            "name": "low_frequency_boost",
            "type": "f32"
          },
          {
            "name": "low_frequency_boost_curvature",
            "type": "f32"
          },
          {
            "name": "high_pass_frequency",
            "type": "f32"
          },
          {
            "name": "prefilter",
            "type": "bevy_core_pipeline::bloom::settings::BloomPrefilter"
          },
          {
            "name": "composite_mode",
            "type": "bevy_core_pipeline::bloom::settings::BloomCompositeMode"
          },
          {
            "name": "max_mip_dimension",
            "type": "u32"
          },
          {
            "name": "scale",
            "type": "glam::Vec2"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_core_pipeline::bloom::settings::BloomCompositeMode": {
      "identifier": "BloomCompositeMode",
      "crate": "bevy_core_pipeline",
      "path": "bevy_core_pipeline::bloom::settings::BloomCompositeMode",
      "layout": [
        {
          "kind": "Unit",
          "name": "EnergyConserving"
        },
        {
          "kind": "Unit",
          "name": "Additive"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_core_pipeline::bloom::settings::BloomPrefilter": {
      "identifier": "BloomPrefilter",
      "crate": "bevy_core_pipeline",
      "path": "bevy_core_pipeline::bloom::settings::BloomPrefilter",
      "documentation": " Applies a threshold filter to the input image to extract the brightest\n regions before blurring them and compositing back onto the original image.\n These settings are useful when emulating the 1990s-2000s game look.\n\n # Considerations\n * Changing these settings creates a physically inaccurate image\n * Changing these settings makes it easy to make the final result look worse\n * Non-default prefilter settings should be used in conjunction with [`BloomCompositeMode::Additive`]",
      "layout": {
        "kind": "Struct",
        "name": "BloomPrefilter",
        "fields": [
          {
            "name": "threshold",
            "type": "f32"
          },
          {
            "name": "threshold_softness",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_core_pipeline::contrast_adaptive_sharpening::ContrastAdaptiveSharpening": {
      "identifier": "ContrastAdaptiveSharpening",
      "crate": "bevy_core_pipeline",
      "path": "bevy_core_pipeline::contrast_adaptive_sharpening::ContrastAdaptiveSharpening",
      "documentation": " Applies a contrast adaptive sharpening (CAS) filter to the camera.\n\n CAS is usually used in combination with shader based anti-aliasing methods\n such as FXAA or TAA to regain some of the lost detail from the blurring that they introduce.\n\n CAS is designed to adjust the amount of sharpening applied to different areas of an image\n based on the local contrast. This can help avoid over-sharpening areas with high contrast\n and under-sharpening areas with low contrast.\n\n To use this, add the [`ContrastAdaptiveSharpening`] component to a 2D or 3D camera.",
      "layout": {
        "kind": "Struct",
        "name": "ContrastAdaptiveSharpening",
        "fields": [
          {
            "name": "enabled",
            "type": "bool"
          },
          {
            "name": "sharpening_strength",
            "type": "f32"
          },
          {
            "name": "denoise",
            "type": "bool"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_core_pipeline::core_2d::camera_2d::Camera2d": {
      "identifier": "Camera2d",
      "crate": "bevy_core_pipeline",
      "path": "bevy_core_pipeline::core_2d::camera_2d::Camera2d",
      "documentation": " A 2D camera component. Enables the 2D render graph for a [`Camera`].",
      "layout": {
        "kind": "Struct",
        "name": "Camera2d"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_core_pipeline::core_3d::camera_3d::Camera3d": {
      "identifier": "Camera3d",
      "crate": "bevy_core_pipeline",
      "path": "bevy_core_pipeline::core_3d::camera_3d::Camera3d",
      "documentation": " A 3D camera component. Enables the main 3D render graph for a [`Camera`].\n\n The camera coordinate space is right-handed X-right, Y-up, Z-back.\n This means \"forward\" is -Z.",
      "layout": {
        "kind": "Struct",
        "name": "Camera3d",
        "fields": [
          {
            "name": "depth_load_op",
            "type": "bevy_core_pipeline::core_3d::camera_3d::Camera3dDepthLoadOp"
          },
          {
            "name": "depth_texture_usages",
            "type": "bevy_core_pipeline::core_3d::camera_3d::Camera3dDepthTextureUsage"
          },
          {
            "name": "screen_space_specular_transmission_steps",
            "type": "usize"
          },
          {
            "name": "screen_space_specular_transmission_quality",
            "type": "bevy_core_pipeline::core_3d::camera_3d::ScreenSpaceTransmissionQuality"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_core_pipeline::core_3d::camera_3d::Camera3dDepthLoadOp": {
      "identifier": "Camera3dDepthLoadOp",
      "crate": "bevy_core_pipeline",
      "path": "bevy_core_pipeline::core_3d::camera_3d::Camera3dDepthLoadOp",
      "documentation": " The depth clear operation to perform for the main 3d pass.",
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Clear",
          "fields": [
            {
              "type": "f32"
            }
          ]
        },
        {
          "kind": "Unit",
          "name": "Load"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_core_pipeline::core_3d::camera_3d::Camera3dDepthTextureUsage": {
      "identifier": "Camera3dDepthTextureUsage",
      "crate": "bevy_core_pipeline",
      "path": "bevy_core_pipeline::core_3d::camera_3d::Camera3dDepthTextureUsage",
      "layout": {
        "kind": "TupleStruct",
        "name": "Camera3dDepthTextureUsage",
        "fields": [
          {
            "type": "u32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_core_pipeline::core_3d::camera_3d::ScreenSpaceTransmissionQuality": {
      "identifier": "ScreenSpaceTransmissionQuality",
      "crate": "bevy_core_pipeline",
      "path": "bevy_core_pipeline::core_3d::camera_3d::ScreenSpaceTransmissionQuality",
      "documentation": " The quality of the screen space transmission blur effect, applied to whatever's “behind” transmissive\n objects when their `roughness` is greater than `0.0`.\n\n Higher qualities are more GPU-intensive.\n\n **Note:** You can get better-looking results at any quality level by enabling TAA. See: [`TemporalAntiAliasPlugin`](crate::experimental::taa::TemporalAntiAliasPlugin).",
      "layout": [
        {
          "kind": "Unit",
          "name": "Low"
        },
        {
          "kind": "Unit",
          "name": "Medium"
        },
        {
          "kind": "Unit",
          "name": "High"
        },
        {
          "kind": "Unit",
          "name": "Ultra"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_core_pipeline::dof::DepthOfField": {
      "identifier": "DepthOfField",
      "crate": "bevy_core_pipeline",
      "path": "bevy_core_pipeline::dof::DepthOfField",
      "documentation": " A component that enables a [depth of field] postprocessing effect when attached to a [`Camera3d`],\n simulating the focus of a camera lens.\n\n [depth of field]: https://en.wikipedia.org/wiki/Depth_of_field",
      "layout": {
        "kind": "Struct",
        "name": "DepthOfField",
        "fields": [
          {
            "name": "mode",
            "type": "bevy_core_pipeline::dof::DepthOfFieldMode"
          },
          {
            "name": "focal_distance",
            "type": "f32"
          },
          {
            "name": "sensor_height",
            "type": "f32"
          },
          {
            "name": "aperture_f_stops",
            "type": "f32"
          },
          {
            "name": "max_circle_of_confusion_diameter",
            "type": "f32"
          },
          {
            "name": "max_depth",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_core_pipeline::dof::DepthOfFieldMode": {
      "identifier": "DepthOfFieldMode",
      "crate": "bevy_core_pipeline",
      "path": "bevy_core_pipeline::dof::DepthOfFieldMode",
      "documentation": " Controls the appearance of the effect.",
      "layout": [
        {
          "kind": "Unit",
          "name": "Bokeh"
        },
        {
          "kind": "Unit",
          "name": "Gaussian"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_core_pipeline::fxaa::Fxaa": {
      "identifier": "Fxaa",
      "crate": "bevy_core_pipeline",
      "path": "bevy_core_pipeline::fxaa::Fxaa",
      "documentation": " A component for enabling Fast Approximate Anti-Aliasing (FXAA)\n for a [`bevy_render::camera::Camera`].",
      "layout": {
        "kind": "Struct",
        "name": "Fxaa",
        "fields": [
          {
            "name": "enabled",
            "type": "bool"
          },
          {
            "name": "edge_threshold",
            "type": "bevy_core_pipeline::fxaa::Sensitivity"
          },
          {
            "name": "edge_threshold_min",
            "type": "bevy_core_pipeline::fxaa::Sensitivity"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_core_pipeline::fxaa::Sensitivity": {
      "identifier": "Sensitivity",
      "crate": "bevy_core_pipeline",
      "path": "bevy_core_pipeline::fxaa::Sensitivity",
      "layout": [
        {
          "kind": "Unit",
          "name": "Low"
        },
        {
          "kind": "Unit",
          "name": "Medium"
        },
        {
          "kind": "Unit",
          "name": "High"
        },
        {
          "kind": "Unit",
          "name": "Ultra"
        },
        {
          "kind": "Unit",
          "name": "Extreme"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_core_pipeline::oit::OrderIndependentTransparencySettings": {
      "identifier": "OrderIndependentTransparencySettings",
      "crate": "bevy_core_pipeline",
      "path": "bevy_core_pipeline::oit::OrderIndependentTransparencySettings",
      "documentation": " Used to identify which camera will use OIT to render transparent meshes\n and to configure OIT.",
      "layout": {
        "kind": "Struct",
        "name": "OrderIndependentTransparencySettings",
        "fields": [
          {
            "name": "layer_count",
            "type": "i32"
          },
          {
            "name": "alpha_threshold",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_core_pipeline::post_process::ChromaticAberration": {
      "identifier": "ChromaticAberration",
      "crate": "bevy_core_pipeline",
      "path": "bevy_core_pipeline::post_process::ChromaticAberration",
      "documentation": " Adds colored fringes to the edges of objects in the scene.\n\n [Chromatic aberration] simulates the effect when lenses fail to focus all\n colors of light toward a single point. It causes rainbow-colored streaks to\n appear, which are especially apparent on the edges of objects. Chromatic\n aberration is commonly used for collision effects, especially in horror\n games.\n\n Bevy's implementation is based on that of *Inside* ([Gjøl & Svendsen 2016]).\n It's based on a customizable lookup texture, which allows for changing the\n color pattern. By default, the color pattern is simply a 3×1 pixel texture\n consisting of red, green, and blue, in that order, but you can change it to\n any image in order to achieve different effects.\n\n [Chromatic aberration]: https://en.wikipedia.org/wiki/Chromatic_aberration\n\n [Gjøl & Svendsen 2016]: https://github.com/playdeadgames/publications/blob/master/INSIDE/rendering_inside_gdc2016.pdf",
      "layout": {
        "kind": "Struct",
        "name": "ChromaticAberration",
        "fields": [
          {
            "name": "color_lut",
            "type": "bevy_asset::handle::Handle<bevy_image::image::Image>"
          },
          {
            "name": "intensity",
            "type": "f32"
          },
          {
            "name": "max_samples",
            "type": "u32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_core_pipeline::prepass::DeferredPrepass": {
      "identifier": "DeferredPrepass",
      "crate": "bevy_core_pipeline",
      "path": "bevy_core_pipeline::prepass::DeferredPrepass",
      "documentation": " If added to a [`crate::prelude::Camera3d`] then deferred materials will be rendered to the deferred gbuffer texture and will be available to subsequent passes.\n Note the default deferred lighting plugin also requires `DepthPrepass` to work correctly.",
      "layout": {
        "kind": "Struct",
        "name": "DeferredPrepass"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_core_pipeline::prepass::DepthPrepass": {
      "identifier": "DepthPrepass",
      "crate": "bevy_core_pipeline",
      "path": "bevy_core_pipeline::prepass::DepthPrepass",
      "documentation": " If added to a [`crate::prelude::Camera3d`] then depth values will be copied to a separate texture available to the main pass.",
      "layout": {
        "kind": "Struct",
        "name": "DepthPrepass"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_core_pipeline::prepass::MotionVectorPrepass": {
      "identifier": "MotionVectorPrepass",
      "crate": "bevy_core_pipeline",
      "path": "bevy_core_pipeline::prepass::MotionVectorPrepass",
      "documentation": " If added to a [`crate::prelude::Camera3d`] then screen space motion vectors will be copied to a separate texture available to the main pass.",
      "layout": {
        "kind": "Struct",
        "name": "MotionVectorPrepass"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_core_pipeline::prepass::NormalPrepass": {
      "identifier": "NormalPrepass",
      "crate": "bevy_core_pipeline",
      "path": "bevy_core_pipeline::prepass::NormalPrepass",
      "documentation": " If added to a [`crate::prelude::Camera3d`] then vertex world normals will be copied to a separate texture available to the main pass.\n Normals will have normal map textures already applied.",
      "layout": {
        "kind": "Struct",
        "name": "NormalPrepass"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_core_pipeline::skybox::Skybox": {
      "identifier": "Skybox",
      "crate": "bevy_core_pipeline",
      "path": "bevy_core_pipeline::skybox::Skybox",
      "documentation": " Adds a skybox to a 3D camera, based on a cubemap texture.\n\n Note that this component does not (currently) affect the scene's lighting.\n To do so, use `EnvironmentMapLight` alongside this component.\n\n See also <https://en.wikipedia.org/wiki/Skybox_(video_games)>.",
      "layout": {
        "kind": "Struct",
        "name": "Skybox",
        "fields": [
          {
            "name": "image",
            "type": "bevy_asset::handle::Handle<bevy_image::image::Image>"
          },
          {
            "name": "brightness",
            "type": "f32"
          },
          {
            "name": "rotation",
            "type": "glam::Quat"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_core_pipeline::smaa::Smaa": {
      "identifier": "Smaa",
      "crate": "bevy_core_pipeline",
      "path": "bevy_core_pipeline::smaa::Smaa",
      "documentation": " A component for enabling Subpixel Morphological Anti-Aliasing (SMAA)\n for a [`bevy_render::camera::Camera`].",
      "layout": {
        "kind": "Struct",
        "name": "Smaa",
        "fields": [
          {
            "name": "preset",
            "type": "bevy_core_pipeline::smaa::SmaaPreset"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_core_pipeline::smaa::SmaaPreset": {
      "identifier": "SmaaPreset",
      "crate": "bevy_core_pipeline",
      "path": "bevy_core_pipeline::smaa::SmaaPreset",
      "documentation": " A preset quality level for SMAA.\n\n Higher values are slower but result in a higher-quality image.\n\n The default value is *high*.",
      "layout": [
        {
          "kind": "Unit",
          "name": "Low"
        },
        {
          "kind": "Unit",
          "name": "Medium"
        },
        {
          "kind": "Unit",
          "name": "High"
        },
        {
          "kind": "Unit",
          "name": "Ultra"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_core_pipeline::tonemapping::DebandDither": {
      "identifier": "DebandDither",
      "crate": "bevy_core_pipeline",
      "path": "bevy_core_pipeline::tonemapping::DebandDither",
      "documentation": " Enables a debanding shader that applies dithering to mitigate color banding in the final image for a given [`Camera`] entity.",
      "layout": [
        {
          "kind": "Unit",
          "name": "Disabled"
        },
        {
          "kind": "Unit",
          "name": "Enabled"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_core_pipeline::tonemapping::Tonemapping": {
      "identifier": "Tonemapping",
      "crate": "bevy_core_pipeline",
      "path": "bevy_core_pipeline::tonemapping::Tonemapping",
      "documentation": " Optionally enables a tonemapping shader that attempts to map linear input stimulus into a perceptually uniform image for a given [`Camera`] entity.",
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "Unit",
          "name": "Reinhard"
        },
        {
          "kind": "Unit",
          "name": "ReinhardLuminance"
        },
        {
          "kind": "Unit",
          "name": "AcesFitted"
        },
        {
          "kind": "Unit",
          "name": "AgX"
        },
        {
          "kind": "Unit",
          "name": "SomewhatBoringDisplayTransform"
        },
        {
          "kind": "Unit",
          "name": "TonyMcMapface"
        },
        {
          "kind": "Unit",
          "name": "BlenderFilmic"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ecs::system::system_registry::SystemIdMarker": {
      "identifier": "SystemIdMarker",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::system::system_registry::SystemIdMarker",
      "documentation": " Marker [`Component`](bevy_ecs::component::Component) for identifying [`SystemId`] [`Entity`]s.",
      "layout": {
        "kind": "Struct",
        "name": "SystemIdMarker"
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_ecs::world::component_constants::OnAdd": {
      "identifier": "OnAdd",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::world::component_constants::OnAdd",
      "documentation": " Trigger emitted when a component is inserted onto an entity that does not already have that\n component. Runs before `OnInsert`.\n See [`crate::component::ComponentHooks::on_add`] for more information.",
      "layout": {
        "kind": "Struct",
        "name": "OnAdd"
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_ecs::world::component_constants::OnDespawn": {
      "identifier": "OnDespawn",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::world::component_constants::OnDespawn",
      "documentation": " Trigger emitted for each component on an entity when it is despawned.\n See [`crate::component::ComponentHooks::on_despawn`] for more information.",
      "layout": {
        "kind": "Struct",
        "name": "OnDespawn"
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_ecs::world::component_constants::OnInsert": {
      "identifier": "OnInsert",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::world::component_constants::OnInsert",
      "documentation": " Trigger emitted when a component is inserted, regardless of whether or not the entity already\n had that component. Runs after `OnAdd`, if it ran.\n See [`crate::component::ComponentHooks::on_insert`] for more information.",
      "layout": {
        "kind": "Struct",
        "name": "OnInsert"
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_ecs::world::component_constants::OnRemove": {
      "identifier": "OnRemove",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::world::component_constants::OnRemove",
      "documentation": " Trigger emitted when a component is removed from an entity, and runs before the component is\n removed, so you can still access the component data.\n See [`crate::component::ComponentHooks::on_remove`] for more information.",
      "layout": {
        "kind": "Struct",
        "name": "OnRemove"
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_ecs::world::component_constants::OnReplace": {
      "identifier": "OnReplace",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::world::component_constants::OnReplace",
      "documentation": " Trigger emitted when a component is inserted onto an entity that already has that component.\n Runs before the value is replaced, so you can still access the original component data.\n See [`crate::component::ComponentHooks::on_replace`] for more information.",
      "layout": {
        "kind": "Struct",
        "name": "OnReplace"
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_gizmos::aabb::AabbGizmoConfigGroup": {
      "identifier": "AabbGizmoConfigGroup",
      "crate": "bevy_gizmos",
      "path": "bevy_gizmos::aabb::AabbGizmoConfigGroup",
      "documentation": " The [`GizmoConfigGroup`] used for debug visualizations of [`Aabb`] components on entities",
      "layout": {
        "kind": "Struct",
        "name": "AabbGizmoConfigGroup",
        "fields": [
          {
            "name": "draw_all",
            "type": "bool"
          },
          {
            "name": "default_color",
            "type": "core::option::Option<bevy_color::color::Color>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_gizmos::config::GizmoConfig": {
      "identifier": "GizmoConfig",
      "crate": "bevy_gizmos",
      "path": "bevy_gizmos::config::GizmoConfig",
      "documentation": " A struct that stores configuration for gizmos.",
      "layout": {
        "kind": "Struct",
        "name": "GizmoConfig",
        "fields": [
          {
            "name": "enabled",
            "type": "bool"
          },
          {
            "name": "line",
            "type": "bevy_gizmos::config::GizmoLineConfig"
          },
          {
            "name": "depth_bias",
            "type": "f32"
          },
          {
            "name": "render_layers",
            "type": "bevy_render::view::visibility::render_layers::RenderLayers"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_gizmos::config::GizmoConfigStore": {
      "identifier": "GizmoConfigStore",
      "crate": "bevy_gizmos",
      "path": "bevy_gizmos::config::GizmoConfigStore",
      "documentation": " A [`Resource`] storing [`GizmoConfig`] and [`GizmoConfigGroup`] structs\n\n Use `app.init_gizmo_group::<T>()` to register a custom config group.",
      "layout": {
        "kind": "Struct",
        "name": "GizmoConfigStore"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_gizmos::config::GizmoLineConfig": {
      "identifier": "GizmoLineConfig",
      "crate": "bevy_gizmos",
      "path": "bevy_gizmos::config::GizmoLineConfig",
      "documentation": " A struct that stores configuration for gizmos.",
      "layout": {
        "kind": "Struct",
        "name": "GizmoLineConfig",
        "fields": [
          {
            "name": "width",
            "type": "f32"
          },
          {
            "name": "perspective",
            "type": "bool"
          },
          {
            "name": "style",
            "type": "bevy_gizmos::config::GizmoLineStyle"
          },
          {
            "name": "joints",
            "type": "bevy_gizmos::config::GizmoLineJoint"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_gizmos::config::GizmoLineJoint": {
      "identifier": "GizmoLineJoint",
      "crate": "bevy_gizmos",
      "path": "bevy_gizmos::config::GizmoLineJoint",
      "documentation": " An enum configuring how line joints will be drawn.",
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "Unit",
          "name": "Miter"
        },
        {
          "kind": "TupleStruct",
          "name": "Round",
          "fields": [
            {
              "type": "u32"
            }
          ]
        },
        {
          "kind": "Unit",
          "name": "Bevel"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_gizmos::config::GizmoLineStyle": {
      "identifier": "GizmoLineStyle",
      "crate": "bevy_gizmos",
      "path": "bevy_gizmos::config::GizmoLineStyle",
      "documentation": " An enum used to configure the style of gizmo lines, similar to CSS line-style",
      "layout": [
        {
          "kind": "Unit",
          "name": "Solid"
        },
        {
          "kind": "Unit",
          "name": "Dotted"
        },
        {
          "kind": "Struct",
          "name": "Dashed",
          "fields": [
            {
              "name": "gap_scale",
              "type": "f32"
            },
            {
              "name": "line_scale",
              "type": "f32"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_gizmos::light::LightGizmoColor": {
      "identifier": "LightGizmoColor",
      "crate": "bevy_gizmos",
      "path": "bevy_gizmos::light::LightGizmoColor",
      "documentation": " Configures how a color is attributed to a light gizmo.",
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Manual",
          "fields": [
            {
              "type": "bevy_color::color::Color"
            }
          ]
        },
        {
          "kind": "Unit",
          "name": "Varied"
        },
        {
          "kind": "Unit",
          "name": "MatchLightColor"
        },
        {
          "kind": "Unit",
          "name": "ByLightType"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_gizmos::light::LightGizmoConfigGroup": {
      "identifier": "LightGizmoConfigGroup",
      "crate": "bevy_gizmos",
      "path": "bevy_gizmos::light::LightGizmoConfigGroup",
      "documentation": " The [`GizmoConfigGroup`] used to configure the visualization of lights.",
      "layout": {
        "kind": "Struct",
        "name": "LightGizmoConfigGroup",
        "fields": [
          {
            "name": "draw_all",
            "type": "bool"
          },
          {
            "name": "color",
            "type": "bevy_gizmos::light::LightGizmoColor"
          },
          {
            "name": "point_light_color",
            "type": "bevy_color::color::Color"
          },
          {
            "name": "spot_light_color",
            "type": "bevy_color::color::Color"
          },
          {
            "name": "directional_light_color",
            "type": "bevy_color::color::Color"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_gltf::assets::GltfExtras": {
      "identifier": "GltfExtras",
      "crate": "bevy_gltf",
      "path": "bevy_gltf::assets::GltfExtras",
      "documentation": " Additional untyped data that can be present on most glTF types at the primitive level.\n\n See [the relevant glTF specification section](https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#reference-extras).",
      "layout": {
        "kind": "Struct",
        "name": "GltfExtras",
        "fields": [
          {
            "name": "value",
            "type": "String"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_gltf::assets::GltfMaterialExtras": {
      "identifier": "GltfMaterialExtras",
      "crate": "bevy_gltf",
      "path": "bevy_gltf::assets::GltfMaterialExtras",
      "documentation": " Additional untyped data that can be present on most glTF types at the material level.\n\n See [the relevant glTF specification section](https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#reference-extras).",
      "layout": {
        "kind": "Struct",
        "name": "GltfMaterialExtras",
        "fields": [
          {
            "name": "value",
            "type": "String"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_gltf::assets::GltfMaterialName": {
      "identifier": "GltfMaterialName",
      "crate": "bevy_gltf",
      "path": "bevy_gltf::assets::GltfMaterialName",
      "documentation": " The material name of a glTF primitive.\n\n See [the relevant glTF specification section](https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#reference-material).",
      "layout": {
        "kind": "TupleStruct",
        "name": "GltfMaterialName",
        "fields": [
          {
            "type": "String"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_gltf::assets::GltfMeshExtras": {
      "identifier": "GltfMeshExtras",
      "crate": "bevy_gltf",
      "path": "bevy_gltf::assets::GltfMeshExtras",
      "documentation": " Additional untyped data that can be present on most glTF types at the mesh level.\n\n See [the relevant glTF specification section](https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#reference-extras).",
      "layout": {
        "kind": "Struct",
        "name": "GltfMeshExtras",
        "fields": [
          {
            "name": "value",
            "type": "String"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_gltf::assets::GltfSceneExtras": {
      "identifier": "GltfSceneExtras",
      "crate": "bevy_gltf",
      "path": "bevy_gltf::assets::GltfSceneExtras",
      "documentation": " Additional untyped data that can be present on most glTF types at the scene level.\n\n See [the relevant glTF specification section](https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#reference-extras).",
      "layout": {
        "kind": "Struct",
        "name": "GltfSceneExtras",
        "fields": [
          {
            "name": "value",
            "type": "String"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_image::image::Image": {
      "identifier": "Image",
      "crate": "bevy_image",
      "path": "bevy_image::image::Image",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "bevy_image::texture_atlas::TextureAtlas": {
      "identifier": "TextureAtlas",
      "crate": "bevy_image",
      "path": "bevy_image::texture_atlas::TextureAtlas",
      "documentation": " An index into a [`TextureAtlasLayout`], which corresponds to a specific section of a texture.\n\n It stores a handle to [`TextureAtlasLayout`] and the index of the current section of the atlas.\n The texture atlas contains various *sections* of a given texture, allowing users to have a single\n image file for either sprite animation or global mapping.\n You can change the texture [`index`](Self::index) of the atlas to animate the sprite or display only a *section* of the texture\n for efficient rendering of related game objects.\n\n Check the following examples for usage:\n - [`animated sprite sheet example`](https://github.com/bevyengine/bevy/blob/latest/examples/2d/sprite_sheet.rs)\n - [`sprite animation event example`](https://github.com/bevyengine/bevy/blob/latest/examples/2d/sprite_animation.rs)\n - [`texture atlas example`](https://github.com/bevyengine/bevy/blob/latest/examples/2d/texture_atlas.rs)",
      "layout": {
        "kind": "Struct",
        "name": "TextureAtlas",
        "fields": [
          {
            "name": "layout",
            "type": "bevy_asset::handle::Handle<bevy_image::texture_atlas::TextureAtlasLayout>"
          },
          {
            "name": "index",
            "type": "usize"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_image::texture_atlas::TextureAtlasLayout": {
      "identifier": "TextureAtlasLayout",
      "crate": "bevy_image",
      "path": "bevy_image::texture_atlas::TextureAtlasLayout",
      "documentation": " Stores a map used to lookup the position of a texture in a [`TextureAtlas`].\n This can be used to either use and look up a specific section of a texture, or animate frame-by-frame as a sprite sheet.\n\n Optionally it can store a mapping from sub texture handles to the related area index (see\n [`TextureAtlasBuilder`]).\n\n [Example usage animating sprite.](https://github.com/bevyengine/bevy/blob/latest/examples/2d/sprite_sheet.rs)\n [Example usage animating sprite in response to an event.](https://github.com/bevyengine/bevy/blob/latest/examples/2d/sprite_animation.rs)\n [Example usage loading sprite sheet.](https://github.com/bevyengine/bevy/blob/latest/examples/2d/texture_atlas.rs)\n\n [`TextureAtlasBuilder`]: crate::TextureAtlasBuilder",
      "layout": {
        "kind": "Struct",
        "name": "TextureAtlasLayout",
        "fields": [
          {
            "name": "size",
            "type": "glam::UVec2"
          },
          {
            "name": "textures",
            "type": "alloc::vec::Vec<bevy_math::rects::urect::URect>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_math::affine3::Affine3": {
      "identifier": "Affine3",
      "crate": "bevy_math",
      "path": "bevy_math::affine3::Affine3",
      "documentation": " Reduced-size version of `glam::Affine3A` for use when storage has\n significant performance impact. Convert to `glam::Affine3A` to do\n non-trivial calculations.",
      "layout": {
        "kind": "Struct",
        "name": "Affine3",
        "fields": [
          {
            "name": "matrix3",
            "type": "glam::Mat3"
          },
          {
            "name": "translation",
            "type": "glam::Vec3"
          }
        ]
      },
      "generated": true,
      "insignificance": 1000
    },
    "bevy_mesh::index::Indices": {
      "identifier": "Indices",
      "crate": "bevy_mesh",
      "path": "bevy_mesh::index::Indices",
      "documentation": " An array of indices into the [`VertexAttributeValues`](super::VertexAttributeValues) for a mesh.\n\n It describes the order in which the vertex attributes should be joined into faces.",
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "U16",
          "fields": [
            {
              "type": "alloc::vec::Vec<u16>"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "U32",
          "fields": [
            {
              "type": "alloc::vec::Vec<u32>"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mesh::mesh::Mesh": {
      "identifier": "Mesh",
      "crate": "bevy_mesh",
      "path": "bevy_mesh::mesh::Mesh",
      "documentation": " A 3D object made out of vertices representing triangles, lines, or points,\n with \"attribute\" values for each vertex.\n\n Meshes can be automatically generated by a bevy `AssetLoader` (generally by loading a `Gltf` file),\n or by converting a [primitive](bevy_math::primitives) using [`into`](Into).\n It is also possible to create one manually. They can be edited after creation.\n\n Meshes can be rendered with a `Mesh2d` and `MeshMaterial2d`\n or `Mesh3d` and `MeshMaterial3d` for 2D and 3D respectively.\n\n A [`Mesh`] in Bevy is equivalent to a \"primitive\" in the glTF format, for a\n glTF Mesh representation, see `GltfMesh`.\n\n ## Manual creation\n\n The following function will construct a flat mesh, to be rendered with a\n `StandardMaterial` or `ColorMaterial`:\n\n ```\n # use bevy_mesh::{Mesh, Indices, PrimitiveTopology};\n # use bevy_asset::RenderAssetUsages;\n fn create_simple_parallelogram() -> Mesh {\n     // Create a new mesh using a triangle list topology, where each set of 3 vertices composes a triangle.\n     Mesh::new(PrimitiveTopology::TriangleList, RenderAssetUsages::default())\n         // Add 4 vertices, each with its own position attribute (coordinate in\n         // 3D space), for each of the corners of the parallelogram.\n         .with_inserted_attribute(\n             Mesh::ATTRIBUTE_POSITION,\n             vec![[0.0, 0.0, 0.0], [1.0, 2.0, 0.0], [2.0, 2.0, 0.0], [1.0, 0.0, 0.0]]\n         )\n         // Assign a UV coordinate to each vertex.\n         .with_inserted_attribute(\n             Mesh::ATTRIBUTE_UV_0,\n             vec![[0.0, 1.0], [0.5, 0.0], [1.0, 0.0], [0.5, 1.0]]\n         )\n         // Assign normals (everything points outwards)\n         .with_inserted_attribute(\n             Mesh::ATTRIBUTE_NORMAL,\n             vec![[0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0], [0.0, 0.0, 1.0]]\n         )\n         // After defining all the vertices and their attributes, build each triangle using the\n         // indices of the vertices that make it up in a counter-clockwise order.\n         .with_inserted_indices(Indices::U32(vec![\n             // First triangle\n             0, 3, 1,\n             // Second triangle\n             1, 3, 2\n         ]))\n }\n ```\n\n You can see how it looks like [here](https://github.com/bevyengine/bevy/blob/main/assets/docs/Mesh.png),\n used in a `Mesh3d` with a square bevy logo texture, with added axis, points,\n lines and text for clarity.\n\n ## Other examples\n\n For further visualization, explanation, and examples, see the built-in Bevy examples,\n and the [implementation of the built-in shapes](https://github.com/bevyengine/bevy/tree/main/crates/bevy_mesh/src/primitives).\n In particular, [generate_custom_mesh](https://github.com/bevyengine/bevy/blob/main/examples/3d/generate_custom_mesh.rs)\n teaches you to access and modify the attributes of a [`Mesh`] after creating it.\n\n ## Common points of confusion\n\n - UV maps in Bevy start at the top-left, see [`ATTRIBUTE_UV_0`](Mesh::ATTRIBUTE_UV_0),\n   other APIs can have other conventions, `OpenGL` starts at bottom-left.\n - It is possible and sometimes useful for multiple vertices to have the same\n   [position attribute](Mesh::ATTRIBUTE_POSITION) value,\n   it's a common technique in 3D modeling for complex UV mapping or other calculations.\n - Bevy performs frustum culling based on the `Aabb` of meshes, which is calculated\n   and added automatically for new meshes only. If a mesh is modified, the entity's `Aabb`\n   needs to be updated manually or deleted so that it is re-calculated.\n\n ## Use with `StandardMaterial`\n\n To render correctly with `StandardMaterial`, a mesh needs to have properly defined:\n - [`UVs`](Mesh::ATTRIBUTE_UV_0): Bevy needs to know how to map a texture onto the mesh\n   (also true for `ColorMaterial`).\n - [`Normals`](Mesh::ATTRIBUTE_NORMAL): Bevy needs to know how light interacts with your mesh.\n   [0.0, 0.0, 1.0] is very common for simple flat meshes on the XY plane,\n   because simple meshes are smooth and they don't require complex light calculations.\n - Vertex winding order: by default, `StandardMaterial.cull_mode` is `Some(Face::Back)`,\n   which means that Bevy would *only* render the \"front\" of each triangle, which\n   is the side of the triangle from where the vertices appear in a *counter-clockwise* order.",
      "layout": {
        "kind": "Struct",
        "name": "Mesh",
        "fields": [
          {
            "name": "indices",
            "type": "core::option::Option<bevy_mesh::index::Indices>"
          },
          {
            "name": "morph_targets",
            "type": "core::option::Option<bevy_asset::handle::Handle<bevy_image::image::Image>>"
          },
          {
            "name": "morph_target_names",
            "type": "core::option::Option<alloc::vec::Vec<alloc::string::String>>"
          },
          {
            "name": "asset_usage",
            "type": "bevy_asset::render_asset::RenderAssetUsages"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mesh::morph::MeshMorphWeights": {
      "identifier": "MeshMorphWeights",
      "crate": "bevy_mesh",
      "path": "bevy_mesh::morph::MeshMorphWeights",
      "documentation": " Control a specific [`Mesh`] instance's [morph targets]. These control the weights of\n specific \"mesh primitives\" in scene formats like GLTF. They can be set manually, but\n in most cases they should \"automatically\" synced by setting the [`MorphWeights`] component\n on a parent entity.\n\n See [`MorphWeights`] for more details on Bevy's morph target implementation.\n\n Add this to an [`Entity`] with a `Mesh3d` with a [`MorphAttributes`] set\n to control individual weights of each morph target.\n\n [morph targets]: https://en.wikipedia.org/wiki/Morph_target_animation",
      "layout": {
        "kind": "Struct",
        "name": "MeshMorphWeights",
        "fields": [
          {
            "name": "weights",
            "type": "alloc::vec::Vec<f32>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mesh::morph::MorphWeights": {
      "identifier": "MorphWeights",
      "crate": "bevy_mesh",
      "path": "bevy_mesh::morph::MorphWeights",
      "documentation": " Controls the [morph targets] for all child `Mesh3d` entities. In most cases, [`MorphWeights`] should be considered\n the \"source of truth\" when writing morph targets for meshes. However you can choose to write child [`MeshMorphWeights`]\n if your situation requires more granularity. Just note that if you set [`MorphWeights`], it will overwrite child\n [`MeshMorphWeights`] values.\n\n This exists because Bevy's [`Mesh`] corresponds to a _single_ surface / material, whereas morph targets\n as defined in the GLTF spec exist on \"multi-primitive meshes\" (where each primitive is its own surface with its own material).\n Therefore in Bevy [`MorphWeights`] an a parent entity are the \"canonical weights\" from a GLTF perspective, which then\n synchronized to child `Mesh3d` / [`MeshMorphWeights`] (which correspond to \"primitives\" / \"surfaces\" from a GLTF perspective).\n\n Add this to the parent of one or more [`Entities`](`Entity`) with a `Mesh3d` with a [`MeshMorphWeights`].\n\n [morph targets]: https://en.wikipedia.org/wiki/Morph_target_animation",
      "layout": {
        "kind": "Struct",
        "name": "MorphWeights",
        "fields": [
          {
            "name": "weights",
            "type": "alloc::vec::Vec<f32>"
          },
          {
            "name": "first_mesh",
            "type": "core::option::Option<bevy_asset::handle::Handle<bevy_mesh::mesh::Mesh>>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mesh::primitives::dim2::AnnulusMeshBuilder": {
      "identifier": "AnnulusMeshBuilder",
      "crate": "bevy_mesh",
      "path": "bevy_mesh::primitives::dim2::AnnulusMeshBuilder",
      "documentation": " A builder for creating a [`Mesh`] with an [`Annulus`] shape.",
      "layout": {
        "kind": "Struct",
        "name": "AnnulusMeshBuilder",
        "fields": [
          {
            "name": "annulus",
            "type": "bevy_math::primitives::dim2::Annulus"
          },
          {
            "name": "resolution",
            "type": "u32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mesh::primitives::dim2::Capsule2dMeshBuilder": {
      "identifier": "Capsule2dMeshBuilder",
      "crate": "bevy_mesh",
      "path": "bevy_mesh::primitives::dim2::Capsule2dMeshBuilder",
      "documentation": " A builder used for creating a [`Mesh`] with a [`Capsule2d`] shape.",
      "layout": {
        "kind": "Struct",
        "name": "Capsule2dMeshBuilder",
        "fields": [
          {
            "name": "capsule",
            "type": "bevy_math::primitives::dim2::Capsule2d"
          },
          {
            "name": "resolution",
            "type": "u32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mesh::primitives::dim2::CircleMeshBuilder": {
      "identifier": "CircleMeshBuilder",
      "crate": "bevy_mesh",
      "path": "bevy_mesh::primitives::dim2::CircleMeshBuilder",
      "documentation": " A builder used for creating a [`Mesh`] with a [`Circle`] shape.",
      "layout": {
        "kind": "Struct",
        "name": "CircleMeshBuilder",
        "fields": [
          {
            "name": "circle",
            "type": "bevy_math::primitives::dim2::Circle"
          },
          {
            "name": "resolution",
            "type": "u32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mesh::primitives::dim2::CircularMeshUvMode": {
      "identifier": "CircularMeshUvMode",
      "crate": "bevy_mesh",
      "path": "bevy_mesh::primitives::dim2::CircularMeshUvMode",
      "documentation": " Specifies how to generate UV-mappings for the [`CircularSector`] and [`CircularSegment`] shapes.\n\n Currently the only variant is `Mask`, which is good for showing a portion of a texture that includes\n the entire circle, particularly the same texture will be displayed with different fractions of a\n complete circle.\n\n It's expected that more will be added in the future, such as a variant that causes the texture to be\n scaled to fit the bounding box of the shape, which would be good for packed textures only including the\n portion of the circle that is needed to display.",
      "layout": [
        {
          "kind": "Struct",
          "name": "Mask",
          "fields": [
            {
              "name": "angle",
              "type": "f32"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mesh::primitives::dim2::CircularSectorMeshBuilder": {
      "identifier": "CircularSectorMeshBuilder",
      "crate": "bevy_mesh",
      "path": "bevy_mesh::primitives::dim2::CircularSectorMeshBuilder",
      "documentation": " A builder used for creating a [`Mesh`] with a [`CircularSector`] shape.\n\n The resulting mesh will have a UV-map such that the center of the circle is\n at the center of the texture.",
      "layout": {
        "kind": "Struct",
        "name": "CircularSectorMeshBuilder",
        "fields": [
          {
            "name": "sector",
            "type": "bevy_math::primitives::dim2::CircularSector"
          },
          {
            "name": "resolution",
            "type": "u32"
          },
          {
            "name": "uv_mode",
            "type": "bevy_mesh::primitives::dim2::CircularMeshUvMode"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mesh::primitives::dim2::CircularSegmentMeshBuilder": {
      "identifier": "CircularSegmentMeshBuilder",
      "crate": "bevy_mesh",
      "path": "bevy_mesh::primitives::dim2::CircularSegmentMeshBuilder",
      "documentation": " A builder used for creating a [`Mesh`] with a [`CircularSegment`] shape.\n\n The resulting mesh will have a UV-map such that the center of the circle is\n at the center of the texture.",
      "layout": {
        "kind": "Struct",
        "name": "CircularSegmentMeshBuilder",
        "fields": [
          {
            "name": "segment",
            "type": "bevy_math::primitives::dim2::CircularSegment"
          },
          {
            "name": "resolution",
            "type": "u32"
          },
          {
            "name": "uv_mode",
            "type": "bevy_mesh::primitives::dim2::CircularMeshUvMode"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mesh::primitives::dim2::EllipseMeshBuilder": {
      "identifier": "EllipseMeshBuilder",
      "crate": "bevy_mesh",
      "path": "bevy_mesh::primitives::dim2::EllipseMeshBuilder",
      "documentation": " A builder used for creating a [`Mesh`] with an [`Ellipse`] shape.",
      "layout": {
        "kind": "Struct",
        "name": "EllipseMeshBuilder",
        "fields": [
          {
            "name": "ellipse",
            "type": "bevy_math::primitives::dim2::Ellipse"
          },
          {
            "name": "resolution",
            "type": "u32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mesh::primitives::dim2::RectangleMeshBuilder": {
      "identifier": "RectangleMeshBuilder",
      "crate": "bevy_mesh",
      "path": "bevy_mesh::primitives::dim2::RectangleMeshBuilder",
      "documentation": " A builder used for creating a [`Mesh`] with a [`Rectangle`] shape.",
      "layout": {
        "kind": "Struct",
        "name": "RectangleMeshBuilder",
        "fields": [
          {
            "name": "half_size",
            "type": "glam::Vec2"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mesh::primitives::dim2::RegularPolygonMeshBuilder": {
      "identifier": "RegularPolygonMeshBuilder",
      "crate": "bevy_mesh",
      "path": "bevy_mesh::primitives::dim2::RegularPolygonMeshBuilder",
      "documentation": " A builder used for creating a [`Mesh`] with a [`RegularPolygon`] shape.",
      "layout": {
        "kind": "Struct",
        "name": "RegularPolygonMeshBuilder",
        "fields": [
          {
            "name": "circumradius",
            "type": "f32"
          },
          {
            "name": "sides",
            "type": "u32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mesh::primitives::dim2::RhombusMeshBuilder": {
      "identifier": "RhombusMeshBuilder",
      "crate": "bevy_mesh",
      "path": "bevy_mesh::primitives::dim2::RhombusMeshBuilder",
      "documentation": " A builder for creating a [`Mesh`] with an [`Rhombus`] shape.",
      "layout": {
        "kind": "Struct",
        "name": "RhombusMeshBuilder",
        "fields": [
          {
            "name": "half_diagonals",
            "type": "glam::Vec2"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mesh::primitives::dim2::Triangle2dMeshBuilder": {
      "identifier": "Triangle2dMeshBuilder",
      "crate": "bevy_mesh",
      "path": "bevy_mesh::primitives::dim2::Triangle2dMeshBuilder",
      "documentation": " A builder used for creating a [`Mesh`] with a [`Triangle2d`] shape.",
      "layout": {
        "kind": "Struct",
        "name": "Triangle2dMeshBuilder",
        "fields": [
          {
            "name": "triangle",
            "type": "bevy_math::primitives::dim2::Triangle2d"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mesh::primitives::dim3::capsule::Capsule3dMeshBuilder": {
      "identifier": "Capsule3dMeshBuilder",
      "crate": "bevy_mesh",
      "path": "bevy_mesh::primitives::dim3::capsule::Capsule3dMeshBuilder",
      "documentation": " A builder used for creating a [`Mesh`] with a [`Capsule3d`] shape.",
      "layout": {
        "kind": "Struct",
        "name": "Capsule3dMeshBuilder",
        "fields": [
          {
            "name": "capsule",
            "type": "bevy_math::primitives::dim3::Capsule3d"
          },
          {
            "name": "rings",
            "type": "u32"
          },
          {
            "name": "longitudes",
            "type": "u32"
          },
          {
            "name": "latitudes",
            "type": "u32"
          },
          {
            "name": "uv_profile",
            "type": "bevy_mesh::primitives::dim3::capsule::CapsuleUvProfile"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mesh::primitives::dim3::capsule::CapsuleUvProfile": {
      "identifier": "CapsuleUvProfile",
      "crate": "bevy_mesh",
      "path": "bevy_mesh::primitives::dim3::capsule::CapsuleUvProfile",
      "documentation": " Manner in which UV coordinates are distributed vertically.",
      "layout": [
        {
          "kind": "Unit",
          "name": "Aspect"
        },
        {
          "kind": "Unit",
          "name": "Uniform"
        },
        {
          "kind": "Unit",
          "name": "Fixed"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mesh::primitives::dim3::cone::ConeAnchor": {
      "identifier": "ConeAnchor",
      "crate": "bevy_mesh",
      "path": "bevy_mesh::primitives::dim3::cone::ConeAnchor",
      "documentation": " Anchoring options for [`ConeMeshBuilder`]",
      "layout": [
        {
          "kind": "Unit",
          "name": "MidPoint"
        },
        {
          "kind": "Unit",
          "name": "Tip"
        },
        {
          "kind": "Unit",
          "name": "Base"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mesh::primitives::dim3::cone::ConeMeshBuilder": {
      "identifier": "ConeMeshBuilder",
      "crate": "bevy_mesh",
      "path": "bevy_mesh::primitives::dim3::cone::ConeMeshBuilder",
      "documentation": " A builder used for creating a [`Mesh`] with a [`Cone`] shape.",
      "layout": {
        "kind": "Struct",
        "name": "ConeMeshBuilder",
        "fields": [
          {
            "name": "cone",
            "type": "bevy_math::primitives::dim3::Cone"
          },
          {
            "name": "resolution",
            "type": "u32"
          },
          {
            "name": "anchor",
            "type": "bevy_mesh::primitives::dim3::cone::ConeAnchor"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mesh::primitives::dim3::conical_frustum::ConicalFrustumMeshBuilder": {
      "identifier": "ConicalFrustumMeshBuilder",
      "crate": "bevy_mesh",
      "path": "bevy_mesh::primitives::dim3::conical_frustum::ConicalFrustumMeshBuilder",
      "documentation": " A builder used for creating a [`Mesh`] with a [`ConicalFrustum`] shape.",
      "layout": {
        "kind": "Struct",
        "name": "ConicalFrustumMeshBuilder",
        "fields": [
          {
            "name": "frustum",
            "type": "bevy_math::primitives::dim3::ConicalFrustum"
          },
          {
            "name": "resolution",
            "type": "u32"
          },
          {
            "name": "segments",
            "type": "u32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mesh::primitives::dim3::cuboid::CuboidMeshBuilder": {
      "identifier": "CuboidMeshBuilder",
      "crate": "bevy_mesh",
      "path": "bevy_mesh::primitives::dim3::cuboid::CuboidMeshBuilder",
      "documentation": " A builder used for creating a [`Mesh`] with a [`Cuboid`] shape.",
      "layout": {
        "kind": "Struct",
        "name": "CuboidMeshBuilder",
        "fields": [
          {
            "name": "half_size",
            "type": "glam::Vec3"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mesh::primitives::dim3::cylinder::CylinderAnchor": {
      "identifier": "CylinderAnchor",
      "crate": "bevy_mesh",
      "path": "bevy_mesh::primitives::dim3::cylinder::CylinderAnchor",
      "documentation": " Anchoring options for [`CylinderMeshBuilder`]",
      "layout": [
        {
          "kind": "Unit",
          "name": "MidPoint"
        },
        {
          "kind": "Unit",
          "name": "Top"
        },
        {
          "kind": "Unit",
          "name": "Bottom"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mesh::primitives::dim3::cylinder::CylinderMeshBuilder": {
      "identifier": "CylinderMeshBuilder",
      "crate": "bevy_mesh",
      "path": "bevy_mesh::primitives::dim3::cylinder::CylinderMeshBuilder",
      "documentation": " A builder used for creating a [`Mesh`] with a [`Cylinder`] shape.",
      "layout": {
        "kind": "Struct",
        "name": "CylinderMeshBuilder",
        "fields": [
          {
            "name": "cylinder",
            "type": "bevy_math::primitives::dim3::Cylinder"
          },
          {
            "name": "resolution",
            "type": "u32"
          },
          {
            "name": "segments",
            "type": "u32"
          },
          {
            "name": "caps",
            "type": "bool"
          },
          {
            "name": "anchor",
            "type": "bevy_mesh::primitives::dim3::cylinder::CylinderAnchor"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mesh::primitives::dim3::plane::PlaneMeshBuilder": {
      "identifier": "PlaneMeshBuilder",
      "crate": "bevy_mesh",
      "path": "bevy_mesh::primitives::dim3::plane::PlaneMeshBuilder",
      "documentation": " A builder used for creating a [`Mesh`] with a [`Plane3d`] shape.",
      "layout": {
        "kind": "Struct",
        "name": "PlaneMeshBuilder",
        "fields": [
          {
            "name": "plane",
            "type": "bevy_math::primitives::dim3::Plane3d"
          },
          {
            "name": "subdivisions",
            "type": "u32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mesh::primitives::dim3::sphere::SphereKind": {
      "identifier": "SphereKind",
      "crate": "bevy_mesh",
      "path": "bevy_mesh::primitives::dim3::sphere::SphereKind",
      "documentation": " A type of sphere mesh.",
      "layout": [
        {
          "kind": "Struct",
          "name": "Ico",
          "fields": [
            {
              "name": "subdivisions",
              "type": "u32"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "Uv",
          "fields": [
            {
              "name": "sectors",
              "type": "u32"
            },
            {
              "name": "stacks",
              "type": "u32"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mesh::primitives::dim3::sphere::SphereMeshBuilder": {
      "identifier": "SphereMeshBuilder",
      "crate": "bevy_mesh",
      "path": "bevy_mesh::primitives::dim3::sphere::SphereMeshBuilder",
      "documentation": " A builder used for creating a [`Mesh`] with an [`Sphere`] shape.",
      "layout": {
        "kind": "Struct",
        "name": "SphereMeshBuilder",
        "fields": [
          {
            "name": "sphere",
            "type": "bevy_math::primitives::dim3::Sphere"
          },
          {
            "name": "kind",
            "type": "bevy_mesh::primitives::dim3::sphere::SphereKind"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mesh::primitives::dim3::tetrahedron::TetrahedronMeshBuilder": {
      "identifier": "TetrahedronMeshBuilder",
      "crate": "bevy_mesh",
      "path": "bevy_mesh::primitives::dim3::tetrahedron::TetrahedronMeshBuilder",
      "documentation": " A builder used for creating a [`Mesh`] with a [`Tetrahedron`] shape.",
      "layout": {
        "kind": "Struct",
        "name": "TetrahedronMeshBuilder",
        "fields": [
          {
            "name": "tetrahedron",
            "type": "bevy_math::primitives::dim3::Tetrahedron"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mesh::primitives::dim3::torus::TorusMeshBuilder": {
      "identifier": "TorusMeshBuilder",
      "crate": "bevy_mesh",
      "path": "bevy_mesh::primitives::dim3::torus::TorusMeshBuilder",
      "documentation": " A builder used for creating a [`Mesh`] with a [`Torus`] shape.",
      "layout": {
        "kind": "Struct",
        "name": "TorusMeshBuilder",
        "fields": [
          {
            "name": "torus",
            "type": "bevy_math::primitives::dim3::Torus"
          },
          {
            "name": "minor_resolution",
            "type": "usize"
          },
          {
            "name": "major_resolution",
            "type": "usize"
          },
          {
            "name": "angle_range",
            "type": "core::ops::RangeInclusive<f32>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mesh::primitives::dim3::triangle3d::Triangle3dMeshBuilder": {
      "identifier": "Triangle3dMeshBuilder",
      "crate": "bevy_mesh",
      "path": "bevy_mesh::primitives::dim3::triangle3d::Triangle3dMeshBuilder",
      "documentation": " A builder used for creating a [`Mesh`] with a [`Triangle3d`] shape.",
      "layout": {
        "kind": "Struct",
        "name": "Triangle3dMeshBuilder",
        "fields": [
          {
            "name": "triangle",
            "type": "bevy_math::primitives::dim3::Triangle3d"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mesh::skinning::SkinnedMesh": {
      "identifier": "SkinnedMesh",
      "crate": "bevy_mesh",
      "path": "bevy_mesh::skinning::SkinnedMesh",
      "layout": {
        "kind": "Struct",
        "name": "SkinnedMesh",
        "fields": [
          {
            "name": "inverse_bindposes",
            "type": "bevy_asset::handle::Handle<bevy_mesh::skinning::SkinnedMeshInverseBindposes>"
          },
          {
            "name": "joints",
            "type": "alloc::vec::Vec<bevy_ecs::entity::Entity>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mod_scripting_core::asset::ScriptAsset": {
      "identifier": "ScriptAsset",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::asset::ScriptAsset",
      "documentation": " Represents a script loaded into memory as an asset",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mod_scripting_core::bindings::function::namespace::Namespace": {
      "identifier": "Namespace",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::bindings::function::namespace::Namespace",
      "documentation": " A namespace for functions",
      "layout": [
        {
          "kind": "Unit",
          "name": "Global"
        },
        {
          "kind": "TupleStruct",
          "name": "OnType",
          "fields": [
            {
              "type": "core::any::TypeId"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mod_scripting_core::bindings::script_component::DynamicComponent": {
      "identifier": "DynamicComponent",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::bindings::script_component::DynamicComponent",
      "documentation": " A dynamic script component",
      "layout": {
        "kind": "Struct",
        "name": "DynamicComponent",
        "fields": [
          {
            "name": "data",
            "type": "bevy_mod_scripting_core::bindings::script_value::ScriptValue"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mod_scripting_core::bindings::script_value::ScriptValue": {
      "identifier": "ScriptValue",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::bindings::script_value::ScriptValue",
      "documentation": " An abstraction of values that can be passed to and from scripts.\n This allows us to re-use logic between scripting languages.",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mod_scripting_core::docgen::info::FunctionArgInfo": {
      "identifier": "FunctionArgInfo",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::docgen::info::FunctionArgInfo",
      "documentation": " Information about a function argument.",
      "layout": {
        "kind": "Struct",
        "name": "FunctionArgInfo",
        "fields": [
          {
            "name": "name",
            "type": "core::option::Option<alloc::borrow::Cow<str>>"
          },
          {
            "name": "arg_index",
            "type": "usize"
          },
          {
            "name": "type_id",
            "type": "core::any::TypeId"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mod_scripting_core::docgen::info::FunctionInfo": {
      "identifier": "FunctionInfo",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::docgen::info::FunctionInfo",
      "documentation": " Information about a function.",
      "layout": {
        "kind": "Struct",
        "name": "FunctionInfo",
        "fields": [
          {
            "name": "name",
            "type": "alloc::borrow::Cow<str>"
          },
          {
            "name": "namespace",
            "type": "bevy_mod_scripting_core::bindings::function::namespace::Namespace"
          },
          {
            "name": "arg_info",
            "type": "alloc::vec::Vec<bevy_mod_scripting_core::docgen::info::FunctionArgInfo>"
          },
          {
            "name": "return_info",
            "type": "bevy_mod_scripting_core::docgen::info::FunctionReturnInfo"
          },
          {
            "name": "docs",
            "type": "core::option::Option<alloc::borrow::Cow<str>>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mod_scripting_core::docgen::info::FunctionReturnInfo": {
      "identifier": "FunctionReturnInfo",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::docgen::info::FunctionReturnInfo",
      "documentation": " Information about a function return value.",
      "layout": {
        "kind": "Struct",
        "name": "FunctionReturnInfo",
        "fields": [
          {
            "name": "type_id",
            "type": "core::any::TypeId"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_mod_scripting_core::error::InteropError": {
      "identifier": "InteropError",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::error::InteropError",
      "documentation": " An error thrown when interoperating with scripting languages.",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::atmosphere::Atmosphere": {
      "identifier": "Atmosphere",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::atmosphere::Atmosphere",
      "documentation": " This component describes the atmosphere of a planet, and when added to a camera\n will enable atmospheric scattering for that camera. This is only compatible with\n HDR cameras.\n\n Most atmospheric particles scatter and absorb light in two main ways:\n\n Rayleigh scattering occurs among very small particles, like individual gas\n molecules. It's wavelength dependent, and causes colors to separate out as\n light travels through the atmosphere. These particles *don't* absorb light.\n\n Mie scattering occurs among slightly larger particles, like dust and sea spray.\n These particles *do* absorb light, but Mie scattering and absorption is\n *wavelength independent*.\n\n Ozone acts differently from the other two, and is special-cased because\n it's very important to the look of Earth's atmosphere. It's wavelength\n dependent, but only *absorbs* light. Also, while the density of particles\n participating in Rayleigh and Mie scattering falls off roughly exponentially\n from the planet's surface, ozone only exists in a band centered at a fairly\n high altitude.",
      "layout": {
        "kind": "Struct",
        "name": "Atmosphere",
        "fields": [
          {
            "name": "bottom_radius",
            "type": "f32"
          },
          {
            "name": "top_radius",
            "type": "f32"
          },
          {
            "name": "ground_albedo",
            "type": "glam::Vec3"
          },
          {
            "name": "rayleigh_density_exp_scale",
            "type": "f32"
          },
          {
            "name": "rayleigh_scattering",
            "type": "glam::Vec3"
          },
          {
            "name": "mie_density_exp_scale",
            "type": "f32"
          },
          {
            "name": "mie_scattering",
            "type": "f32"
          },
          {
            "name": "mie_absorption",
            "type": "f32"
          },
          {
            "name": "mie_asymmetry",
            "type": "f32"
          },
          {
            "name": "ozone_layer_altitude",
            "type": "f32"
          },
          {
            "name": "ozone_layer_width",
            "type": "f32"
          },
          {
            "name": "ozone_absorption",
            "type": "glam::Vec3"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::atmosphere::AtmosphereSettings": {
      "identifier": "AtmosphereSettings",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::atmosphere::AtmosphereSettings",
      "documentation": " This component controls the resolution of the atmosphere LUTs, and\n how many samples are used when computing them.\n\n The transmittance LUT stores the transmittance from a point in the\n atmosphere to the outer edge of the atmosphere in any direction,\n parametrized by the point's radius and the cosine of the zenith angle\n of the ray.\n\n The multiscattering LUT stores the factor representing luminance scattered\n towards the camera with scattering order >2, parametrized by the point's radius\n and the cosine of the zenith angle of the sun.\n\n The sky-view lut is essentially the actual skybox, storing the light scattered\n towards the camera in every direction with a cubemap.\n\n The aerial-view lut is a 3d LUT fit to the view frustum, which stores the luminance\n scattered towards the camera at each point (RGB channels), alongside the average\n transmittance to that point (A channel).",
      "layout": {
        "kind": "Struct",
        "name": "AtmosphereSettings",
        "fields": [
          {
            "name": "transmittance_lut_size",
            "type": "glam::UVec2"
          },
          {
            "name": "multiscattering_lut_size",
            "type": "glam::UVec2"
          },
          {
            "name": "sky_view_lut_size",
            "type": "glam::UVec2"
          },
          {
            "name": "aerial_view_lut_size",
            "type": "glam::UVec3"
          },
          {
            "name": "transmittance_lut_samples",
            "type": "u32"
          },
          {
            "name": "multiscattering_lut_dirs",
            "type": "u32"
          },
          {
            "name": "multiscattering_lut_samples",
            "type": "u32"
          },
          {
            "name": "sky_view_lut_samples",
            "type": "u32"
          },
          {
            "name": "aerial_view_lut_samples",
            "type": "u32"
          },
          {
            "name": "aerial_view_lut_max_distance",
            "type": "f32"
          },
          {
            "name": "scene_units_to_m",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::cluster::ClusterConfig": {
      "identifier": "ClusterConfig",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::cluster::ClusterConfig",
      "documentation": " Configuration of the clustering strategy for clustered forward rendering",
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "Unit",
          "name": "Single"
        },
        {
          "kind": "Struct",
          "name": "XYZ",
          "fields": [
            {
              "name": "dimensions",
              "type": "glam::UVec3"
            },
            {
              "name": "z_config",
              "type": "bevy_pbr::cluster::ClusterZConfig"
            },
            {
              "name": "dynamic_resizing",
              "type": "bool"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "FixedZ",
          "fields": [
            {
              "name": "total",
              "type": "u32"
            },
            {
              "name": "z_slices",
              "type": "u32"
            },
            {
              "name": "z_config",
              "type": "bevy_pbr::cluster::ClusterZConfig"
            },
            {
              "name": "dynamic_resizing",
              "type": "bool"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::cluster::ClusterFarZMode": {
      "identifier": "ClusterFarZMode",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::cluster::ClusterFarZMode",
      "documentation": " Configure the far z-plane mode used for the furthest depth slice for clustered forward\n rendering",
      "layout": [
        {
          "kind": "Unit",
          "name": "MaxClusterableObjectRange"
        },
        {
          "kind": "TupleStruct",
          "name": "Constant",
          "fields": [
            {
              "type": "f32"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::cluster::ClusterZConfig": {
      "identifier": "ClusterZConfig",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::cluster::ClusterZConfig",
      "documentation": " Configure the depth-slicing strategy for clustered forward rendering",
      "layout": {
        "kind": "Struct",
        "name": "ClusterZConfig",
        "fields": [
          {
            "name": "first_slice_depth",
            "type": "f32"
          },
          {
            "name": "far_z_mode",
            "type": "bevy_pbr::cluster::ClusterFarZMode"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::components::CascadesVisibleEntities": {
      "identifier": "CascadesVisibleEntities",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::components::CascadesVisibleEntities",
      "layout": {
        "kind": "Struct",
        "name": "CascadesVisibleEntities"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::components::CubemapVisibleEntities": {
      "identifier": "CubemapVisibleEntities",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::components::CubemapVisibleEntities",
      "layout": {
        "kind": "Struct",
        "name": "CubemapVisibleEntities"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::components::VisibleMeshEntities": {
      "identifier": "VisibleMeshEntities",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::components::VisibleMeshEntities",
      "documentation": " Collection of mesh entities visible for 3D lighting.\n\n This component contains all mesh entities visible from the current light view.\n The collection is updated automatically by [`crate::SimulationLightSystems`].",
      "layout": {
        "kind": "Struct",
        "name": "VisibleMeshEntities"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::decal::clustered::ClusteredDecal": {
      "identifier": "ClusteredDecal",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::decal::clustered::ClusteredDecal",
      "documentation": " An object that projects a decal onto surfaces within its bounds.\n\n Conceptually, a clustered decal is a 1×1×1 cube centered on its origin. It\n projects the given [`Self::image`] onto surfaces in the +Z direction (thus\n you may find [`Transform::looking_at`] useful).\n\n Clustered decals are the highest-quality types of decals that Bevy supports,\n but they require bindless textures. This means that they presently can't be\n used on WebGL 2, WebGPU, macOS, or iOS. Bevy's clustered decals can be used\n with forward or deferred rendering and don't require a prepass.",
      "layout": {
        "kind": "Struct",
        "name": "ClusteredDecal",
        "fields": [
          {
            "name": "image",
            "type": "bevy_asset::handle::Handle<bevy_image::image::Image>"
          },
          {
            "name": "tag",
            "type": "u32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::decal::forward::ForwardDecal": {
      "identifier": "ForwardDecal",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::decal::forward::ForwardDecal",
      "documentation": " A decal that renders via a 1x1 transparent quad mesh, smoothly alpha-blending with the underlying\n geometry towards the edges.\n\n Because forward decals are meshes, you can use arbitrary materials to control their appearance.\n\n # Usage Notes\n\n * Spawn this component on an entity with a [`crate::MeshMaterial3d`] component holding a [`ForwardDecalMaterial`].\n * Any camera rendering a forward decal must have the [`bevy_core_pipeline::prepass::DepthPrepass`] component.\n * Looking at forward decals at a steep angle can cause distortion. This can be mitigated by padding your decal's\n   texture with extra transparent pixels on the edges.",
      "layout": {
        "kind": "Struct",
        "name": "ForwardDecal"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::fog::DistanceFog": {
      "identifier": "DistanceFog",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::fog::DistanceFog",
      "documentation": " Configures the “classic” computer graphics [distance fog](https://en.wikipedia.org/wiki/Distance_fog) effect,\n in which objects appear progressively more covered in atmospheric haze the further away they are from the camera.\n Affects meshes rendered via the PBR [`StandardMaterial`](crate::StandardMaterial).\n\n ## Falloff\n\n The rate at which fog intensity increases with distance is controlled by the falloff mode.\n Currently, the following fog falloff modes are supported:\n\n - [`FogFalloff::Linear`]\n - [`FogFalloff::Exponential`]\n - [`FogFalloff::ExponentialSquared`]\n - [`FogFalloff::Atmospheric`]\n\n ## Example\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_render::prelude::*;\n # use bevy_core_pipeline::prelude::*;\n # use bevy_pbr::prelude::*;\n # use bevy_color::Color;\n # fn system(mut commands: Commands) {\n commands.spawn((\n     // Setup your camera as usual\n     Camera3d::default(),\n     // Add fog to the same entity\n     DistanceFog {\n         color: Color::WHITE,\n         falloff: FogFalloff::Exponential { density: 1e-3 },\n         ..Default::default()\n     },\n ));\n # }\n # bevy_ecs::system::assert_is_system(system);\n ```\n\n ## Material Override\n\n Once enabled for a specific camera, the fog effect can also be disabled for individual\n [`StandardMaterial`](crate::StandardMaterial) instances via the `fog_enabled` flag.",
      "layout": {
        "kind": "Struct",
        "name": "DistanceFog",
        "fields": [
          {
            "name": "color",
            "type": "bevy_color::color::Color"
          },
          {
            "name": "directional_light_color",
            "type": "bevy_color::color::Color"
          },
          {
            "name": "directional_light_exponent",
            "type": "f32"
          },
          {
            "name": "falloff",
            "type": "bevy_pbr::fog::FogFalloff"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::fog::FogFalloff": {
      "identifier": "FogFalloff",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::fog::FogFalloff",
      "documentation": " Allows switching between different fog falloff modes, and configuring their parameters.\n\n ## Convenience Methods\n\n When using non-linear fog modes it can be hard to determine the right parameter values\n for a given scene.\n\n For easier artistic control, instead of creating the enum variants directly, you can use the\n visibility-based convenience methods:\n\n - For `FogFalloff::Exponential`:\n     - [`FogFalloff::from_visibility()`]\n     - [`FogFalloff::from_visibility_contrast()`]\n\n - For `FogFalloff::ExponentialSquared`:\n     - [`FogFalloff::from_visibility_squared()`]\n     - [`FogFalloff::from_visibility_contrast_squared()`]\n\n - For `FogFalloff::Atmospheric`:\n     - [`FogFalloff::from_visibility_color()`]\n     - [`FogFalloff::from_visibility_colors()`]\n     - [`FogFalloff::from_visibility_contrast_color()`]\n     - [`FogFalloff::from_visibility_contrast_colors()`]",
      "layout": [
        {
          "kind": "Struct",
          "name": "Linear",
          "fields": [
            {
              "name": "start",
              "type": "f32"
            },
            {
              "name": "end",
              "type": "f32"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "Exponential",
          "fields": [
            {
              "name": "density",
              "type": "f32"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "ExponentialSquared",
          "fields": [
            {
              "name": "density",
              "type": "f32"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "Atmospheric",
          "fields": [
            {
              "name": "extinction",
              "type": "glam::Vec3"
            },
            {
              "name": "inscattering",
              "type": "glam::Vec3"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::light::Cascade": {
      "identifier": "Cascade",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::light::Cascade",
      "layout": {
        "kind": "Struct",
        "name": "Cascade",
        "fields": [
          {
            "name": "world_from_cascade",
            "type": "glam::Mat4"
          },
          {
            "name": "clip_from_cascade",
            "type": "glam::Mat4"
          },
          {
            "name": "clip_from_world",
            "type": "glam::Mat4"
          },
          {
            "name": "texel_size",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::light::CascadeShadowConfig": {
      "identifier": "CascadeShadowConfig",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::light::CascadeShadowConfig",
      "documentation": " Controls how cascaded shadow mapping works.\n Prefer using [`CascadeShadowConfigBuilder`] to construct an instance.\n\n ```\n # use bevy_pbr::CascadeShadowConfig;\n # use bevy_pbr::CascadeShadowConfigBuilder;\n # use bevy_utils::default;\n #\n let config: CascadeShadowConfig = CascadeShadowConfigBuilder {\n   maximum_distance: 100.0,\n   ..default()\n }.into();\n ```",
      "layout": {
        "kind": "Struct",
        "name": "CascadeShadowConfig",
        "fields": [
          {
            "name": "bounds",
            "type": "alloc::vec::Vec<f32>"
          },
          {
            "name": "overlap_proportion",
            "type": "f32"
          },
          {
            "name": "minimum_distance",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::light::Cascades": {
      "identifier": "Cascades",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::light::Cascades",
      "layout": {
        "kind": "Struct",
        "name": "Cascades",
        "fields": [
          {
            "name": "cascades",
            "type": "bevy_ecs::entity::hash_map::EntityHashMap<alloc::vec::Vec<bevy_pbr::light::Cascade>>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::light::DirectionalLightShadowMap": {
      "identifier": "DirectionalLightShadowMap",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::light::DirectionalLightShadowMap",
      "documentation": " Controls the resolution of [`DirectionalLight`] shadow maps.\n\n ```\n # use bevy_app::prelude::*;\n # use bevy_pbr::DirectionalLightShadowMap;\n App::new()\n     .insert_resource(DirectionalLightShadowMap { size: 4096 });\n ```",
      "layout": {
        "kind": "Struct",
        "name": "DirectionalLightShadowMap",
        "fields": [
          {
            "name": "size",
            "type": "usize"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::light::NotShadowCaster": {
      "identifier": "NotShadowCaster",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::light::NotShadowCaster",
      "documentation": " Add this component to make a [`Mesh3d`] not cast shadows.",
      "layout": {
        "kind": "Struct",
        "name": "NotShadowCaster"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::light::NotShadowReceiver": {
      "identifier": "NotShadowReceiver",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::light::NotShadowReceiver",
      "documentation": " Add this component to make a [`Mesh3d`] not receive shadows.\n\n **Note:** If you're using diffuse transmission, setting [`NotShadowReceiver`] will\n cause both “regular” shadows as well as diffusely transmitted shadows to be disabled,\n even when [`TransmittedShadowReceiver`] is being used.",
      "layout": {
        "kind": "Struct",
        "name": "NotShadowReceiver"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::light::PointLightShadowMap": {
      "identifier": "PointLightShadowMap",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::light::PointLightShadowMap",
      "documentation": " Controls the resolution of [`PointLight`] shadow maps.\n\n ```\n # use bevy_app::prelude::*;\n # use bevy_pbr::PointLightShadowMap;\n App::new()\n     .insert_resource(PointLightShadowMap { size: 2048 });\n ```",
      "layout": {
        "kind": "Struct",
        "name": "PointLightShadowMap",
        "fields": [
          {
            "name": "size",
            "type": "usize"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::light::ShadowFilteringMethod": {
      "identifier": "ShadowFilteringMethod",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::light::ShadowFilteringMethod",
      "documentation": " Add this component to a [`Camera3d`](bevy_core_pipeline::core_3d::Camera3d)\n to control how to anti-alias shadow edges.\n\n The different modes use different approaches to\n [Percentage Closer Filtering](https://developer.nvidia.com/gpugems/gpugems/part-ii-lighting-and-shadows/chapter-11-shadow-map-antialiasing).",
      "layout": [
        {
          "kind": "Unit",
          "name": "Hardware2x2"
        },
        {
          "kind": "Unit",
          "name": "Gaussian"
        },
        {
          "kind": "Unit",
          "name": "Temporal"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::light::ambient_light::AmbientLight": {
      "identifier": "AmbientLight",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::light::ambient_light::AmbientLight",
      "documentation": " An ambient light, which lights the entire scene equally.\n\n This resource is inserted by the [`PbrPlugin`] and by default it is set to a low ambient light.\n\n It can also be added to a camera to override the resource (or default) ambient for that camera only.\n\n # Examples\n\n Make ambient light slightly brighter:\n\n ```\n # use bevy_ecs::system::ResMut;\n # use bevy_pbr::AmbientLight;\n fn setup_ambient_light(mut ambient_light: ResMut<AmbientLight>) {\n    ambient_light.brightness = 100.0;\n }\n ```",
      "layout": {
        "kind": "Struct",
        "name": "AmbientLight",
        "fields": [
          {
            "name": "color",
            "type": "bevy_color::color::Color"
          },
          {
            "name": "brightness",
            "type": "f32"
          },
          {
            "name": "affects_lightmapped_meshes",
            "type": "bool"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::light::directional_light::DirectionalLight": {
      "identifier": "DirectionalLight",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::light::directional_light::DirectionalLight",
      "documentation": " A Directional light.\n\n Directional lights don't exist in reality but they are a good\n approximation for light sources VERY far away, like the sun or\n the moon.\n\n The light shines along the forward direction of the entity's transform. With a default transform\n this would be along the negative-Z axis.\n\n Valid values for `illuminance` are:\n\n | Illuminance (lux) | Surfaces illuminated by                        |\n |-------------------|------------------------------------------------|\n | 0.0001            | Moonless, overcast night sky (starlight)       |\n | 0.002             | Moonless clear night sky with airglow          |\n | 0.05–0.3          | Full moon on a clear night                     |\n | 3.4               | Dark limit of civil twilight under a clear sky |\n | 20–50             | Public areas with dark surroundings            |\n | 50                | Family living room lights                      |\n | 80                | Office building hallway/toilet lighting        |\n | 100               | Very dark overcast day                         |\n | 150               | Train station platforms                        |\n | 320–500           | Office lighting                                |\n | 400               | Sunrise or sunset on a clear day.              |\n | 1000              | Overcast day; typical TV studio lighting       |\n | 10,000–25,000     | Full daylight (not direct sun)                 |\n | 32,000–100,000    | Direct sunlight                                |\n\n Source: [Wikipedia](https://en.wikipedia.org/wiki/Lux)\n\n ## Shadows\n\n To enable shadows, set the `shadows_enabled` property to `true`.\n\n Shadows are produced via [cascaded shadow maps](https://developer.download.nvidia.com/SDK/10.5/opengl/src/cascaded_shadow_maps/doc/cascaded_shadow_maps.pdf).\n\n To modify the cascade setup, such as the number of cascades or the maximum shadow distance,\n change the [`CascadeShadowConfig`] component of the entity with the [`DirectionalLight`].\n\n To control the resolution of the shadow maps, use the [`DirectionalLightShadowMap`] resource.",
      "layout": {
        "kind": "Struct",
        "name": "DirectionalLight",
        "fields": [
          {
            "name": "color",
            "type": "bevy_color::color::Color"
          },
          {
            "name": "illuminance",
            "type": "f32"
          },
          {
            "name": "shadows_enabled",
            "type": "bool"
          },
          {
            "name": "affects_lightmapped_mesh_diffuse",
            "type": "bool"
          },
          {
            "name": "shadow_depth_bias",
            "type": "f32"
          },
          {
            "name": "shadow_normal_bias",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::light::point_light::PointLight": {
      "identifier": "PointLight",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::light::point_light::PointLight",
      "documentation": " A light that emits light in all directions from a central point.\n\n Real-world values for `intensity` (luminous power in lumens) based on the electrical power\n consumption of the type of real-world light are:\n\n | Luminous Power (lumen) (i.e. the intensity member) | Incandescent non-halogen (Watts) | Incandescent halogen (Watts) | Compact fluorescent (Watts) | LED (Watts) |\n |------|-----|----|--------|-------|\n | 200  | 25  |    | 3-5    | 3     |\n | 450  | 40  | 29 | 9-11   | 5-8   |\n | 800  | 60  |    | 13-15  | 8-12  |\n | 1100 | 75  | 53 | 18-20  | 10-16 |\n | 1600 | 100 | 72 | 24-28  | 14-17 |\n | 2400 | 150 |    | 30-52  | 24-30 |\n | 3100 | 200 |    | 49-75  | 32    |\n | 4000 | 300 |    | 75-100 | 40.5  |\n\n Source: [Wikipedia](https://en.wikipedia.org/wiki/Lumen_(unit)#Lighting)\n\n ## Shadows\n\n To enable shadows, set the `shadows_enabled` property to `true`.\n\n To control the resolution of the shadow maps, use the [`PointLightShadowMap`] resource.",
      "layout": {
        "kind": "Struct",
        "name": "PointLight",
        "fields": [
          {
            "name": "color",
            "type": "bevy_color::color::Color"
          },
          {
            "name": "intensity",
            "type": "f32"
          },
          {
            "name": "range",
            "type": "f32"
          },
          {
            "name": "radius",
            "type": "f32"
          },
          {
            "name": "shadows_enabled",
            "type": "bool"
          },
          {
            "name": "affects_lightmapped_mesh_diffuse",
            "type": "bool"
          },
          {
            "name": "shadow_depth_bias",
            "type": "f32"
          },
          {
            "name": "shadow_normal_bias",
            "type": "f32"
          },
          {
            "name": "shadow_map_near_z",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::light::spot_light::SpotLight": {
      "identifier": "SpotLight",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::light::spot_light::SpotLight",
      "documentation": " A light that emits light in a given direction from a central point.\n\n Behaves like a point light in a perfectly absorbent housing that\n shines light only in a given direction. The direction is taken from\n the transform, and can be specified with [`Transform::looking_at`](Transform::looking_at).",
      "layout": {
        "kind": "Struct",
        "name": "SpotLight",
        "fields": [
          {
            "name": "color",
            "type": "bevy_color::color::Color"
          },
          {
            "name": "intensity",
            "type": "f32"
          },
          {
            "name": "range",
            "type": "f32"
          },
          {
            "name": "radius",
            "type": "f32"
          },
          {
            "name": "shadows_enabled",
            "type": "bool"
          },
          {
            "name": "affects_lightmapped_mesh_diffuse",
            "type": "bool"
          },
          {
            "name": "shadow_depth_bias",
            "type": "f32"
          },
          {
            "name": "shadow_normal_bias",
            "type": "f32"
          },
          {
            "name": "shadow_map_near_z",
            "type": "f32"
          },
          {
            "name": "outer_angle",
            "type": "f32"
          },
          {
            "name": "inner_angle",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::light_probe::LightProbe": {
      "identifier": "LightProbe",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::light_probe::LightProbe",
      "documentation": " A marker component for a light probe, which is a cuboid region that provides\n global illumination to all fragments inside it.\n\n Note that a light probe will have no effect unless the entity contains some\n kind of illumination, which can either be an [`EnvironmentMapLight`] or an\n [`IrradianceVolume`].\n\n The light probe range is conceptually a unit cube (1×1×1) centered on the\n origin. The [`Transform`] applied to this entity can scale, rotate, or translate\n that cube so that it contains all fragments that should take this light probe into account.\n\n When multiple sources of indirect illumination can be applied to a fragment,\n the highest-quality one is chosen. Diffuse and specular illumination are\n considered separately, so, for example, Bevy may decide to sample the\n diffuse illumination from an irradiance volume and the specular illumination\n from a reflection probe. From highest priority to lowest priority, the\n ranking is as follows:\n\n | Rank | Diffuse              | Specular             |\n | ---- | -------------------- | -------------------- |\n | 1    | Lightmap             | Lightmap             |\n | 2    | Irradiance volume    | Reflection probe     |\n | 3    | Reflection probe     | View environment map |\n | 4    | View environment map |                      |\n\n Note that ambient light is always added to the diffuse component and does\n not participate in the ranking. That is, ambient light is applied in\n addition to, not instead of, the light sources above.\n\n A terminology note: Unfortunately, there is little agreement across game and\n graphics engines as to what to call the various techniques that Bevy groups\n under the term *light probe*. In Bevy, a *light probe* is the generic term\n that encompasses both *reflection probes* and *irradiance volumes*. In\n object-oriented terms, *light probe* is the superclass, and *reflection\n probe* and *irradiance volume* are subclasses. In other engines, you may see\n the term *light probe* refer to an irradiance volume with a single voxel, or\n perhaps some other technique, while in Bevy *light probe* refers not to a\n specific technique but rather to a class of techniques. Developers familiar\n with other engines should be aware of this terminology difference.",
      "layout": {
        "kind": "Struct",
        "name": "LightProbe"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::light_probe::environment_map::EnvironmentMapLight": {
      "identifier": "EnvironmentMapLight",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::light_probe::environment_map::EnvironmentMapLight",
      "documentation": " A pair of cubemap textures that represent the surroundings of a specific\n area in space.\n\n See [`crate::environment_map`] for detailed information.",
      "layout": {
        "kind": "Struct",
        "name": "EnvironmentMapLight",
        "fields": [
          {
            "name": "diffuse_map",
            "type": "bevy_asset::handle::Handle<bevy_image::image::Image>"
          },
          {
            "name": "specular_map",
            "type": "bevy_asset::handle::Handle<bevy_image::image::Image>"
          },
          {
            "name": "intensity",
            "type": "f32"
          },
          {
            "name": "rotation",
            "type": "glam::Quat"
          },
          {
            "name": "affects_lightmapped_mesh_diffuse",
            "type": "bool"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::light_probe::irradiance_volume::IrradianceVolume": {
      "identifier": "IrradianceVolume",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::light_probe::irradiance_volume::IrradianceVolume",
      "documentation": " The component that defines an irradiance volume.\n\n See [`crate::irradiance_volume`] for detailed information.",
      "layout": {
        "kind": "Struct",
        "name": "IrradianceVolume",
        "fields": [
          {
            "name": "voxels",
            "type": "bevy_asset::handle::Handle<bevy_image::image::Image>"
          },
          {
            "name": "intensity",
            "type": "f32"
          },
          {
            "name": "affects_lightmapped_meshes",
            "type": "bool"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::material::DefaultOpaqueRendererMethod": {
      "identifier": "DefaultOpaqueRendererMethod",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::material::DefaultOpaqueRendererMethod",
      "documentation": " Default render method used for opaque materials.",
      "layout": {
        "kind": "TupleStruct",
        "name": "DefaultOpaqueRendererMethod",
        "fields": [
          {
            "type": "bevy_pbr::material::OpaqueRendererMethod"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::material::OpaqueRendererMethod": {
      "identifier": "OpaqueRendererMethod",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::material::OpaqueRendererMethod",
      "documentation": " Render method used for opaque materials.\n\n The forward rendering main pass draws each mesh entity and shades it according to its\n corresponding material and the lights that affect it. Some render features like Screen Space\n Ambient Occlusion require running depth and normal prepasses, that are 'deferred'-like\n prepasses over all mesh entities to populate depth and normal textures. This means that when\n using render features that require running prepasses, multiple passes over all visible geometry\n are required. This can be slow if there is a lot of geometry that cannot be batched into few\n draws.\n\n Deferred rendering runs a prepass to gather not only geometric information like depth and\n normals, but also all the material properties like base color, emissive color, reflectance,\n metalness, etc, and writes them into a deferred 'g-buffer' texture. The deferred main pass is\n then a fullscreen pass that reads data from these textures and executes shading. This allows\n for one pass over geometry, but is at the cost of not being able to use MSAA, and has heavier\n bandwidth usage which can be unsuitable for low end mobile or other bandwidth-constrained devices.\n\n If a material indicates `OpaqueRendererMethod::Auto`, `DefaultOpaqueRendererMethod` will be used.",
      "layout": [
        {
          "kind": "Unit",
          "name": "Forward"
        },
        {
          "kind": "Unit",
          "name": "Deferred"
        },
        {
          "kind": "Unit",
          "name": "Auto"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::parallax::ParallaxMappingMethod": {
      "identifier": "ParallaxMappingMethod",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::parallax::ParallaxMappingMethod",
      "documentation": " The [parallax mapping] method to use to compute depth based on the\n material's [`depth_map`].\n\n Parallax Mapping uses a depth map texture to give the illusion of depth\n variation on a mesh surface that is geometrically flat.\n\n See the `parallax_mapping.wgsl` shader code for implementation details\n and explanation of the methods used.\n\n [`depth_map`]: crate::StandardMaterial::depth_map\n [parallax mapping]: https://en.wikipedia.org/wiki/Parallax_mapping",
      "layout": [
        {
          "kind": "Unit",
          "name": "Occlusion"
        },
        {
          "kind": "Struct",
          "name": "Relief",
          "fields": [
            {
              "name": "max_steps",
              "type": "u32"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::pbr_material::StandardMaterial": {
      "identifier": "StandardMaterial",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::pbr_material::StandardMaterial",
      "documentation": " A material with \"standard\" properties used in PBR lighting.\n Standard property values with pictures here:\n <https://google.github.io/filament/Material%20Properties.pdf>.\n\n May be created directly from a [`Color`] or an [`Image`].",
      "layout": {
        "kind": "Struct",
        "name": "StandardMaterial",
        "fields": [
          {
            "name": "base_color",
            "type": "bevy_color::color::Color"
          },
          {
            "name": "base_color_channel",
            "type": "bevy_pbr::pbr_material::UvChannel"
          },
          {
            "name": "base_color_texture",
            "type": "core::option::Option<bevy_asset::handle::Handle<bevy_image::image::Image>>"
          },
          {
            "name": "emissive",
            "type": "bevy_color::linear_rgba::LinearRgba"
          },
          {
            "name": "emissive_exposure_weight",
            "type": "f32"
          },
          {
            "name": "emissive_channel",
            "type": "bevy_pbr::pbr_material::UvChannel"
          },
          {
            "name": "emissive_texture",
            "type": "core::option::Option<bevy_asset::handle::Handle<bevy_image::image::Image>>"
          },
          {
            "name": "perceptual_roughness",
            "type": "f32"
          },
          {
            "name": "metallic",
            "type": "f32"
          },
          {
            "name": "metallic_roughness_channel",
            "type": "bevy_pbr::pbr_material::UvChannel"
          },
          {
            "name": "metallic_roughness_texture",
            "type": "core::option::Option<bevy_asset::handle::Handle<bevy_image::image::Image>>"
          },
          {
            "name": "reflectance",
            "type": "f32"
          },
          {
            "name": "specular_tint",
            "type": "bevy_color::color::Color"
          },
          {
            "name": "diffuse_transmission",
            "type": "f32"
          },
          {
            "name": "specular_transmission",
            "type": "f32"
          },
          {
            "name": "thickness",
            "type": "f32"
          },
          {
            "name": "ior",
            "type": "f32"
          },
          {
            "name": "attenuation_distance",
            "type": "f32"
          },
          {
            "name": "attenuation_color",
            "type": "bevy_color::color::Color"
          },
          {
            "name": "normal_map_channel",
            "type": "bevy_pbr::pbr_material::UvChannel"
          },
          {
            "name": "normal_map_texture",
            "type": "core::option::Option<bevy_asset::handle::Handle<bevy_image::image::Image>>"
          },
          {
            "name": "flip_normal_map_y",
            "type": "bool"
          },
          {
            "name": "occlusion_channel",
            "type": "bevy_pbr::pbr_material::UvChannel"
          },
          {
            "name": "occlusion_texture",
            "type": "core::option::Option<bevy_asset::handle::Handle<bevy_image::image::Image>>"
          },
          {
            "name": "clearcoat",
            "type": "f32"
          },
          {
            "name": "clearcoat_perceptual_roughness",
            "type": "f32"
          },
          {
            "name": "anisotropy_strength",
            "type": "f32"
          },
          {
            "name": "anisotropy_rotation",
            "type": "f32"
          },
          {
            "name": "double_sided",
            "type": "bool"
          },
          {
            "name": "unlit",
            "type": "bool"
          },
          {
            "name": "fog_enabled",
            "type": "bool"
          },
          {
            "name": "alpha_mode",
            "type": "bevy_render::alpha::AlphaMode"
          },
          {
            "name": "depth_bias",
            "type": "f32"
          },
          {
            "name": "depth_map",
            "type": "core::option::Option<bevy_asset::handle::Handle<bevy_image::image::Image>>"
          },
          {
            "name": "parallax_depth_scale",
            "type": "f32"
          },
          {
            "name": "parallax_mapping_method",
            "type": "bevy_pbr::parallax::ParallaxMappingMethod"
          },
          {
            "name": "max_parallax_layer_count",
            "type": "f32"
          },
          {
            "name": "lightmap_exposure",
            "type": "f32"
          },
          {
            "name": "opaque_render_method",
            "type": "bevy_pbr::material::OpaqueRendererMethod"
          },
          {
            "name": "deferred_lighting_pass_id",
            "type": "u8"
          },
          {
            "name": "uv_transform",
            "type": "glam::Affine2"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::pbr_material::UvChannel": {
      "identifier": "UvChannel",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::pbr_material::UvChannel",
      "documentation": " An enum to define which UV attribute to use for a texture.\n\n It is used for every texture in the [`StandardMaterial`].\n It only supports two UV attributes, [`bevy_render::mesh::Mesh::ATTRIBUTE_UV_0`] and\n [`bevy_render::mesh::Mesh::ATTRIBUTE_UV_1`].\n The default is [`UvChannel::Uv0`].",
      "layout": [
        {
          "kind": "Unit",
          "name": "Uv0"
        },
        {
          "kind": "Unit",
          "name": "Uv1"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::ssao::ScreenSpaceAmbientOcclusion": {
      "identifier": "ScreenSpaceAmbientOcclusion",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::ssao::ScreenSpaceAmbientOcclusion",
      "documentation": " Component to apply screen space ambient occlusion to a 3d camera.\n\n Screen space ambient occlusion (SSAO) approximates small-scale,\n local occlusion of _indirect_ diffuse light between objects, based on what's visible on-screen.\n SSAO does not apply to direct lighting, such as point or directional lights.\n\n This darkens creases, e.g. on staircases, and gives nice contact shadows\n where objects meet, giving entities a more \"grounded\" feel.\n\n # Usage Notes\n\n Requires that you add [`ScreenSpaceAmbientOcclusionPlugin`] to your app.\n\n It strongly recommended that you use SSAO in conjunction with\n TAA ([`bevy_core_pipeline::experimental::taa::TemporalAntiAliasing`]).\n Doing so greatly reduces SSAO noise.\n\n SSAO is not supported on `WebGL2`, and is not currently supported on `WebGPU`.",
      "layout": {
        "kind": "Struct",
        "name": "ScreenSpaceAmbientOcclusion",
        "fields": [
          {
            "name": "quality_level",
            "type": "bevy_pbr::ssao::ScreenSpaceAmbientOcclusionQualityLevel"
          },
          {
            "name": "constant_object_thickness",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::ssao::ScreenSpaceAmbientOcclusionQualityLevel": {
      "identifier": "ScreenSpaceAmbientOcclusionQualityLevel",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::ssao::ScreenSpaceAmbientOcclusionQualityLevel",
      "layout": [
        {
          "kind": "Unit",
          "name": "Low"
        },
        {
          "kind": "Unit",
          "name": "Medium"
        },
        {
          "kind": "Unit",
          "name": "High"
        },
        {
          "kind": "Unit",
          "name": "Ultra"
        },
        {
          "kind": "Struct",
          "name": "Custom",
          "fields": [
            {
              "name": "slice_count",
              "type": "u32"
            },
            {
              "name": "samples_per_slice_side",
              "type": "u32"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::ssr::ScreenSpaceReflections": {
      "identifier": "ScreenSpaceReflections",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::ssr::ScreenSpaceReflections",
      "documentation": " Add this component to a camera to enable *screen-space reflections* (SSR).\n\n Screen-space reflections currently require deferred rendering in order to\n appear. Therefore, they also need the [`DepthPrepass`] and [`DeferredPrepass`]\n components, which are inserted automatically.\n\n SSR currently performs no roughness filtering for glossy reflections, so\n only very smooth surfaces will reflect objects in screen space. You can\n adjust the `perceptual_roughness_threshold` in order to tune the threshold\n below which screen-space reflections will be traced.\n\n As with all screen-space techniques, SSR can only reflect objects on screen.\n When objects leave the camera, they will disappear from reflections.\n An alternative that doesn't suffer from this problem is the combination of\n a [`LightProbe`](crate::LightProbe) and [`EnvironmentMapLight`]. The advantage of SSR is\n that it can reflect all objects, not just static ones.\n\n SSR is an approximation technique and produces artifacts in some situations.\n Hand-tuning the settings in this component will likely be useful.\n\n Screen-space reflections are presently unsupported on WebGL 2 because of a\n bug whereby Naga doesn't generate correct GLSL when sampling depth buffers,\n which is required for screen-space raymarching.",
      "layout": {
        "kind": "Struct",
        "name": "ScreenSpaceReflections",
        "fields": [
          {
            "name": "perceptual_roughness_threshold",
            "type": "f32"
          },
          {
            "name": "thickness",
            "type": "f32"
          },
          {
            "name": "linear_steps",
            "type": "u32"
          },
          {
            "name": "linear_march_exponent",
            "type": "f32"
          },
          {
            "name": "bisection_steps",
            "type": "u32"
          },
          {
            "name": "use_secant",
            "type": "bool"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::volumetric_fog::VolumetricFog": {
      "identifier": "VolumetricFog",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::volumetric_fog::VolumetricFog",
      "documentation": " When placed on a [`bevy_core_pipeline::core_3d::Camera3d`], enables\n volumetric fog and volumetric lighting, also known as light shafts or god\n rays.",
      "layout": {
        "kind": "Struct",
        "name": "VolumetricFog",
        "fields": [
          {
            "name": "ambient_color",
            "type": "bevy_color::color::Color"
          },
          {
            "name": "ambient_intensity",
            "type": "f32"
          },
          {
            "name": "jitter",
            "type": "f32"
          },
          {
            "name": "step_count",
            "type": "u32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::volumetric_fog::VolumetricLight": {
      "identifier": "VolumetricLight",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::volumetric_fog::VolumetricLight",
      "documentation": " Add this component to a [`DirectionalLight`](crate::DirectionalLight) with a shadow map\n (`shadows_enabled: true`) to make volumetric fog interact with it.\n\n This allows the light to generate light shafts/god rays.",
      "layout": {
        "kind": "Struct",
        "name": "VolumetricLight"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_picking::Pickable": {
      "identifier": "Pickable",
      "crate": "bevy_picking",
      "path": "bevy_picking::Pickable",
      "documentation": " An optional component that marks an entity as usable by a backend, and overrides default\n picking behavior for an entity.\n\n This allows you to make an entity non-hoverable, or allow items below it to be hovered.\n\n See the documentation on the fields for more details.",
      "layout": {
        "kind": "Struct",
        "name": "Pickable",
        "fields": [
          {
            "name": "should_block_lower",
            "type": "bool"
          },
          {
            "name": "is_hoverable",
            "type": "bool"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_picking::PickingPlugin": {
      "identifier": "PickingPlugin",
      "crate": "bevy_picking",
      "path": "bevy_picking::PickingPlugin",
      "documentation": " This plugin sets up the core picking infrastructure. It receives input events, and provides the shared\n types used by other picking plugins.\n\n This plugin contains several settings, and is added to the world as a resource after initialization. You\n can configure picking settings at runtime through the resource.",
      "layout": {
        "kind": "Struct",
        "name": "PickingPlugin",
        "fields": [
          {
            "name": "is_enabled",
            "type": "bool"
          },
          {
            "name": "is_input_enabled",
            "type": "bool"
          },
          {
            "name": "is_hover_enabled",
            "type": "bool"
          },
          {
            "name": "is_window_picking_enabled",
            "type": "bool"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_picking::backend::HitData": {
      "identifier": "HitData",
      "crate": "bevy_picking",
      "path": "bevy_picking::backend::HitData",
      "documentation": " Holds data from a successful pointer hit test. See [`HitData::depth`] for important details.",
      "layout": {
        "kind": "Struct",
        "name": "HitData",
        "fields": [
          {
            "name": "camera",
            "type": "bevy_ecs::entity::Entity"
          },
          {
            "name": "depth",
            "type": "f32"
          },
          {
            "name": "position",
            "type": "core::option::Option<glam::Vec3>"
          },
          {
            "name": "normal",
            "type": "core::option::Option<glam::Vec3>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_picking::backend::ray::RayId": {
      "identifier": "RayId",
      "crate": "bevy_picking",
      "path": "bevy_picking::backend::ray::RayId",
      "documentation": " Identifies a ray constructed from some (pointer, camera) combination. A pointer can be over\n multiple cameras, which is why a single pointer may have multiple rays.",
      "layout": {
        "kind": "Struct",
        "name": "RayId",
        "fields": [
          {
            "name": "camera",
            "type": "bevy_ecs::entity::Entity"
          },
          {
            "name": "pointer",
            "type": "bevy_picking::pointer::PointerId"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_picking::hover::PickingInteraction": {
      "identifier": "PickingInteraction",
      "crate": "bevy_picking",
      "path": "bevy_picking::hover::PickingInteraction",
      "documentation": " A component that aggregates picking interaction state of this entity across all pointers.\n\n Unlike bevy's `Interaction` component, this is an aggregate of the state of all pointers\n interacting with this entity. Aggregation is done by taking the interaction with the highest\n precedence.\n\n For example, if we have an entity that is being hovered by one pointer, and pressed by another,\n the entity will be considered pressed. If that entity is instead being hovered by both pointers,\n it will be considered hovered.",
      "layout": [
        {
          "kind": "Unit",
          "name": "Pressed"
        },
        {
          "kind": "Unit",
          "name": "Hovered"
        },
        {
          "kind": "Unit",
          "name": "None"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_picking::input::PointerInputPlugin": {
      "identifier": "PointerInputPlugin",
      "crate": "bevy_picking",
      "path": "bevy_picking::input::PointerInputPlugin",
      "documentation": " Adds mouse and touch inputs for picking pointers to your app. This is a default input plugin,\n that you can replace with your own plugin as needed.\n\n [`crate::PickingPlugin::is_input_enabled`] can be used to toggle whether\n the core picking plugin processes the inputs sent by this, or other input plugins, in one place.\n\n This plugin contains several settings, and is added to the world as a resource after initialization.\n You can configure pointer input settings at runtime by accessing the resource.",
      "layout": {
        "kind": "Struct",
        "name": "PointerInputPlugin",
        "fields": [
          {
            "name": "is_touch_enabled",
            "type": "bool"
          },
          {
            "name": "is_mouse_enabled",
            "type": "bool"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_picking::pointer::PointerId": {
      "identifier": "PointerId",
      "crate": "bevy_picking",
      "path": "bevy_picking::pointer::PointerId",
      "documentation": " Identifies a unique pointer entity. `Mouse` and `Touch` pointers are automatically spawned.\n\n This component is needed because pointers can be spawned and despawned, but they need to have a\n stable ID that persists regardless of the Entity they are associated with.",
      "layout": [
        {
          "kind": "Unit",
          "name": "Mouse"
        },
        {
          "kind": "TupleStruct",
          "name": "Touch",
          "fields": [
            {
              "type": "u64"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Custom",
          "fields": [
            {
              "type": "uuid::Uuid"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_picking::pointer::PointerInteraction": {
      "identifier": "PointerInteraction",
      "crate": "bevy_picking",
      "path": "bevy_picking::pointer::PointerInteraction",
      "documentation": " Holds a list of entities this pointer is currently interacting with, sorted from nearest to\n farthest.",
      "layout": {
        "kind": "Struct",
        "name": "PointerInteraction",
        "fields": [
          {
            "name": "sorted_entities",
            "type": "alloc::vec::Vec<(bevy_ecs::entity::Entity, bevy_picking::backend::HitData)>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_picking::pointer::PointerLocation": {
      "identifier": "PointerLocation",
      "crate": "bevy_picking",
      "path": "bevy_picking::pointer::PointerLocation",
      "documentation": " Component that tracks a pointer's current [`Location`].",
      "layout": {
        "kind": "Struct",
        "name": "PointerLocation"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_picking::pointer::PointerPress": {
      "identifier": "PointerPress",
      "crate": "bevy_picking",
      "path": "bevy_picking::pointer::PointerPress",
      "documentation": " Tracks the state of the pointer's buttons in response to [`PointerInput`] events.",
      "layout": {
        "kind": "Struct",
        "name": "PointerPress",
        "fields": [
          {
            "name": "primary",
            "type": "bool"
          },
          {
            "name": "secondary",
            "type": "bool"
          },
          {
            "name": "middle",
            "type": "bool"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::alpha::AlphaMode": {
      "identifier": "AlphaMode",
      "crate": "bevy_render",
      "path": "bevy_render::alpha::AlphaMode",
      "documentation": " Sets how a material's base color alpha channel is used for transparency.",
      "layout": [
        {
          "kind": "Unit",
          "name": "Opaque"
        },
        {
          "kind": "TupleStruct",
          "name": "Mask",
          "fields": [
            {
              "type": "f32"
            }
          ]
        },
        {
          "kind": "Unit",
          "name": "Blend"
        },
        {
          "kind": "Unit",
          "name": "Premultiplied"
        },
        {
          "kind": "Unit",
          "name": "AlphaToCoverage"
        },
        {
          "kind": "Unit",
          "name": "Add"
        },
        {
          "kind": "Unit",
          "name": "Multiply"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::camera::camera::Camera": {
      "identifier": "Camera",
      "crate": "bevy_render",
      "path": "bevy_render::camera::camera::Camera",
      "documentation": " The defining [`Component`] for camera entities,\n storing information about how and what to render through this camera.\n\n The [`Camera`] component is added to an entity to define the properties of the viewpoint from\n which rendering occurs. It defines the position of the view to render, the projection method\n to transform the 3D objects into a 2D image, as well as the render target into which that image\n is produced.\n\n Note that a [`Camera`] needs a [`CameraRenderGraph`] to render anything.\n This is typically provided by adding a [`Camera2d`] or [`Camera3d`] component,\n but custom render graphs can also be defined. Inserting a [`Camera`] with no render\n graph will emit an error at runtime.\n\n [`Camera2d`]: https://docs.rs/bevy/latest/bevy/core_pipeline/core_2d/struct.Camera2d.html\n [`Camera3d`]: https://docs.rs/bevy/latest/bevy/core_pipeline/core_3d/struct.Camera3d.html",
      "layout": {
        "kind": "Struct",
        "name": "Camera",
        "fields": [
          {
            "name": "viewport",
            "type": "core::option::Option<bevy_render::camera::camera::Viewport>"
          },
          {
            "name": "order",
            "type": "isize"
          },
          {
            "name": "is_active",
            "type": "bool"
          },
          {
            "name": "target",
            "type": "bevy_render::camera::camera::RenderTarget"
          },
          {
            "name": "hdr",
            "type": "bool"
          },
          {
            "name": "msaa_writeback",
            "type": "bool"
          },
          {
            "name": "clear_color",
            "type": "bevy_render::camera::clear_color::ClearColorConfig"
          },
          {
            "name": "sub_camera_view",
            "type": "core::option::Option<bevy_render::camera::camera::SubCameraView>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::camera::camera::CameraMainTextureUsages": {
      "identifier": "CameraMainTextureUsages",
      "crate": "bevy_render",
      "path": "bevy_render::camera::camera::CameraMainTextureUsages",
      "documentation": " This component lets you control the [`TextureUsages`] field of the main texture generated for the camera",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::camera::camera::CameraRenderGraph": {
      "identifier": "CameraRenderGraph",
      "crate": "bevy_render",
      "path": "bevy_render::camera::camera::CameraRenderGraph",
      "documentation": " Configures the [`RenderGraph`](crate::render_graph::RenderGraph) name assigned to be run for a given [`Camera`] entity.",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::camera::camera::Exposure": {
      "identifier": "Exposure",
      "crate": "bevy_render",
      "path": "bevy_render::camera::camera::Exposure",
      "documentation": " How much energy a `Camera3d` absorbs from incoming light.\n\n <https://en.wikipedia.org/wiki/Exposure_(photography)>",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::camera::camera::ImageRenderTarget": {
      "identifier": "ImageRenderTarget",
      "crate": "bevy_render",
      "path": "bevy_render::camera::camera::ImageRenderTarget",
      "documentation": " A render target that renders to an [`Image`].",
      "layout": {
        "kind": "Struct",
        "name": "ImageRenderTarget",
        "fields": [
          {
            "name": "handle",
            "type": "bevy_asset::handle::Handle<bevy_image::image::Image>"
          },
          {
            "name": "scale_factor",
            "type": "bevy_math::float_ord::FloatOrd"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::camera::camera::MipBias": {
      "identifier": "MipBias",
      "crate": "bevy_render",
      "path": "bevy_render::camera::camera::MipBias",
      "documentation": " Camera component specifying a mip bias to apply when sampling from material textures.\n\n Often used in conjunction with antialiasing post-process effects to reduce textures blurriness.",
      "layout": {
        "kind": "TupleStruct",
        "name": "MipBias",
        "fields": [
          {
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::camera::camera::RenderTarget": {
      "identifier": "RenderTarget",
      "crate": "bevy_render",
      "path": "bevy_render::camera::camera::RenderTarget",
      "documentation": " The \"target\" that a [`Camera`] will render to. For example, this could be a [`Window`]\n swapchain or an [`Image`].",
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Window",
          "fields": [
            {
              "type": "bevy_window::window::WindowRef"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Image",
          "fields": [
            {
              "type": "bevy_render::camera::camera::ImageRenderTarget"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "TextureView",
          "fields": [
            {
              "type": "bevy_render::camera::manual_texture_view::ManualTextureViewHandle"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::camera::camera::SubCameraView": {
      "identifier": "SubCameraView",
      "crate": "bevy_render",
      "path": "bevy_render::camera::camera::SubCameraView",
      "documentation": " Settings to define a camera sub view.\n\n When [`Camera::sub_camera_view`] is `Some`, only the sub-section of the\n image defined by `size` and `offset` (relative to the `full_size` of the\n whole image) is projected to the cameras viewport.\n\n Take the example of the following multi-monitor setup:\n ```css\n ┌───┬───┐\n │ A │ B │\n ├───┼───┤\n │ C │ D │\n └───┴───┘\n ```\n If each monitor is 1920x1080, the whole image will have a resolution of\n 3840x2160. For each monitor we can use a single camera with a viewport of\n the same size as the monitor it corresponds to. To ensure that the image is\n cohesive, we can use a different sub view on each camera:\n - Camera A: `full_size` = 3840x2160, `size` = 1920x1080, `offset` = 0,0\n - Camera B: `full_size` = 3840x2160, `size` = 1920x1080, `offset` = 1920,0\n - Camera C: `full_size` = 3840x2160, `size` = 1920x1080, `offset` = 0,1080\n - Camera D: `full_size` = 3840x2160, `size` = 1920x1080, `offset` =\n   1920,1080\n\n However since only the ratio between the values is important, they could all\n be divided by 120 and still produce the same image. Camera D would for\n example have the following values:\n `full_size` = 32x18, `size` = 16x9, `offset` = 16,9",
      "layout": {
        "kind": "Struct",
        "name": "SubCameraView",
        "fields": [
          {
            "name": "full_size",
            "type": "glam::UVec2"
          },
          {
            "name": "offset",
            "type": "glam::Vec2"
          },
          {
            "name": "size",
            "type": "glam::UVec2"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::camera::camera::TemporalJitter": {
      "identifier": "TemporalJitter",
      "crate": "bevy_render",
      "path": "bevy_render::camera::camera::TemporalJitter",
      "documentation": " A subpixel offset to jitter a perspective camera's frustum by.\n\n Useful for temporal rendering techniques.\n\n Do not use with [`OrthographicProjection`].\n\n [`OrthographicProjection`]: crate::camera::OrthographicProjection",
      "layout": {
        "kind": "Struct",
        "name": "TemporalJitter",
        "fields": [
          {
            "name": "offset",
            "type": "glam::Vec2"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::camera::camera::Viewport": {
      "identifier": "Viewport",
      "crate": "bevy_render",
      "path": "bevy_render::camera::camera::Viewport",
      "documentation": " Render viewport configuration for the [`Camera`] component.\n\n The viewport defines the area on the render target to which the camera renders its image.\n You can overlay multiple cameras in a single window using viewports to create effects like\n split screen, minimaps, and character viewers.",
      "layout": {
        "kind": "Struct",
        "name": "Viewport",
        "fields": [
          {
            "name": "physical_position",
            "type": "glam::UVec2"
          },
          {
            "name": "physical_size",
            "type": "glam::UVec2"
          },
          {
            "name": "depth",
            "type": "core::ops::Range<f32>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::camera::clear_color::ClearColor": {
      "identifier": "ClearColor",
      "crate": "bevy_render",
      "path": "bevy_render::camera::clear_color::ClearColor",
      "documentation": " A [`Resource`] that stores the color that is used to clear the screen between frames.\n\n This color appears as the \"background\" color for simple apps,\n when there are portions of the screen with nothing rendered.",
      "layout": {
        "kind": "TupleStruct",
        "name": "ClearColor",
        "fields": [
          {
            "type": "bevy_color::color::Color"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::camera::clear_color::ClearColorConfig": {
      "identifier": "ClearColorConfig",
      "crate": "bevy_render",
      "path": "bevy_render::camera::clear_color::ClearColorConfig",
      "documentation": " For a camera, specifies the color used to clear the viewport before rendering.",
      "layout": [
        {
          "kind": "Unit",
          "name": "Default"
        },
        {
          "kind": "TupleStruct",
          "name": "Custom",
          "fields": [
            {
              "type": "bevy_color::color::Color"
            }
          ]
        },
        {
          "kind": "Unit",
          "name": "None"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::camera::manual_texture_view::ManualTextureViewHandle": {
      "identifier": "ManualTextureViewHandle",
      "crate": "bevy_render",
      "path": "bevy_render::camera::manual_texture_view::ManualTextureViewHandle",
      "documentation": " A unique id that corresponds to a specific [`ManualTextureView`] in the [`ManualTextureViews`] collection.",
      "layout": {
        "kind": "TupleStruct",
        "name": "ManualTextureViewHandle",
        "fields": [
          {
            "type": "u32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::camera::projection::CustomProjection": {
      "identifier": "CustomProjection",
      "crate": "bevy_render",
      "path": "bevy_render::camera::projection::CustomProjection",
      "documentation": " Holds a dynamic [`CameraProjection`] trait object. Use [`Projection::custom()`] to construct a\n custom projection.\n\n The contained dynamic object can be downcast into a static type using [`CustomProjection::get`].",
      "layout": {
        "kind": "Struct",
        "name": "CustomProjection"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::camera::projection::OrthographicProjection": {
      "identifier": "OrthographicProjection",
      "crate": "bevy_render",
      "path": "bevy_render::camera::projection::OrthographicProjection",
      "documentation": " Project a 3D space onto a 2D surface using parallel lines, i.e., unlike [`PerspectiveProjection`],\n the size of objects remains the same regardless of their distance to the camera.\n\n The volume contained in the projection is called the *view frustum*. Since the viewport is rectangular\n and projection lines are parallel, the view frustum takes the shape of a cuboid.\n\n Note that the scale of the projection and the apparent size of objects are inversely proportional.\n As the size of the projection increases, the size of objects decreases.\n\n # Examples\n\n Configure the orthographic projection to one world unit per 100 window pixels:\n\n ```\n # use bevy_render::camera::{OrthographicProjection, Projection, ScalingMode};\n let projection = Projection::Orthographic(OrthographicProjection {\n     scaling_mode: ScalingMode::WindowSize,\n     scale: 0.01,\n     ..OrthographicProjection::default_2d()\n });\n ```",
      "layout": {
        "kind": "Struct",
        "name": "OrthographicProjection",
        "fields": [
          {
            "name": "near",
            "type": "f32"
          },
          {
            "name": "far",
            "type": "f32"
          },
          {
            "name": "viewport_origin",
            "type": "glam::Vec2"
          },
          {
            "name": "scaling_mode",
            "type": "bevy_render::camera::projection::ScalingMode"
          },
          {
            "name": "scale",
            "type": "f32"
          },
          {
            "name": "area",
            "type": "bevy_math::rects::rect::Rect"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::camera::projection::PerspectiveProjection": {
      "identifier": "PerspectiveProjection",
      "crate": "bevy_render",
      "path": "bevy_render::camera::projection::PerspectiveProjection",
      "documentation": " A 3D camera projection in which distant objects appear smaller than close objects.",
      "layout": {
        "kind": "Struct",
        "name": "PerspectiveProjection",
        "fields": [
          {
            "name": "fov",
            "type": "f32"
          },
          {
            "name": "aspect_ratio",
            "type": "f32"
          },
          {
            "name": "near",
            "type": "f32"
          },
          {
            "name": "far",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::camera::projection::Projection": {
      "identifier": "Projection",
      "crate": "bevy_render",
      "path": "bevy_render::camera::projection::Projection",
      "documentation": " Component that defines how to compute a [`Camera`]'s projection matrix.\n\n Common projections, like perspective and orthographic, are provided out of the box to handle the\n majority of use cases. Custom projections can be added using the [`CameraProjection`] trait and\n the [`Projection::custom`] constructor.\n\n ## What's a projection?\n\n A camera projection essentially describes how 3d points from the point of view of a camera are\n projected onto a 2d screen. This is where properties like a camera's field of view are defined.\n More specifically, a projection is a 4x4 matrix that transforms points from view space (the\n point of view of the camera) into clip space. Clip space is almost, but not quite, equivalent to\n the rectangle that is rendered to your screen, with a depth axis. Any points that land outside\n the bounds of this cuboid are \"clipped\" and not rendered.\n\n You can also think of the projection as the thing that describes the shape of a camera's\n frustum: the volume in 3d space that is visible to a camera.\n\n [`Camera`]: crate::camera::Camera",
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Perspective",
          "fields": [
            {
              "type": "bevy_render::camera::projection::PerspectiveProjection"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Orthographic",
          "fields": [
            {
              "type": "bevy_render::camera::projection::OrthographicProjection"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Custom",
          "fields": [
            {
              "type": "bevy_render::camera::projection::CustomProjection"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::camera::projection::ScalingMode": {
      "identifier": "ScalingMode",
      "crate": "bevy_render",
      "path": "bevy_render::camera::projection::ScalingMode",
      "documentation": " Scaling mode for [`OrthographicProjection`].\n\n The effect of these scaling modes are combined with the [`OrthographicProjection::scale`] property.\n\n For example, if the scaling mode is `ScalingMode::Fixed { width: 100.0, height: 300 }` and the scale is `2.0`,\n the projection will be 200 world units wide and 600 world units tall.\n\n # Examples\n\n Configure the orthographic projection to two world units per window height:\n\n ```\n # use bevy_render::camera::{OrthographicProjection, Projection, ScalingMode};\n let projection = Projection::Orthographic(OrthographicProjection {\n    scaling_mode: ScalingMode::FixedVertical { viewport_height: 2.0 },\n    ..OrthographicProjection::default_2d()\n });\n ```",
      "layout": [
        {
          "kind": "Unit",
          "name": "WindowSize"
        },
        {
          "kind": "Struct",
          "name": "Fixed",
          "fields": [
            {
              "name": "width",
              "type": "f32"
            },
            {
              "name": "height",
              "type": "f32"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "AutoMin",
          "fields": [
            {
              "name": "min_width",
              "type": "f32"
            },
            {
              "name": "min_height",
              "type": "f32"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "AutoMax",
          "fields": [
            {
              "name": "max_width",
              "type": "f32"
            },
            {
              "name": "max_height",
              "type": "f32"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "FixedVertical",
          "fields": [
            {
              "name": "viewport_height",
              "type": "f32"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "FixedHorizontal",
          "fields": [
            {
              "name": "viewport_width",
              "type": "f32"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::experimental::occlusion_culling::OcclusionCulling": {
      "identifier": "OcclusionCulling",
      "crate": "bevy_render",
      "path": "bevy_render::experimental::occlusion_culling::OcclusionCulling",
      "documentation": " Add this component to a view in order to enable experimental GPU occlusion\n culling.\n\n *Bevy's occlusion culling is currently marked as experimental.* There are\n known issues whereby, in rare circumstances, occlusion culling can result in\n meshes being culled that shouldn't be (i.e. meshes that turn invisible).\n Please try it out and report issues.\n\n *Occlusion culling* allows Bevy to avoid rendering objects that are fully\n behind other opaque or alpha tested objects. This is different from, and\n complements, depth fragment rejection as the `DepthPrepass` enables. While\n depth rejection allows Bevy to avoid rendering *pixels* that are behind\n other objects, the GPU still has to examine those pixels to reject them,\n which requires transforming the vertices of the objects and performing\n skinning if the objects were skinned. Occlusion culling allows the GPU to go\n a step further, avoiding even transforming the vertices of objects that it\n can quickly prove to be behind other objects.\n\n Occlusion culling inherently has some overhead, because Bevy must examine\n the objects' bounding boxes, and create an acceleration structure\n (hierarchical Z-buffer) to perform the occlusion tests. Therefore, occlusion\n culling is disabled by default. Only enable it if you measure it to be a\n speedup on your scene. Note that, because Bevy's occlusion culling runs on\n the GPU and is quite efficient, it's rare for occlusion culling to result in\n a significant slowdown.\n\n Occlusion culling currently requires a `DepthPrepass`. If no depth prepass\n is present on the view, the [`OcclusionCulling`] component will be ignored.\n Additionally, occlusion culling is currently incompatible with deferred\n shading; including both `DeferredPrepass` and [`OcclusionCulling`] results\n in unspecified behavior.\n\n The algorithm that Bevy uses is known as [*two-phase occlusion culling*].\n When you enable occlusion culling, Bevy splits the depth prepass into two:\n an *early* depth prepass and a *late* depth prepass. The early depth prepass\n renders all the meshes that were visible last frame to produce a\n conservative approximation of the depth buffer. Then, after producing an\n acceleration structure known as a hierarchical Z-buffer or depth pyramid,\n Bevy tests the bounding boxes of all meshes against that depth buffer. Those\n that can be quickly proven to be behind the geometry rendered during the\n early depth prepass are skipped entirely. The other potentially-visible\n meshes are rendered during the late prepass, and finally all the visible\n meshes are rendered as usual during the opaque, transparent, etc. passes.\n\n Unlike other occlusion culling systems you may be familiar with, Bevy's\n occlusion culling is fully dynamic and requires no baking step. The CPU\n overhead is minimal. Large skinned meshes and other dynamic objects can\n occlude other objects.\n\n [*two-phase occlusion culling*]:\n https://medium.com/@mil_kru/two-pass-occlusion-culling-4100edcad501",
      "layout": {
        "kind": "Struct",
        "name": "OcclusionCulling"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::globals::GlobalsUniform": {
      "identifier": "GlobalsUniform",
      "crate": "bevy_render",
      "path": "bevy_render::globals::GlobalsUniform",
      "documentation": " Contains global values useful when writing shaders.\n Currently only contains values related to time.",
      "layout": {
        "kind": "Struct",
        "name": "GlobalsUniform",
        "fields": [
          {
            "name": "time",
            "type": "f32"
          },
          {
            "name": "delta_time",
            "type": "f32"
          },
          {
            "name": "frame_count",
            "type": "u32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::mesh::components::Mesh2d": {
      "identifier": "Mesh2d",
      "crate": "bevy_render",
      "path": "bevy_render::mesh::components::Mesh2d",
      "documentation": " A component for 2D meshes. Requires a [`MeshMaterial2d`] to be rendered, commonly using a [`ColorMaterial`].\n\n [`MeshMaterial2d`]: <https://docs.rs/bevy/latest/bevy/sprite/struct.MeshMaterial2d.html>\n [`ColorMaterial`]: <https://docs.rs/bevy/latest/bevy/sprite/struct.ColorMaterial.html>\n\n # Example\n\n ```ignore\n # use bevy_sprite::{ColorMaterial, Mesh2d, MeshMaterial2d};\n # use bevy_ecs::prelude::*;\n # use bevy_render::mesh::Mesh;\n # use bevy_color::palettes::basic::RED;\n # use bevy_asset::Assets;\n # use bevy_math::primitives::Circle;\n #\n // Spawn an entity with a mesh using `ColorMaterial`.\n fn setup(\n     mut commands: Commands,\n     mut meshes: ResMut<Assets<Mesh>>,\n     mut materials: ResMut<Assets<ColorMaterial>>,\n ) {\n     commands.spawn((\n         Mesh2d(meshes.add(Circle::new(50.0))),\n         MeshMaterial2d(materials.add(ColorMaterial::from_color(RED))),\n     ));\n }\n ```",
      "layout": {
        "kind": "TupleStruct",
        "name": "Mesh2d",
        "fields": [
          {
            "type": "bevy_asset::handle::Handle<bevy_mesh::mesh::Mesh>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::mesh::components::Mesh3d": {
      "identifier": "Mesh3d",
      "crate": "bevy_render",
      "path": "bevy_render::mesh::components::Mesh3d",
      "documentation": " A component for 3D meshes. Requires a [`MeshMaterial3d`] to be rendered, commonly using a [`StandardMaterial`].\n\n [`MeshMaterial3d`]: <https://docs.rs/bevy/latest/bevy/pbr/struct.MeshMaterial3d.html>\n [`StandardMaterial`]: <https://docs.rs/bevy/latest/bevy/pbr/struct.StandardMaterial.html>\n\n # Example\n\n ```ignore\n # use bevy_pbr::{Material, MeshMaterial3d, StandardMaterial};\n # use bevy_ecs::prelude::*;\n # use bevy_render::mesh::{Mesh, Mesh3d};\n # use bevy_color::palettes::basic::RED;\n # use bevy_asset::Assets;\n # use bevy_math::primitives::Capsule3d;\n #\n // Spawn an entity with a mesh using `StandardMaterial`.\n fn setup(\n     mut commands: Commands,\n     mut meshes: ResMut<Assets<Mesh>>,\n     mut materials: ResMut<Assets<StandardMaterial>>,\n ) {\n     commands.spawn((\n         Mesh3d(meshes.add(Capsule3d::default())),\n         MeshMaterial3d(materials.add(StandardMaterial {\n             base_color: RED.into(),\n             ..Default::default()\n         })),\n     ));\n }\n ```",
      "layout": {
        "kind": "TupleStruct",
        "name": "Mesh3d",
        "fields": [
          {
            "type": "bevy_asset::handle::Handle<bevy_mesh::mesh::Mesh>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::primitives::Aabb": {
      "identifier": "Aabb",
      "crate": "bevy_render",
      "path": "bevy_render::primitives::Aabb",
      "documentation": " An axis-aligned bounding box, defined by:\n - a center,\n - the distances from the center to each faces along the axis,\n   the faces are orthogonal to the axis.\n\n It is typically used as a component on an entity to represent the local space\n occupied by this entity, with faces orthogonal to its local axis.\n\n This component is notably used during \"frustum culling\", a process to determine\n if an entity should be rendered by a [`Camera`] if its bounding box intersects\n with the camera's [`Frustum`].\n\n It will be added automatically by the systems in [`CalculateBounds`] to entities that:\n - could be subject to frustum culling, for example with a [`Mesh3d`]\n   or `Sprite` component,\n - don't have the [`NoFrustumCulling`] component.\n\n It won't be updated automatically if the space occupied by the entity changes,\n for example if the vertex positions of a [`Mesh3d`] are updated.\n\n [`Camera`]: crate::camera::Camera\n [`NoFrustumCulling`]: crate::view::visibility::NoFrustumCulling\n [`CalculateBounds`]: crate::view::visibility::VisibilitySystems::CalculateBounds\n [`Mesh3d`]: crate::mesh::Mesh",
      "layout": {
        "kind": "Struct",
        "name": "Aabb",
        "fields": [
          {
            "name": "center",
            "type": "glam::Vec3A"
          },
          {
            "name": "half_extents",
            "type": "glam::Vec3A"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::primitives::CascadesFrusta": {
      "identifier": "CascadesFrusta",
      "crate": "bevy_render",
      "path": "bevy_render::primitives::CascadesFrusta",
      "layout": {
        "kind": "Struct",
        "name": "CascadesFrusta"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::primitives::CubemapFrusta": {
      "identifier": "CubemapFrusta",
      "crate": "bevy_render",
      "path": "bevy_render::primitives::CubemapFrusta",
      "layout": {
        "kind": "Struct",
        "name": "CubemapFrusta"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::primitives::Frustum": {
      "identifier": "Frustum",
      "crate": "bevy_render",
      "path": "bevy_render::primitives::Frustum",
      "documentation": " A region of 3D space defined by the intersection of 6 [`HalfSpace`]s.\n\n Frustums are typically an apex-truncated square pyramid (a pyramid without the top) or a cuboid.\n\n Half spaces are ordered left, right, top, bottom, near, far. The normal vectors\n of the half-spaces point towards the interior of the frustum.\n\n A frustum component is used on an entity with a [`Camera`] component to\n determine which entities will be considered for rendering by this camera.\n All entities with an [`Aabb`] component that are not contained by (or crossing\n the boundary of) the frustum will not be rendered, and not be used in rendering computations.\n\n This process is called frustum culling, and entities can opt out of it using\n the [`NoFrustumCulling`] component.\n\n The frustum component is typically added automatically for cameras, either `Camera2d` or `Camera3d`.\n It is usually updated automatically by [`update_frusta`] from the\n [`CameraProjection`] component and [`GlobalTransform`] of the camera entity.\n\n [`Camera`]: crate::camera::Camera\n [`NoFrustumCulling`]: crate::view::visibility::NoFrustumCulling\n [`update_frusta`]: crate::view::visibility::update_frusta\n [`CameraProjection`]: crate::camera::CameraProjection\n [`GlobalTransform`]: bevy_transform::components::GlobalTransform",
      "layout": {
        "kind": "Struct",
        "name": "Frustum"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::storage::ShaderStorageBuffer": {
      "identifier": "ShaderStorageBuffer",
      "crate": "bevy_render",
      "path": "bevy_render::storage::ShaderStorageBuffer",
      "documentation": " A storage buffer that is prepared as a [`RenderAsset`] and uploaded to the GPU.",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::sync_world::SyncToRenderWorld": {
      "identifier": "SyncToRenderWorld",
      "crate": "bevy_render",
      "path": "bevy_render::sync_world::SyncToRenderWorld",
      "documentation": " Marker component that indicates that its entity needs to be synchronized to the render world.\n\n This component is automatically added as a required component by [`ExtractComponentPlugin`] and [`SyncComponentPlugin`].\n For more information see [`SyncWorldPlugin`].\n\n NOTE: This component should persist throughout the entity's entire lifecycle.\n If this component is removed from its entity, the entity will be despawned.\n\n [`ExtractComponentPlugin`]: crate::extract_component::ExtractComponentPlugin\n [`SyncComponentPlugin`]: crate::sync_component::SyncComponentPlugin",
      "layout": {
        "kind": "Struct",
        "name": "SyncToRenderWorld"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::view::ColorGrading": {
      "identifier": "ColorGrading",
      "crate": "bevy_render",
      "path": "bevy_render::view::ColorGrading",
      "documentation": " Configures filmic color grading parameters to adjust the image appearance.\n\n Color grading is applied just before tonemapping for a given\n [`Camera`](crate::camera::Camera) entity, with the sole exception of the\n `post_saturation` value in [`ColorGradingGlobal`], which is applied after\n tonemapping.",
      "layout": {
        "kind": "Struct",
        "name": "ColorGrading",
        "fields": [
          {
            "name": "global",
            "type": "bevy_render::view::ColorGradingGlobal"
          },
          {
            "name": "shadows",
            "type": "bevy_render::view::ColorGradingSection"
          },
          {
            "name": "midtones",
            "type": "bevy_render::view::ColorGradingSection"
          },
          {
            "name": "highlights",
            "type": "bevy_render::view::ColorGradingSection"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::view::ColorGradingGlobal": {
      "identifier": "ColorGradingGlobal",
      "crate": "bevy_render",
      "path": "bevy_render::view::ColorGradingGlobal",
      "documentation": " Filmic color grading values applied to the image as a whole (as opposed to\n individual sections, like shadows and highlights).",
      "layout": {
        "kind": "Struct",
        "name": "ColorGradingGlobal",
        "fields": [
          {
            "name": "exposure",
            "type": "f32"
          },
          {
            "name": "temperature",
            "type": "f32"
          },
          {
            "name": "tint",
            "type": "f32"
          },
          {
            "name": "hue",
            "type": "f32"
          },
          {
            "name": "post_saturation",
            "type": "f32"
          },
          {
            "name": "midtones_range",
            "type": "core::ops::Range<f32>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::view::ColorGradingSection": {
      "identifier": "ColorGradingSection",
      "crate": "bevy_render",
      "path": "bevy_render::view::ColorGradingSection",
      "documentation": " A section of color grading values that can be selectively applied to\n shadows, midtones, and highlights.",
      "layout": {
        "kind": "Struct",
        "name": "ColorGradingSection",
        "fields": [
          {
            "name": "saturation",
            "type": "f32"
          },
          {
            "name": "contrast",
            "type": "f32"
          },
          {
            "name": "gamma",
            "type": "f32"
          },
          {
            "name": "gain",
            "type": "f32"
          },
          {
            "name": "lift",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::view::Msaa": {
      "identifier": "Msaa",
      "crate": "bevy_render",
      "path": "bevy_render::view::Msaa",
      "documentation": " Component for configuring the number of samples for [Multi-Sample Anti-Aliasing](https://en.wikipedia.org/wiki/Multisample_anti-aliasing)\n for a [`Camera`](crate::camera::Camera).\n\n Defaults to 4 samples. A higher number of samples results in smoother edges.\n\n Some advanced rendering features may require that MSAA is disabled.\n\n Note that the web currently only supports 1 or 4 samples.",
      "layout": [
        {
          "kind": "Unit",
          "name": "Off"
        },
        {
          "kind": "Unit",
          "name": "Sample2"
        },
        {
          "kind": "Unit",
          "name": "Sample4"
        },
        {
          "kind": "Unit",
          "name": "Sample8"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::view::visibility::InheritedVisibility": {
      "identifier": "InheritedVisibility",
      "crate": "bevy_render",
      "path": "bevy_render::view::visibility::InheritedVisibility",
      "documentation": " Whether or not an entity is visible in the hierarchy.\n This will not be accurate until [`VisibilityPropagate`] runs in the [`PostUpdate`] schedule.\n\n If this is false, then [`ViewVisibility`] should also be false.\n\n [`VisibilityPropagate`]: VisibilitySystems::VisibilityPropagate",
      "layout": {
        "kind": "TupleStruct",
        "name": "InheritedVisibility",
        "fields": [
          {
            "type": "bool"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::view::visibility::NoFrustumCulling": {
      "identifier": "NoFrustumCulling",
      "crate": "bevy_render",
      "path": "bevy_render::view::visibility::NoFrustumCulling",
      "documentation": " Use this component to opt-out of built-in frustum culling for entities, see\n [`Frustum`].\n\n It can be used for example:\n - when a [`Mesh`] is updated but its [`Aabb`] is not, which might happen with animations,\n - when using some light effects, like wanting a [`Mesh`] out of the [`Frustum`]\n   to appear in the reflection of a [`Mesh`] within.",
      "layout": {
        "kind": "Struct",
        "name": "NoFrustumCulling"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::view::visibility::ViewVisibility": {
      "identifier": "ViewVisibility",
      "crate": "bevy_render",
      "path": "bevy_render::view::visibility::ViewVisibility",
      "documentation": " Algorithmically-computed indication of whether an entity is visible and should be extracted for rendering.\n\n Each frame, this will be reset to `false` during [`VisibilityPropagate`] systems in [`PostUpdate`].\n Later in the frame, systems in [`CheckVisibility`] will mark any visible entities using [`ViewVisibility::set`].\n Because of this, values of this type will be marked as changed every frame, even when they do not change.\n\n If you wish to add custom visibility system that sets this value, make sure you add it to the [`CheckVisibility`] set.\n\n [`VisibilityPropagate`]: VisibilitySystems::VisibilityPropagate\n [`CheckVisibility`]: VisibilitySystems::CheckVisibility",
      "layout": {
        "kind": "TupleStruct",
        "name": "ViewVisibility",
        "fields": [
          {
            "type": "bool"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::view::visibility::Visibility": {
      "identifier": "Visibility",
      "crate": "bevy_render",
      "path": "bevy_render::view::visibility::Visibility",
      "documentation": " User indication of whether an entity is visible. Propagates down the entity hierarchy.\n\n If an entity is hidden in this way, all [`Children`] (and all of their children and so on) who\n are set to [`Inherited`](Self::Inherited) will also be hidden.\n\n This is done by the `visibility_propagate_system` which uses the entity hierarchy and\n `Visibility` to set the values of each entity's [`InheritedVisibility`] component.",
      "layout": [
        {
          "kind": "Unit",
          "name": "Inherited"
        },
        {
          "kind": "Unit",
          "name": "Hidden"
        },
        {
          "kind": "Unit",
          "name": "Visible"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::view::visibility::VisibilityClass": {
      "identifier": "VisibilityClass",
      "crate": "bevy_render",
      "path": "bevy_render::view::visibility::VisibilityClass",
      "documentation": " A bucket into which we group entities for the purposes of visibility.\n\n Bevy's various rendering subsystems (3D, 2D, UI, etc.) want to be able to\n quickly winnow the set of entities to only those that the subsystem is\n tasked with rendering, to avoid spending time examining irrelevant entities.\n At the same time, Bevy wants the [`check_visibility`] system to determine\n all entities' visibilities at the same time, regardless of what rendering\n subsystem is responsible for drawing them. Additionally, your application\n may want to add more types of renderable objects that Bevy determines\n visibility for just as it does for Bevy's built-in objects.\n\n The solution to this problem is *visibility classes*. A visibility class is\n a type, typically the type of a component, that represents the subsystem\n that renders it: for example, `Mesh3d`, `Mesh2d`, and `Sprite`. The\n [`VisibilityClass`] component stores the visibility class or classes that\n the entity belongs to. (Generally, an object will belong to only one\n visibility class, but in rare cases it may belong to multiple.)\n\n When adding a new renderable component, you'll typically want to write an\n add-component hook that adds the type ID of that component to the\n [`VisibilityClass`] array. See `custom_phase_item` for an example.",
      "layout": {
        "kind": "TupleStruct",
        "name": "VisibilityClass",
        "fields": [
          {
            "type": "smallvec::SmallVec<[core::any::TypeId; 1]>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::view::visibility::VisibleEntities": {
      "identifier": "VisibleEntities",
      "crate": "bevy_render",
      "path": "bevy_render::view::visibility::VisibleEntities",
      "documentation": " Collection of entities visible from the current view.\n\n This component contains all entities which are visible from the currently\n rendered view. The collection is updated automatically by the [`VisibilitySystems::CheckVisibility`]\n system set. Renderers can use the equivalent [`RenderVisibleEntities`] to optimize rendering of\n a particular view, to prevent drawing items not visible from that view.\n\n This component is intended to be attached to the same entity as the [`Camera`] and\n the [`Frustum`] defining the view.",
      "layout": {
        "kind": "Struct",
        "name": "VisibleEntities"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::view::visibility::range::VisibilityRange": {
      "identifier": "VisibilityRange",
      "crate": "bevy_render",
      "path": "bevy_render::view::visibility::range::VisibilityRange",
      "documentation": " Specifies the range of distances that this entity must be from the camera in\n order to be rendered.\n\n This is also known as *hierarchical level of detail* or *HLOD*.\n\n Use this component when you want to render a high-polygon mesh when the\n camera is close and a lower-polygon mesh when the camera is far away. This\n is a common technique for improving performance, because fine details are\n hard to see in a mesh at a distance. To avoid an artifact known as *popping*\n between levels, each level has a *margin*, within which the object\n transitions gradually from invisible to visible using a dithering effect.\n\n You can also use this feature to replace multiple meshes with a single mesh\n when the camera is distant. This is the reason for the term \"*hierarchical*\n level of detail\". Reducing the number of meshes can be useful for reducing\n drawcall count. Note that you must place the [`VisibilityRange`] component\n on each entity you want to be part of a LOD group, as [`VisibilityRange`]\n isn't automatically propagated down to children.\n\n A typical use of this feature might look like this:\n\n | Entity                  | `start_margin` | `end_margin` |\n |-------------------------|----------------|--------------|\n | Root                    | N/A            | N/A          |\n | ├─ High-poly mesh       | [0, 0)         | [20, 25)     |\n | ├─ Low-poly mesh        | [20, 25)       | [70, 75)     |\n | └─ Billboard *imposter* | [70, 75)       | [150, 160)   |\n\n With this setup, the user will see a high-poly mesh when the camera is\n closer than 20 units. As the camera zooms out, between 20 units to 25 units,\n the high-poly mesh will gradually fade to a low-poly mesh. When the camera\n is 70 to 75 units away, the low-poly mesh will fade to a single textured\n quad. And between 150 and 160 units, the object fades away entirely. Note\n that the `end_margin` of a higher LOD is always identical to the\n `start_margin` of the next lower LOD; this is important for the crossfade\n effect to function properly.",
      "layout": {
        "kind": "Struct",
        "name": "VisibilityRange",
        "fields": [
          {
            "name": "start_margin",
            "type": "core::ops::Range<f32>"
          },
          {
            "name": "end_margin",
            "type": "core::ops::Range<f32>"
          },
          {
            "name": "use_aabb",
            "type": "bool"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::view::visibility::render_layers::RenderLayers": {
      "identifier": "RenderLayers",
      "crate": "bevy_render",
      "path": "bevy_render::view::visibility::render_layers::RenderLayers",
      "documentation": " Describes which rendering layers an entity belongs to.\n\n Cameras with this component will only render entities with intersecting\n layers.\n\n Entities may belong to one or more layers, or no layer at all.\n\n The [`Default`] instance of `RenderLayers` contains layer `0`, the first layer.\n\n An entity with this component without any layers is invisible.\n\n Entities without this component belong to layer `0`.",
      "layout": {
        "kind": "TupleStruct",
        "name": "RenderLayers",
        "fields": [
          {
            "type": "smallvec::SmallVec<[u64; 1]>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::view::window::screenshot::Screenshot": {
      "identifier": "Screenshot",
      "crate": "bevy_render",
      "path": "bevy_render::view::window::screenshot::Screenshot",
      "documentation": " A component that signals to the renderer to capture a screenshot this frame.\n\n This component should be spawned on a new entity with an observer that will trigger\n with [`ScreenshotCaptured`] when the screenshot is ready.\n\n Screenshots are captured asynchronously and may not be available immediately after the frame\n that the component is spawned on. The observer should be used to handle the screenshot when it\n is ready.\n\n Note that the screenshot entity will be despawned after the screenshot is captured and the\n observer is triggered.\n\n # Usage\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_render::view::screenshot::{save_to_disk, Screenshot};\n\n fn take_screenshot(mut commands: Commands) {\n    commands.spawn(Screenshot::primary_window())\n       .observe(save_to_disk(\"screenshot.png\"));\n }\n ```",
      "layout": {
        "kind": "TupleStruct",
        "name": "Screenshot",
        "fields": [
          {
            "type": "bevy_render::camera::camera::RenderTarget"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_render::view::window::screenshot::ScreenshotCaptured": {
      "identifier": "ScreenshotCaptured",
      "crate": "bevy_render",
      "path": "bevy_render::view::window::screenshot::ScreenshotCaptured",
      "layout": {
        "kind": "TupleStruct",
        "name": "ScreenshotCaptured",
        "fields": [
          {
            "type": "bevy_image::image::Image"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_scene::components::DynamicSceneRoot": {
      "identifier": "DynamicSceneRoot",
      "crate": "bevy_scene",
      "path": "bevy_scene::components::DynamicSceneRoot",
      "documentation": " Adding this component will spawn the scene as a child of that entity.\n Once it's spawned, the entity will have a [`SceneInstance`](crate::SceneInstance) component.",
      "layout": {
        "kind": "TupleStruct",
        "name": "DynamicSceneRoot",
        "fields": [
          {
            "type": "bevy_asset::handle::Handle<bevy_scene::dynamic_scene::DynamicScene>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_scene::components::SceneRoot": {
      "identifier": "SceneRoot",
      "crate": "bevy_scene",
      "path": "bevy_scene::components::SceneRoot",
      "documentation": " Adding this component will spawn the scene as a child of that entity.\n Once it's spawned, the entity will have a [`SceneInstance`](crate::SceneInstance) component.",
      "layout": {
        "kind": "TupleStruct",
        "name": "SceneRoot",
        "fields": [
          {
            "type": "bevy_asset::handle::Handle<bevy_scene::scene::Scene>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_sprite::mesh2d::color_material::ColorMaterial": {
      "identifier": "ColorMaterial",
      "crate": "bevy_sprite",
      "path": "bevy_sprite::mesh2d::color_material::ColorMaterial",
      "documentation": " A [2d material](Material2d) that renders [2d meshes](crate::Mesh2d) with a texture tinted by a uniform color",
      "layout": {
        "kind": "Struct",
        "name": "ColorMaterial",
        "fields": [
          {
            "name": "color",
            "type": "bevy_color::color::Color"
          },
          {
            "name": "alpha_mode",
            "type": "bevy_sprite::mesh2d::material::AlphaMode2d"
          },
          {
            "name": "uv_transform",
            "type": "glam::Affine2"
          },
          {
            "name": "texture",
            "type": "core::option::Option<bevy_asset::handle::Handle<bevy_image::image::Image>>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_sprite::mesh2d::material::AlphaMode2d": {
      "identifier": "AlphaMode2d",
      "crate": "bevy_sprite",
      "path": "bevy_sprite::mesh2d::material::AlphaMode2d",
      "documentation": " Sets how a 2d material's base color alpha channel is used for transparency.\n Currently, this only works with [`Mesh2d`]. Sprites are always transparent.\n\n This is very similar to [`AlphaMode`](bevy_render::alpha::AlphaMode) but this only applies to 2d meshes.\n We use a separate type because 2d doesn't support all the transparency modes that 3d does.",
      "layout": [
        {
          "kind": "Unit",
          "name": "Opaque"
        },
        {
          "kind": "TupleStruct",
          "name": "Mask",
          "fields": [
            {
              "type": "f32"
            }
          ]
        },
        {
          "kind": "Unit",
          "name": "Blend"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_sprite::picking_backend::SpritePickingCamera": {
      "identifier": "SpritePickingCamera",
      "crate": "bevy_sprite",
      "path": "bevy_sprite::picking_backend::SpritePickingCamera",
      "documentation": " An optional component that marks cameras that should be used in the [`SpritePickingPlugin`].\n\n Only needed if [`SpritePickingSettings::require_markers`] is set to `true`, and ignored\n otherwise.",
      "layout": {
        "kind": "Struct",
        "name": "SpritePickingCamera"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_sprite::picking_backend::SpritePickingMode": {
      "identifier": "SpritePickingMode",
      "crate": "bevy_sprite",
      "path": "bevy_sprite::picking_backend::SpritePickingMode",
      "documentation": " How should the [`SpritePickingPlugin`] handle picking and how should it handle transparent pixels",
      "layout": [
        {
          "kind": "Unit",
          "name": "BoundingBox"
        },
        {
          "kind": "TupleStruct",
          "name": "AlphaThreshold",
          "fields": [
            {
              "type": "f32"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_sprite::picking_backend::SpritePickingSettings": {
      "identifier": "SpritePickingSettings",
      "crate": "bevy_sprite",
      "path": "bevy_sprite::picking_backend::SpritePickingSettings",
      "documentation": " Runtime settings for the [`SpritePickingPlugin`].",
      "layout": {
        "kind": "Struct",
        "name": "SpritePickingSettings",
        "fields": [
          {
            "name": "require_markers",
            "type": "bool"
          },
          {
            "name": "picking_mode",
            "type": "bevy_sprite::picking_backend::SpritePickingMode"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_sprite::sprite::Anchor": {
      "identifier": "Anchor",
      "crate": "bevy_sprite",
      "path": "bevy_sprite::sprite::Anchor",
      "documentation": " How a sprite is positioned relative to its [`Transform`].\n It defaults to `Anchor::Center`.",
      "layout": [
        {
          "kind": "Unit",
          "name": "Center"
        },
        {
          "kind": "Unit",
          "name": "BottomLeft"
        },
        {
          "kind": "Unit",
          "name": "BottomCenter"
        },
        {
          "kind": "Unit",
          "name": "BottomRight"
        },
        {
          "kind": "Unit",
          "name": "CenterLeft"
        },
        {
          "kind": "Unit",
          "name": "CenterRight"
        },
        {
          "kind": "Unit",
          "name": "TopLeft"
        },
        {
          "kind": "Unit",
          "name": "TopCenter"
        },
        {
          "kind": "Unit",
          "name": "TopRight"
        },
        {
          "kind": "TupleStruct",
          "name": "Custom",
          "fields": [
            {
              "type": "glam::Vec2"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_sprite::sprite::ScalingMode": {
      "identifier": "ScalingMode",
      "crate": "bevy_sprite",
      "path": "bevy_sprite::sprite::ScalingMode",
      "documentation": " Represents various modes for proportional scaling of a texture.\n\n Can be used in [`SpriteImageMode::Scale`].",
      "layout": [
        {
          "kind": "Unit",
          "name": "FillCenter"
        },
        {
          "kind": "Unit",
          "name": "FillStart"
        },
        {
          "kind": "Unit",
          "name": "FillEnd"
        },
        {
          "kind": "Unit",
          "name": "FitCenter"
        },
        {
          "kind": "Unit",
          "name": "FitStart"
        },
        {
          "kind": "Unit",
          "name": "FitEnd"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_sprite::sprite::Sprite": {
      "identifier": "Sprite",
      "crate": "bevy_sprite",
      "path": "bevy_sprite::sprite::Sprite",
      "documentation": " Describes a sprite to be rendered to a 2D camera",
      "layout": {
        "kind": "Struct",
        "name": "Sprite",
        "fields": [
          {
            "name": "image",
            "type": "bevy_asset::handle::Handle<bevy_image::image::Image>"
          },
          {
            "name": "texture_atlas",
            "type": "core::option::Option<bevy_image::texture_atlas::TextureAtlas>"
          },
          {
            "name": "color",
            "type": "bevy_color::color::Color"
          },
          {
            "name": "flip_x",
            "type": "bool"
          },
          {
            "name": "flip_y",
            "type": "bool"
          },
          {
            "name": "custom_size",
            "type": "core::option::Option<glam::Vec2>"
          },
          {
            "name": "rect",
            "type": "core::option::Option<bevy_math::rects::rect::Rect>"
          },
          {
            "name": "anchor",
            "type": "bevy_sprite::sprite::Anchor"
          },
          {
            "name": "image_mode",
            "type": "bevy_sprite::sprite::SpriteImageMode"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_sprite::sprite::SpriteImageMode": {
      "identifier": "SpriteImageMode",
      "crate": "bevy_sprite",
      "path": "bevy_sprite::sprite::SpriteImageMode",
      "documentation": " Controls how the image is altered when scaled.",
      "layout": [
        {
          "kind": "Unit",
          "name": "Auto"
        },
        {
          "kind": "TupleStruct",
          "name": "Scale",
          "fields": [
            {
              "type": "bevy_sprite::sprite::ScalingMode"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Sliced",
          "fields": [
            {
              "type": "bevy_sprite::texture_slice::slicer::TextureSlicer"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "Tiled",
          "fields": [
            {
              "name": "tile_x",
              "type": "bool"
            },
            {
              "name": "tile_y",
              "type": "bool"
            },
            {
              "name": "stretch_value",
              "type": "f32"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_sprite::texture_slice::border_rect::BorderRect": {
      "identifier": "BorderRect",
      "crate": "bevy_sprite",
      "path": "bevy_sprite::texture_slice::border_rect::BorderRect",
      "documentation": " Defines the extents of the border of a rectangle.\n\n This struct is used to represent thickness or offsets from the edges\n of a rectangle (left, right, top, and bottom), with values increasing inwards.",
      "layout": {
        "kind": "Struct",
        "name": "BorderRect",
        "fields": [
          {
            "name": "left",
            "type": "f32"
          },
          {
            "name": "right",
            "type": "f32"
          },
          {
            "name": "top",
            "type": "f32"
          },
          {
            "name": "bottom",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_sprite::texture_slice::slicer::SliceScaleMode": {
      "identifier": "SliceScaleMode",
      "crate": "bevy_sprite",
      "path": "bevy_sprite::texture_slice::slicer::SliceScaleMode",
      "documentation": " Defines how a texture slice scales when resized",
      "layout": [
        {
          "kind": "Unit",
          "name": "Stretch"
        },
        {
          "kind": "Struct",
          "name": "Tile",
          "fields": [
            {
              "name": "stretch_value",
              "type": "f32"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_sprite::texture_slice::slicer::TextureSlicer": {
      "identifier": "TextureSlicer",
      "crate": "bevy_sprite",
      "path": "bevy_sprite::texture_slice::slicer::TextureSlicer",
      "documentation": " Slices a texture using the **9-slicing** technique. This allows to reuse an image at various sizes\n without needing to prepare multiple assets. The associated texture will be split into nine portions,\n so that on resize the different portions scale or tile in different ways to keep the texture in proportion.\n\n For example, when resizing a 9-sliced texture the corners will remain unscaled while the other\n sections will be scaled or tiled.\n\n See [9-sliced](https://en.wikipedia.org/wiki/9-slice_scaling) textures.",
      "layout": {
        "kind": "Struct",
        "name": "TextureSlicer",
        "fields": [
          {
            "name": "border",
            "type": "bevy_sprite::texture_slice::border_rect::BorderRect"
          },
          {
            "name": "center_scale_mode",
            "type": "bevy_sprite::texture_slice::slicer::SliceScaleMode"
          },
          {
            "name": "sides_scale_mode",
            "type": "bevy_sprite::texture_slice::slicer::SliceScaleMode"
          },
          {
            "name": "max_corner_scale",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_system_reflection::ReflectableScheduleLabel": {
      "identifier": "ReflectableScheduleLabel",
      "crate": "bevy_system_reflection",
      "path": "bevy_system_reflection::ReflectableScheduleLabel",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "bevy_text::bounds::TextBounds": {
      "identifier": "TextBounds",
      "crate": "bevy_text",
      "path": "bevy_text::bounds::TextBounds",
      "documentation": " The maximum width and height of text. The text will wrap according to the specified size.\n\n Characters out of the bounds after wrapping will be truncated. Text is aligned according to the\n specified [`JustifyText`](crate::text::JustifyText).\n\n Note: only characters that are completely out of the bounds will be truncated, so this is not a\n reliable limit if it is necessary to contain the text strictly in the bounds. Currently this\n component is mainly useful for text wrapping only.",
      "layout": {
        "kind": "Struct",
        "name": "TextBounds",
        "fields": [
          {
            "name": "width",
            "type": "core::option::Option<f32>"
          },
          {
            "name": "height",
            "type": "core::option::Option<f32>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_text::glyph::GlyphAtlasInfo": {
      "identifier": "GlyphAtlasInfo",
      "crate": "bevy_text",
      "path": "bevy_text::glyph::GlyphAtlasInfo",
      "documentation": " Information about a glyph in an atlas.\n\n Rasterized glyphs are stored as rectangles\n in one or more [`FontAtlas`](crate::FontAtlas)es.\n\n Used in [`PositionedGlyph`] and [`FontAtlasSet`](crate::FontAtlasSet).",
      "layout": {
        "kind": "Struct",
        "name": "GlyphAtlasInfo",
        "fields": [
          {
            "name": "texture",
            "type": "bevy_asset::handle::Handle<bevy_image::image::Image>"
          },
          {
            "name": "texture_atlas",
            "type": "bevy_asset::handle::Handle<bevy_image::texture_atlas::TextureAtlasLayout>"
          },
          {
            "name": "location",
            "type": "bevy_text::glyph::GlyphAtlasLocation"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_text::glyph::GlyphAtlasLocation": {
      "identifier": "GlyphAtlasLocation",
      "crate": "bevy_text",
      "path": "bevy_text::glyph::GlyphAtlasLocation",
      "documentation": " The location of a glyph in an atlas,\n and how it should be positioned when placed.\n\n Used in [`GlyphAtlasInfo`] and [`FontAtlas`](crate::FontAtlas).",
      "layout": {
        "kind": "Struct",
        "name": "GlyphAtlasLocation",
        "fields": [
          {
            "name": "glyph_index",
            "type": "usize"
          },
          {
            "name": "offset",
            "type": "glam::IVec2"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_text::glyph::PositionedGlyph": {
      "identifier": "PositionedGlyph",
      "crate": "bevy_text",
      "path": "bevy_text::glyph::PositionedGlyph",
      "documentation": " A glyph of a font, typically representing a single character, positioned in screen space.\n\n Contains information about how and where to render a glyph.\n\n Used in [`TextPipeline::queue_text`](crate::TextPipeline::queue_text) and [`crate::TextLayoutInfo`] for rendering glyphs.",
      "layout": {
        "kind": "Struct",
        "name": "PositionedGlyph",
        "fields": [
          {
            "name": "position",
            "type": "glam::Vec2"
          },
          {
            "name": "size",
            "type": "glam::Vec2"
          },
          {
            "name": "atlas_info",
            "type": "bevy_text::glyph::GlyphAtlasInfo"
          },
          {
            "name": "span_index",
            "type": "usize"
          },
          {
            "name": "line_index",
            "type": "usize"
          },
          {
            "name": "byte_index",
            "type": "usize"
          },
          {
            "name": "byte_length",
            "type": "usize"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_text::pipeline::TextLayoutInfo": {
      "identifier": "TextLayoutInfo",
      "crate": "bevy_text",
      "path": "bevy_text::pipeline::TextLayoutInfo",
      "documentation": " Render information for a corresponding text block.\n\n Contains scaled glyphs and their size. Generated via [`TextPipeline::queue_text`] when an entity has\n [`TextLayout`] and [`ComputedTextBlock`] components.",
      "layout": {
        "kind": "Struct",
        "name": "TextLayoutInfo",
        "fields": [
          {
            "name": "glyphs",
            "type": "alloc::vec::Vec<bevy_text::glyph::PositionedGlyph>"
          },
          {
            "name": "size",
            "type": "glam::Vec2"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_text::text2d::Text2d": {
      "identifier": "Text2d",
      "crate": "bevy_text",
      "path": "bevy_text::text2d::Text2d",
      "documentation": " The top-level 2D text component.\n\n Adding `Text2d` to an entity will pull in required components for setting up 2d text.\n [Example usage.](https://github.com/bevyengine/bevy/blob/latest/examples/2d/text2d.rs)\n\n The string in this component is the first 'text span' in a hierarchy of text spans that are collected into\n a [`ComputedTextBlock`]. See [`TextSpan`](crate::TextSpan) for the component used by children of entities with [`Text2d`].\n\n With `Text2d` the `justify` field of [`TextLayout`] only affects the internal alignment of a block of text and not its\n relative position, which is controlled by the [`Anchor`] component.\n This means that for a block of text consisting of only one line that doesn't wrap, the `justify` field will have no effect.\n\n\n ```\n # use bevy_asset::Handle;\n # use bevy_color::Color;\n # use bevy_color::palettes::basic::BLUE;\n # use bevy_ecs::world::World;\n # use bevy_text::{Font, JustifyText, Text2d, TextLayout, TextFont, TextColor, TextSpan};\n #\n # let font_handle: Handle<Font> = Default::default();\n # let mut world = World::default();\n #\n // Basic usage.\n world.spawn(Text2d::new(\"hello world!\"));\n\n // With non-default style.\n world.spawn((\n     Text2d::new(\"hello world!\"),\n     TextFont {\n         font: font_handle.clone().into(),\n         font_size: 60.0,\n         ..Default::default()\n     },\n     TextColor(BLUE.into()),\n ));\n\n // With text justification.\n world.spawn((\n     Text2d::new(\"hello world\\nand bevy!\"),\n     TextLayout::new_with_justify(JustifyText::Center)\n ));\n\n // With spans\n world.spawn(Text2d::new(\"hello \")).with_children(|parent| {\n     parent.spawn(TextSpan::new(\"world\"));\n     parent.spawn((TextSpan::new(\"!\"), TextColor(BLUE.into())));\n });\n ```",
      "layout": {
        "kind": "TupleStruct",
        "name": "Text2d",
        "fields": [
          {
            "type": "String"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_text::text::ComputedTextBlock": {
      "identifier": "ComputedTextBlock",
      "crate": "bevy_text",
      "path": "bevy_text::text::ComputedTextBlock",
      "documentation": " Computed information for a text block.\n\n See [`TextLayout`].\n\n Automatically updated by 2d and UI text systems.",
      "layout": {
        "kind": "Struct",
        "name": "ComputedTextBlock",
        "fields": [
          {
            "name": "entities",
            "type": "smallvec::SmallVec<[bevy_text::text::TextEntity; 1]>"
          },
          {
            "name": "needs_rerender",
            "type": "bool"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_text::text::FontSmoothing": {
      "identifier": "FontSmoothing",
      "crate": "bevy_text",
      "path": "bevy_text::text::FontSmoothing",
      "documentation": " Determines which antialiasing method to use when rendering text. By default, text is\n rendered with grayscale antialiasing, but this can be changed to achieve a pixelated look.\n\n **Note:** Subpixel antialiasing is not currently supported.",
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "Unit",
          "name": "AntiAliased"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_text::text::JustifyText": {
      "identifier": "JustifyText",
      "crate": "bevy_text",
      "path": "bevy_text::text::JustifyText",
      "documentation": " Describes the horizontal alignment of multiple lines of text relative to each other.\n\n This only affects the internal positioning of the lines of text within a text entity and\n does not affect the text entity's position.\n\n _Has no affect on a single line text entity_, unless used together with a\n [`TextBounds`](super::bounds::TextBounds) component with an explicit `width` value.",
      "layout": [
        {
          "kind": "Unit",
          "name": "Left"
        },
        {
          "kind": "Unit",
          "name": "Center"
        },
        {
          "kind": "Unit",
          "name": "Right"
        },
        {
          "kind": "Unit",
          "name": "Justified"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_text::text::LineBreak": {
      "identifier": "LineBreak",
      "crate": "bevy_text",
      "path": "bevy_text::text::LineBreak",
      "documentation": " Determines how lines will be broken when preventing text from running out of bounds.",
      "layout": [
        {
          "kind": "Unit",
          "name": "WordBoundary"
        },
        {
          "kind": "Unit",
          "name": "AnyCharacter"
        },
        {
          "kind": "Unit",
          "name": "WordOrCharacter"
        },
        {
          "kind": "Unit",
          "name": "NoWrap"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_text::text::LineHeight": {
      "identifier": "LineHeight",
      "crate": "bevy_text",
      "path": "bevy_text::text::LineHeight",
      "documentation": " Specifies the height of each line of text for `Text` and `Text2d`\n\n Default is 1.2x the font size",
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Px",
          "fields": [
            {
              "type": "f32"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "RelativeToFont",
          "fields": [
            {
              "type": "f32"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_text::text::TextColor": {
      "identifier": "TextColor",
      "crate": "bevy_text",
      "path": "bevy_text::text::TextColor",
      "documentation": " The color of the text for this section.",
      "layout": {
        "kind": "TupleStruct",
        "name": "TextColor",
        "fields": [
          {
            "type": "bevy_color::color::Color"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_text::text::TextEntity": {
      "identifier": "TextEntity",
      "crate": "bevy_text",
      "path": "bevy_text::text::TextEntity",
      "documentation": " A sub-entity of a [`ComputedTextBlock`].\n\n Returned by [`ComputedTextBlock::entities`].",
      "layout": {
        "kind": "Struct",
        "name": "TextEntity",
        "fields": [
          {
            "name": "entity",
            "type": "bevy_ecs::entity::Entity"
          },
          {
            "name": "depth",
            "type": "usize"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_text::text::TextFont": {
      "identifier": "TextFont",
      "crate": "bevy_text",
      "path": "bevy_text::text::TextFont",
      "documentation": " `TextFont` determines the style of a text span within a [`ComputedTextBlock`], specifically\n the font face, the font size, and the color.",
      "layout": {
        "kind": "Struct",
        "name": "TextFont",
        "fields": [
          {
            "name": "font",
            "type": "bevy_asset::handle::Handle<bevy_text::font::Font>"
          },
          {
            "name": "font_size",
            "type": "f32"
          },
          {
            "name": "line_height",
            "type": "bevy_text::text::LineHeight"
          },
          {
            "name": "font_smoothing",
            "type": "bevy_text::text::FontSmoothing"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_text::text::TextLayout": {
      "identifier": "TextLayout",
      "crate": "bevy_text",
      "path": "bevy_text::text::TextLayout",
      "documentation": " Component with text format settings for a block of text.\n\n A block of text is composed of text spans, which each have a separate string value and [`TextFont`]. Text\n spans associated with a text block are collected into [`ComputedTextBlock`] for layout, and then inserted\n to [`TextLayoutInfo`] for rendering.\n\n See [`Text2d`](crate::Text2d) for the core component of 2d text, and `Text` in `bevy_ui` for UI text.",
      "layout": {
        "kind": "Struct",
        "name": "TextLayout",
        "fields": [
          {
            "name": "justify",
            "type": "bevy_text::text::JustifyText"
          },
          {
            "name": "linebreak",
            "type": "bevy_text::text::LineBreak"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_text::text::TextSpan": {
      "identifier": "TextSpan",
      "crate": "bevy_text",
      "path": "bevy_text::text::TextSpan",
      "documentation": " A span of text in a tree of spans.\n\n `TextSpan` is only valid as a child of an entity with [`TextLayout`], which is provided by `Text`\n for text in `bevy_ui` or `Text2d` for text in 2d world-space.\n\n Spans are collected in hierarchy traversal order into a [`ComputedTextBlock`] for layout.\n\n ```\n # use bevy_asset::Handle;\n # use bevy_color::Color;\n # use bevy_color::palettes::basic::{RED, BLUE};\n # use bevy_ecs::world::World;\n # use bevy_text::{Font, TextLayout, TextFont, TextSpan, TextColor};\n\n # let font_handle: Handle<Font> = Default::default();\n # let mut world = World::default();\n #\n world.spawn((\n     // `Text` or `Text2d` are needed, and will provide default instances\n     // of the following components.\n     TextLayout::default(),\n     TextFont {\n         font: font_handle.clone().into(),\n         font_size: 60.0,\n         ..Default::default()\n     },\n     TextColor(BLUE.into()),\n ))\n .with_child((\n     // Children must be `TextSpan`, not `Text` or `Text2d`.\n     TextSpan::new(\"Hello!\"),\n     TextFont {\n         font: font_handle.into(),\n         font_size: 60.0,\n         ..Default::default()\n     },\n     TextColor(RED.into()),\n ));\n ```",
      "layout": {
        "kind": "TupleStruct",
        "name": "TextSpan",
        "fields": [
          {
            "type": "String"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::UiScale": {
      "identifier": "UiScale",
      "crate": "bevy_ui",
      "path": "bevy_ui::UiScale",
      "documentation": " The current scale of the UI.\n\n A multiplier to fixed-sized ui values.\n **Note:** This will only affect fixed ui values like [`Val::Px`]",
      "layout": {
        "kind": "TupleStruct",
        "name": "UiScale",
        "fields": [
          {
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::focus::FocusPolicy": {
      "identifier": "FocusPolicy",
      "crate": "bevy_ui",
      "path": "bevy_ui::focus::FocusPolicy",
      "documentation": " Describes whether the node should block interactions with lower nodes",
      "layout": [
        {
          "kind": "Unit",
          "name": "Block"
        },
        {
          "kind": "Unit",
          "name": "Pass"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::focus::Interaction": {
      "identifier": "Interaction",
      "crate": "bevy_ui",
      "path": "bevy_ui::focus::Interaction",
      "documentation": " Describes what type of input interaction has occurred for a UI node.\n\n This is commonly queried with a `Changed<Interaction>` filter.\n\n Updated in [`ui_focus_system`].\n\n If a UI node has both [`Interaction`] and [`InheritedVisibility`] components,\n [`Interaction`] will always be [`Interaction::None`]\n when [`InheritedVisibility::get()`] is false.\n This ensures that hidden UI nodes are not interactable,\n and do not end up stuck in an active state if hidden at the wrong time.\n\n Note that you can also control the visibility of a node using the [`Display`](crate::ui_node::Display) property,\n which fully collapses it during layout calculations.\n\n # See also\n\n - [`Button`](crate::widget::Button) which requires this component\n - [`RelativeCursorPosition`] to obtain the position of the cursor relative to current node",
      "layout": [
        {
          "kind": "Unit",
          "name": "Pressed"
        },
        {
          "kind": "Unit",
          "name": "Hovered"
        },
        {
          "kind": "Unit",
          "name": "None"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::focus::RelativeCursorPosition": {
      "identifier": "RelativeCursorPosition",
      "crate": "bevy_ui",
      "path": "bevy_ui::focus::RelativeCursorPosition",
      "documentation": " A component storing the position of the mouse relative to the node, (0., 0.) being the top-left corner and (1., 1.) being the bottom-right\n If the mouse is not over the node, the value will go beyond the range of (0., 0.) to (1., 1.)\n\n It can be used alongside [`Interaction`] to get the position of the press.\n\n The component is updated when it is in the same entity with [`Node`](crate::Node).",
      "layout": {
        "kind": "Struct",
        "name": "RelativeCursorPosition",
        "fields": [
          {
            "name": "normalized_visible_node_rect",
            "type": "bevy_math::rects::rect::Rect"
          },
          {
            "name": "normalized",
            "type": "core::option::Option<glam::Vec2>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::geometry::UiRect": {
      "identifier": "UiRect",
      "crate": "bevy_ui",
      "path": "bevy_ui::geometry::UiRect",
      "documentation": " A type which is commonly used to define margins, paddings and borders.\n\n # Examples\n\n ## Margin\n\n A margin is used to create space around UI elements, outside of any defined borders.\n\n ```\n # use bevy_ui::{UiRect, Val};\n #\n let margin = UiRect::all(Val::Auto); // Centers the UI element\n ```\n\n ## Padding\n\n A padding is used to create space around UI elements, inside of any defined borders.\n\n ```\n # use bevy_ui::{UiRect, Val};\n #\n let padding = UiRect {\n     left: Val::Px(10.0),\n     right: Val::Px(20.0),\n     top: Val::Px(30.0),\n     bottom: Val::Px(40.0),\n };\n ```\n\n ## Borders\n\n A border is used to define the width of the border of a UI element.\n\n ```\n # use bevy_ui::{UiRect, Val};\n #\n let border = UiRect {\n     left: Val::Px(10.0),\n     right: Val::Px(20.0),\n     top: Val::Px(30.0),\n     bottom: Val::Px(40.0),\n };\n ```",
      "layout": {
        "kind": "Struct",
        "name": "UiRect",
        "fields": [
          {
            "name": "left",
            "type": "bevy_ui::geometry::Val"
          },
          {
            "name": "right",
            "type": "bevy_ui::geometry::Val"
          },
          {
            "name": "top",
            "type": "bevy_ui::geometry::Val"
          },
          {
            "name": "bottom",
            "type": "bevy_ui::geometry::Val"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::geometry::Val": {
      "identifier": "Val",
      "crate": "bevy_ui",
      "path": "bevy_ui::geometry::Val",
      "documentation": " Represents the possible value types for layout properties.\n\n This enum allows specifying values for various [`Node`](crate::Node) properties in different units,\n such as logical pixels, percentages, or automatically determined values.\n\n `Val` also implements [`core::str::FromStr`] to allow parsing values from strings in the format `#.#px`. Whitespaces between the value and unit is allowed. The following units are supported:\n * `px`: logical pixels\n * `%`: percentage\n * `vw`: percentage of the viewport width\n * `vh`: percentage of the viewport height\n * `vmin`: percentage of the viewport's smaller dimension\n * `vmax`: percentage of the viewport's larger dimension\n\n Additionally, `auto` will be parsed as [`Val::Auto`].",
      "layout": [
        {
          "kind": "Unit",
          "name": "Auto"
        },
        {
          "kind": "TupleStruct",
          "name": "Px",
          "fields": [
            {
              "type": "f32"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Percent",
          "fields": [
            {
              "type": "f32"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Vw",
          "fields": [
            {
              "type": "f32"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Vh",
          "fields": [
            {
              "type": "f32"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "VMin",
          "fields": [
            {
              "type": "f32"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "VMax",
          "fields": [
            {
              "type": "f32"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::measurement::ContentSize": {
      "identifier": "ContentSize",
      "crate": "bevy_ui",
      "path": "bevy_ui::measurement::ContentSize",
      "documentation": " A node with a `ContentSize` component is a node where its size\n is based on its content.",
      "layout": {
        "kind": "Struct",
        "name": "ContentSize"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::picking_backend::UiPickingCamera": {
      "identifier": "UiPickingCamera",
      "crate": "bevy_ui",
      "path": "bevy_ui::picking_backend::UiPickingCamera",
      "documentation": " An optional component that marks cameras that should be used in the [`UiPickingPlugin`].\n\n Only needed if [`UiPickingSettings::require_markers`] is set to `true`, and ignored\n otherwise.",
      "layout": {
        "kind": "Struct",
        "name": "UiPickingCamera"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::picking_backend::UiPickingSettings": {
      "identifier": "UiPickingSettings",
      "crate": "bevy_ui",
      "path": "bevy_ui::picking_backend::UiPickingSettings",
      "documentation": " Runtime settings for the [`UiPickingPlugin`].",
      "layout": {
        "kind": "Struct",
        "name": "UiPickingSettings",
        "fields": [
          {
            "name": "require_markers",
            "type": "bool"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::AlignContent": {
      "identifier": "AlignContent",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::AlignContent",
      "documentation": " Used to control how items are distributed.\n - For Flexbox containers, controls alignment of lines if `flex_wrap` is set to [`FlexWrap::Wrap`] and there are multiple lines of items.\n - For CSS Grid containers, controls alignment of grid rows.\n\n <https://developer.mozilla.org/en-US/docs/Web/CSS/align-content>",
      "layout": [
        {
          "kind": "Unit",
          "name": "Default"
        },
        {
          "kind": "Unit",
          "name": "Start"
        },
        {
          "kind": "Unit",
          "name": "End"
        },
        {
          "kind": "Unit",
          "name": "FlexStart"
        },
        {
          "kind": "Unit",
          "name": "FlexEnd"
        },
        {
          "kind": "Unit",
          "name": "Center"
        },
        {
          "kind": "Unit",
          "name": "Stretch"
        },
        {
          "kind": "Unit",
          "name": "SpaceBetween"
        },
        {
          "kind": "Unit",
          "name": "SpaceEvenly"
        },
        {
          "kind": "Unit",
          "name": "SpaceAround"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::AlignItems": {
      "identifier": "AlignItems",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::AlignItems",
      "documentation": " Used to control how each individual item is aligned by default within the space they're given.\n - For Flexbox containers, sets default cross axis alignment of the child items.\n - For CSS Grid containers, controls block (vertical) axis alignment of children of this grid container within their grid areas.\n\n <https://developer.mozilla.org/en-US/docs/Web/CSS/align-items>",
      "layout": [
        {
          "kind": "Unit",
          "name": "Default"
        },
        {
          "kind": "Unit",
          "name": "Start"
        },
        {
          "kind": "Unit",
          "name": "End"
        },
        {
          "kind": "Unit",
          "name": "FlexStart"
        },
        {
          "kind": "Unit",
          "name": "FlexEnd"
        },
        {
          "kind": "Unit",
          "name": "Center"
        },
        {
          "kind": "Unit",
          "name": "Baseline"
        },
        {
          "kind": "Unit",
          "name": "Stretch"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::AlignSelf": {
      "identifier": "AlignSelf",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::AlignSelf",
      "documentation": " Used to control how the specified item is aligned within the space it's given.\n - For Flexbox items, controls cross axis alignment of the item.\n - For CSS Grid items, controls block (vertical) axis alignment of a grid item within its grid area.\n\n <https://developer.mozilla.org/en-US/docs/Web/CSS/align-self>",
      "layout": [
        {
          "kind": "Unit",
          "name": "Auto"
        },
        {
          "kind": "Unit",
          "name": "Start"
        },
        {
          "kind": "Unit",
          "name": "End"
        },
        {
          "kind": "Unit",
          "name": "FlexStart"
        },
        {
          "kind": "Unit",
          "name": "FlexEnd"
        },
        {
          "kind": "Unit",
          "name": "Center"
        },
        {
          "kind": "Unit",
          "name": "Baseline"
        },
        {
          "kind": "Unit",
          "name": "Stretch"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::BackgroundColor": {
      "identifier": "BackgroundColor",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::BackgroundColor",
      "documentation": " The background color of the node\n\n This serves as the \"fill\" color.",
      "layout": {
        "kind": "TupleStruct",
        "name": "BackgroundColor",
        "fields": [
          {
            "type": "bevy_color::color::Color"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::BorderColor": {
      "identifier": "BorderColor",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::BorderColor",
      "documentation": " The border color of the UI node.",
      "layout": {
        "kind": "TupleStruct",
        "name": "BorderColor",
        "fields": [
          {
            "type": "bevy_color::color::Color"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::BorderRadius": {
      "identifier": "BorderRadius",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::BorderRadius",
      "documentation": " Used to add rounded corners to a UI node. You can set a UI node to have uniformly\n rounded corners or specify different radii for each corner. If a given radius exceeds half\n the length of the smallest dimension between the node's height or width, the radius will\n calculated as half the smallest dimension.\n\n Elliptical nodes are not supported yet. Percentage values are based on the node's smallest\n dimension, either width or height.\n\n # Example\n ```rust\n # use bevy_ecs::prelude::*;\n # use bevy_ui::prelude::*;\n # use bevy_color::palettes::basic::{BLUE};\n fn setup_ui(mut commands: Commands) {\n     commands.spawn((\n         Node {\n             width: Val::Px(100.),\n             height: Val::Px(100.),\n             border: UiRect::all(Val::Px(2.)),\n             ..Default::default()\n         },\n         BackgroundColor(BLUE.into()),\n         BorderRadius::new(\n             // top left\n             Val::Px(10.),\n             // top right\n             Val::Px(20.),\n             // bottom right\n             Val::Px(30.),\n             // bottom left\n             Val::Px(40.),\n         ),\n     ));\n }\n ```\n\n <https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius>",
      "layout": {
        "kind": "Struct",
        "name": "BorderRadius",
        "fields": [
          {
            "name": "top_left",
            "type": "bevy_ui::geometry::Val"
          },
          {
            "name": "top_right",
            "type": "bevy_ui::geometry::Val"
          },
          {
            "name": "bottom_left",
            "type": "bevy_ui::geometry::Val"
          },
          {
            "name": "bottom_right",
            "type": "bevy_ui::geometry::Val"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::BoxShadow": {
      "identifier": "BoxShadow",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::BoxShadow",
      "documentation": " List of shadows to draw for a [`Node`].\n\n Draw order is determined implicitly from the vector of [`ShadowStyle`]s, back-to-front.",
      "layout": {
        "kind": "TupleStruct",
        "name": "BoxShadow",
        "fields": [
          {
            "type": "alloc::vec::Vec<bevy_ui::ui_node::ShadowStyle>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::BoxShadowSamples": {
      "identifier": "BoxShadowSamples",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::BoxShadowSamples",
      "documentation": " Number of shadow samples.\n A larger value will result in higher quality shadows.\n Default is 4, values higher than ~10 offer diminishing returns.\n\n ```\n use bevy_core_pipeline::prelude::*;\n use bevy_ecs::prelude::*;\n use bevy_ui::prelude::*;\n\n fn spawn_camera(mut commands: Commands) {\n     commands.spawn((\n         Camera2d,\n         BoxShadowSamples(6),\n     ));\n }\n ```",
      "layout": {
        "kind": "TupleStruct",
        "name": "BoxShadowSamples",
        "fields": [
          {
            "type": "u32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::BoxSizing": {
      "identifier": "BoxSizing",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::BoxSizing",
      "documentation": " Which part of a Node's box length styles like width and height control\n\n See: <https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing>",
      "layout": [
        {
          "kind": "Unit",
          "name": "BorderBox"
        },
        {
          "kind": "Unit",
          "name": "ContentBox"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::CalculatedClip": {
      "identifier": "CalculatedClip",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::CalculatedClip",
      "documentation": " The calculated clip of the node",
      "layout": {
        "kind": "Struct",
        "name": "CalculatedClip",
        "fields": [
          {
            "name": "clip",
            "type": "bevy_math::rects::rect::Rect"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::ComputedNode": {
      "identifier": "ComputedNode",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::ComputedNode",
      "documentation": " Provides the computed size and layout properties of the node.\n\n Fields in this struct are public but should not be modified under most circumstances.\n For example, in a scrollbar you may want to derive the handle's size from the proportion of\n scrollable content in-view. You can directly modify `ComputedNode` after layout to set the\n handle size without any delays.",
      "layout": {
        "kind": "Struct",
        "name": "ComputedNode",
        "fields": [
          {
            "name": "stack_index",
            "type": "u32"
          },
          {
            "name": "size",
            "type": "glam::Vec2"
          },
          {
            "name": "content_size",
            "type": "glam::Vec2"
          },
          {
            "name": "outline_width",
            "type": "f32"
          },
          {
            "name": "outline_offset",
            "type": "f32"
          },
          {
            "name": "unrounded_size",
            "type": "glam::Vec2"
          },
          {
            "name": "border",
            "type": "bevy_sprite::texture_slice::border_rect::BorderRect"
          },
          {
            "name": "border_radius",
            "type": "bevy_ui::ui_node::ResolvedBorderRadius"
          },
          {
            "name": "padding",
            "type": "bevy_sprite::texture_slice::border_rect::BorderRect"
          },
          {
            "name": "inverse_scale_factor",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::ComputedNodeTarget": {
      "identifier": "ComputedNodeTarget",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::ComputedNodeTarget",
      "documentation": " Derived information about the camera target for this UI node.",
      "layout": {
        "kind": "Struct",
        "name": "ComputedNodeTarget",
        "fields": [
          {
            "name": "camera",
            "type": "bevy_ecs::entity::Entity"
          },
          {
            "name": "scale_factor",
            "type": "f32"
          },
          {
            "name": "physical_size",
            "type": "glam::UVec2"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::Display": {
      "identifier": "Display",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::Display",
      "documentation": " Defines the layout model used by this node.\n\n Part of the [`Node`] component.",
      "layout": [
        {
          "kind": "Unit",
          "name": "Flex"
        },
        {
          "kind": "Unit",
          "name": "Grid"
        },
        {
          "kind": "Unit",
          "name": "Block"
        },
        {
          "kind": "Unit",
          "name": "None"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::FlexDirection": {
      "identifier": "FlexDirection",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::FlexDirection",
      "documentation": " Defines how flexbox items are ordered within a flexbox",
      "layout": [
        {
          "kind": "Unit",
          "name": "Row"
        },
        {
          "kind": "Unit",
          "name": "Column"
        },
        {
          "kind": "Unit",
          "name": "RowReverse"
        },
        {
          "kind": "Unit",
          "name": "ColumnReverse"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::FlexWrap": {
      "identifier": "FlexWrap",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::FlexWrap",
      "documentation": " Defines if flexbox items appear on a single line or on multiple lines",
      "layout": [
        {
          "kind": "Unit",
          "name": "NoWrap"
        },
        {
          "kind": "Unit",
          "name": "Wrap"
        },
        {
          "kind": "Unit",
          "name": "WrapReverse"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::GridAutoFlow": {
      "identifier": "GridAutoFlow",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::GridAutoFlow",
      "documentation": " Controls whether grid items are placed row-wise or column-wise as well as whether the sparse or dense packing algorithm is used.\n\n The \"dense\" packing algorithm attempts to fill in holes earlier in the grid, if smaller items come up later.\n This may cause items to appear out-of-order when doing so would fill in holes left by larger items.\n\n Defaults to [`GridAutoFlow::Row`].\n\n <https://developer.mozilla.org/en-US/docs/Web/CSS/grid-auto-flow>",
      "layout": [
        {
          "kind": "Unit",
          "name": "Row"
        },
        {
          "kind": "Unit",
          "name": "Column"
        },
        {
          "kind": "Unit",
          "name": "RowDense"
        },
        {
          "kind": "Unit",
          "name": "ColumnDense"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::GridPlacement": {
      "identifier": "GridPlacement",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::GridPlacement",
      "documentation": " Represents the position of a grid item in a single axis.\n\n There are 3 fields which may be set:\n   - `start`: which grid line the item should start at\n   - `end`: which grid line the item should end at\n   - `span`: how many tracks the item should span\n\n The default `span` is 1. If neither `start` or `end` is set then the item will be placed automatically.\n\n Generally, at most two fields should be set. If all three fields are specified then `span` will be ignored. If `end` specifies an earlier\n grid line than `start` then `end` will be ignored and the item will have a span of 1.\n\n <https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Line-based_Placement_with_CSS_Grid>",
      "layout": {
        "kind": "Struct",
        "name": "GridPlacement",
        "fields": [
          {
            "name": "start",
            "type": "core::option::Option<core::num::NonZeroI16>"
          },
          {
            "name": "span",
            "type": "core::option::Option<core::num::NonZeroU16>"
          },
          {
            "name": "end",
            "type": "core::option::Option<core::num::NonZeroI16>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::GridTrack": {
      "identifier": "GridTrack",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::GridTrack",
      "documentation": " A [`GridTrack`] is a Row or Column of a CSS Grid. This struct specifies what size the track should be.\n See below for the different \"track sizing functions\" you can specify.",
      "layout": {
        "kind": "Struct",
        "name": "GridTrack",
        "fields": [
          {
            "name": "min_sizing_function",
            "type": "bevy_ui::ui_node::MinTrackSizingFunction"
          },
          {
            "name": "max_sizing_function",
            "type": "bevy_ui::ui_node::MaxTrackSizingFunction"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::GridTrackRepetition": {
      "identifier": "GridTrackRepetition",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::GridTrackRepetition",
      "documentation": " How many times to repeat a repeated grid track\n\n <https://developer.mozilla.org/en-US/docs/Web/CSS/repeat>",
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Count",
          "fields": [
            {
              "type": "u16"
            }
          ]
        },
        {
          "kind": "Unit",
          "name": "AutoFill"
        },
        {
          "kind": "Unit",
          "name": "AutoFit"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::JustifyContent": {
      "identifier": "JustifyContent",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::JustifyContent",
      "documentation": " Used to control how items are distributed.\n - For Flexbox containers, controls alignment of items in the main axis.\n - For CSS Grid containers, controls alignment of grid columns.\n\n <https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content>",
      "layout": [
        {
          "kind": "Unit",
          "name": "Default"
        },
        {
          "kind": "Unit",
          "name": "Start"
        },
        {
          "kind": "Unit",
          "name": "End"
        },
        {
          "kind": "Unit",
          "name": "FlexStart"
        },
        {
          "kind": "Unit",
          "name": "FlexEnd"
        },
        {
          "kind": "Unit",
          "name": "Center"
        },
        {
          "kind": "Unit",
          "name": "Stretch"
        },
        {
          "kind": "Unit",
          "name": "SpaceBetween"
        },
        {
          "kind": "Unit",
          "name": "SpaceEvenly"
        },
        {
          "kind": "Unit",
          "name": "SpaceAround"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::JustifyItems": {
      "identifier": "JustifyItems",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::JustifyItems",
      "documentation": " Used to control how each individual item is aligned by default within the space they're given.\n - For Flexbox containers, this property has no effect. See `justify_content` for main axis alignment of flex items.\n - For CSS Grid containers, sets default inline (horizontal) axis alignment of child items within their grid areas.\n\n <https://developer.mozilla.org/en-US/docs/Web/CSS/justify-items>",
      "layout": [
        {
          "kind": "Unit",
          "name": "Default"
        },
        {
          "kind": "Unit",
          "name": "Start"
        },
        {
          "kind": "Unit",
          "name": "End"
        },
        {
          "kind": "Unit",
          "name": "Center"
        },
        {
          "kind": "Unit",
          "name": "Baseline"
        },
        {
          "kind": "Unit",
          "name": "Stretch"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::JustifySelf": {
      "identifier": "JustifySelf",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::JustifySelf",
      "documentation": " Used to control how the specified item is aligned within the space it's given.\n - For Flexbox items, this property has no effect. See `justify_content` for main axis alignment of flex items.\n - For CSS Grid items, controls inline (horizontal) axis alignment of a grid item within its grid area.\n\n <https://developer.mozilla.org/en-US/docs/Web/CSS/justify-self>",
      "layout": [
        {
          "kind": "Unit",
          "name": "Auto"
        },
        {
          "kind": "Unit",
          "name": "Start"
        },
        {
          "kind": "Unit",
          "name": "End"
        },
        {
          "kind": "Unit",
          "name": "Center"
        },
        {
          "kind": "Unit",
          "name": "Baseline"
        },
        {
          "kind": "Unit",
          "name": "Stretch"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::MaxTrackSizingFunction": {
      "identifier": "MaxTrackSizingFunction",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::MaxTrackSizingFunction",
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Px",
          "fields": [
            {
              "type": "f32"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Percent",
          "fields": [
            {
              "type": "f32"
            }
          ]
        },
        {
          "kind": "Unit",
          "name": "MinContent"
        },
        {
          "kind": "Unit",
          "name": "MaxContent"
        },
        {
          "kind": "TupleStruct",
          "name": "FitContentPx",
          "fields": [
            {
              "type": "f32"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "FitContentPercent",
          "fields": [
            {
              "type": "f32"
            }
          ]
        },
        {
          "kind": "Unit",
          "name": "Auto"
        },
        {
          "kind": "TupleStruct",
          "name": "Fraction",
          "fields": [
            {
              "type": "f32"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "VMin",
          "fields": [
            {
              "type": "f32"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "VMax",
          "fields": [
            {
              "type": "f32"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Vh",
          "fields": [
            {
              "type": "f32"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Vw",
          "fields": [
            {
              "type": "f32"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::MinTrackSizingFunction": {
      "identifier": "MinTrackSizingFunction",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::MinTrackSizingFunction",
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Px",
          "fields": [
            {
              "type": "f32"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Percent",
          "fields": [
            {
              "type": "f32"
            }
          ]
        },
        {
          "kind": "Unit",
          "name": "MinContent"
        },
        {
          "kind": "Unit",
          "name": "MaxContent"
        },
        {
          "kind": "Unit",
          "name": "Auto"
        },
        {
          "kind": "TupleStruct",
          "name": "VMin",
          "fields": [
            {
              "type": "f32"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "VMax",
          "fields": [
            {
              "type": "f32"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Vh",
          "fields": [
            {
              "type": "f32"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Vw",
          "fields": [
            {
              "type": "f32"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::Node": {
      "identifier": "Node",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::Node",
      "documentation": " The base component for UI entities. It describes UI layout and style properties.\n\n When defining new types of UI entities, require [`Node`] to make them behave like UI nodes.\n\n Nodes can be laid out using either Flexbox or CSS Grid Layout.\n\n See below for general learning resources and for documentation on the individual style properties.\n\n ### Flexbox\n\n - [MDN: Basic Concepts of Flexbox](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox)\n - [A Complete Guide To Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/) by CSS Tricks. This is detailed guide with illustrations and comprehensive written explanation of the different Flexbox properties and how they work.\n - [Flexbox Froggy](https://flexboxfroggy.com/). An interactive tutorial/game that teaches the essential parts of Flexbox in a fun engaging way.\n\n ### CSS Grid\n\n - [MDN: Basic Concepts of Grid Layout](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout)\n - [A Complete Guide To CSS Grid](https://css-tricks.com/snippets/css/complete-guide-grid/) by CSS Tricks. This is detailed guide with illustrations and comprehensive written explanation of the different CSS Grid properties and how they work.\n - [CSS Grid Garden](https://cssgridgarden.com/). An interactive tutorial/game that teaches the essential parts of CSS Grid in a fun engaging way.\n\n # See also\n\n - [`RelativeCursorPosition`](crate::RelativeCursorPosition) to obtain the cursor position relative to this node\n - [`Interaction`](crate::Interaction) to obtain the interaction state of this node",
      "layout": {
        "kind": "Struct",
        "name": "Node",
        "fields": [
          {
            "name": "display",
            "type": "bevy_ui::ui_node::Display"
          },
          {
            "name": "box_sizing",
            "type": "bevy_ui::ui_node::BoxSizing"
          },
          {
            "name": "position_type",
            "type": "bevy_ui::ui_node::PositionType"
          },
          {
            "name": "overflow",
            "type": "bevy_ui::ui_node::Overflow"
          },
          {
            "name": "overflow_clip_margin",
            "type": "bevy_ui::ui_node::OverflowClipMargin"
          },
          {
            "name": "left",
            "type": "bevy_ui::geometry::Val"
          },
          {
            "name": "right",
            "type": "bevy_ui::geometry::Val"
          },
          {
            "name": "top",
            "type": "bevy_ui::geometry::Val"
          },
          {
            "name": "bottom",
            "type": "bevy_ui::geometry::Val"
          },
          {
            "name": "width",
            "type": "bevy_ui::geometry::Val"
          },
          {
            "name": "height",
            "type": "bevy_ui::geometry::Val"
          },
          {
            "name": "min_width",
            "type": "bevy_ui::geometry::Val"
          },
          {
            "name": "min_height",
            "type": "bevy_ui::geometry::Val"
          },
          {
            "name": "max_width",
            "type": "bevy_ui::geometry::Val"
          },
          {
            "name": "max_height",
            "type": "bevy_ui::geometry::Val"
          },
          {
            "name": "aspect_ratio",
            "type": "core::option::Option<f32>"
          },
          {
            "name": "align_items",
            "type": "bevy_ui::ui_node::AlignItems"
          },
          {
            "name": "justify_items",
            "type": "bevy_ui::ui_node::JustifyItems"
          },
          {
            "name": "align_self",
            "type": "bevy_ui::ui_node::AlignSelf"
          },
          {
            "name": "justify_self",
            "type": "bevy_ui::ui_node::JustifySelf"
          },
          {
            "name": "align_content",
            "type": "bevy_ui::ui_node::AlignContent"
          },
          {
            "name": "justify_content",
            "type": "bevy_ui::ui_node::JustifyContent"
          },
          {
            "name": "margin",
            "type": "bevy_ui::geometry::UiRect"
          },
          {
            "name": "padding",
            "type": "bevy_ui::geometry::UiRect"
          },
          {
            "name": "border",
            "type": "bevy_ui::geometry::UiRect"
          },
          {
            "name": "flex_direction",
            "type": "bevy_ui::ui_node::FlexDirection"
          },
          {
            "name": "flex_wrap",
            "type": "bevy_ui::ui_node::FlexWrap"
          },
          {
            "name": "flex_grow",
            "type": "f32"
          },
          {
            "name": "flex_shrink",
            "type": "f32"
          },
          {
            "name": "flex_basis",
            "type": "bevy_ui::geometry::Val"
          },
          {
            "name": "row_gap",
            "type": "bevy_ui::geometry::Val"
          },
          {
            "name": "column_gap",
            "type": "bevy_ui::geometry::Val"
          },
          {
            "name": "grid_auto_flow",
            "type": "bevy_ui::ui_node::GridAutoFlow"
          },
          {
            "name": "grid_template_rows",
            "type": "alloc::vec::Vec<bevy_ui::ui_node::RepeatedGridTrack>"
          },
          {
            "name": "grid_template_columns",
            "type": "alloc::vec::Vec<bevy_ui::ui_node::RepeatedGridTrack>"
          },
          {
            "name": "grid_auto_rows",
            "type": "alloc::vec::Vec<bevy_ui::ui_node::GridTrack>"
          },
          {
            "name": "grid_auto_columns",
            "type": "alloc::vec::Vec<bevy_ui::ui_node::GridTrack>"
          },
          {
            "name": "grid_row",
            "type": "bevy_ui::ui_node::GridPlacement"
          },
          {
            "name": "grid_column",
            "type": "bevy_ui::ui_node::GridPlacement"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::Outline": {
      "identifier": "Outline",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::Outline",
      "documentation": " The [`Outline`] component adds an outline outside the edge of a UI node.\n Outlines do not take up space in the layout.\n\n To add an [`Outline`] to a ui node you can spawn a `(Node, Outline)` tuple bundle:\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_ui::prelude::*;\n # use bevy_color::palettes::basic::{RED, BLUE};\n fn setup_ui(mut commands: Commands) {\n     commands.spawn((\n         Node {\n             width: Val::Px(100.),\n             height: Val::Px(100.),\n             ..Default::default()\n         },\n         BackgroundColor(BLUE.into()),\n         Outline::new(Val::Px(10.), Val::ZERO, RED.into())\n     ));\n }\n ```\n\n [`Outline`] components can also be added later to existing UI nodes:\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_ui::prelude::*;\n # use bevy_color::Color;\n fn outline_hovered_button_system(\n     mut commands: Commands,\n     mut node_query: Query<(Entity, &Interaction, Option<&mut Outline>), Changed<Interaction>>,\n ) {\n     for (entity, interaction, mut maybe_outline) in node_query.iter_mut() {\n         let outline_color =\n             if matches!(*interaction, Interaction::Hovered) {\n                 Color::WHITE\n             } else {\n                 Color::NONE\n             };\n         if let Some(mut outline) = maybe_outline {\n             outline.color = outline_color;\n         } else {\n             commands.entity(entity).insert(Outline::new(Val::Px(10.), Val::ZERO, outline_color));\n         }\n     }\n }\n ```\n Inserting and removing an [`Outline`] component repeatedly will result in table moves, so it is generally preferable to\n set `Outline::color` to [`Color::NONE`] to hide an outline.",
      "layout": {
        "kind": "Struct",
        "name": "Outline",
        "fields": [
          {
            "name": "width",
            "type": "bevy_ui::geometry::Val"
          },
          {
            "name": "offset",
            "type": "bevy_ui::geometry::Val"
          },
          {
            "name": "color",
            "type": "bevy_color::color::Color"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::Overflow": {
      "identifier": "Overflow",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::Overflow",
      "documentation": " Whether to show or hide overflowing items",
      "layout": {
        "kind": "Struct",
        "name": "Overflow",
        "fields": [
          {
            "name": "x",
            "type": "bevy_ui::ui_node::OverflowAxis"
          },
          {
            "name": "y",
            "type": "bevy_ui::ui_node::OverflowAxis"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::OverflowAxis": {
      "identifier": "OverflowAxis",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::OverflowAxis",
      "documentation": " Whether to show or hide overflowing items",
      "layout": [
        {
          "kind": "Unit",
          "name": "Visible"
        },
        {
          "kind": "Unit",
          "name": "Clip"
        },
        {
          "kind": "Unit",
          "name": "Hidden"
        },
        {
          "kind": "Unit",
          "name": "Scroll"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::OverflowClipBox": {
      "identifier": "OverflowClipBox",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::OverflowClipBox",
      "documentation": " Used to determine the bounds of the visible area when a UI node is clipped.",
      "layout": [
        {
          "kind": "Unit",
          "name": "ContentBox"
        },
        {
          "kind": "Unit",
          "name": "PaddingBox"
        },
        {
          "kind": "Unit",
          "name": "BorderBox"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::OverflowClipMargin": {
      "identifier": "OverflowClipMargin",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::OverflowClipMargin",
      "documentation": " The bounds of the visible area when a UI node is clipped.",
      "layout": {
        "kind": "Struct",
        "name": "OverflowClipMargin",
        "fields": [
          {
            "name": "visual_box",
            "type": "bevy_ui::ui_node::OverflowClipBox"
          },
          {
            "name": "margin",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::PositionType": {
      "identifier": "PositionType",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::PositionType",
      "documentation": " The strategy used to position this node",
      "layout": [
        {
          "kind": "Unit",
          "name": "Relative"
        },
        {
          "kind": "Unit",
          "name": "Absolute"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::RepeatedGridTrack": {
      "identifier": "RepeatedGridTrack",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::RepeatedGridTrack",
      "documentation": " Represents a *possibly* repeated [`GridTrack`].\n\n The repetition parameter can either be:\n   - The integer `1`, in which case the track is non-repeated.\n   - a `u16` count to repeat the track N times.\n   - A `GridTrackRepetition::AutoFit` or `GridTrackRepetition::AutoFill`.\n\n Note: that in the common case you want a non-repeating track (repetition count 1), you may use the constructor methods on [`GridTrack`]\n to create a `RepeatedGridTrack`. i.e. `GridTrack::px(10.0)` is equivalent to `RepeatedGridTrack::px(1, 10.0)`.\n\n You may only use one auto-repetition per track list. And if your track list contains an auto repetition\n then all tracks (in and outside of the repetition) must be fixed size (px or percent). Integer repetitions are just shorthand for writing out\n N tracks longhand and are not subject to the same limitations.",
      "layout": {
        "kind": "Struct",
        "name": "RepeatedGridTrack",
        "fields": [
          {
            "name": "repetition",
            "type": "bevy_ui::ui_node::GridTrackRepetition"
          },
          {
            "name": "tracks",
            "type": "smallvec::SmallVec<[bevy_ui::ui_node::GridTrack; 1]>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::ResolvedBorderRadius": {
      "identifier": "ResolvedBorderRadius",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::ResolvedBorderRadius",
      "documentation": " Represents the resolved border radius values for a UI node.\n\n The values are in physical pixels.",
      "layout": {
        "kind": "Struct",
        "name": "ResolvedBorderRadius",
        "fields": [
          {
            "name": "top_left",
            "type": "f32"
          },
          {
            "name": "top_right",
            "type": "f32"
          },
          {
            "name": "bottom_left",
            "type": "f32"
          },
          {
            "name": "bottom_right",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::ScrollPosition": {
      "identifier": "ScrollPosition",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::ScrollPosition",
      "documentation": " The scroll position of the node.\n\n Updating the values of `ScrollPosition` will reposition the children of the node by the offset amount.\n `ScrollPosition` may be updated by the layout system when a layout change makes a previously valid `ScrollPosition` invalid.\n Changing this does nothing on a `Node` without setting at least one `OverflowAxis` to `OverflowAxis::Scroll`.",
      "layout": {
        "kind": "Struct",
        "name": "ScrollPosition",
        "fields": [
          {
            "name": "offset_x",
            "type": "f32"
          },
          {
            "name": "offset_y",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::ShadowStyle": {
      "identifier": "ShadowStyle",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::ShadowStyle",
      "layout": {
        "kind": "Struct",
        "name": "ShadowStyle",
        "fields": [
          {
            "name": "color",
            "type": "bevy_color::color::Color"
          },
          {
            "name": "x_offset",
            "type": "bevy_ui::geometry::Val"
          },
          {
            "name": "y_offset",
            "type": "bevy_ui::geometry::Val"
          },
          {
            "name": "spread_radius",
            "type": "bevy_ui::geometry::Val"
          },
          {
            "name": "blur_radius",
            "type": "bevy_ui::geometry::Val"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::TextShadow": {
      "identifier": "TextShadow",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::TextShadow",
      "documentation": " Adds a shadow behind text",
      "layout": {
        "kind": "Struct",
        "name": "TextShadow",
        "fields": [
          {
            "name": "offset",
            "type": "glam::Vec2"
          },
          {
            "name": "color",
            "type": "bevy_color::color::Color"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::UiAntiAlias": {
      "identifier": "UiAntiAlias",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::UiAntiAlias",
      "documentation": " Marker for controlling whether Ui is rendered with or without anti-aliasing\n in a camera. By default, Ui is always anti-aliased.\n\n **Note:** This does not affect text anti-aliasing. For that, use the `font_smoothing` property of the [`TextFont`](bevy_text::TextFont) component.\n\n ```\n use bevy_core_pipeline::prelude::*;\n use bevy_ecs::prelude::*;\n use bevy_ui::prelude::*;\n\n fn spawn_camera(mut commands: Commands) {\n     commands.spawn((\n         Camera2d,\n         // This will cause all Ui in this camera to be rendered without\n         // anti-aliasing\n         UiAntiAlias::Off,\n     ));\n }\n ```",
      "layout": [
        {
          "kind": "Unit",
          "name": "On"
        },
        {
          "kind": "Unit",
          "name": "Off"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::UiTargetCamera": {
      "identifier": "UiTargetCamera",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::UiTargetCamera",
      "documentation": " Indicates that this root [`Node`] entity should be rendered to a specific camera.\n\n UI then will be laid out respecting the camera's viewport and scale factor, and\n rendered to this camera's [`bevy_render::camera::RenderTarget`].\n\n Setting this component on a non-root node will have no effect. It will be overridden\n by the root node's component.\n\n Root node's without an explicit [`UiTargetCamera`] will be rendered to the default UI camera,\n which is either a single camera with the [`IsDefaultUiCamera`] marker component or the highest\n order camera targeting the primary window.",
      "layout": {
        "kind": "TupleStruct",
        "name": "UiTargetCamera",
        "fields": [
          {
            "type": "bevy_ecs::entity::Entity"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::ui_node::ZIndex": {
      "identifier": "ZIndex",
      "crate": "bevy_ui",
      "path": "bevy_ui::ui_node::ZIndex",
      "documentation": " Indicates that this [`Node`] entity's front-to-back ordering is not controlled solely\n by its location in the UI hierarchy. A node with a higher z-index will appear on top\n of sibling nodes with a lower z-index.\n\n UI nodes that have the same z-index will appear according to the order in which they\n appear in the UI hierarchy. In such a case, the last node to be added to its parent\n will appear in front of its siblings.\n\n Nodes without this component will be treated as if they had a value of [`ZIndex(0)`].\n\n Use [`GlobalZIndex`] if you need to order separate UI hierarchies or nodes that are\n not siblings in a given UI hierarchy.",
      "layout": {
        "kind": "TupleStruct",
        "name": "ZIndex",
        "fields": [
          {
            "type": "i32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::widget::button::Button": {
      "identifier": "Button",
      "crate": "bevy_ui",
      "path": "bevy_ui::widget::button::Button",
      "documentation": " Marker struct for buttons",
      "layout": {
        "kind": "Struct",
        "name": "Button"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::widget::image::ImageNode": {
      "identifier": "ImageNode",
      "crate": "bevy_ui",
      "path": "bevy_ui::widget::image::ImageNode",
      "documentation": " A UI Node that renders an image.",
      "layout": {
        "kind": "Struct",
        "name": "ImageNode",
        "fields": [
          {
            "name": "color",
            "type": "bevy_color::color::Color"
          },
          {
            "name": "image",
            "type": "bevy_asset::handle::Handle<bevy_image::image::Image>"
          },
          {
            "name": "texture_atlas",
            "type": "core::option::Option<bevy_image::texture_atlas::TextureAtlas>"
          },
          {
            "name": "flip_x",
            "type": "bool"
          },
          {
            "name": "flip_y",
            "type": "bool"
          },
          {
            "name": "rect",
            "type": "core::option::Option<bevy_math::rects::rect::Rect>"
          },
          {
            "name": "image_mode",
            "type": "bevy_ui::widget::image::NodeImageMode"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::widget::image::ImageNodeSize": {
      "identifier": "ImageNodeSize",
      "crate": "bevy_ui",
      "path": "bevy_ui::widget::image::ImageNodeSize",
      "documentation": " The size of the image's texture\n\n This component is updated automatically by [`update_image_content_size_system`]",
      "layout": {
        "kind": "Struct",
        "name": "ImageNodeSize",
        "fields": [
          {
            "name": "size",
            "type": "glam::UVec2"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::widget::image::NodeImageMode": {
      "identifier": "NodeImageMode",
      "crate": "bevy_ui",
      "path": "bevy_ui::widget::image::NodeImageMode",
      "documentation": " Controls how the image is altered to fit within the layout and how the layout algorithm determines the space in the layout for the image",
      "layout": [
        {
          "kind": "Unit",
          "name": "Auto"
        },
        {
          "kind": "Unit",
          "name": "Stretch"
        },
        {
          "kind": "TupleStruct",
          "name": "Sliced",
          "fields": [
            {
              "type": "bevy_sprite::texture_slice::slicer::TextureSlicer"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "Tiled",
          "fields": [
            {
              "name": "tile_x",
              "type": "bool"
            },
            {
              "name": "tile_y",
              "type": "bool"
            },
            {
              "name": "stretch_value",
              "type": "f32"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::widget::label::Label": {
      "identifier": "Label",
      "crate": "bevy_ui",
      "path": "bevy_ui::widget::label::Label",
      "documentation": " Marker struct for labels",
      "layout": {
        "kind": "Struct",
        "name": "Label"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::widget::text::Text": {
      "identifier": "Text",
      "crate": "bevy_ui",
      "path": "bevy_ui::widget::text::Text",
      "documentation": " The top-level UI text component.\n\n Adding [`Text`] to an entity will pull in required components for setting up a UI text node.\n\n The string in this component is the first 'text span' in a hierarchy of text spans that are collected into\n a [`ComputedTextBlock`]. See [`TextSpan`](bevy_text::TextSpan) for the component used by children of entities with [`Text`].\n\n Note that [`Transform`](bevy_transform::components::Transform) on this entity is managed automatically by the UI layout system.\n\n\n ```\n # use bevy_asset::Handle;\n # use bevy_color::Color;\n # use bevy_color::palettes::basic::BLUE;\n # use bevy_ecs::world::World;\n # use bevy_text::{Font, JustifyText, TextLayout, TextFont, TextColor, TextSpan};\n # use bevy_ui::prelude::Text;\n #\n # let font_handle: Handle<Font> = Default::default();\n # let mut world = World::default();\n #\n // Basic usage.\n world.spawn(Text::new(\"hello world!\"));\n\n // With non-default style.\n world.spawn((\n     Text::new(\"hello world!\"),\n     TextFont {\n         font: font_handle.clone().into(),\n         font_size: 60.0,\n         ..Default::default()\n     },\n     TextColor(BLUE.into()),\n ));\n\n // With text justification.\n world.spawn((\n     Text::new(\"hello world\\nand bevy!\"),\n     TextLayout::new_with_justify(JustifyText::Center)\n ));\n\n // With spans\n world.spawn(Text::new(\"hello \")).with_children(|parent| {\n     parent.spawn(TextSpan::new(\"world\"));\n     parent.spawn((TextSpan::new(\"!\"), TextColor(BLUE.into())));\n });\n ```",
      "layout": {
        "kind": "TupleStruct",
        "name": "Text",
        "fields": [
          {
            "type": "String"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ui::widget::text::TextNodeFlags": {
      "identifier": "TextNodeFlags",
      "crate": "bevy_ui",
      "path": "bevy_ui::widget::text::TextNodeFlags",
      "documentation": " UI text system flags.\n\n Used internally by [`measure_text_system`] and [`text_system`] to schedule text for processing.",
      "layout": {
        "kind": "Struct",
        "name": "TextNodeFlags",
        "fields": [
          {
            "name": "needs_measure_fn",
            "type": "bool"
          },
          {
            "name": "needs_recompute",
            "type": "bool"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::event::AppLifecycle": {
      "identifier": "AppLifecycle",
      "crate": "bevy_window",
      "path": "bevy_window::event::AppLifecycle",
      "documentation": " Application lifetime events",
      "layout": [
        {
          "kind": "Unit",
          "name": "Idle"
        },
        {
          "kind": "Unit",
          "name": "Running"
        },
        {
          "kind": "Unit",
          "name": "WillSuspend"
        },
        {
          "kind": "Unit",
          "name": "Suspended"
        },
        {
          "kind": "Unit",
          "name": "WillResume"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::event::CursorEntered": {
      "identifier": "CursorEntered",
      "crate": "bevy_window",
      "path": "bevy_window::event::CursorEntered",
      "documentation": " An event that is sent whenever the user's cursor enters a window.",
      "layout": {
        "kind": "Struct",
        "name": "CursorEntered",
        "fields": [
          {
            "name": "window",
            "type": "bevy_ecs::entity::Entity"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::event::CursorLeft": {
      "identifier": "CursorLeft",
      "crate": "bevy_window",
      "path": "bevy_window::event::CursorLeft",
      "documentation": " An event that is sent whenever the user's cursor leaves a window.",
      "layout": {
        "kind": "Struct",
        "name": "CursorLeft",
        "fields": [
          {
            "name": "window",
            "type": "bevy_ecs::entity::Entity"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::event::CursorMoved": {
      "identifier": "CursorMoved",
      "crate": "bevy_window",
      "path": "bevy_window::event::CursorMoved",
      "documentation": " An event reporting that the mouse cursor has moved inside a window.\n\n The event is sent only if the cursor is over one of the application's windows.\n It is the translated version of [`WindowEvent::CursorMoved`] from the `winit` crate with the addition of `delta`.\n\n Not to be confused with the `MouseMotion` event from `bevy_input`.\n\n Because the range of data is limited by the window area and it may have been transformed by the OS to implement certain effects like acceleration,\n you should not use it for non-cursor-like behavior such as 3D camera control. Please see `MouseMotion` instead.\n\n [`WindowEvent::CursorMoved`]: https://docs.rs/winit/latest/winit/event/enum.WindowEvent.html#variant.CursorMoved",
      "layout": {
        "kind": "Struct",
        "name": "CursorMoved",
        "fields": [
          {
            "name": "window",
            "type": "bevy_ecs::entity::Entity"
          },
          {
            "name": "position",
            "type": "glam::Vec2"
          },
          {
            "name": "delta",
            "type": "core::option::Option<glam::Vec2>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::event::FileDragAndDrop": {
      "identifier": "FileDragAndDrop",
      "crate": "bevy_window",
      "path": "bevy_window::event::FileDragAndDrop",
      "documentation": " Events related to files being dragged and dropped on a window.",
      "layout": [
        {
          "kind": "Struct",
          "name": "DroppedFile",
          "fields": [
            {
              "name": "window",
              "type": "bevy_ecs::entity::Entity"
            },
            {
              "name": "path_buf",
              "type": "PathBuf"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "HoveredFile",
          "fields": [
            {
              "name": "window",
              "type": "bevy_ecs::entity::Entity"
            },
            {
              "name": "path_buf",
              "type": "PathBuf"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "HoveredFileCanceled",
          "fields": [
            {
              "name": "window",
              "type": "bevy_ecs::entity::Entity"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::event::Ime": {
      "identifier": "Ime",
      "crate": "bevy_window",
      "path": "bevy_window::event::Ime",
      "documentation": " An Input Method Editor event.\n\n This event is the translated version of the `WindowEvent::Ime` from the `winit` crate.\n\n It is only sent if IME was enabled on the window with [`Window::ime_enabled`](crate::window::Window::ime_enabled).",
      "layout": [
        {
          "kind": "Struct",
          "name": "Preedit",
          "fields": [
            {
              "name": "window",
              "type": "bevy_ecs::entity::Entity"
            },
            {
              "name": "value",
              "type": "String"
            },
            {
              "name": "cursor",
              "type": "core::option::Option<(usize, usize)>"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "Commit",
          "fields": [
            {
              "name": "window",
              "type": "bevy_ecs::entity::Entity"
            },
            {
              "name": "value",
              "type": "String"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "Enabled",
          "fields": [
            {
              "name": "window",
              "type": "bevy_ecs::entity::Entity"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "Disabled",
          "fields": [
            {
              "name": "window",
              "type": "bevy_ecs::entity::Entity"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::event::RequestRedraw": {
      "identifier": "RequestRedraw",
      "crate": "bevy_window",
      "path": "bevy_window::event::RequestRedraw",
      "documentation": " An event that indicates all of the application's windows should be redrawn,\n even if their control flow is set to `Wait` and there have been no window events.",
      "layout": {
        "kind": "Struct",
        "name": "RequestRedraw"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::event::WindowBackendScaleFactorChanged": {
      "identifier": "WindowBackendScaleFactorChanged",
      "crate": "bevy_window",
      "path": "bevy_window::event::WindowBackendScaleFactorChanged",
      "documentation": " An event that indicates a window's OS-reported scale factor has changed.",
      "layout": {
        "kind": "Struct",
        "name": "WindowBackendScaleFactorChanged",
        "fields": [
          {
            "name": "window",
            "type": "bevy_ecs::entity::Entity"
          },
          {
            "name": "scale_factor",
            "type": "f64"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::event::WindowCloseRequested": {
      "identifier": "WindowCloseRequested",
      "crate": "bevy_window",
      "path": "bevy_window::event::WindowCloseRequested",
      "documentation": " An event that is sent whenever the operating systems requests that a window\n be closed. This will be sent when the close button of the window is pressed.\n\n If the default [`WindowPlugin`] is used, these events are handled\n by closing the corresponding [`Window`].\n To disable this behavior, set `close_when_requested` on the [`WindowPlugin`]\n to `false`.\n\n [`WindowPlugin`]: crate::WindowPlugin\n [`Window`]: crate::Window",
      "layout": {
        "kind": "Struct",
        "name": "WindowCloseRequested",
        "fields": [
          {
            "name": "window",
            "type": "bevy_ecs::entity::Entity"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::event::WindowClosed": {
      "identifier": "WindowClosed",
      "crate": "bevy_window",
      "path": "bevy_window::event::WindowClosed",
      "documentation": " An event that is sent whenever a window is closed. This will be sent when\n the window entity loses its [`Window`](crate::window::Window) component or is despawned.",
      "layout": {
        "kind": "Struct",
        "name": "WindowClosed",
        "fields": [
          {
            "name": "window",
            "type": "bevy_ecs::entity::Entity"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::event::WindowClosing": {
      "identifier": "WindowClosing",
      "crate": "bevy_window",
      "path": "bevy_window::event::WindowClosing",
      "documentation": " An event that is sent whenever a window is closing. This will be sent when\n after a [`WindowCloseRequested`] event is received and the window is in the process of closing.",
      "layout": {
        "kind": "Struct",
        "name": "WindowClosing",
        "fields": [
          {
            "name": "window",
            "type": "bevy_ecs::entity::Entity"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::event::WindowCreated": {
      "identifier": "WindowCreated",
      "crate": "bevy_window",
      "path": "bevy_window::event::WindowCreated",
      "documentation": " An event that is sent whenever a new window is created.\n\n To create a new window, spawn an entity with a [`crate::Window`] on it.",
      "layout": {
        "kind": "Struct",
        "name": "WindowCreated",
        "fields": [
          {
            "name": "window",
            "type": "bevy_ecs::entity::Entity"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::event::WindowDestroyed": {
      "identifier": "WindowDestroyed",
      "crate": "bevy_window",
      "path": "bevy_window::event::WindowDestroyed",
      "documentation": " An event that is sent whenever a window is destroyed by the underlying window system.\n\n Note that if your application only has a single window, this event may be your last chance to\n persist state before the application terminates.",
      "layout": {
        "kind": "Struct",
        "name": "WindowDestroyed",
        "fields": [
          {
            "name": "window",
            "type": "bevy_ecs::entity::Entity"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::event::WindowEvent": {
      "identifier": "WindowEvent",
      "crate": "bevy_window",
      "path": "bevy_window::event::WindowEvent",
      "documentation": " Wraps all `bevy_window` and `bevy_input` events in a common enum.\n\n Read these events with `EventReader<WindowEvent>` if you need to\n access window events in the order they were received from the\n operating system. Otherwise, the event types are individually\n readable with `EventReader<E>` (e.g. `EventReader<KeyboardInput>`).",
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "AppLifecycle",
          "fields": [
            {
              "type": "bevy_window::event::AppLifecycle"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "CursorEntered",
          "fields": [
            {
              "type": "bevy_window::event::CursorEntered"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "CursorLeft",
          "fields": [
            {
              "type": "bevy_window::event::CursorLeft"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "CursorMoved",
          "fields": [
            {
              "type": "bevy_window::event::CursorMoved"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "FileDragAndDrop",
          "fields": [
            {
              "type": "bevy_window::event::FileDragAndDrop"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Ime",
          "fields": [
            {
              "type": "bevy_window::event::Ime"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "RequestRedraw",
          "fields": [
            {
              "type": "bevy_window::event::RequestRedraw"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "WindowBackendScaleFactorChanged",
          "fields": [
            {
              "type": "bevy_window::event::WindowBackendScaleFactorChanged"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "WindowCloseRequested",
          "fields": [
            {
              "type": "bevy_window::event::WindowCloseRequested"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "WindowCreated",
          "fields": [
            {
              "type": "bevy_window::event::WindowCreated"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "WindowDestroyed",
          "fields": [
            {
              "type": "bevy_window::event::WindowDestroyed"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "WindowFocused",
          "fields": [
            {
              "type": "bevy_window::event::WindowFocused"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "WindowMoved",
          "fields": [
            {
              "type": "bevy_window::event::WindowMoved"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "WindowOccluded",
          "fields": [
            {
              "type": "bevy_window::event::WindowOccluded"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "WindowResized",
          "fields": [
            {
              "type": "bevy_window::event::WindowResized"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "WindowScaleFactorChanged",
          "fields": [
            {
              "type": "bevy_window::event::WindowScaleFactorChanged"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "WindowThemeChanged",
          "fields": [
            {
              "type": "bevy_window::event::WindowThemeChanged"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "MouseButtonInput",
          "fields": [
            {
              "type": "bevy_input::mouse::MouseButtonInput"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "MouseMotion",
          "fields": [
            {
              "type": "bevy_input::mouse::MouseMotion"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "MouseWheel",
          "fields": [
            {
              "type": "bevy_input::mouse::MouseWheel"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "PinchGesture",
          "fields": [
            {
              "type": "bevy_input::gestures::PinchGesture"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "RotationGesture",
          "fields": [
            {
              "type": "bevy_input::gestures::RotationGesture"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "DoubleTapGesture",
          "fields": [
            {
              "type": "bevy_input::gestures::DoubleTapGesture"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "PanGesture",
          "fields": [
            {
              "type": "bevy_input::gestures::PanGesture"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "TouchInput",
          "fields": [
            {
              "type": "bevy_input::touch::TouchInput"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "KeyboardInput",
          "fields": [
            {
              "type": "bevy_input::keyboard::KeyboardInput"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "KeyboardFocusLost",
          "fields": [
            {
              "type": "bevy_input::keyboard::KeyboardFocusLost"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::event::WindowFocused": {
      "identifier": "WindowFocused",
      "crate": "bevy_window",
      "path": "bevy_window::event::WindowFocused",
      "documentation": " An event that indicates a window has received or lost focus.",
      "layout": {
        "kind": "Struct",
        "name": "WindowFocused",
        "fields": [
          {
            "name": "window",
            "type": "bevy_ecs::entity::Entity"
          },
          {
            "name": "focused",
            "type": "bool"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::event::WindowMoved": {
      "identifier": "WindowMoved",
      "crate": "bevy_window",
      "path": "bevy_window::event::WindowMoved",
      "documentation": " An event that is sent when a window is repositioned in physical pixels.",
      "layout": {
        "kind": "Struct",
        "name": "WindowMoved",
        "fields": [
          {
            "name": "window",
            "type": "bevy_ecs::entity::Entity"
          },
          {
            "name": "position",
            "type": "glam::IVec2"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::event::WindowOccluded": {
      "identifier": "WindowOccluded",
      "crate": "bevy_window",
      "path": "bevy_window::event::WindowOccluded",
      "documentation": " The window has been occluded (completely hidden from view).\n\n This is different to window visibility as it depends on\n whether the window is closed, minimized, set invisible,\n or fully occluded by another window.\n\n It is the translated version of [`WindowEvent::Occluded`] from the `winit` crate.\n\n [`WindowEvent::Occluded`]: https://docs.rs/winit/latest/winit/event/enum.WindowEvent.html#variant.Occluded",
      "layout": {
        "kind": "Struct",
        "name": "WindowOccluded",
        "fields": [
          {
            "name": "window",
            "type": "bevy_ecs::entity::Entity"
          },
          {
            "name": "occluded",
            "type": "bool"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::event::WindowResized": {
      "identifier": "WindowResized",
      "crate": "bevy_window",
      "path": "bevy_window::event::WindowResized",
      "documentation": " A window event that is sent whenever a window's logical size has changed.",
      "layout": {
        "kind": "Struct",
        "name": "WindowResized",
        "fields": [
          {
            "name": "window",
            "type": "bevy_ecs::entity::Entity"
          },
          {
            "name": "width",
            "type": "f32"
          },
          {
            "name": "height",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::event::WindowScaleFactorChanged": {
      "identifier": "WindowScaleFactorChanged",
      "crate": "bevy_window",
      "path": "bevy_window::event::WindowScaleFactorChanged",
      "documentation": " An event that indicates a window's scale factor has changed.",
      "layout": {
        "kind": "Struct",
        "name": "WindowScaleFactorChanged",
        "fields": [
          {
            "name": "window",
            "type": "bevy_ecs::entity::Entity"
          },
          {
            "name": "scale_factor",
            "type": "f64"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::event::WindowThemeChanged": {
      "identifier": "WindowThemeChanged",
      "crate": "bevy_window",
      "path": "bevy_window::event::WindowThemeChanged",
      "documentation": " An event sent when the system theme changes for a window.\n\n This event is only sent when the window is relying on the system theme to control its appearance.\n i.e. It is only sent when [`Window::window_theme`](crate::window::Window::window_theme) is `None` and the system theme changes.",
      "layout": {
        "kind": "Struct",
        "name": "WindowThemeChanged",
        "fields": [
          {
            "name": "window",
            "type": "bevy_ecs::entity::Entity"
          },
          {
            "name": "theme",
            "type": "bevy_window::window::WindowTheme"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::monitor::Monitor": {
      "identifier": "Monitor",
      "crate": "bevy_window",
      "path": "bevy_window::monitor::Monitor",
      "documentation": " Represents an available monitor as reported by the user's operating system, which can be used\n to query information about the display, such as its size, position, and video modes.\n\n Each monitor corresponds to an entity and can be used to position a monitor using\n [`crate::window::MonitorSelection::Entity`].\n\n # Warning\n\n This component is synchronized with `winit` through `bevy_winit`, but is effectively\n read-only as `winit` does not support changing monitor properties.",
      "layout": {
        "kind": "Struct",
        "name": "Monitor",
        "fields": [
          {
            "name": "name",
            "type": "core::option::Option<alloc::string::String>"
          },
          {
            "name": "physical_height",
            "type": "u32"
          },
          {
            "name": "physical_width",
            "type": "u32"
          },
          {
            "name": "physical_position",
            "type": "glam::IVec2"
          },
          {
            "name": "refresh_rate_millihertz",
            "type": "core::option::Option<u32>"
          },
          {
            "name": "scale_factor",
            "type": "f64"
          },
          {
            "name": "video_modes",
            "type": "alloc::vec::Vec<bevy_window::monitor::VideoMode>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::monitor::VideoMode": {
      "identifier": "VideoMode",
      "crate": "bevy_window",
      "path": "bevy_window::monitor::VideoMode",
      "documentation": " Represents a video mode that a monitor supports",
      "layout": {
        "kind": "Struct",
        "name": "VideoMode",
        "fields": [
          {
            "name": "physical_size",
            "type": "glam::UVec2"
          },
          {
            "name": "bit_depth",
            "type": "u16"
          },
          {
            "name": "refresh_rate_millihertz",
            "type": "u32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::system_cursor::SystemCursorIcon": {
      "identifier": "SystemCursorIcon",
      "crate": "bevy_window",
      "path": "bevy_window::system_cursor::SystemCursorIcon",
      "documentation": " The icon to display for a window.\n\n Examples of all of these cursors can be found [here](https://www.w3schools.com/cssref/playit.php?filename=playcss_cursor&preval=crosshair).\n This `enum` is simply a copy of a similar `enum` found in [`winit`](https://docs.rs/winit/latest/winit/window/enum.CursorIcon.html).\n `winit`, in turn, is based upon the [CSS3 UI spec](https://www.w3.org/TR/css-ui-3/#cursor).\n\n See the [`window_settings`] example for usage.\n\n [`window_settings`]: https://github.com/bevyengine/bevy/blob/latest/examples/window/window_settings.rs",
      "layout": [
        {
          "kind": "Unit",
          "name": "Default"
        },
        {
          "kind": "Unit",
          "name": "ContextMenu"
        },
        {
          "kind": "Unit",
          "name": "Help"
        },
        {
          "kind": "Unit",
          "name": "Pointer"
        },
        {
          "kind": "Unit",
          "name": "Progress"
        },
        {
          "kind": "Unit",
          "name": "Wait"
        },
        {
          "kind": "Unit",
          "name": "Cell"
        },
        {
          "kind": "Unit",
          "name": "Crosshair"
        },
        {
          "kind": "Unit",
          "name": "Text"
        },
        {
          "kind": "Unit",
          "name": "VerticalText"
        },
        {
          "kind": "Unit",
          "name": "Alias"
        },
        {
          "kind": "Unit",
          "name": "Copy"
        },
        {
          "kind": "Unit",
          "name": "Move"
        },
        {
          "kind": "Unit",
          "name": "NoDrop"
        },
        {
          "kind": "Unit",
          "name": "NotAllowed"
        },
        {
          "kind": "Unit",
          "name": "Grab"
        },
        {
          "kind": "Unit",
          "name": "Grabbing"
        },
        {
          "kind": "Unit",
          "name": "EResize"
        },
        {
          "kind": "Unit",
          "name": "NResize"
        },
        {
          "kind": "Unit",
          "name": "NeResize"
        },
        {
          "kind": "Unit",
          "name": "NwResize"
        },
        {
          "kind": "Unit",
          "name": "SResize"
        },
        {
          "kind": "Unit",
          "name": "SeResize"
        },
        {
          "kind": "Unit",
          "name": "SwResize"
        },
        {
          "kind": "Unit",
          "name": "WResize"
        },
        {
          "kind": "Unit",
          "name": "EwResize"
        },
        {
          "kind": "Unit",
          "name": "NsResize"
        },
        {
          "kind": "Unit",
          "name": "NeswResize"
        },
        {
          "kind": "Unit",
          "name": "NwseResize"
        },
        {
          "kind": "Unit",
          "name": "ColResize"
        },
        {
          "kind": "Unit",
          "name": "RowResize"
        },
        {
          "kind": "Unit",
          "name": "AllScroll"
        },
        {
          "kind": "Unit",
          "name": "ZoomIn"
        },
        {
          "kind": "Unit",
          "name": "ZoomOut"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::window::CompositeAlphaMode": {
      "identifier": "CompositeAlphaMode",
      "crate": "bevy_window",
      "path": "bevy_window::window::CompositeAlphaMode",
      "documentation": " Specifies how the alpha channel of the textures should be handled during compositing, for a [`Window`].",
      "layout": [
        {
          "kind": "Unit",
          "name": "Auto"
        },
        {
          "kind": "Unit",
          "name": "Opaque"
        },
        {
          "kind": "Unit",
          "name": "PreMultiplied"
        },
        {
          "kind": "Unit",
          "name": "PostMultiplied"
        },
        {
          "kind": "Unit",
          "name": "Inherit"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::window::CursorGrabMode": {
      "identifier": "CursorGrabMode",
      "crate": "bevy_window",
      "path": "bevy_window::window::CursorGrabMode",
      "documentation": " Defines if and how the cursor is grabbed by a [`Window`].\n\n ## Platform-specific\n\n - **`Windows`** doesn't support [`CursorGrabMode::Locked`]\n - **`macOS`** doesn't support [`CursorGrabMode::Confined`]\n - **`iOS/Android`** don't have cursors.\n\n Since `Windows` and `macOS` have different [`CursorGrabMode`] support, we first try to set the grab mode that was asked for. If it doesn't work then use the alternate grab mode.",
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "Unit",
          "name": "Confined"
        },
        {
          "kind": "Unit",
          "name": "Locked"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::window::CursorOptions": {
      "identifier": "CursorOptions",
      "crate": "bevy_window",
      "path": "bevy_window::window::CursorOptions",
      "documentation": " Cursor data for a [`Window`].",
      "layout": {
        "kind": "Struct",
        "name": "CursorOptions",
        "fields": [
          {
            "name": "visible",
            "type": "bool"
          },
          {
            "name": "grab_mode",
            "type": "bevy_window::window::CursorGrabMode"
          },
          {
            "name": "hit_test",
            "type": "bool"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::window::EnabledButtons": {
      "identifier": "EnabledButtons",
      "crate": "bevy_window",
      "path": "bevy_window::window::EnabledButtons",
      "documentation": " Specifies which [`Window`] control buttons should be enabled.\n\n ## Platform-specific\n\n **`iOS`**, **`Android`**, and the **`Web`** do not have window control buttons.\n\n On some **`Linux`** environments these values have no effect.",
      "layout": {
        "kind": "Struct",
        "name": "EnabledButtons",
        "fields": [
          {
            "name": "minimize",
            "type": "bool"
          },
          {
            "name": "maximize",
            "type": "bool"
          },
          {
            "name": "close",
            "type": "bool"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::window::InternalWindowState": {
      "identifier": "InternalWindowState",
      "crate": "bevy_window",
      "path": "bevy_window::window::InternalWindowState",
      "documentation": " Stores internal [`Window`] state that isn't directly accessible.",
      "layout": {
        "kind": "Struct",
        "name": "InternalWindowState",
        "fields": [
          {
            "name": "minimize_request",
            "type": "core::option::Option<bool>"
          },
          {
            "name": "maximize_request",
            "type": "core::option::Option<bool>"
          },
          {
            "name": "drag_move_request",
            "type": "bool"
          },
          {
            "name": "drag_resize_request",
            "type": "core::option::Option<bevy_math::compass::CompassOctant>"
          },
          {
            "name": "physical_cursor_position",
            "type": "core::option::Option<glam::DVec2>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::window::MonitorSelection": {
      "identifier": "MonitorSelection",
      "crate": "bevy_window",
      "path": "bevy_window::window::MonitorSelection",
      "documentation": " References a screen monitor.\n\n Used when centering a [`Window`] on a monitor.",
      "layout": [
        {
          "kind": "Unit",
          "name": "Current"
        },
        {
          "kind": "Unit",
          "name": "Primary"
        },
        {
          "kind": "TupleStruct",
          "name": "Index",
          "fields": [
            {
              "type": "usize"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Entity",
          "fields": [
            {
              "type": "bevy_ecs::entity::Entity"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::window::PresentMode": {
      "identifier": "PresentMode",
      "crate": "bevy_window",
      "path": "bevy_window::window::PresentMode",
      "documentation": " Presentation mode for a [`Window`].\n\n The presentation mode specifies when a frame is presented to the window. The [`Fifo`]\n option corresponds to a traditional `VSync`, where the framerate is capped by the\n display refresh rate. Both [`Immediate`] and [`Mailbox`] are low-latency and are not\n capped by the refresh rate, but may not be available on all platforms. Tearing\n may be observed with [`Immediate`] mode, but will not be observed with [`Mailbox`] or\n [`Fifo`].\n\n [`AutoVsync`] or [`AutoNoVsync`] will gracefully fallback to [`Fifo`] when unavailable.\n\n [`Immediate`] or [`Mailbox`] will panic if not supported by the platform.\n\n [`Fifo`]: PresentMode::Fifo\n [`FifoRelaxed`]: PresentMode::FifoRelaxed\n [`Immediate`]: PresentMode::Immediate\n [`Mailbox`]: PresentMode::Mailbox\n [`AutoVsync`]: PresentMode::AutoVsync\n [`AutoNoVsync`]: PresentMode::AutoNoVsync",
      "layout": [
        {
          "kind": "Unit",
          "name": "AutoVsync"
        },
        {
          "kind": "Unit",
          "name": "AutoNoVsync"
        },
        {
          "kind": "Unit",
          "name": "Fifo"
        },
        {
          "kind": "Unit",
          "name": "FifoRelaxed"
        },
        {
          "kind": "Unit",
          "name": "Immediate"
        },
        {
          "kind": "Unit",
          "name": "Mailbox"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::window::PrimaryWindow": {
      "identifier": "PrimaryWindow",
      "crate": "bevy_window",
      "path": "bevy_window::window::PrimaryWindow",
      "documentation": " Marker [`Component`] for the window considered the primary window.\n\n Currently this is assumed to only exist on 1 entity at a time.\n\n [`WindowPlugin`](crate::WindowPlugin) will spawn a [`Window`] entity\n with this component if [`primary_window`](crate::WindowPlugin::primary_window)\n is `Some`.",
      "layout": {
        "kind": "Struct",
        "name": "PrimaryWindow"
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::window::VideoModeSelection": {
      "identifier": "VideoModeSelection",
      "crate": "bevy_window",
      "path": "bevy_window::window::VideoModeSelection",
      "documentation": " References an exclusive fullscreen video mode.\n\n Used when setting [`WindowMode::Fullscreen`] on a window.",
      "layout": [
        {
          "kind": "Unit",
          "name": "Current"
        },
        {
          "kind": "TupleStruct",
          "name": "Specific",
          "fields": [
            {
              "type": "bevy_window::monitor::VideoMode"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::window::Window": {
      "identifier": "Window",
      "crate": "bevy_window",
      "path": "bevy_window::window::Window",
      "documentation": " The defining [`Component`] for window entities,\n storing information about how it should appear and behave.\n\n Each window corresponds to an entity, and is uniquely identified by the value of their [`Entity`].\n When the [`Window`] component is added to an entity, a new window will be opened.\n When it is removed or the entity is despawned, the window will close.\n\n The primary window entity (and the corresponding window) is spawned by default\n by [`WindowPlugin`](crate::WindowPlugin) and is marked with the [`PrimaryWindow`] component.\n\n This component is synchronized with `winit` through `bevy_winit`:\n it will reflect the current state of the window and can be modified to change this state.\n\n # Example\n\n Because this component is synchronized with `winit`, it can be used to perform\n OS-integrated windowing operations. For example, here's a simple system\n to change the window mode:\n\n ```\n # use bevy_ecs::query::With;\n # use bevy_ecs::system::Query;\n # use bevy_window::{WindowMode, PrimaryWindow, Window, MonitorSelection, VideoModeSelection};\n fn change_window_mode(mut windows: Query<&mut Window, With<PrimaryWindow>>) {\n     // Query returns one window typically.\n     for mut window in windows.iter_mut() {\n         window.mode =\n             WindowMode::Fullscreen(MonitorSelection::Current, VideoModeSelection::Current);\n     }\n }\n ```",
      "layout": {
        "kind": "Struct",
        "name": "Window",
        "fields": [
          {
            "name": "cursor_options",
            "type": "bevy_window::window::CursorOptions"
          },
          {
            "name": "present_mode",
            "type": "bevy_window::window::PresentMode"
          },
          {
            "name": "mode",
            "type": "bevy_window::window::WindowMode"
          },
          {
            "name": "position",
            "type": "bevy_window::window::WindowPosition"
          },
          {
            "name": "resolution",
            "type": "bevy_window::window::WindowResolution"
          },
          {
            "name": "title",
            "type": "String"
          },
          {
            "name": "name",
            "type": "core::option::Option<alloc::string::String>"
          },
          {
            "name": "composite_alpha_mode",
            "type": "bevy_window::window::CompositeAlphaMode"
          },
          {
            "name": "resize_constraints",
            "type": "bevy_window::window::WindowResizeConstraints"
          },
          {
            "name": "resizable",
            "type": "bool"
          },
          {
            "name": "enabled_buttons",
            "type": "bevy_window::window::EnabledButtons"
          },
          {
            "name": "decorations",
            "type": "bool"
          },
          {
            "name": "transparent",
            "type": "bool"
          },
          {
            "name": "focused",
            "type": "bool"
          },
          {
            "name": "window_level",
            "type": "bevy_window::window::WindowLevel"
          },
          {
            "name": "canvas",
            "type": "core::option::Option<alloc::string::String>"
          },
          {
            "name": "fit_canvas_to_parent",
            "type": "bool"
          },
          {
            "name": "prevent_default_event_handling",
            "type": "bool"
          },
          {
            "name": "internal",
            "type": "bevy_window::window::InternalWindowState"
          },
          {
            "name": "ime_enabled",
            "type": "bool"
          },
          {
            "name": "ime_position",
            "type": "glam::Vec2"
          },
          {
            "name": "window_theme",
            "type": "core::option::Option<bevy_window::window::WindowTheme>"
          },
          {
            "name": "visible",
            "type": "bool"
          },
          {
            "name": "skip_taskbar",
            "type": "bool"
          },
          {
            "name": "clip_children",
            "type": "bool"
          },
          {
            "name": "desired_maximum_frame_latency",
            "type": "core::option::Option<core::num::NonZeroU32>"
          },
          {
            "name": "recognize_pinch_gesture",
            "type": "bool"
          },
          {
            "name": "recognize_rotation_gesture",
            "type": "bool"
          },
          {
            "name": "recognize_doubletap_gesture",
            "type": "bool"
          },
          {
            "name": "recognize_pan_gesture",
            "type": "core::option::Option<(u8, u8)>"
          },
          {
            "name": "movable_by_window_background",
            "type": "bool"
          },
          {
            "name": "fullsize_content_view",
            "type": "bool"
          },
          {
            "name": "has_shadow",
            "type": "bool"
          },
          {
            "name": "titlebar_shown",
            "type": "bool"
          },
          {
            "name": "titlebar_transparent",
            "type": "bool"
          },
          {
            "name": "titlebar_show_title",
            "type": "bool"
          },
          {
            "name": "titlebar_show_buttons",
            "type": "bool"
          },
          {
            "name": "prefers_home_indicator_hidden",
            "type": "bool"
          },
          {
            "name": "prefers_status_bar_hidden",
            "type": "bool"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::window::WindowLevel": {
      "identifier": "WindowLevel",
      "crate": "bevy_window",
      "path": "bevy_window::window::WindowLevel",
      "documentation": " Specifies where a [`Window`] should appear relative to other overlapping windows (on top or under) .\n\n Levels are groups of windows with respect to their z-position.\n\n The relative ordering between windows in different window levels is fixed.\n The z-order of windows within the same window level may change dynamically on user interaction.\n\n ## Platform-specific\n\n - **iOS / Android / Web / Wayland:** Unsupported.",
      "layout": [
        {
          "kind": "Unit",
          "name": "AlwaysOnBottom"
        },
        {
          "kind": "Unit",
          "name": "Normal"
        },
        {
          "kind": "Unit",
          "name": "AlwaysOnTop"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::window::WindowMode": {
      "identifier": "WindowMode",
      "crate": "bevy_window",
      "path": "bevy_window::window::WindowMode",
      "documentation": " Defines the way a [`Window`] is displayed.",
      "layout": [
        {
          "kind": "Unit",
          "name": "Windowed"
        },
        {
          "kind": "TupleStruct",
          "name": "BorderlessFullscreen",
          "fields": [
            {
              "type": "bevy_window::window::MonitorSelection"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Fullscreen",
          "fields": [
            {
              "type": "bevy_window::window::MonitorSelection"
            },
            {
              "type": "bevy_window::window::VideoModeSelection"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::window::WindowPosition": {
      "identifier": "WindowPosition",
      "crate": "bevy_window",
      "path": "bevy_window::window::WindowPosition",
      "documentation": " Defines where a [`Window`] should be placed on the screen.",
      "layout": [
        {
          "kind": "Unit",
          "name": "Automatic"
        },
        {
          "kind": "TupleStruct",
          "name": "Centered",
          "fields": [
            {
              "type": "bevy_window::window::MonitorSelection"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "At",
          "fields": [
            {
              "type": "glam::IVec2"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::window::WindowRef": {
      "identifier": "WindowRef",
      "crate": "bevy_window",
      "path": "bevy_window::window::WindowRef",
      "documentation": " Reference to a [`Window`], whether it be a direct link to a specific entity or\n a more vague defaulting choice.",
      "layout": [
        {
          "kind": "Unit",
          "name": "Primary"
        },
        {
          "kind": "TupleStruct",
          "name": "Entity",
          "fields": [
            {
              "type": "bevy_ecs::entity::Entity"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::window::WindowResizeConstraints": {
      "identifier": "WindowResizeConstraints",
      "crate": "bevy_window",
      "path": "bevy_window::window::WindowResizeConstraints",
      "documentation": " The size limits on a [`Window`].\n\n These values are measured in logical pixels (see [`WindowResolution`]), so the user's\n scale factor does affect the size limits on the window.\n\n Please note that if the window is resizable, then when the window is\n maximized it may have a size outside of these limits. The functionality\n required to disable maximizing is not yet exposed by winit.",
      "layout": {
        "kind": "Struct",
        "name": "WindowResizeConstraints",
        "fields": [
          {
            "name": "min_width",
            "type": "f32"
          },
          {
            "name": "min_height",
            "type": "f32"
          },
          {
            "name": "max_width",
            "type": "f32"
          },
          {
            "name": "max_height",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::window::WindowResolution": {
      "identifier": "WindowResolution",
      "crate": "bevy_window",
      "path": "bevy_window::window::WindowResolution",
      "documentation": " Controls the size of a [`Window`]\n\n ## Physical, logical and requested sizes\n\n There are three sizes associated with a window:\n - the physical size,\n   which represents the actual height and width in physical pixels\n   the window occupies on the monitor,\n - the logical size,\n   which represents the size that should be used to scale elements\n   inside the window, measured in logical pixels,\n - the requested size,\n   measured in logical pixels, which is the value submitted\n   to the API when creating the window, or requesting that it be resized.\n\n ## Scale factor\n\n The reason logical size and physical size are separated and can be different\n is to account for the cases where:\n - several monitors have different pixel densities,\n - the user has set up a pixel density preference in its operating system,\n - the Bevy `App` has specified a specific scale factor between both.\n\n The factor between physical size and logical size can be retrieved with\n [`WindowResolution::scale_factor`].\n\n For the first two cases, a scale factor is set automatically by the operating\n system through the window backend. You can get it with\n [`WindowResolution::base_scale_factor`].\n\n For the third case, you can override this automatic scale factor with\n [`WindowResolution::set_scale_factor_override`].\n\n ## Requested and obtained sizes\n\n The logical size should be equal to the requested size after creating/resizing,\n when possible.\n The reason the requested size and logical size might be different\n is because the corresponding physical size might exceed limits (either the\n size limits of the monitor, or limits defined in [`WindowResizeConstraints`]).\n\n Note: The requested size is not kept in memory, for example requesting a size\n too big for the screen, making the logical size different from the requested size,\n and then setting a scale factor that makes the previous requested size within\n the limits of the screen will not get back that previous requested size.",
      "layout": {
        "kind": "Struct",
        "name": "WindowResolution",
        "fields": [
          {
            "name": "physical_width",
            "type": "u32"
          },
          {
            "name": "physical_height",
            "type": "u32"
          },
          {
            "name": "scale_factor_override",
            "type": "core::option::Option<f32>"
          },
          {
            "name": "scale_factor",
            "type": "f32"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_window::window::WindowTheme": {
      "identifier": "WindowTheme",
      "crate": "bevy_window",
      "path": "bevy_window::window::WindowTheme",
      "documentation": " The [`Window`] theme variant to use.",
      "layout": [
        {
          "kind": "Unit",
          "name": "Light"
        },
        {
          "kind": "Unit",
          "name": "Dark"
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_winit::cursor::CursorIcon": {
      "identifier": "CursorIcon",
      "crate": "bevy_winit",
      "path": "bevy_winit::cursor::CursorIcon",
      "documentation": " Insert into a window entity to set the cursor for that window.",
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Custom",
          "fields": [
            {
              "type": "bevy_winit::custom_cursor::CustomCursor"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "System",
          "fields": [
            {
              "type": "bevy_window::system_cursor::SystemCursorIcon"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_winit::custom_cursor::CustomCursor": {
      "identifier": "CustomCursor",
      "crate": "bevy_winit",
      "path": "bevy_winit::custom_cursor::CustomCursor",
      "documentation": " Custom cursor image data.",
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Image",
          "fields": [
            {
              "type": "bevy_winit::custom_cursor::CustomCursorImage"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_winit::custom_cursor::CustomCursorImage": {
      "identifier": "CustomCursorImage",
      "crate": "bevy_winit",
      "path": "bevy_winit::custom_cursor::CustomCursorImage",
      "documentation": " A custom cursor created from an image.",
      "layout": {
        "kind": "Struct",
        "name": "CustomCursorImage",
        "fields": [
          {
            "name": "handle",
            "type": "bevy_asset::handle::Handle<bevy_image::image::Image>"
          },
          {
            "name": "texture_atlas",
            "type": "core::option::Option<bevy_image::texture_atlas::TextureAtlas>"
          },
          {
            "name": "flip_x",
            "type": "bool"
          },
          {
            "name": "flip_y",
            "type": "bool"
          },
          {
            "name": "rect",
            "type": "core::option::Option<bevy_math::rects::urect::URect>"
          },
          {
            "name": "hotspot",
            "type": "(u16, u16)"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bool": {
      "identifier": "bool",
      "path": "bool",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "char": {
      "identifier": "char",
      "path": "char",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "core::num::NonZeroI16": {
      "identifier": "NonZeroI16",
      "crate": "core",
      "path": "core::num::NonZeroI16",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "core::num::NonZeroU16": {
      "identifier": "NonZeroU16",
      "crate": "core",
      "path": "core::num::NonZeroU16",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "core::num::NonZeroU32": {
      "identifier": "NonZeroU32",
      "crate": "core",
      "path": "core::num::NonZeroU32",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "f32": {
      "identifier": "f32",
      "path": "f32",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "f64": {
      "identifier": "f64",
      "path": "f64",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "i128": {
      "identifier": "i128",
      "path": "i128",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "i16": {
      "identifier": "i16",
      "path": "i16",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "i32": {
      "identifier": "i32",
      "path": "i32",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "i64": {
      "identifier": "i64",
      "path": "i64",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "i8": {
      "identifier": "i8",
      "path": "i8",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "isize": {
      "identifier": "isize",
      "path": "isize",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "petgraph::graph::NodeIndex": {
      "identifier": "NodeIndex",
      "crate": "petgraph",
      "path": "petgraph::graph::NodeIndex",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "u128": {
      "identifier": "u128",
      "path": "u128",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "u16": {
      "identifier": "u16",
      "path": "u16",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "u32": {
      "identifier": "u32",
      "path": "u32",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "u64": {
      "identifier": "u64",
      "path": "u64",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "u8": {
      "identifier": "u8",
      "path": "u8",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "usize": {
      "identifier": "usize",
      "path": "usize",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "alloc::borrow::Cow<str>": {
      "identifier": "Cow",
      "crate": "alloc",
      "path": "alloc::borrow::Cow<str>",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "alloc::vec::Vec<alloc::string::String>": {
      "identifier": "Vec",
      "crate": "alloc",
      "path": "alloc::vec::Vec<alloc::string::String>",
      "generics": [
        {
          "type_id": "String",
          "name": "T"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "alloc::vec::Vec<bevy_animation::TimedAnimationEvent>": {
      "identifier": "Vec",
      "crate": "alloc",
      "path": "alloc::vec::Vec<bevy_animation::TimedAnimationEvent>",
      "generics": [
        {
          "type_id": "bevy_animation::TimedAnimationEvent",
          "name": "T"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "alloc::vec::Vec<bevy_animation::transition::AnimationTransition>": {
      "identifier": "Vec",
      "crate": "alloc",
      "path": "alloc::vec::Vec<bevy_animation::transition::AnimationTransition>",
      "generics": [
        {
          "type_id": "bevy_animation::transition::AnimationTransition",
          "name": "T"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "alloc::vec::Vec<bevy_ecs::entity::Entity>": {
      "identifier": "Vec",
      "crate": "alloc",
      "path": "alloc::vec::Vec<bevy_ecs::entity::Entity>",
      "generics": [
        {
          "type_id": "bevy_ecs::entity::Entity",
          "name": "T"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "alloc::vec::Vec<bevy_math::rects::urect::URect>": {
      "identifier": "Vec",
      "crate": "alloc",
      "path": "alloc::vec::Vec<bevy_math::rects::urect::URect>",
      "generics": [
        {
          "type_id": "bevy_math::rects::urect::URect",
          "name": "T"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "alloc::vec::Vec<bevy_mod_scripting_core::bindings::query::ScriptQueryResult>": {
      "identifier": "Vec",
      "crate": "alloc",
      "path": "alloc::vec::Vec<bevy_mod_scripting_core::bindings::query::ScriptQueryResult>",
      "generics": [
        {
          "type_id": "bevy_mod_scripting_core::bindings::query::ScriptQueryResult",
          "name": "T"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "alloc::vec::Vec<bevy_mod_scripting_core::bindings::reference::ReflectReference>": {
      "identifier": "Vec",
      "crate": "alloc",
      "path": "alloc::vec::Vec<bevy_mod_scripting_core::bindings::reference::ReflectReference>",
      "generics": [
        {
          "type_id": "ReflectReference",
          "name": "T"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "alloc::vec::Vec<bevy_mod_scripting_core::docgen::info::FunctionArgInfo>": {
      "identifier": "Vec",
      "crate": "alloc",
      "path": "alloc::vec::Vec<bevy_mod_scripting_core::docgen::info::FunctionArgInfo>",
      "generics": [
        {
          "type_id": "bevy_mod_scripting_core::docgen::info::FunctionArgInfo",
          "name": "T"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "alloc::vec::Vec<bevy_mod_scripting_core::docgen::info::FunctionInfo>": {
      "identifier": "Vec",
      "crate": "alloc",
      "path": "alloc::vec::Vec<bevy_mod_scripting_core::docgen::info::FunctionInfo>",
      "generics": [
        {
          "type_id": "bevy_mod_scripting_core::docgen::info::FunctionInfo",
          "name": "T"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "alloc::vec::Vec<bevy_pbr::light::Cascade>": {
      "identifier": "Vec",
      "crate": "alloc",
      "path": "alloc::vec::Vec<bevy_pbr::light::Cascade>",
      "generics": [
        {
          "type_id": "bevy_pbr::light::Cascade",
          "name": "T"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "alloc::vec::Vec<bevy_system_reflection::ReflectSystem>": {
      "identifier": "Vec",
      "crate": "alloc",
      "path": "alloc::vec::Vec<bevy_system_reflection::ReflectSystem>",
      "generics": [
        {
          "type_id": "bevy_system_reflection::ReflectSystem",
          "name": "T"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "alloc::vec::Vec<bevy_text::glyph::PositionedGlyph>": {
      "identifier": "Vec",
      "crate": "alloc",
      "path": "alloc::vec::Vec<bevy_text::glyph::PositionedGlyph>",
      "generics": [
        {
          "type_id": "bevy_text::glyph::PositionedGlyph",
          "name": "T"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "alloc::vec::Vec<bevy_ui::ui_node::GridTrack>": {
      "identifier": "Vec",
      "crate": "alloc",
      "path": "alloc::vec::Vec<bevy_ui::ui_node::GridTrack>",
      "generics": [
        {
          "type_id": "bevy_ui::ui_node::GridTrack",
          "name": "T"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "alloc::vec::Vec<bevy_ui::ui_node::RepeatedGridTrack>": {
      "identifier": "Vec",
      "crate": "alloc",
      "path": "alloc::vec::Vec<bevy_ui::ui_node::RepeatedGridTrack>",
      "generics": [
        {
          "type_id": "bevy_ui::ui_node::RepeatedGridTrack",
          "name": "T"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "alloc::vec::Vec<bevy_ui::ui_node::ShadowStyle>": {
      "identifier": "Vec",
      "crate": "alloc",
      "path": "alloc::vec::Vec<bevy_ui::ui_node::ShadowStyle>",
      "generics": [
        {
          "type_id": "bevy_ui::ui_node::ShadowStyle",
          "name": "T"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "alloc::vec::Vec<bevy_window::monitor::VideoMode>": {
      "identifier": "Vec",
      "crate": "alloc",
      "path": "alloc::vec::Vec<bevy_window::monitor::VideoMode>",
      "generics": [
        {
          "type_id": "bevy_window::monitor::VideoMode",
          "name": "T"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "alloc::vec::Vec<f32>": {
      "identifier": "Vec",
      "crate": "alloc",
      "path": "alloc::vec::Vec<f32>",
      "generics": [
        {
          "type_id": "f32",
          "name": "T"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "alloc::vec::Vec<petgraph::graph::NodeIndex>": {
      "identifier": "Vec",
      "crate": "alloc",
      "path": "alloc::vec::Vec<petgraph::graph::NodeIndex>",
      "generics": [
        {
          "type_id": "petgraph::graph::NodeIndex",
          "name": "T"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "alloc::vec::Vec<u16>": {
      "identifier": "Vec",
      "crate": "alloc",
      "path": "alloc::vec::Vec<u16>",
      "generics": [
        {
          "type_id": "u16",
          "name": "T"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "alloc::vec::Vec<u32>": {
      "identifier": "Vec",
      "crate": "alloc",
      "path": "alloc::vec::Vec<u32>",
      "generics": [
        {
          "type_id": "u32",
          "name": "T"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "alloc::vec::Vec<u64>": {
      "identifier": "Vec",
      "crate": "alloc",
      "path": "alloc::vec::Vec<u64>",
      "generics": [
        {
          "type_id": "u64",
          "name": "T"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "bevy_asset::handle::Handle<()>": {
      "identifier": "Handle",
      "crate": "bevy_asset",
      "path": "bevy_asset::handle::Handle<()>",
      "generics": [
        {
          "type_id": "()",
          "name": "A"
        }
      ],
      "documentation": " A handle to a specific [`Asset`] of type `A`. Handles act as abstract \"references\" to\n assets, whose data are stored in the [`Assets<A>`](crate::prelude::Assets) resource,\n avoiding the need to store multiple copies of the same data.\n\n If a [`Handle`] is [`Handle::Strong`], the [`Asset`] will be kept\n alive until the [`Handle`] is dropped. If a [`Handle`] is [`Handle::Weak`], it does not necessarily reference a live [`Asset`],\n nor will it keep assets alive.\n\n Modifying a *handle* will change which existing asset is referenced, but modifying the *asset*\n (by mutating the [`Assets`](crate::prelude::Assets) resource) will change the asset for all handles referencing it.\n\n [`Handle`] can be cloned. If a [`Handle::Strong`] is cloned, the referenced [`Asset`] will not be freed until _all_ instances\n of the [`Handle`] are dropped.\n\n [`Handle::Strong`], via [`StrongHandle`] also provides access to useful [`Asset`] metadata, such as the [`AssetPath`] (if it exists).",
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Strong",
          "fields": [
            {
              "type": "bevy_platform::sync::Arc<bevy_asset::handle::StrongHandle>"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Weak",
          "fields": [
            {
              "type": "bevy_asset::id::AssetId<()>"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_asset::handle::Handle<bevy_animation::AnimationClip>": {
      "identifier": "Handle",
      "crate": "bevy_asset",
      "path": "bevy_asset::handle::Handle<bevy_animation::AnimationClip>",
      "generics": [
        {
          "type_id": "bevy_animation::AnimationClip",
          "name": "A"
        }
      ],
      "documentation": " A handle to a specific [`Asset`] of type `A`. Handles act as abstract \"references\" to\n assets, whose data are stored in the [`Assets<A>`](crate::prelude::Assets) resource,\n avoiding the need to store multiple copies of the same data.\n\n If a [`Handle`] is [`Handle::Strong`], the [`Asset`] will be kept\n alive until the [`Handle`] is dropped. If a [`Handle`] is [`Handle::Weak`], it does not necessarily reference a live [`Asset`],\n nor will it keep assets alive.\n\n Modifying a *handle* will change which existing asset is referenced, but modifying the *asset*\n (by mutating the [`Assets`](crate::prelude::Assets) resource) will change the asset for all handles referencing it.\n\n [`Handle`] can be cloned. If a [`Handle::Strong`] is cloned, the referenced [`Asset`] will not be freed until _all_ instances\n of the [`Handle`] are dropped.\n\n [`Handle::Strong`], via [`StrongHandle`] also provides access to useful [`Asset`] metadata, such as the [`AssetPath`] (if it exists).",
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Strong",
          "fields": [
            {
              "type": "bevy_platform::sync::Arc<bevy_asset::handle::StrongHandle>"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Weak",
          "fields": [
            {
              "type": "bevy_asset::id::AssetId<bevy_animation::AnimationClip>"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_asset::handle::Handle<bevy_animation::graph::AnimationGraph>": {
      "identifier": "Handle",
      "crate": "bevy_asset",
      "path": "bevy_asset::handle::Handle<bevy_animation::graph::AnimationGraph>",
      "generics": [
        {
          "type_id": "bevy_animation::graph::AnimationGraph",
          "name": "A"
        }
      ],
      "documentation": " A handle to a specific [`Asset`] of type `A`. Handles act as abstract \"references\" to\n assets, whose data are stored in the [`Assets<A>`](crate::prelude::Assets) resource,\n avoiding the need to store multiple copies of the same data.\n\n If a [`Handle`] is [`Handle::Strong`], the [`Asset`] will be kept\n alive until the [`Handle`] is dropped. If a [`Handle`] is [`Handle::Weak`], it does not necessarily reference a live [`Asset`],\n nor will it keep assets alive.\n\n Modifying a *handle* will change which existing asset is referenced, but modifying the *asset*\n (by mutating the [`Assets`](crate::prelude::Assets) resource) will change the asset for all handles referencing it.\n\n [`Handle`] can be cloned. If a [`Handle::Strong`] is cloned, the referenced [`Asset`] will not be freed until _all_ instances\n of the [`Handle`] are dropped.\n\n [`Handle::Strong`], via [`StrongHandle`] also provides access to useful [`Asset`] metadata, such as the [`AssetPath`] (if it exists).",
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Strong",
          "fields": [
            {
              "type": "bevy_platform::sync::Arc<bevy_asset::handle::StrongHandle>"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Weak",
          "fields": [
            {
              "type": "bevy_asset::id::AssetId<bevy_animation::graph::AnimationGraph>"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_asset::handle::Handle<bevy_image::image::Image>": {
      "identifier": "Handle",
      "crate": "bevy_asset",
      "path": "bevy_asset::handle::Handle<bevy_image::image::Image>",
      "generics": [
        {
          "type_id": "bevy_image::image::Image",
          "name": "A"
        }
      ],
      "documentation": " A handle to a specific [`Asset`] of type `A`. Handles act as abstract \"references\" to\n assets, whose data are stored in the [`Assets<A>`](crate::prelude::Assets) resource,\n avoiding the need to store multiple copies of the same data.\n\n If a [`Handle`] is [`Handle::Strong`], the [`Asset`] will be kept\n alive until the [`Handle`] is dropped. If a [`Handle`] is [`Handle::Weak`], it does not necessarily reference a live [`Asset`],\n nor will it keep assets alive.\n\n Modifying a *handle* will change which existing asset is referenced, but modifying the *asset*\n (by mutating the [`Assets`](crate::prelude::Assets) resource) will change the asset for all handles referencing it.\n\n [`Handle`] can be cloned. If a [`Handle::Strong`] is cloned, the referenced [`Asset`] will not be freed until _all_ instances\n of the [`Handle`] are dropped.\n\n [`Handle::Strong`], via [`StrongHandle`] also provides access to useful [`Asset`] metadata, such as the [`AssetPath`] (if it exists).",
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Strong",
          "fields": [
            {
              "type": "bevy_platform::sync::Arc<bevy_asset::handle::StrongHandle>"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Weak",
          "fields": [
            {
              "type": "bevy_asset::id::AssetId<bevy_image::image::Image>"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_asset::handle::Handle<bevy_image::texture_atlas::TextureAtlasLayout>": {
      "identifier": "Handle",
      "crate": "bevy_asset",
      "path": "bevy_asset::handle::Handle<bevy_image::texture_atlas::TextureAtlasLayout>",
      "generics": [
        {
          "type_id": "bevy_image::texture_atlas::TextureAtlasLayout",
          "name": "A"
        }
      ],
      "documentation": " A handle to a specific [`Asset`] of type `A`. Handles act as abstract \"references\" to\n assets, whose data are stored in the [`Assets<A>`](crate::prelude::Assets) resource,\n avoiding the need to store multiple copies of the same data.\n\n If a [`Handle`] is [`Handle::Strong`], the [`Asset`] will be kept\n alive until the [`Handle`] is dropped. If a [`Handle`] is [`Handle::Weak`], it does not necessarily reference a live [`Asset`],\n nor will it keep assets alive.\n\n Modifying a *handle* will change which existing asset is referenced, but modifying the *asset*\n (by mutating the [`Assets`](crate::prelude::Assets) resource) will change the asset for all handles referencing it.\n\n [`Handle`] can be cloned. If a [`Handle::Strong`] is cloned, the referenced [`Asset`] will not be freed until _all_ instances\n of the [`Handle`] are dropped.\n\n [`Handle::Strong`], via [`StrongHandle`] also provides access to useful [`Asset`] metadata, such as the [`AssetPath`] (if it exists).",
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Strong",
          "fields": [
            {
              "type": "bevy_platform::sync::Arc<bevy_asset::handle::StrongHandle>"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Weak",
          "fields": [
            {
              "type": "bevy_asset::id::AssetId<bevy_image::texture_atlas::TextureAtlasLayout>"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_asset::handle::Handle<bevy_mesh::mesh::Mesh>": {
      "identifier": "Handle",
      "crate": "bevy_asset",
      "path": "bevy_asset::handle::Handle<bevy_mesh::mesh::Mesh>",
      "generics": [
        {
          "type_id": "bevy_mesh::mesh::Mesh",
          "name": "A"
        }
      ],
      "documentation": " A handle to a specific [`Asset`] of type `A`. Handles act as abstract \"references\" to\n assets, whose data are stored in the [`Assets<A>`](crate::prelude::Assets) resource,\n avoiding the need to store multiple copies of the same data.\n\n If a [`Handle`] is [`Handle::Strong`], the [`Asset`] will be kept\n alive until the [`Handle`] is dropped. If a [`Handle`] is [`Handle::Weak`], it does not necessarily reference a live [`Asset`],\n nor will it keep assets alive.\n\n Modifying a *handle* will change which existing asset is referenced, but modifying the *asset*\n (by mutating the [`Assets`](crate::prelude::Assets) resource) will change the asset for all handles referencing it.\n\n [`Handle`] can be cloned. If a [`Handle::Strong`] is cloned, the referenced [`Asset`] will not be freed until _all_ instances\n of the [`Handle`] are dropped.\n\n [`Handle::Strong`], via [`StrongHandle`] also provides access to useful [`Asset`] metadata, such as the [`AssetPath`] (if it exists).",
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Strong",
          "fields": [
            {
              "type": "bevy_platform::sync::Arc<bevy_asset::handle::StrongHandle>"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Weak",
          "fields": [
            {
              "type": "bevy_asset::id::AssetId<bevy_mesh::mesh::Mesh>"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_asset::handle::Handle<bevy_pbr::pbr_material::StandardMaterial>": {
      "identifier": "Handle",
      "crate": "bevy_asset",
      "path": "bevy_asset::handle::Handle<bevy_pbr::pbr_material::StandardMaterial>",
      "generics": [
        {
          "type_id": "bevy_pbr::pbr_material::StandardMaterial",
          "name": "A"
        }
      ],
      "documentation": " A handle to a specific [`Asset`] of type `A`. Handles act as abstract \"references\" to\n assets, whose data are stored in the [`Assets<A>`](crate::prelude::Assets) resource,\n avoiding the need to store multiple copies of the same data.\n\n If a [`Handle`] is [`Handle::Strong`], the [`Asset`] will be kept\n alive until the [`Handle`] is dropped. If a [`Handle`] is [`Handle::Weak`], it does not necessarily reference a live [`Asset`],\n nor will it keep assets alive.\n\n Modifying a *handle* will change which existing asset is referenced, but modifying the *asset*\n (by mutating the [`Assets`](crate::prelude::Assets) resource) will change the asset for all handles referencing it.\n\n [`Handle`] can be cloned. If a [`Handle::Strong`] is cloned, the referenced [`Asset`] will not be freed until _all_ instances\n of the [`Handle`] are dropped.\n\n [`Handle::Strong`], via [`StrongHandle`] also provides access to useful [`Asset`] metadata, such as the [`AssetPath`] (if it exists).",
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Strong",
          "fields": [
            {
              "type": "bevy_platform::sync::Arc<bevy_asset::handle::StrongHandle>"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Weak",
          "fields": [
            {
              "type": "bevy_asset::id::AssetId<bevy_pbr::pbr_material::StandardMaterial>"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_asset::handle::Handle<bevy_render::storage::ShaderStorageBuffer>": {
      "identifier": "Handle",
      "crate": "bevy_asset",
      "path": "bevy_asset::handle::Handle<bevy_render::storage::ShaderStorageBuffer>",
      "generics": [
        {
          "type_id": "bevy_render::storage::ShaderStorageBuffer",
          "name": "A"
        }
      ],
      "documentation": " A handle to a specific [`Asset`] of type `A`. Handles act as abstract \"references\" to\n assets, whose data are stored in the [`Assets<A>`](crate::prelude::Assets) resource,\n avoiding the need to store multiple copies of the same data.\n\n If a [`Handle`] is [`Handle::Strong`], the [`Asset`] will be kept\n alive until the [`Handle`] is dropped. If a [`Handle`] is [`Handle::Weak`], it does not necessarily reference a live [`Asset`],\n nor will it keep assets alive.\n\n Modifying a *handle* will change which existing asset is referenced, but modifying the *asset*\n (by mutating the [`Assets`](crate::prelude::Assets) resource) will change the asset for all handles referencing it.\n\n [`Handle`] can be cloned. If a [`Handle::Strong`] is cloned, the referenced [`Asset`] will not be freed until _all_ instances\n of the [`Handle`] are dropped.\n\n [`Handle::Strong`], via [`StrongHandle`] also provides access to useful [`Asset`] metadata, such as the [`AssetPath`] (if it exists).",
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Strong",
          "fields": [
            {
              "type": "bevy_platform::sync::Arc<bevy_asset::handle::StrongHandle>"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Weak",
          "fields": [
            {
              "type": "bevy_asset::id::AssetId<bevy_render::storage::ShaderStorageBuffer>"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_asset::handle::Handle<bevy_sprite::mesh2d::color_material::ColorMaterial>": {
      "identifier": "Handle",
      "crate": "bevy_asset",
      "path": "bevy_asset::handle::Handle<bevy_sprite::mesh2d::color_material::ColorMaterial>",
      "generics": [
        {
          "type_id": "bevy_sprite::mesh2d::color_material::ColorMaterial",
          "name": "A"
        }
      ],
      "documentation": " A handle to a specific [`Asset`] of type `A`. Handles act as abstract \"references\" to\n assets, whose data are stored in the [`Assets<A>`](crate::prelude::Assets) resource,\n avoiding the need to store multiple copies of the same data.\n\n If a [`Handle`] is [`Handle::Strong`], the [`Asset`] will be kept\n alive until the [`Handle`] is dropped. If a [`Handle`] is [`Handle::Weak`], it does not necessarily reference a live [`Asset`],\n nor will it keep assets alive.\n\n Modifying a *handle* will change which existing asset is referenced, but modifying the *asset*\n (by mutating the [`Assets`](crate::prelude::Assets) resource) will change the asset for all handles referencing it.\n\n [`Handle`] can be cloned. If a [`Handle::Strong`] is cloned, the referenced [`Asset`] will not be freed until _all_ instances\n of the [`Handle`] are dropped.\n\n [`Handle::Strong`], via [`StrongHandle`] also provides access to useful [`Asset`] metadata, such as the [`AssetPath`] (if it exists).",
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Strong",
          "fields": [
            {
              "type": "bevy_platform::sync::Arc<bevy_asset::handle::StrongHandle>"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Weak",
          "fields": [
            {
              "type": "bevy_asset::id::AssetId<bevy_sprite::mesh2d::color_material::ColorMaterial>"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_asset::id::AssetId<()>": {
      "identifier": "AssetId",
      "crate": "bevy_asset",
      "path": "bevy_asset::id::AssetId<()>",
      "generics": [
        {
          "type_id": "()",
          "name": "A"
        }
      ],
      "documentation": " A unique runtime-only identifier for an [`Asset`]. This is cheap to [`Copy`]/[`Clone`] and is not directly tied to the\n lifetime of the Asset. This means it _can_ point to an [`Asset`] that no longer exists.\n\n For an identifier tied to the lifetime of an asset, see [`Handle`](`crate::Handle`).\n\n For an \"untyped\" / \"generic-less\" id, see [`UntypedAssetId`].",
      "layout": [
        {
          "kind": "Struct",
          "name": "Index",
          "fields": [
            {
              "name": "index",
              "type": "bevy_asset::assets::AssetIndex"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "Uuid",
          "fields": [
            {
              "name": "uuid",
              "type": "uuid::Uuid"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_asset::id::AssetId<bevy_animation::AnimationClip>": {
      "identifier": "AssetId",
      "crate": "bevy_asset",
      "path": "bevy_asset::id::AssetId<bevy_animation::AnimationClip>",
      "generics": [
        {
          "type_id": "bevy_animation::AnimationClip",
          "name": "A"
        }
      ],
      "documentation": " A unique runtime-only identifier for an [`Asset`]. This is cheap to [`Copy`]/[`Clone`] and is not directly tied to the\n lifetime of the Asset. This means it _can_ point to an [`Asset`] that no longer exists.\n\n For an identifier tied to the lifetime of an asset, see [`Handle`](`crate::Handle`).\n\n For an \"untyped\" / \"generic-less\" id, see [`UntypedAssetId`].",
      "layout": [
        {
          "kind": "Struct",
          "name": "Index",
          "fields": [
            {
              "name": "index",
              "type": "bevy_asset::assets::AssetIndex"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "Uuid",
          "fields": [
            {
              "name": "uuid",
              "type": "uuid::Uuid"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_asset::id::AssetId<bevy_animation::graph::AnimationGraph>": {
      "identifier": "AssetId",
      "crate": "bevy_asset",
      "path": "bevy_asset::id::AssetId<bevy_animation::graph::AnimationGraph>",
      "generics": [
        {
          "type_id": "bevy_animation::graph::AnimationGraph",
          "name": "A"
        }
      ],
      "documentation": " A unique runtime-only identifier for an [`Asset`]. This is cheap to [`Copy`]/[`Clone`] and is not directly tied to the\n lifetime of the Asset. This means it _can_ point to an [`Asset`] that no longer exists.\n\n For an identifier tied to the lifetime of an asset, see [`Handle`](`crate::Handle`).\n\n For an \"untyped\" / \"generic-less\" id, see [`UntypedAssetId`].",
      "layout": [
        {
          "kind": "Struct",
          "name": "Index",
          "fields": [
            {
              "name": "index",
              "type": "bevy_asset::assets::AssetIndex"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "Uuid",
          "fields": [
            {
              "name": "uuid",
              "type": "uuid::Uuid"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_asset::id::AssetId<bevy_image::image::Image>": {
      "identifier": "AssetId",
      "crate": "bevy_asset",
      "path": "bevy_asset::id::AssetId<bevy_image::image::Image>",
      "generics": [
        {
          "type_id": "bevy_image::image::Image",
          "name": "A"
        }
      ],
      "documentation": " A unique runtime-only identifier for an [`Asset`]. This is cheap to [`Copy`]/[`Clone`] and is not directly tied to the\n lifetime of the Asset. This means it _can_ point to an [`Asset`] that no longer exists.\n\n For an identifier tied to the lifetime of an asset, see [`Handle`](`crate::Handle`).\n\n For an \"untyped\" / \"generic-less\" id, see [`UntypedAssetId`].",
      "layout": [
        {
          "kind": "Struct",
          "name": "Index",
          "fields": [
            {
              "name": "index",
              "type": "bevy_asset::assets::AssetIndex"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "Uuid",
          "fields": [
            {
              "name": "uuid",
              "type": "uuid::Uuid"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_asset::id::AssetId<bevy_image::texture_atlas::TextureAtlasLayout>": {
      "identifier": "AssetId",
      "crate": "bevy_asset",
      "path": "bevy_asset::id::AssetId<bevy_image::texture_atlas::TextureAtlasLayout>",
      "generics": [
        {
          "type_id": "bevy_image::texture_atlas::TextureAtlasLayout",
          "name": "A"
        }
      ],
      "documentation": " A unique runtime-only identifier for an [`Asset`]. This is cheap to [`Copy`]/[`Clone`] and is not directly tied to the\n lifetime of the Asset. This means it _can_ point to an [`Asset`] that no longer exists.\n\n For an identifier tied to the lifetime of an asset, see [`Handle`](`crate::Handle`).\n\n For an \"untyped\" / \"generic-less\" id, see [`UntypedAssetId`].",
      "layout": [
        {
          "kind": "Struct",
          "name": "Index",
          "fields": [
            {
              "name": "index",
              "type": "bevy_asset::assets::AssetIndex"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "Uuid",
          "fields": [
            {
              "name": "uuid",
              "type": "uuid::Uuid"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_asset::id::AssetId<bevy_mesh::mesh::Mesh>": {
      "identifier": "AssetId",
      "crate": "bevy_asset",
      "path": "bevy_asset::id::AssetId<bevy_mesh::mesh::Mesh>",
      "generics": [
        {
          "type_id": "bevy_mesh::mesh::Mesh",
          "name": "A"
        }
      ],
      "documentation": " A unique runtime-only identifier for an [`Asset`]. This is cheap to [`Copy`]/[`Clone`] and is not directly tied to the\n lifetime of the Asset. This means it _can_ point to an [`Asset`] that no longer exists.\n\n For an identifier tied to the lifetime of an asset, see [`Handle`](`crate::Handle`).\n\n For an \"untyped\" / \"generic-less\" id, see [`UntypedAssetId`].",
      "layout": [
        {
          "kind": "Struct",
          "name": "Index",
          "fields": [
            {
              "name": "index",
              "type": "bevy_asset::assets::AssetIndex"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "Uuid",
          "fields": [
            {
              "name": "uuid",
              "type": "uuid::Uuid"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_asset::id::AssetId<bevy_mod_scripting_core::asset::ScriptAsset>": {
      "identifier": "AssetId",
      "crate": "bevy_asset",
      "path": "bevy_asset::id::AssetId<bevy_mod_scripting_core::asset::ScriptAsset>",
      "generics": [
        {
          "type_id": "bevy_mod_scripting_core::asset::ScriptAsset",
          "name": "A"
        }
      ],
      "documentation": " A unique runtime-only identifier for an [`Asset`]. This is cheap to [`Copy`]/[`Clone`] and is not directly tied to the\n lifetime of the Asset. This means it _can_ point to an [`Asset`] that no longer exists.\n\n For an identifier tied to the lifetime of an asset, see [`Handle`](`crate::Handle`).\n\n For an \"untyped\" / \"generic-less\" id, see [`UntypedAssetId`].",
      "layout": [
        {
          "kind": "Struct",
          "name": "Index",
          "fields": [
            {
              "name": "index",
              "type": "bevy_asset::assets::AssetIndex"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "Uuid",
          "fields": [
            {
              "name": "uuid",
              "type": "uuid::Uuid"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_asset::id::AssetId<bevy_pbr::pbr_material::StandardMaterial>": {
      "identifier": "AssetId",
      "crate": "bevy_asset",
      "path": "bevy_asset::id::AssetId<bevy_pbr::pbr_material::StandardMaterial>",
      "generics": [
        {
          "type_id": "bevy_pbr::pbr_material::StandardMaterial",
          "name": "A"
        }
      ],
      "documentation": " A unique runtime-only identifier for an [`Asset`]. This is cheap to [`Copy`]/[`Clone`] and is not directly tied to the\n lifetime of the Asset. This means it _can_ point to an [`Asset`] that no longer exists.\n\n For an identifier tied to the lifetime of an asset, see [`Handle`](`crate::Handle`).\n\n For an \"untyped\" / \"generic-less\" id, see [`UntypedAssetId`].",
      "layout": [
        {
          "kind": "Struct",
          "name": "Index",
          "fields": [
            {
              "name": "index",
              "type": "bevy_asset::assets::AssetIndex"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "Uuid",
          "fields": [
            {
              "name": "uuid",
              "type": "uuid::Uuid"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_asset::id::AssetId<bevy_render::storage::ShaderStorageBuffer>": {
      "identifier": "AssetId",
      "crate": "bevy_asset",
      "path": "bevy_asset::id::AssetId<bevy_render::storage::ShaderStorageBuffer>",
      "generics": [
        {
          "type_id": "bevy_render::storage::ShaderStorageBuffer",
          "name": "A"
        }
      ],
      "documentation": " A unique runtime-only identifier for an [`Asset`]. This is cheap to [`Copy`]/[`Clone`] and is not directly tied to the\n lifetime of the Asset. This means it _can_ point to an [`Asset`] that no longer exists.\n\n For an identifier tied to the lifetime of an asset, see [`Handle`](`crate::Handle`).\n\n For an \"untyped\" / \"generic-less\" id, see [`UntypedAssetId`].",
      "layout": [
        {
          "kind": "Struct",
          "name": "Index",
          "fields": [
            {
              "name": "index",
              "type": "bevy_asset::assets::AssetIndex"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "Uuid",
          "fields": [
            {
              "name": "uuid",
              "type": "uuid::Uuid"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_asset::id::AssetId<bevy_sprite::mesh2d::color_material::ColorMaterial>": {
      "identifier": "AssetId",
      "crate": "bevy_asset",
      "path": "bevy_asset::id::AssetId<bevy_sprite::mesh2d::color_material::ColorMaterial>",
      "generics": [
        {
          "type_id": "bevy_sprite::mesh2d::color_material::ColorMaterial",
          "name": "A"
        }
      ],
      "documentation": " A unique runtime-only identifier for an [`Asset`]. This is cheap to [`Copy`]/[`Clone`] and is not directly tied to the\n lifetime of the Asset. This means it _can_ point to an [`Asset`] that no longer exists.\n\n For an identifier tied to the lifetime of an asset, see [`Handle`](`crate::Handle`).\n\n For an \"untyped\" / \"generic-less\" id, see [`UntypedAssetId`].",
      "layout": [
        {
          "kind": "Struct",
          "name": "Index",
          "fields": [
            {
              "name": "index",
              "type": "bevy_asset::assets::AssetIndex"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "Uuid",
          "fields": [
            {
              "name": "uuid",
              "type": "uuid::Uuid"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_input::axis::Axis<bevy_input::gamepad::GamepadInput>": {
      "identifier": "Axis",
      "crate": "bevy_input",
      "path": "bevy_input::axis::Axis<bevy_input::gamepad::GamepadInput>",
      "generics": [
        {
          "type_id": "bevy_input::gamepad::GamepadInput",
          "name": "T"
        }
      ],
      "documentation": " Stores the position data of the input devices of type `T`.\n\n The values are stored as `f32`s, using [`Axis::set`].\n Use [`Axis::get`] to retrieve the value clamped between [`Axis::MIN`] and [`Axis::MAX`]\n inclusive, or unclamped using [`Axis::get_unclamped`].",
      "layout": {
        "kind": "Struct",
        "name": "Axis",
        "fields": [
          {
            "name": "axis_data",
            "type": "bevy_platform::collections::HashMap<bevy_input::gamepad::GamepadInput, f32, bevy_platform::hash::FixedHasher>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_input::button_input::ButtonInput<bevy_input::gamepad::GamepadButton>": {
      "identifier": "ButtonInput",
      "crate": "bevy_input",
      "path": "bevy_input::button_input::ButtonInput<bevy_input::gamepad::GamepadButton>",
      "generics": [
        {
          "type_id": "bevy_input::gamepad::GamepadButton",
          "name": "T"
        }
      ],
      "documentation": " A \"press-able\" input of type `T`.\n\n ## Usage\n\n This type can be used as a resource to keep the current state of an input, by reacting to\n events from the input. For a given input value:\n\n * [`ButtonInput::pressed`] will return `true` between a press and a release event.\n * [`ButtonInput::just_pressed`] will return `true` for one frame after a press event.\n * [`ButtonInput::just_released`] will return `true` for one frame after a release event.\n\n ## Multiple systems\n\n In case multiple systems are checking for [`ButtonInput::just_pressed`] or [`ButtonInput::just_released`]\n but only one should react, for example when modifying a\n [`Resource`], you should consider clearing the input state, either by:\n\n * Using [`ButtonInput::clear_just_pressed`] or [`ButtonInput::clear_just_released`] instead.\n * Calling [`ButtonInput::clear`] or [`ButtonInput::reset`] immediately after the state change.\n\n ## Performance\n\n For all operations, the following conventions are used:\n - **n** is the number of stored inputs.\n - **m** is the number of input arguments passed to the method.\n - **\\***-suffix denotes an amortized cost.\n - **~**-suffix denotes an expected cost.\n\n See Rust's [std::collections doc on performance](https://doc.rust-lang.org/std/collections/index.html#performance) for more details on the conventions used here.\n\n | **[`ButtonInput`] operations**          | **Computational complexity** |\n |-----------------------------------|------------------------------------|\n | [`ButtonInput::any_just_pressed`]       | *O*(m)~                      |\n | [`ButtonInput::any_just_released`]      | *O*(m)~                      |\n | [`ButtonInput::any_pressed`]            | *O*(m)~                      |\n | [`ButtonInput::get_just_pressed`]       | *O*(n)                       |\n | [`ButtonInput::get_just_released`]      | *O*(n)                       |\n | [`ButtonInput::get_pressed`]            | *O*(n)                       |\n | [`ButtonInput::just_pressed`]           | *O*(1)~                      |\n | [`ButtonInput::just_released`]          | *O*(1)~                      |\n | [`ButtonInput::pressed`]                | *O*(1)~                      |\n | [`ButtonInput::press`]                  | *O*(1)~*                     |\n | [`ButtonInput::release`]                | *O*(1)~*                     |\n | [`ButtonInput::release_all`]            | *O*(n)~*                     |\n | [`ButtonInput::clear_just_pressed`]     | *O*(1)~                      |\n | [`ButtonInput::clear_just_released`]    | *O*(1)~                      |\n | [`ButtonInput::reset_all`]              | *O*(n)                       |\n | [`ButtonInput::clear`]                  | *O*(n)                       |\n\n ## Window focus\n\n `ButtonInput<KeyCode>` is tied to window focus. For example, if the user holds a button\n while the window loses focus, [`ButtonInput::just_released`] will be triggered. Similarly if the window\n regains focus, [`ButtonInput::just_pressed`] will be triggered.\n\n `ButtonInput<GamepadButton>` is independent of window focus.\n\n ## Examples\n\n Reading and checking against the current set of pressed buttons:\n ```no_run\n # use bevy_app::{App, NoopPluginGroup as DefaultPlugins, Update};\n # use bevy_ecs::{prelude::{IntoScheduleConfigs, Res, Resource, resource_changed}, schedule::Condition};\n # use bevy_input::{ButtonInput, prelude::{KeyCode, MouseButton}};\n\n fn main() {\n     App::new()\n         .add_plugins(DefaultPlugins)\n         .add_systems(\n             Update,\n             print_mouse.run_if(resource_changed::<ButtonInput<MouseButton>>),\n         )\n         .add_systems(\n             Update,\n             print_keyboard.run_if(resource_changed::<ButtonInput<KeyCode>>),\n         )\n         .run();\n }\n\n fn print_mouse(mouse: Res<ButtonInput<MouseButton>>) {\n     println!(\"Mouse: {:?}\", mouse.get_pressed().collect::<Vec<_>>());\n }\n\n fn print_keyboard(keyboard: Res<ButtonInput<KeyCode>>) {\n     if keyboard.any_pressed([KeyCode::ControlLeft, KeyCode::ControlRight])\n         && keyboard.any_pressed([KeyCode::AltLeft, KeyCode::AltRight])\n         && keyboard.any_pressed([KeyCode::ShiftLeft, KeyCode::ShiftRight])\n         && keyboard.any_pressed([KeyCode::SuperLeft, KeyCode::SuperRight])\n         && keyboard.pressed(KeyCode::KeyL)\n     {\n         println!(\"On Windows this opens LinkedIn.\");\n     } else {\n         println!(\"keyboard: {:?}\", keyboard.get_pressed().collect::<Vec<_>>());\n     }\n }\n ```\n\n ## Note\n\n When adding this resource for a new input type, you should:\n\n * Call the [`ButtonInput::press`] method for each press event.\n * Call the [`ButtonInput::release`] method for each release event.\n * Call the [`ButtonInput::clear`] method at each frame start, before processing events.\n\n Note: Calling `clear` from a [`ResMut`] will trigger change detection.\n It may be preferable to use [`DetectChangesMut::bypass_change_detection`]\n to avoid causing the resource to always be marked as changed.\n\n [`ResMut`]: bevy_ecs::system::ResMut\n [`DetectChangesMut::bypass_change_detection`]: bevy_ecs::change_detection::DetectChangesMut::bypass_change_detection",
      "layout": {
        "kind": "Struct",
        "name": "ButtonInput",
        "fields": [
          {
            "name": "pressed",
            "type": "bevy_platform::collections::HashSet<bevy_input::gamepad::GamepadButton, bevy_platform::hash::FixedHasher>"
          },
          {
            "name": "just_pressed",
            "type": "bevy_platform::collections::HashSet<bevy_input::gamepad::GamepadButton, bevy_platform::hash::FixedHasher>"
          },
          {
            "name": "just_released",
            "type": "bevy_platform::collections::HashSet<bevy_input::gamepad::GamepadButton, bevy_platform::hash::FixedHasher>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_pbr::mesh_material::MeshMaterial3d<bevy_pbr::pbr_material::StandardMaterial>": {
      "identifier": "MeshMaterial3d",
      "crate": "bevy_pbr",
      "path": "bevy_pbr::mesh_material::MeshMaterial3d<bevy_pbr::pbr_material::StandardMaterial>",
      "generics": [
        {
          "type_id": "bevy_pbr::pbr_material::StandardMaterial",
          "name": "M"
        }
      ],
      "documentation": " A [material](Material) used for rendering a [`Mesh3d`].\n\n See [`Material`] for general information about 3D materials and how to implement your own materials.\n\n [`Mesh3d`]: bevy_render::mesh::Mesh3d\n\n # Example\n\n ```\n # use bevy_pbr::{Material, MeshMaterial3d, StandardMaterial};\n # use bevy_ecs::prelude::*;\n # use bevy_render::mesh::{Mesh, Mesh3d};\n # use bevy_color::palettes::basic::RED;\n # use bevy_asset::Assets;\n # use bevy_math::primitives::Capsule3d;\n #\n // Spawn an entity with a mesh using `StandardMaterial`.\n fn setup(\n     mut commands: Commands,\n     mut meshes: ResMut<Assets<Mesh>>,\n     mut materials: ResMut<Assets<StandardMaterial>>,\n ) {\n     commands.spawn((\n         Mesh3d(meshes.add(Capsule3d::default())),\n         MeshMaterial3d(materials.add(StandardMaterial {\n             base_color: RED.into(),\n             ..Default::default()\n         })),\n     ));\n }\n ```",
      "layout": {
        "kind": "TupleStruct",
        "name": "MeshMaterial3d",
        "fields": [
          {
            "type": "bevy_asset::handle::Handle<bevy_pbr::pbr_material::StandardMaterial>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_platform::sync::Arc<bevy_asset::handle::StrongHandle>": {
      "identifier": "Arc",
      "crate": "bevy_platform",
      "path": "bevy_platform::sync::Arc<bevy_asset::handle::StrongHandle>",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "bevy_sprite::mesh2d::material::MeshMaterial2d<bevy_sprite::mesh2d::color_material::ColorMaterial>": {
      "identifier": "MeshMaterial2d",
      "crate": "bevy_sprite",
      "path": "bevy_sprite::mesh2d::material::MeshMaterial2d<bevy_sprite::mesh2d::color_material::ColorMaterial>",
      "generics": [
        {
          "type_id": "bevy_sprite::mesh2d::color_material::ColorMaterial",
          "name": "M"
        }
      ],
      "documentation": " A [material](Material2d) used for rendering a [`Mesh2d`].\n\n See [`Material2d`] for general information about 2D materials and how to implement your own materials.\n\n # Example\n\n ```\n # use bevy_sprite::{ColorMaterial, MeshMaterial2d};\n # use bevy_ecs::prelude::*;\n # use bevy_render::mesh::{Mesh, Mesh2d};\n # use bevy_color::palettes::basic::RED;\n # use bevy_asset::Assets;\n # use bevy_math::primitives::Circle;\n #\n // Spawn an entity with a mesh using `ColorMaterial`.\n fn setup(\n     mut commands: Commands,\n     mut meshes: ResMut<Assets<Mesh>>,\n     mut materials: ResMut<Assets<ColorMaterial>>,\n ) {\n     commands.spawn((\n         Mesh2d(meshes.add(Circle::new(50.0))),\n         MeshMaterial2d(materials.add(ColorMaterial::from_color(RED))),\n     ));\n }\n ```\n\n [`MeshMaterial2d`]: crate::MeshMaterial2d",
      "layout": {
        "kind": "TupleStruct",
        "name": "MeshMaterial2d",
        "fields": [
          {
            "type": "bevy_asset::handle::Handle<bevy_sprite::mesh2d::color_material::ColorMaterial>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_time::time::Time<()>": {
      "identifier": "Time",
      "crate": "bevy_time",
      "path": "bevy_time::time::Time<()>",
      "generics": [
        {
          "type_id": "()",
          "name": "T"
        }
      ],
      "documentation": " A generic clock resource that tracks how much it has advanced since its\n previous update and since its creation.\n\n Multiple instances of this resource are inserted automatically by\n [`TimePlugin`](crate::TimePlugin):\n\n - [`Time<Real>`](crate::real::Real) tracks real wall-clock time elapsed.\n - [`Time<Virtual>`](crate::virt::Virtual) tracks virtual game time that may\n   be paused or scaled.\n - [`Time<Fixed>`](crate::fixed::Fixed) tracks fixed timesteps based on\n   virtual time.\n - [`Time`] is a generic clock that corresponds to \"current\" or \"default\"\n   time for systems. It contains [`Time<Virtual>`](crate::virt::Virtual)\n   except inside the [`FixedMain`](bevy_app::FixedMain) schedule when it\n   contains [`Time<Fixed>`](crate::fixed::Fixed).\n\n The time elapsed since the previous time this clock was advanced is saved as\n [`delta()`](Time::delta) and the total amount of time the clock has advanced\n is saved as [`elapsed()`](Time::elapsed). Both are represented as exact\n [`Duration`] values with fixed nanosecond precision. The clock does not\n support time moving backwards, but it can be updated with [`Duration::ZERO`]\n which will set [`delta()`](Time::delta) to zero.\n\n These values are also available in seconds as `f32` via\n [`delta_secs()`](Time::delta_secs) and\n [`elapsed_secs()`](Time::elapsed_secs), and also in seconds as `f64`\n via [`delta_secs_f64()`](Time::delta_secs_f64) and\n [`elapsed_secs_f64()`](Time::elapsed_secs_f64).\n\n Since [`elapsed_secs()`](Time::elapsed_secs) will grow constantly and\n is `f32`, it will exhibit gradual precision loss. For applications that\n require an `f32` value but suffer from gradual precision loss there is\n [`elapsed_secs_wrapped()`](Time::elapsed_secs_wrapped) available. The\n same wrapped value is also available as [`Duration`] and `f64` for\n consistency. The wrap period is by default 1 hour, and can be set by\n [`set_wrap_period()`](Time::set_wrap_period).\n\n # Accessing clocks\n\n By default, any systems requiring current [`delta()`](Time::delta) or\n [`elapsed()`](Time::elapsed) should use `Res<Time>` to access the default\n time configured for the program. By default, this refers to\n [`Time<Virtual>`](crate::virt::Virtual) except during the\n [`FixedMain`](bevy_app::FixedMain) schedule when it refers to\n [`Time<Fixed>`](crate::fixed::Fixed). This ensures your system can be used\n either in [`Update`](bevy_app::Update) or\n [`FixedUpdate`](bevy_app::FixedUpdate) schedule depending on what is needed.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn ambivalent_system(time: Res<Time>) {\n     println!(\"this how I see time: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n }\n ```\n\n If your system needs to react based on real time (wall clock time), like for\n user interfaces, it should use `Res<Time<Real>>`. The\n [`delta()`](Time::delta) and [`elapsed()`](Time::elapsed) values will always\n correspond to real time and will not be affected by pause, time scaling or\n other tweaks.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn real_time_system(time: Res<Time<Real>>) {\n     println!(\"this will always be real time: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n }\n ```\n\n If your system specifically needs to access fixed timestep clock, even when\n placed in `Update` schedule, you should use `Res<Time<Fixed>>`. The\n [`delta()`](Time::delta) and [`elapsed()`](Time::elapsed) values will\n correspond to the latest fixed timestep that has been run.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn fixed_time_system(time: Res<Time<Fixed>>) {\n     println!(\"this will always be the last executed fixed timestep: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n }\n ```\n\n Finally, if your system specifically needs to know the current virtual game\n time, even if placed inside [`FixedUpdate`](bevy_app::FixedUpdate), for\n example to know if the game is [`was_paused()`](Time::was_paused) or to use\n [`effective_speed()`](Time::effective_speed), you can use\n `Res<Time<Virtual>>`. However, if the system is placed in\n [`FixedUpdate`](bevy_app::FixedUpdate), extra care must be used because your\n system might be run multiple times with the same [`delta()`](Time::delta)\n and [`elapsed()`](Time::elapsed) values as the virtual game time has not\n changed between the iterations.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn fixed_time_system(time: Res<Time<Virtual>>) {\n     println!(\"this will be virtual time for this update: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n     println!(\"also the relative speed of the game is now {}\", time.effective_speed());\n }\n ```\n\n If you need to change the settings for any of the clocks, for example to\n [`pause()`](Time::pause) the game, you should use `ResMut<Time<Virtual>>`.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n #[derive(Event)]\n struct PauseEvent(bool);\n\n fn pause_system(mut time: ResMut<Time<Virtual>>, mut events: EventReader<PauseEvent>) {\n     for ev in events.read() {\n         if ev.0 {\n             time.pause();\n         } else {\n             time.unpause();\n         }\n     }\n }\n ```\n\n # Adding custom clocks\n\n New custom clocks can be created by creating your own struct as a context\n and passing it to [`new_with()`](Time::new_with). These clocks can be\n inserted as resources as normal and then accessed by systems. You can use\n the [`advance_by()`](Time::advance_by) or [`advance_to()`](Time::advance_to)\n methods to move the clock forwards based on your own logic.\n\n If you want to add methods for your time instance and they require access to\n both your context and the generic time part, it's probably simplest to add a\n custom trait for them and implement it for `Time<Custom>`.\n\n Your context struct will need to implement the [`Default`] trait because\n [`Time`] structures support reflection. It also makes initialization trivial\n by being able to call `app.init_resource::<Time<Custom>>()`.\n\n You can also replace the \"generic\" `Time` clock resource if the \"default\"\n time for your game should not be the default virtual time provided. You can\n get a \"generic\" snapshot of your clock by calling `as_generic()` and then\n overwrite the [`Time`] resource with it. The default systems added by\n [`TimePlugin`](crate::TimePlugin) will overwrite the [`Time`] clock during\n [`First`](bevy_app::First) and [`FixedUpdate`](bevy_app::FixedUpdate)\n schedules.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n # use bevy_platform::time::Instant;\n #\n #[derive(Debug)]\n struct Custom {\n     last_external_time: Instant,\n }\n\n impl Default for Custom {\n     fn default() -> Self {\n         Self {\n             last_external_time: Instant::now(),\n         }\n     }\n }\n\n trait CustomTime {\n     fn update_from_external(&mut self, instant: Instant);\n }\n\n impl CustomTime for Time<Custom> {\n     fn update_from_external(&mut self, instant: Instant) {\n          let delta = instant - self.context().last_external_time;\n          self.advance_by(delta);\n          self.context_mut().last_external_time = instant;\n     }\n }\n ```",
      "layout": {
        "kind": "Struct",
        "name": "Time",
        "fields": [
          {
            "name": "context",
            "type": "()"
          },
          {
            "name": "wrap_period",
            "type": "core::time::Duration"
          },
          {
            "name": "delta",
            "type": "core::time::Duration"
          },
          {
            "name": "delta_secs",
            "type": "f32"
          },
          {
            "name": "delta_secs_f64",
            "type": "f64"
          },
          {
            "name": "elapsed",
            "type": "core::time::Duration"
          },
          {
            "name": "elapsed_secs",
            "type": "f32"
          },
          {
            "name": "elapsed_secs_f64",
            "type": "f64"
          },
          {
            "name": "elapsed_wrapped",
            "type": "core::time::Duration"
          },
          {
            "name": "elapsed_secs_wrapped",
            "type": "f32"
          },
          {
            "name": "elapsed_secs_wrapped_f64",
            "type": "f64"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_time::time::Time<bevy_time::fixed::Fixed>": {
      "identifier": "Time",
      "crate": "bevy_time",
      "path": "bevy_time::time::Time<bevy_time::fixed::Fixed>",
      "generics": [
        {
          "type_id": "bevy_time::fixed::Fixed",
          "name": "T"
        }
      ],
      "documentation": " A generic clock resource that tracks how much it has advanced since its\n previous update and since its creation.\n\n Multiple instances of this resource are inserted automatically by\n [`TimePlugin`](crate::TimePlugin):\n\n - [`Time<Real>`](crate::real::Real) tracks real wall-clock time elapsed.\n - [`Time<Virtual>`](crate::virt::Virtual) tracks virtual game time that may\n   be paused or scaled.\n - [`Time<Fixed>`](crate::fixed::Fixed) tracks fixed timesteps based on\n   virtual time.\n - [`Time`] is a generic clock that corresponds to \"current\" or \"default\"\n   time for systems. It contains [`Time<Virtual>`](crate::virt::Virtual)\n   except inside the [`FixedMain`](bevy_app::FixedMain) schedule when it\n   contains [`Time<Fixed>`](crate::fixed::Fixed).\n\n The time elapsed since the previous time this clock was advanced is saved as\n [`delta()`](Time::delta) and the total amount of time the clock has advanced\n is saved as [`elapsed()`](Time::elapsed). Both are represented as exact\n [`Duration`] values with fixed nanosecond precision. The clock does not\n support time moving backwards, but it can be updated with [`Duration::ZERO`]\n which will set [`delta()`](Time::delta) to zero.\n\n These values are also available in seconds as `f32` via\n [`delta_secs()`](Time::delta_secs) and\n [`elapsed_secs()`](Time::elapsed_secs), and also in seconds as `f64`\n via [`delta_secs_f64()`](Time::delta_secs_f64) and\n [`elapsed_secs_f64()`](Time::elapsed_secs_f64).\n\n Since [`elapsed_secs()`](Time::elapsed_secs) will grow constantly and\n is `f32`, it will exhibit gradual precision loss. For applications that\n require an `f32` value but suffer from gradual precision loss there is\n [`elapsed_secs_wrapped()`](Time::elapsed_secs_wrapped) available. The\n same wrapped value is also available as [`Duration`] and `f64` for\n consistency. The wrap period is by default 1 hour, and can be set by\n [`set_wrap_period()`](Time::set_wrap_period).\n\n # Accessing clocks\n\n By default, any systems requiring current [`delta()`](Time::delta) or\n [`elapsed()`](Time::elapsed) should use `Res<Time>` to access the default\n time configured for the program. By default, this refers to\n [`Time<Virtual>`](crate::virt::Virtual) except during the\n [`FixedMain`](bevy_app::FixedMain) schedule when it refers to\n [`Time<Fixed>`](crate::fixed::Fixed). This ensures your system can be used\n either in [`Update`](bevy_app::Update) or\n [`FixedUpdate`](bevy_app::FixedUpdate) schedule depending on what is needed.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn ambivalent_system(time: Res<Time>) {\n     println!(\"this how I see time: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n }\n ```\n\n If your system needs to react based on real time (wall clock time), like for\n user interfaces, it should use `Res<Time<Real>>`. The\n [`delta()`](Time::delta) and [`elapsed()`](Time::elapsed) values will always\n correspond to real time and will not be affected by pause, time scaling or\n other tweaks.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn real_time_system(time: Res<Time<Real>>) {\n     println!(\"this will always be real time: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n }\n ```\n\n If your system specifically needs to access fixed timestep clock, even when\n placed in `Update` schedule, you should use `Res<Time<Fixed>>`. The\n [`delta()`](Time::delta) and [`elapsed()`](Time::elapsed) values will\n correspond to the latest fixed timestep that has been run.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn fixed_time_system(time: Res<Time<Fixed>>) {\n     println!(\"this will always be the last executed fixed timestep: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n }\n ```\n\n Finally, if your system specifically needs to know the current virtual game\n time, even if placed inside [`FixedUpdate`](bevy_app::FixedUpdate), for\n example to know if the game is [`was_paused()`](Time::was_paused) or to use\n [`effective_speed()`](Time::effective_speed), you can use\n `Res<Time<Virtual>>`. However, if the system is placed in\n [`FixedUpdate`](bevy_app::FixedUpdate), extra care must be used because your\n system might be run multiple times with the same [`delta()`](Time::delta)\n and [`elapsed()`](Time::elapsed) values as the virtual game time has not\n changed between the iterations.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn fixed_time_system(time: Res<Time<Virtual>>) {\n     println!(\"this will be virtual time for this update: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n     println!(\"also the relative speed of the game is now {}\", time.effective_speed());\n }\n ```\n\n If you need to change the settings for any of the clocks, for example to\n [`pause()`](Time::pause) the game, you should use `ResMut<Time<Virtual>>`.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n #[derive(Event)]\n struct PauseEvent(bool);\n\n fn pause_system(mut time: ResMut<Time<Virtual>>, mut events: EventReader<PauseEvent>) {\n     for ev in events.read() {\n         if ev.0 {\n             time.pause();\n         } else {\n             time.unpause();\n         }\n     }\n }\n ```\n\n # Adding custom clocks\n\n New custom clocks can be created by creating your own struct as a context\n and passing it to [`new_with()`](Time::new_with). These clocks can be\n inserted as resources as normal and then accessed by systems. You can use\n the [`advance_by()`](Time::advance_by) or [`advance_to()`](Time::advance_to)\n methods to move the clock forwards based on your own logic.\n\n If you want to add methods for your time instance and they require access to\n both your context and the generic time part, it's probably simplest to add a\n custom trait for them and implement it for `Time<Custom>`.\n\n Your context struct will need to implement the [`Default`] trait because\n [`Time`] structures support reflection. It also makes initialization trivial\n by being able to call `app.init_resource::<Time<Custom>>()`.\n\n You can also replace the \"generic\" `Time` clock resource if the \"default\"\n time for your game should not be the default virtual time provided. You can\n get a \"generic\" snapshot of your clock by calling `as_generic()` and then\n overwrite the [`Time`] resource with it. The default systems added by\n [`TimePlugin`](crate::TimePlugin) will overwrite the [`Time`] clock during\n [`First`](bevy_app::First) and [`FixedUpdate`](bevy_app::FixedUpdate)\n schedules.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n # use bevy_platform::time::Instant;\n #\n #[derive(Debug)]\n struct Custom {\n     last_external_time: Instant,\n }\n\n impl Default for Custom {\n     fn default() -> Self {\n         Self {\n             last_external_time: Instant::now(),\n         }\n     }\n }\n\n trait CustomTime {\n     fn update_from_external(&mut self, instant: Instant);\n }\n\n impl CustomTime for Time<Custom> {\n     fn update_from_external(&mut self, instant: Instant) {\n          let delta = instant - self.context().last_external_time;\n          self.advance_by(delta);\n          self.context_mut().last_external_time = instant;\n     }\n }\n ```",
      "layout": {
        "kind": "Struct",
        "name": "Time",
        "fields": [
          {
            "name": "context",
            "type": "bevy_time::fixed::Fixed"
          },
          {
            "name": "wrap_period",
            "type": "core::time::Duration"
          },
          {
            "name": "delta",
            "type": "core::time::Duration"
          },
          {
            "name": "delta_secs",
            "type": "f32"
          },
          {
            "name": "delta_secs_f64",
            "type": "f64"
          },
          {
            "name": "elapsed",
            "type": "core::time::Duration"
          },
          {
            "name": "elapsed_secs",
            "type": "f32"
          },
          {
            "name": "elapsed_secs_f64",
            "type": "f64"
          },
          {
            "name": "elapsed_wrapped",
            "type": "core::time::Duration"
          },
          {
            "name": "elapsed_secs_wrapped",
            "type": "f32"
          },
          {
            "name": "elapsed_secs_wrapped_f64",
            "type": "f64"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_time::time::Time<bevy_time::real::Real>": {
      "identifier": "Time",
      "crate": "bevy_time",
      "path": "bevy_time::time::Time<bevy_time::real::Real>",
      "generics": [
        {
          "type_id": "bevy_time::real::Real",
          "name": "T"
        }
      ],
      "documentation": " A generic clock resource that tracks how much it has advanced since its\n previous update and since its creation.\n\n Multiple instances of this resource are inserted automatically by\n [`TimePlugin`](crate::TimePlugin):\n\n - [`Time<Real>`](crate::real::Real) tracks real wall-clock time elapsed.\n - [`Time<Virtual>`](crate::virt::Virtual) tracks virtual game time that may\n   be paused or scaled.\n - [`Time<Fixed>`](crate::fixed::Fixed) tracks fixed timesteps based on\n   virtual time.\n - [`Time`] is a generic clock that corresponds to \"current\" or \"default\"\n   time for systems. It contains [`Time<Virtual>`](crate::virt::Virtual)\n   except inside the [`FixedMain`](bevy_app::FixedMain) schedule when it\n   contains [`Time<Fixed>`](crate::fixed::Fixed).\n\n The time elapsed since the previous time this clock was advanced is saved as\n [`delta()`](Time::delta) and the total amount of time the clock has advanced\n is saved as [`elapsed()`](Time::elapsed). Both are represented as exact\n [`Duration`] values with fixed nanosecond precision. The clock does not\n support time moving backwards, but it can be updated with [`Duration::ZERO`]\n which will set [`delta()`](Time::delta) to zero.\n\n These values are also available in seconds as `f32` via\n [`delta_secs()`](Time::delta_secs) and\n [`elapsed_secs()`](Time::elapsed_secs), and also in seconds as `f64`\n via [`delta_secs_f64()`](Time::delta_secs_f64) and\n [`elapsed_secs_f64()`](Time::elapsed_secs_f64).\n\n Since [`elapsed_secs()`](Time::elapsed_secs) will grow constantly and\n is `f32`, it will exhibit gradual precision loss. For applications that\n require an `f32` value but suffer from gradual precision loss there is\n [`elapsed_secs_wrapped()`](Time::elapsed_secs_wrapped) available. The\n same wrapped value is also available as [`Duration`] and `f64` for\n consistency. The wrap period is by default 1 hour, and can be set by\n [`set_wrap_period()`](Time::set_wrap_period).\n\n # Accessing clocks\n\n By default, any systems requiring current [`delta()`](Time::delta) or\n [`elapsed()`](Time::elapsed) should use `Res<Time>` to access the default\n time configured for the program. By default, this refers to\n [`Time<Virtual>`](crate::virt::Virtual) except during the\n [`FixedMain`](bevy_app::FixedMain) schedule when it refers to\n [`Time<Fixed>`](crate::fixed::Fixed). This ensures your system can be used\n either in [`Update`](bevy_app::Update) or\n [`FixedUpdate`](bevy_app::FixedUpdate) schedule depending on what is needed.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn ambivalent_system(time: Res<Time>) {\n     println!(\"this how I see time: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n }\n ```\n\n If your system needs to react based on real time (wall clock time), like for\n user interfaces, it should use `Res<Time<Real>>`. The\n [`delta()`](Time::delta) and [`elapsed()`](Time::elapsed) values will always\n correspond to real time and will not be affected by pause, time scaling or\n other tweaks.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn real_time_system(time: Res<Time<Real>>) {\n     println!(\"this will always be real time: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n }\n ```\n\n If your system specifically needs to access fixed timestep clock, even when\n placed in `Update` schedule, you should use `Res<Time<Fixed>>`. The\n [`delta()`](Time::delta) and [`elapsed()`](Time::elapsed) values will\n correspond to the latest fixed timestep that has been run.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn fixed_time_system(time: Res<Time<Fixed>>) {\n     println!(\"this will always be the last executed fixed timestep: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n }\n ```\n\n Finally, if your system specifically needs to know the current virtual game\n time, even if placed inside [`FixedUpdate`](bevy_app::FixedUpdate), for\n example to know if the game is [`was_paused()`](Time::was_paused) or to use\n [`effective_speed()`](Time::effective_speed), you can use\n `Res<Time<Virtual>>`. However, if the system is placed in\n [`FixedUpdate`](bevy_app::FixedUpdate), extra care must be used because your\n system might be run multiple times with the same [`delta()`](Time::delta)\n and [`elapsed()`](Time::elapsed) values as the virtual game time has not\n changed between the iterations.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn fixed_time_system(time: Res<Time<Virtual>>) {\n     println!(\"this will be virtual time for this update: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n     println!(\"also the relative speed of the game is now {}\", time.effective_speed());\n }\n ```\n\n If you need to change the settings for any of the clocks, for example to\n [`pause()`](Time::pause) the game, you should use `ResMut<Time<Virtual>>`.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n #[derive(Event)]\n struct PauseEvent(bool);\n\n fn pause_system(mut time: ResMut<Time<Virtual>>, mut events: EventReader<PauseEvent>) {\n     for ev in events.read() {\n         if ev.0 {\n             time.pause();\n         } else {\n             time.unpause();\n         }\n     }\n }\n ```\n\n # Adding custom clocks\n\n New custom clocks can be created by creating your own struct as a context\n and passing it to [`new_with()`](Time::new_with). These clocks can be\n inserted as resources as normal and then accessed by systems. You can use\n the [`advance_by()`](Time::advance_by) or [`advance_to()`](Time::advance_to)\n methods to move the clock forwards based on your own logic.\n\n If you want to add methods for your time instance and they require access to\n both your context and the generic time part, it's probably simplest to add a\n custom trait for them and implement it for `Time<Custom>`.\n\n Your context struct will need to implement the [`Default`] trait because\n [`Time`] structures support reflection. It also makes initialization trivial\n by being able to call `app.init_resource::<Time<Custom>>()`.\n\n You can also replace the \"generic\" `Time` clock resource if the \"default\"\n time for your game should not be the default virtual time provided. You can\n get a \"generic\" snapshot of your clock by calling `as_generic()` and then\n overwrite the [`Time`] resource with it. The default systems added by\n [`TimePlugin`](crate::TimePlugin) will overwrite the [`Time`] clock during\n [`First`](bevy_app::First) and [`FixedUpdate`](bevy_app::FixedUpdate)\n schedules.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n # use bevy_platform::time::Instant;\n #\n #[derive(Debug)]\n struct Custom {\n     last_external_time: Instant,\n }\n\n impl Default for Custom {\n     fn default() -> Self {\n         Self {\n             last_external_time: Instant::now(),\n         }\n     }\n }\n\n trait CustomTime {\n     fn update_from_external(&mut self, instant: Instant);\n }\n\n impl CustomTime for Time<Custom> {\n     fn update_from_external(&mut self, instant: Instant) {\n          let delta = instant - self.context().last_external_time;\n          self.advance_by(delta);\n          self.context_mut().last_external_time = instant;\n     }\n }\n ```",
      "layout": {
        "kind": "Struct",
        "name": "Time",
        "fields": [
          {
            "name": "context",
            "type": "bevy_time::real::Real"
          },
          {
            "name": "wrap_period",
            "type": "core::time::Duration"
          },
          {
            "name": "delta",
            "type": "core::time::Duration"
          },
          {
            "name": "delta_secs",
            "type": "f32"
          },
          {
            "name": "delta_secs_f64",
            "type": "f64"
          },
          {
            "name": "elapsed",
            "type": "core::time::Duration"
          },
          {
            "name": "elapsed_secs",
            "type": "f32"
          },
          {
            "name": "elapsed_secs_f64",
            "type": "f64"
          },
          {
            "name": "elapsed_wrapped",
            "type": "core::time::Duration"
          },
          {
            "name": "elapsed_secs_wrapped",
            "type": "f32"
          },
          {
            "name": "elapsed_secs_wrapped_f64",
            "type": "f64"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_time::time::Time<bevy_time::virt::Virtual>": {
      "identifier": "Time",
      "crate": "bevy_time",
      "path": "bevy_time::time::Time<bevy_time::virt::Virtual>",
      "generics": [
        {
          "type_id": "bevy_time::virt::Virtual",
          "name": "T"
        }
      ],
      "documentation": " A generic clock resource that tracks how much it has advanced since its\n previous update and since its creation.\n\n Multiple instances of this resource are inserted automatically by\n [`TimePlugin`](crate::TimePlugin):\n\n - [`Time<Real>`](crate::real::Real) tracks real wall-clock time elapsed.\n - [`Time<Virtual>`](crate::virt::Virtual) tracks virtual game time that may\n   be paused or scaled.\n - [`Time<Fixed>`](crate::fixed::Fixed) tracks fixed timesteps based on\n   virtual time.\n - [`Time`] is a generic clock that corresponds to \"current\" or \"default\"\n   time for systems. It contains [`Time<Virtual>`](crate::virt::Virtual)\n   except inside the [`FixedMain`](bevy_app::FixedMain) schedule when it\n   contains [`Time<Fixed>`](crate::fixed::Fixed).\n\n The time elapsed since the previous time this clock was advanced is saved as\n [`delta()`](Time::delta) and the total amount of time the clock has advanced\n is saved as [`elapsed()`](Time::elapsed). Both are represented as exact\n [`Duration`] values with fixed nanosecond precision. The clock does not\n support time moving backwards, but it can be updated with [`Duration::ZERO`]\n which will set [`delta()`](Time::delta) to zero.\n\n These values are also available in seconds as `f32` via\n [`delta_secs()`](Time::delta_secs) and\n [`elapsed_secs()`](Time::elapsed_secs), and also in seconds as `f64`\n via [`delta_secs_f64()`](Time::delta_secs_f64) and\n [`elapsed_secs_f64()`](Time::elapsed_secs_f64).\n\n Since [`elapsed_secs()`](Time::elapsed_secs) will grow constantly and\n is `f32`, it will exhibit gradual precision loss. For applications that\n require an `f32` value but suffer from gradual precision loss there is\n [`elapsed_secs_wrapped()`](Time::elapsed_secs_wrapped) available. The\n same wrapped value is also available as [`Duration`] and `f64` for\n consistency. The wrap period is by default 1 hour, and can be set by\n [`set_wrap_period()`](Time::set_wrap_period).\n\n # Accessing clocks\n\n By default, any systems requiring current [`delta()`](Time::delta) or\n [`elapsed()`](Time::elapsed) should use `Res<Time>` to access the default\n time configured for the program. By default, this refers to\n [`Time<Virtual>`](crate::virt::Virtual) except during the\n [`FixedMain`](bevy_app::FixedMain) schedule when it refers to\n [`Time<Fixed>`](crate::fixed::Fixed). This ensures your system can be used\n either in [`Update`](bevy_app::Update) or\n [`FixedUpdate`](bevy_app::FixedUpdate) schedule depending on what is needed.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn ambivalent_system(time: Res<Time>) {\n     println!(\"this how I see time: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n }\n ```\n\n If your system needs to react based on real time (wall clock time), like for\n user interfaces, it should use `Res<Time<Real>>`. The\n [`delta()`](Time::delta) and [`elapsed()`](Time::elapsed) values will always\n correspond to real time and will not be affected by pause, time scaling or\n other tweaks.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn real_time_system(time: Res<Time<Real>>) {\n     println!(\"this will always be real time: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n }\n ```\n\n If your system specifically needs to access fixed timestep clock, even when\n placed in `Update` schedule, you should use `Res<Time<Fixed>>`. The\n [`delta()`](Time::delta) and [`elapsed()`](Time::elapsed) values will\n correspond to the latest fixed timestep that has been run.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn fixed_time_system(time: Res<Time<Fixed>>) {\n     println!(\"this will always be the last executed fixed timestep: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n }\n ```\n\n Finally, if your system specifically needs to know the current virtual game\n time, even if placed inside [`FixedUpdate`](bevy_app::FixedUpdate), for\n example to know if the game is [`was_paused()`](Time::was_paused) or to use\n [`effective_speed()`](Time::effective_speed), you can use\n `Res<Time<Virtual>>`. However, if the system is placed in\n [`FixedUpdate`](bevy_app::FixedUpdate), extra care must be used because your\n system might be run multiple times with the same [`delta()`](Time::delta)\n and [`elapsed()`](Time::elapsed) values as the virtual game time has not\n changed between the iterations.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn fixed_time_system(time: Res<Time<Virtual>>) {\n     println!(\"this will be virtual time for this update: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n     println!(\"also the relative speed of the game is now {}\", time.effective_speed());\n }\n ```\n\n If you need to change the settings for any of the clocks, for example to\n [`pause()`](Time::pause) the game, you should use `ResMut<Time<Virtual>>`.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n #[derive(Event)]\n struct PauseEvent(bool);\n\n fn pause_system(mut time: ResMut<Time<Virtual>>, mut events: EventReader<PauseEvent>) {\n     for ev in events.read() {\n         if ev.0 {\n             time.pause();\n         } else {\n             time.unpause();\n         }\n     }\n }\n ```\n\n # Adding custom clocks\n\n New custom clocks can be created by creating your own struct as a context\n and passing it to [`new_with()`](Time::new_with). These clocks can be\n inserted as resources as normal and then accessed by systems. You can use\n the [`advance_by()`](Time::advance_by) or [`advance_to()`](Time::advance_to)\n methods to move the clock forwards based on your own logic.\n\n If you want to add methods for your time instance and they require access to\n both your context and the generic time part, it's probably simplest to add a\n custom trait for them and implement it for `Time<Custom>`.\n\n Your context struct will need to implement the [`Default`] trait because\n [`Time`] structures support reflection. It also makes initialization trivial\n by being able to call `app.init_resource::<Time<Custom>>()`.\n\n You can also replace the \"generic\" `Time` clock resource if the \"default\"\n time for your game should not be the default virtual time provided. You can\n get a \"generic\" snapshot of your clock by calling `as_generic()` and then\n overwrite the [`Time`] resource with it. The default systems added by\n [`TimePlugin`](crate::TimePlugin) will overwrite the [`Time`] clock during\n [`First`](bevy_app::First) and [`FixedUpdate`](bevy_app::FixedUpdate)\n schedules.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n # use bevy_platform::time::Instant;\n #\n #[derive(Debug)]\n struct Custom {\n     last_external_time: Instant,\n }\n\n impl Default for Custom {\n     fn default() -> Self {\n         Self {\n             last_external_time: Instant::now(),\n         }\n     }\n }\n\n trait CustomTime {\n     fn update_from_external(&mut self, instant: Instant);\n }\n\n impl CustomTime for Time<Custom> {\n     fn update_from_external(&mut self, instant: Instant) {\n          let delta = instant - self.context().last_external_time;\n          self.advance_by(delta);\n          self.context_mut().last_external_time = instant;\n     }\n }\n ```",
      "layout": {
        "kind": "Struct",
        "name": "Time",
        "fields": [
          {
            "name": "context",
            "type": "bevy_time::virt::Virtual"
          },
          {
            "name": "wrap_period",
            "type": "core::time::Duration"
          },
          {
            "name": "delta",
            "type": "core::time::Duration"
          },
          {
            "name": "delta_secs",
            "type": "f32"
          },
          {
            "name": "delta_secs_f64",
            "type": "f64"
          },
          {
            "name": "elapsed",
            "type": "core::time::Duration"
          },
          {
            "name": "elapsed_secs",
            "type": "f32"
          },
          {
            "name": "elapsed_secs_f64",
            "type": "f64"
          },
          {
            "name": "elapsed_wrapped",
            "type": "core::time::Duration"
          },
          {
            "name": "elapsed_secs_wrapped",
            "type": "f32"
          },
          {
            "name": "elapsed_secs_wrapped_f64",
            "type": "f64"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "core::ops::Range<f32>": {
      "identifier": "Range",
      "crate": "core",
      "path": "core::ops::Range<f32>",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "core::ops::Range<u32>": {
      "identifier": "Range",
      "crate": "core",
      "path": "core::ops::Range<u32>",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "core::ops::RangeInclusive<f32>": {
      "identifier": "RangeInclusive",
      "crate": "core",
      "path": "core::ops::RangeInclusive<f32>",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<[u8; 6]>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<[u8; 6]>",
      "generics": [
        {
          "type_id": "[u8; 6]",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "[u8; 6]"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<alloc::string::String>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<alloc::string::String>",
      "generics": [
        {
          "type_id": "String",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "String"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<bevy_audio::audio::SpatialScale>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<bevy_audio::audio::SpatialScale>",
      "generics": [
        {
          "type_id": "bevy_audio::audio::SpatialScale",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "bevy_audio::audio::SpatialScale"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<bevy_color::color::Color>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<bevy_color::color::Color>",
      "generics": [
        {
          "type_id": "bevy_color::color::Color",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "bevy_color::color::Color"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<bevy_ecs::entity::Entity>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<bevy_ecs::entity::Entity>",
      "generics": [
        {
          "type_id": "bevy_ecs::entity::Entity",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "bevy_ecs::entity::Entity"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<bevy_image::texture_atlas::TextureAtlas>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<bevy_image::texture_atlas::TextureAtlas>",
      "generics": [
        {
          "type_id": "bevy_image::texture_atlas::TextureAtlas",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "bevy_image::texture_atlas::TextureAtlas"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<bevy_input::touch::ForceTouch>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<bevy_input::touch::ForceTouch>",
      "generics": [
        {
          "type_id": "bevy_input::touch::ForceTouch",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "bevy_input::touch::ForceTouch"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<bevy_math::compass::CompassOctant>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<bevy_math::compass::CompassOctant>",
      "generics": [
        {
          "type_id": "bevy_math::compass::CompassOctant",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "bevy_math::compass::CompassOctant"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<bevy_math::rects::rect::Rect>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<bevy_math::rects::rect::Rect>",
      "generics": [
        {
          "type_id": "bevy_math::rects::rect::Rect",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "bevy_math::rects::rect::Rect"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<bevy_math::rects::urect::URect>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<bevy_math::rects::urect::URect>",
      "generics": [
        {
          "type_id": "bevy_math::rects::urect::URect",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "bevy_math::rects::urect::URect"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<bevy_mesh::index::Indices>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<bevy_mesh::index::Indices>",
      "generics": [
        {
          "type_id": "bevy_mesh::index::Indices",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "bevy_mesh::index::Indices"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<bevy_mod_scripting_core::bindings::reference::ReflectReference>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<bevy_mod_scripting_core::bindings::reference::ReflectReference>",
      "generics": [
        {
          "type_id": "ReflectReference",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "ReflectReference"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<bevy_mod_scripting_core::bindings::script_value::ScriptValue>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<bevy_mod_scripting_core::bindings::script_value::ScriptValue>",
      "generics": [
        {
          "type_id": "bevy_mod_scripting_core::bindings::script_value::ScriptValue",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::bindings::script_value::ScriptValue"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<bevy_platform::time::Instant>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<bevy_platform::time::Instant>",
      "generics": [
        {
          "type_id": "bevy_platform::time::Instant",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "bevy_platform::time::Instant"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<bevy_render::camera::camera::SubCameraView>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<bevy_render::camera::camera::SubCameraView>",
      "generics": [
        {
          "type_id": "bevy_render::camera::camera::SubCameraView",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "bevy_render::camera::camera::SubCameraView"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<bevy_render::camera::camera::Viewport>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<bevy_render::camera::camera::Viewport>",
      "generics": [
        {
          "type_id": "bevy_render::camera::camera::Viewport",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "bevy_render::camera::camera::Viewport"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<bevy_system_reflection::ReflectSchedule>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<bevy_system_reflection::ReflectSchedule>",
      "generics": [
        {
          "type_id": "bevy_system_reflection::ReflectSchedule",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "bevy_system_reflection::ReflectSchedule"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<bevy_system_reflection::ReflectSystem>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<bevy_system_reflection::ReflectSystem>",
      "generics": [
        {
          "type_id": "bevy_system_reflection::ReflectSystem",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "bevy_system_reflection::ReflectSystem"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<bevy_window::window::WindowTheme>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<bevy_window::window::WindowTheme>",
      "generics": [
        {
          "type_id": "bevy_window::window::WindowTheme",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "bevy_window::window::WindowTheme"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<bool>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<bool>",
      "generics": [
        {
          "type_id": "bool",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "bool"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<char>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<char>",
      "generics": [
        {
          "type_id": "char",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "char"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<core::num::NonZeroI16>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<core::num::NonZeroI16>",
      "generics": [
        {
          "type_id": "core::num::NonZeroI16",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "core::num::NonZeroI16"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<core::num::NonZeroU16>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<core::num::NonZeroU16>",
      "generics": [
        {
          "type_id": "core::num::NonZeroU16",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "core::num::NonZeroU16"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<core::num::NonZeroU32>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<core::num::NonZeroU32>",
      "generics": [
        {
          "type_id": "core::num::NonZeroU32",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "core::num::NonZeroU32"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<f32>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<f32>",
      "generics": [
        {
          "type_id": "f32",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "f32"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<f64>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<f64>",
      "generics": [
        {
          "type_id": "f64",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "f64"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<glam::DVec2>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<glam::DVec2>",
      "generics": [
        {
          "type_id": "glam::DVec2",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "glam::DVec2"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<glam::Vec2>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<glam::Vec2>",
      "generics": [
        {
          "type_id": "glam::Vec2",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "glam::Vec2"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<glam::Vec3>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<glam::Vec3>",
      "generics": [
        {
          "type_id": "glam::Vec3",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "glam::Vec3"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<petgraph::graph::NodeIndex>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<petgraph::graph::NodeIndex>",
      "generics": [
        {
          "type_id": "petgraph::graph::NodeIndex",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "petgraph::graph::NodeIndex"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<smol_str::SmolStr>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<smol_str::SmolStr>",
      "generics": [
        {
          "type_id": "smol_str::SmolStr",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "smol_str::SmolStr"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<u16>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<u16>",
      "generics": [
        {
          "type_id": "u16",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "u16"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<u32>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<u32>",
      "generics": [
        {
          "type_id": "u32",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "u32"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<usize>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<usize>",
      "generics": [
        {
          "type_id": "usize",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "usize"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "smallvec::SmallVec<[bevy_ecs::component::ComponentId; 4]>": {
      "identifier": "SmallVec",
      "crate": "smallvec",
      "path": "smallvec::SmallVec<[bevy_ecs::component::ComponentId; 4]>",
      "generics": [
        {
          "type_id": "TypeId(0xc1d538f496361f974c57b26204ecc7b6)",
          "name": "T"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "smallvec::SmallVec<[bevy_text::text::TextEntity; 1]>": {
      "identifier": "SmallVec",
      "crate": "smallvec",
      "path": "smallvec::SmallVec<[bevy_text::text::TextEntity; 1]>",
      "generics": [
        {
          "type_id": "TypeId(0x4b6461ca8cbe9c8a65662f182ea1e628)",
          "name": "T"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "smallvec::SmallVec<[bevy_ui::ui_node::GridTrack; 1]>": {
      "identifier": "SmallVec",
      "crate": "smallvec",
      "path": "smallvec::SmallVec<[bevy_ui::ui_node::GridTrack; 1]>",
      "generics": [
        {
          "type_id": "TypeId(0x45830c46c5fe1d429cc9fa598a632c4a)",
          "name": "T"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "smallvec::SmallVec<[core::any::TypeId; 1]>": {
      "identifier": "SmallVec",
      "crate": "smallvec",
      "path": "smallvec::SmallVec<[core::any::TypeId; 1]>",
      "generics": [
        {
          "type_id": "TypeId(0x1100952031e6e64f284e9a3b522b9e0d)",
          "name": "T"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "smallvec::SmallVec<[u64; 1]>": {
      "identifier": "SmallVec",
      "crate": "smallvec",
      "path": "smallvec::SmallVec<[u64; 1]>",
      "generics": [
        {
          "type_id": "TypeId(0xc02b4f0291ef0aad60339b7367f351ef)",
          "name": "T"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "alloc::vec::Vec<(bevy_ecs::entity::Entity, bevy_picking::backend::HitData)>": {
      "identifier": "Vec",
      "crate": "alloc",
      "path": "alloc::vec::Vec<(bevy_ecs::entity::Entity, bevy_picking::backend::HitData)>",
      "generics": [
        {
          "type_id": "(bevy_ecs::entity::Entity, bevy_picking::backend::HitData)",
          "name": "T"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "alloc::vec::Vec<core::ops::Range<u32>>": {
      "identifier": "Vec",
      "crate": "alloc",
      "path": "alloc::vec::Vec<core::ops::Range<u32>>",
      "generics": [
        {
          "type_id": "core::ops::Range<u32>",
          "name": "T"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "bevy_ecs::entity::hash_map::EntityHashMap<alloc::vec::Vec<bevy_pbr::light::Cascade>>": {
      "identifier": "EntityHashMap",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::entity::hash_map::EntityHashMap<alloc::vec::Vec<bevy_pbr::light::Cascade>>",
      "generics": [
        {
          "type_id": "alloc::vec::Vec<bevy_pbr::light::Cascade>",
          "name": "V"
        }
      ],
      "documentation": " A [`HashMap`] pre-configured to use [`EntityHash`] hashing.",
      "layout": {
        "kind": "TupleStruct",
        "name": "EntityHashMap",
        "fields": [
          {
            "type": "bevy_platform::collections::HashMap<bevy_ecs::entity::Entity, alloc::vec::Vec<bevy_pbr::light::Cascade>, bevy_ecs::entity::hash::EntityHash>"
          }
        ]
      },
      "generated": false,
      "insignificance": 1000
    },
    "bevy_platform::collections::HashSet<bevy_ecs::entity::Entity, bevy_ecs::entity::hash::EntityHash>": {
      "identifier": "HashSet",
      "crate": "bevy_platform",
      "path": "bevy_platform::collections::HashSet<bevy_ecs::entity::Entity, bevy_ecs::entity::hash::EntityHash>",
      "generics": [
        {
          "type_id": "bevy_ecs::entity::Entity",
          "name": "V"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "bevy_platform::collections::HashSet<bevy_input::gamepad::GamepadButton, bevy_platform::hash::FixedHasher>": {
      "identifier": "HashSet",
      "crate": "bevy_platform",
      "path": "bevy_platform::collections::HashSet<bevy_input::gamepad::GamepadButton, bevy_platform::hash::FixedHasher>",
      "generics": [
        {
          "type_id": "bevy_input::gamepad::GamepadButton",
          "name": "V"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<(u8, u8)>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<(u8, u8)>",
      "generics": [
        {
          "type_id": "(u8, u8)",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "(u8, u8)"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<(usize, usize)>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<(usize, usize)>",
      "generics": [
        {
          "type_id": "(usize, usize)",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "(usize, usize)"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<alloc::borrow::Cow<str>>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<alloc::borrow::Cow<str>>",
      "generics": [
        {
          "type_id": "alloc::borrow::Cow<str>",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "alloc::borrow::Cow<str>"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<alloc::vec::Vec<alloc::string::String>>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<alloc::vec::Vec<alloc::string::String>>",
      "generics": [
        {
          "type_id": "alloc::vec::Vec<alloc::string::String>",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "alloc::vec::Vec<alloc::string::String>"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<bevy_asset::handle::Handle<bevy_image::image::Image>>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<bevy_asset::handle::Handle<bevy_image::image::Image>>",
      "generics": [
        {
          "type_id": "bevy_asset::handle::Handle<bevy_image::image::Image>",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "bevy_asset::handle::Handle<bevy_image::image::Image>"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<bevy_asset::handle::Handle<bevy_mesh::mesh::Mesh>>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<bevy_asset::handle::Handle<bevy_mesh::mesh::Mesh>>",
      "generics": [
        {
          "type_id": "bevy_asset::handle::Handle<bevy_mesh::mesh::Mesh>",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "bevy_asset::handle::Handle<bevy_mesh::mesh::Mesh>"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::result::Result<(), bevy_mod_scripting_core::error::InteropError>": {
      "identifier": "Result",
      "crate": "core",
      "path": "core::result::Result<(), bevy_mod_scripting_core::error::InteropError>",
      "generics": [
        {
          "type_id": "()",
          "name": "T"
        },
        {
          "type_id": "bevy_mod_scripting_core::error::InteropError",
          "name": "E"
        }
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Ok",
          "fields": [
            {
              "type": "()"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Err",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::error::InteropError"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::result::Result<alloc::string::String, bevy_mod_scripting_core::error::InteropError>": {
      "identifier": "Result",
      "crate": "core",
      "path": "core::result::Result<alloc::string::String, bevy_mod_scripting_core::error::InteropError>",
      "generics": [
        {
          "type_id": "String",
          "name": "T"
        },
        {
          "type_id": "bevy_mod_scripting_core::error::InteropError",
          "name": "E"
        }
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Ok",
          "fields": [
            {
              "type": "String"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Err",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::error::InteropError"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::result::Result<bevy_ecs::entity::Entity, bevy_mod_scripting_core::error::InteropError>": {
      "identifier": "Result",
      "crate": "core",
      "path": "core::result::Result<bevy_ecs::entity::Entity, bevy_mod_scripting_core::error::InteropError>",
      "generics": [
        {
          "type_id": "bevy_ecs::entity::Entity",
          "name": "T"
        },
        {
          "type_id": "bevy_mod_scripting_core::error::InteropError",
          "name": "E"
        }
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Ok",
          "fields": [
            {
              "type": "bevy_ecs::entity::Entity"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Err",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::error::InteropError"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::result::Result<bevy_mod_scripting_core::bindings::function::script_function::DynamicScriptFunctionMut, bevy_mod_scripting_core::error::InteropError>": {
      "identifier": "Result",
      "crate": "core",
      "path": "core::result::Result<bevy_mod_scripting_core::bindings::function::script_function::DynamicScriptFunctionMut, bevy_mod_scripting_core::error::InteropError>",
      "generics": [
        {
          "type_id": "DynamicFunctionMut",
          "name": "T"
        },
        {
          "type_id": "bevy_mod_scripting_core::error::InteropError",
          "name": "E"
        }
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Ok",
          "fields": [
            {
              "type": "DynamicFunctionMut"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Err",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::error::InteropError"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::result::Result<bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration, bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration>": {
      "identifier": "Result",
      "crate": "core",
      "path": "core::result::Result<bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration, bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration>",
      "generics": [
        {
          "type_id": "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration",
          "name": "T"
        },
        {
          "type_id": "bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration",
          "name": "E"
        }
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Ok",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Err",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::result::Result<bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration, bevy_mod_scripting_core::error::InteropError>": {
      "identifier": "Result",
      "crate": "core",
      "path": "core::result::Result<bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration, bevy_mod_scripting_core::error::InteropError>",
      "generics": [
        {
          "type_id": "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration",
          "name": "T"
        },
        {
          "type_id": "bevy_mod_scripting_core::error::InteropError",
          "name": "E"
        }
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Ok",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Err",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::error::InteropError"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::result::Result<bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder, bevy_mod_scripting_core::error::InteropError>": {
      "identifier": "Result",
      "crate": "core",
      "path": "core::result::Result<bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder, bevy_mod_scripting_core::error::InteropError>",
      "generics": [
        {
          "type_id": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder",
          "name": "T"
        },
        {
          "type_id": "bevy_mod_scripting_core::error::InteropError",
          "name": "E"
        }
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Ok",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Err",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::error::InteropError"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::result::Result<bevy_mod_scripting_core::bindings::reference::ReflectReference, bevy_mod_scripting_core::error::InteropError>": {
      "identifier": "Result",
      "crate": "core",
      "path": "core::result::Result<bevy_mod_scripting_core::bindings::reference::ReflectReference, bevy_mod_scripting_core::error::InteropError>",
      "generics": [
        {
          "type_id": "ReflectReference",
          "name": "T"
        },
        {
          "type_id": "bevy_mod_scripting_core::error::InteropError",
          "name": "E"
        }
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Ok",
          "fields": [
            {
              "type": "ReflectReference"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Err",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::error::InteropError"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::result::Result<bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder, bevy_mod_scripting_core::error::InteropError>": {
      "identifier": "Result",
      "crate": "core",
      "path": "core::result::Result<bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder, bevy_mod_scripting_core::error::InteropError>",
      "generics": [
        {
          "type_id": "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder",
          "name": "T"
        },
        {
          "type_id": "bevy_mod_scripting_core::error::InteropError",
          "name": "E"
        }
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Ok",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Err",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::error::InteropError"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::result::Result<bevy_mod_scripting_core::bindings::script_value::ScriptValue, bevy_mod_scripting_core::error::InteropError>": {
      "identifier": "Result",
      "crate": "core",
      "path": "core::result::Result<bevy_mod_scripting_core::bindings::script_value::ScriptValue, bevy_mod_scripting_core::error::InteropError>",
      "generics": [
        {
          "type_id": "bevy_mod_scripting_core::bindings::script_value::ScriptValue",
          "name": "T"
        },
        {
          "type_id": "bevy_mod_scripting_core::error::InteropError",
          "name": "E"
        }
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Ok",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::bindings::script_value::ScriptValue"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Err",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::error::InteropError"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::result::Result<bevy_mod_scripting_core::script::context_key::ScriptAttachment, bevy_mod_scripting_core::error::InteropError>": {
      "identifier": "Result",
      "crate": "core",
      "path": "core::result::Result<bevy_mod_scripting_core::script::context_key::ScriptAttachment, bevy_mod_scripting_core::error::InteropError>",
      "generics": [
        {
          "type_id": "bevy_mod_scripting_core::script::context_key::ScriptAttachment",
          "name": "T"
        },
        {
          "type_id": "bevy_mod_scripting_core::error::InteropError",
          "name": "E"
        }
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Ok",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::script::context_key::ScriptAttachment"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Err",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::error::InteropError"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::result::Result<bevy_system_reflection::ReflectSystem, bevy_mod_scripting_core::error::InteropError>": {
      "identifier": "Result",
      "crate": "core",
      "path": "core::result::Result<bevy_system_reflection::ReflectSystem, bevy_mod_scripting_core::error::InteropError>",
      "generics": [
        {
          "type_id": "bevy_system_reflection::ReflectSystem",
          "name": "T"
        },
        {
          "type_id": "bevy_mod_scripting_core::error::InteropError",
          "name": "E"
        }
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Ok",
          "fields": [
            {
              "type": "bevy_system_reflection::ReflectSystem"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Err",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::error::InteropError"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::result::Result<bool, bevy_mod_scripting_core::error::InteropError>": {
      "identifier": "Result",
      "crate": "core",
      "path": "core::result::Result<bool, bevy_mod_scripting_core::error::InteropError>",
      "generics": [
        {
          "type_id": "bool",
          "name": "T"
        },
        {
          "type_id": "bevy_mod_scripting_core::error::InteropError",
          "name": "E"
        }
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Ok",
          "fields": [
            {
              "type": "bool"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Err",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::error::InteropError"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "bevy_platform::collections::HashMap<bevy_animation::AnimationTargetId, u64, bevy_platform::hash::FixedHasher>": {
      "identifier": "HashMap",
      "crate": "bevy_platform",
      "path": "bevy_platform::collections::HashMap<bevy_animation::AnimationTargetId, u64, bevy_platform::hash::FixedHasher>",
      "generics": [
        {
          "type_id": "bevy_animation::AnimationTargetId",
          "name": "K"
        },
        {
          "type_id": "u64",
          "name": "V"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "bevy_platform::collections::HashMap<bevy_input::gamepad::GamepadAxis, bevy_input::gamepad::AxisSettings, bevy_platform::hash::FixedHasher>": {
      "identifier": "HashMap",
      "crate": "bevy_platform",
      "path": "bevy_platform::collections::HashMap<bevy_input::gamepad::GamepadAxis, bevy_input::gamepad::AxisSettings, bevy_platform::hash::FixedHasher>",
      "generics": [
        {
          "type_id": "bevy_input::gamepad::GamepadAxis",
          "name": "K"
        },
        {
          "type_id": "bevy_input::gamepad::AxisSettings",
          "name": "V"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "bevy_platform::collections::HashMap<bevy_input::gamepad::GamepadButton, bevy_input::gamepad::ButtonAxisSettings, bevy_platform::hash::FixedHasher>": {
      "identifier": "HashMap",
      "crate": "bevy_platform",
      "path": "bevy_platform::collections::HashMap<bevy_input::gamepad::GamepadButton, bevy_input::gamepad::ButtonAxisSettings, bevy_platform::hash::FixedHasher>",
      "generics": [
        {
          "type_id": "bevy_input::gamepad::GamepadButton",
          "name": "K"
        },
        {
          "type_id": "bevy_input::gamepad::ButtonAxisSettings",
          "name": "V"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "bevy_platform::collections::HashMap<bevy_input::gamepad::GamepadButton, bevy_input::gamepad::ButtonSettings, bevy_platform::hash::FixedHasher>": {
      "identifier": "HashMap",
      "crate": "bevy_platform",
      "path": "bevy_platform::collections::HashMap<bevy_input::gamepad::GamepadButton, bevy_input::gamepad::ButtonSettings, bevy_platform::hash::FixedHasher>",
      "generics": [
        {
          "type_id": "bevy_input::gamepad::GamepadButton",
          "name": "K"
        },
        {
          "type_id": "bevy_input::gamepad::ButtonSettings",
          "name": "V"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "bevy_platform::collections::HashMap<bevy_input::gamepad::GamepadInput, f32, bevy_platform::hash::FixedHasher>": {
      "identifier": "HashMap",
      "crate": "bevy_platform",
      "path": "bevy_platform::collections::HashMap<bevy_input::gamepad::GamepadInput, f32, bevy_platform::hash::FixedHasher>",
      "generics": [
        {
          "type_id": "bevy_input::gamepad::GamepadInput",
          "name": "K"
        },
        {
          "type_id": "f32",
          "name": "V"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "bevy_platform::collections::HashMap<petgraph::graph::NodeIndex, bevy_animation::ActiveAnimation, bevy_platform::hash::FixedHasher>": {
      "identifier": "HashMap",
      "crate": "bevy_platform",
      "path": "bevy_platform::collections::HashMap<petgraph::graph::NodeIndex, bevy_animation::ActiveAnimation, bevy_platform::hash::FixedHasher>",
      "generics": [
        {
          "type_id": "petgraph::graph::NodeIndex",
          "name": "K"
        },
        {
          "type_id": "bevy_animation::ActiveAnimation",
          "name": "V"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "bevy_platform::collections::HashMap<petgraph::graph::NodeIndex, f32, bevy_platform::hash::FixedHasher>": {
      "identifier": "HashMap",
      "crate": "bevy_platform",
      "path": "bevy_platform::collections::HashMap<petgraph::graph::NodeIndex, f32, bevy_platform::hash::FixedHasher>",
      "generics": [
        {
          "type_id": "petgraph::graph::NodeIndex",
          "name": "K"
        },
        {
          "type_id": "f32",
          "name": "V"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "core::result::Result<alloc::vec::Vec<bevy_ecs::entity::Entity>, bevy_mod_scripting_core::error::InteropError>": {
      "identifier": "Result",
      "crate": "core",
      "path": "core::result::Result<alloc::vec::Vec<bevy_ecs::entity::Entity>, bevy_mod_scripting_core::error::InteropError>",
      "generics": [
        {
          "type_id": "alloc::vec::Vec<bevy_ecs::entity::Entity>",
          "name": "T"
        },
        {
          "type_id": "bevy_mod_scripting_core::error::InteropError",
          "name": "E"
        }
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Ok",
          "fields": [
            {
              "type": "alloc::vec::Vec<bevy_ecs::entity::Entity>"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Err",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::error::InteropError"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::result::Result<alloc::vec::Vec<bevy_mod_scripting_core::bindings::query::ScriptQueryResult>, bevy_mod_scripting_core::error::InteropError>": {
      "identifier": "Result",
      "crate": "core",
      "path": "core::result::Result<alloc::vec::Vec<bevy_mod_scripting_core::bindings::query::ScriptQueryResult>, bevy_mod_scripting_core::error::InteropError>",
      "generics": [
        {
          "type_id": "alloc::vec::Vec<bevy_mod_scripting_core::bindings::query::ScriptQueryResult>",
          "name": "T"
        },
        {
          "type_id": "bevy_mod_scripting_core::error::InteropError",
          "name": "E"
        }
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Ok",
          "fields": [
            {
              "type": "alloc::vec::Vec<bevy_mod_scripting_core::bindings::query::ScriptQueryResult>"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Err",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::error::InteropError"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::result::Result<alloc::vec::Vec<bevy_mod_scripting_core::docgen::info::FunctionInfo>, bevy_mod_scripting_core::error::InteropError>": {
      "identifier": "Result",
      "crate": "core",
      "path": "core::result::Result<alloc::vec::Vec<bevy_mod_scripting_core::docgen::info::FunctionInfo>, bevy_mod_scripting_core::error::InteropError>",
      "generics": [
        {
          "type_id": "alloc::vec::Vec<bevy_mod_scripting_core::docgen::info::FunctionInfo>",
          "name": "T"
        },
        {
          "type_id": "bevy_mod_scripting_core::error::InteropError",
          "name": "E"
        }
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Ok",
          "fields": [
            {
              "type": "alloc::vec::Vec<bevy_mod_scripting_core::docgen::info::FunctionInfo>"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Err",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::error::InteropError"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::result::Result<alloc::vec::Vec<bevy_system_reflection::ReflectSystem>, bevy_mod_scripting_core::error::InteropError>": {
      "identifier": "Result",
      "crate": "core",
      "path": "core::result::Result<alloc::vec::Vec<bevy_system_reflection::ReflectSystem>, bevy_mod_scripting_core::error::InteropError>",
      "generics": [
        {
          "type_id": "alloc::vec::Vec<bevy_system_reflection::ReflectSystem>",
          "name": "T"
        },
        {
          "type_id": "bevy_mod_scripting_core::error::InteropError",
          "name": "E"
        }
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Ok",
          "fields": [
            {
              "type": "alloc::vec::Vec<bevy_system_reflection::ReflectSystem>"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Err",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::error::InteropError"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::result::Result<core::option::Option<alloc::string::String>, bevy_mod_scripting_core::error::InteropError>": {
      "identifier": "Result",
      "crate": "core",
      "path": "core::result::Result<core::option::Option<alloc::string::String>, bevy_mod_scripting_core::error::InteropError>",
      "generics": [
        {
          "type_id": "core::option::Option<alloc::string::String>",
          "name": "T"
        },
        {
          "type_id": "bevy_mod_scripting_core::error::InteropError",
          "name": "E"
        }
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Ok",
          "fields": [
            {
              "type": "core::option::Option<alloc::string::String>"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Err",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::error::InteropError"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::result::Result<core::option::Option<bevy_ecs::entity::Entity>, bevy_mod_scripting_core::error::InteropError>": {
      "identifier": "Result",
      "crate": "core",
      "path": "core::result::Result<core::option::Option<bevy_ecs::entity::Entity>, bevy_mod_scripting_core::error::InteropError>",
      "generics": [
        {
          "type_id": "core::option::Option<bevy_ecs::entity::Entity>",
          "name": "T"
        },
        {
          "type_id": "bevy_mod_scripting_core::error::InteropError",
          "name": "E"
        }
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Ok",
          "fields": [
            {
              "type": "core::option::Option<bevy_ecs::entity::Entity>"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Err",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::error::InteropError"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::result::Result<core::option::Option<bevy_mod_scripting_core::bindings::reference::ReflectReference>, bevy_mod_scripting_core::error::InteropError>": {
      "identifier": "Result",
      "crate": "core",
      "path": "core::result::Result<core::option::Option<bevy_mod_scripting_core::bindings::reference::ReflectReference>, bevy_mod_scripting_core::error::InteropError>",
      "generics": [
        {
          "type_id": "core::option::Option<bevy_mod_scripting_core::bindings::reference::ReflectReference>",
          "name": "T"
        },
        {
          "type_id": "bevy_mod_scripting_core::error::InteropError",
          "name": "E"
        }
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Ok",
          "fields": [
            {
              "type": "core::option::Option<bevy_mod_scripting_core::bindings::reference::ReflectReference>"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Err",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::error::InteropError"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::result::Result<core::option::Option<bevy_mod_scripting_core::bindings::script_value::ScriptValue>, bevy_mod_scripting_core::error::InteropError>": {
      "identifier": "Result",
      "crate": "core",
      "path": "core::result::Result<core::option::Option<bevy_mod_scripting_core::bindings::script_value::ScriptValue>, bevy_mod_scripting_core::error::InteropError>",
      "generics": [
        {
          "type_id": "core::option::Option<bevy_mod_scripting_core::bindings::script_value::ScriptValue>",
          "name": "T"
        },
        {
          "type_id": "bevy_mod_scripting_core::error::InteropError",
          "name": "E"
        }
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Ok",
          "fields": [
            {
              "type": "core::option::Option<bevy_mod_scripting_core::bindings::script_value::ScriptValue>"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Err",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::error::InteropError"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::result::Result<core::option::Option<bevy_system_reflection::ReflectSchedule>, bevy_mod_scripting_core::error::InteropError>": {
      "identifier": "Result",
      "crate": "core",
      "path": "core::result::Result<core::option::Option<bevy_system_reflection::ReflectSchedule>, bevy_mod_scripting_core::error::InteropError>",
      "generics": [
        {
          "type_id": "core::option::Option<bevy_system_reflection::ReflectSchedule>",
          "name": "T"
        },
        {
          "type_id": "bevy_mod_scripting_core::error::InteropError",
          "name": "E"
        }
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Ok",
          "fields": [
            {
              "type": "core::option::Option<bevy_system_reflection::ReflectSchedule>"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Err",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::error::InteropError"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::result::Result<core::option::Option<bevy_system_reflection::ReflectSystem>, bevy_mod_scripting_core::error::InteropError>": {
      "identifier": "Result",
      "crate": "core",
      "path": "core::result::Result<core::option::Option<bevy_system_reflection::ReflectSystem>, bevy_mod_scripting_core::error::InteropError>",
      "generics": [
        {
          "type_id": "core::option::Option<bevy_system_reflection::ReflectSystem>",
          "name": "T"
        },
        {
          "type_id": "bevy_mod_scripting_core::error::InteropError",
          "name": "E"
        }
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Ok",
          "fields": [
            {
              "type": "core::option::Option<bevy_system_reflection::ReflectSystem>"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Err",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::error::InteropError"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::result::Result<core::option::Option<usize>, bevy_mod_scripting_core::error::InteropError>": {
      "identifier": "Result",
      "crate": "core",
      "path": "core::result::Result<core::option::Option<usize>, bevy_mod_scripting_core::error::InteropError>",
      "generics": [
        {
          "type_id": "core::option::Option<usize>",
          "name": "T"
        },
        {
          "type_id": "bevy_mod_scripting_core::error::InteropError",
          "name": "E"
        }
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Ok",
          "fields": [
            {
              "type": "core::option::Option<usize>"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Err",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::error::InteropError"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "petgraph::graph::DiGraph<bevy_animation::graph::AnimationGraphNode, (), u32>": {
      "identifier": "DiGraph",
      "crate": "petgraph",
      "path": "petgraph::graph::DiGraph<bevy_animation::graph::AnimationGraphNode, (), u32>",
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "std::collections::HashMap<alloc::string::String, bevy_mod_scripting_core::bindings::script_value::ScriptValue, std::collections::hash_map::RandomState>": {
      "identifier": "HashMap",
      "crate": "std",
      "path": "std::collections::HashMap<alloc::string::String, bevy_mod_scripting_core::bindings::script_value::ScriptValue, std::collections::hash_map::RandomState>",
      "generics": [
        {
          "type_id": "String",
          "name": "K"
        },
        {
          "type_id": "bevy_mod_scripting_core::bindings::script_value::ScriptValue",
          "name": "V"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "bevy_platform::collections::HashMap<bevy_animation::AnimationEventTarget, alloc::vec::Vec<bevy_animation::TimedAnimationEvent>, bevy_platform::hash::FixedHasher>": {
      "identifier": "HashMap",
      "crate": "bevy_platform",
      "path": "bevy_platform::collections::HashMap<bevy_animation::AnimationEventTarget, alloc::vec::Vec<bevy_animation::TimedAnimationEvent>, bevy_platform::hash::FixedHasher>",
      "generics": [
        {
          "type_id": "bevy_animation::AnimationEventTarget",
          "name": "K"
        },
        {
          "type_id": "alloc::vec::Vec<bevy_animation::TimedAnimationEvent>",
          "name": "V"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "bevy_platform::collections::HashMap<bevy_asset::id::AssetId<bevy_animation::graph::AnimationGraph>, bevy_animation::graph::ThreadedAnimationGraph, bevy_platform::hash::FixedHasher>": {
      "identifier": "HashMap",
      "crate": "bevy_platform",
      "path": "bevy_platform::collections::HashMap<bevy_asset::id::AssetId<bevy_animation::graph::AnimationGraph>, bevy_animation::graph::ThreadedAnimationGraph, bevy_platform::hash::FixedHasher>",
      "generics": [
        {
          "type_id": "bevy_asset::id::AssetId<bevy_animation::graph::AnimationGraph>",
          "name": "K"
        },
        {
          "type_id": "bevy_animation::graph::ThreadedAnimationGraph",
          "name": "V"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "bevy_platform::collections::HashMap<bevy_ecs::entity::Entity, alloc::vec::Vec<bevy_pbr::light::Cascade>, bevy_ecs::entity::hash::EntityHash>": {
      "identifier": "HashMap",
      "crate": "bevy_platform",
      "path": "bevy_platform::collections::HashMap<bevy_ecs::entity::Entity, alloc::vec::Vec<bevy_pbr::light::Cascade>, bevy_ecs::entity::hash::EntityHash>",
      "generics": [
        {
          "type_id": "bevy_ecs::entity::Entity",
          "name": "K"
        },
        {
          "type_id": "alloc::vec::Vec<bevy_pbr::light::Cascade>",
          "name": "V"
        }
      ],
      "layout": null,
      "generated": false,
      "insignificance": 1000
    },
    "core::result::Result<bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration, core::result::Result<bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration, bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration>>": {
      "identifier": "Result",
      "crate": "core",
      "path": "core::result::Result<bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration, core::result::Result<bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration, bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration>>",
      "generics": [
        {
          "type_id": "bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration",
          "name": "T"
        },
        {
          "type_id": "core::result::Result<bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration, bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration>",
          "name": "E"
        }
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Ok",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Err",
          "fields": [
            {
              "type": "core::result::Result<bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration, bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration>"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::option::Option<core::result::Result<bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration, core::result::Result<bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration, bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration>>>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<core::result::Result<bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration, core::result::Result<bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration, bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration>>>",
      "generics": [
        {
          "type_id": "core::result::Result<bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration, core::result::Result<bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration, bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration>>",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "core::result::Result<bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration, core::result::Result<bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration, bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration>>"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    },
    "core::result::Result<core::option::Option<core::result::Result<bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration, core::result::Result<bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration, bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration>>>, bevy_mod_scripting_core::error::InteropError>": {
      "identifier": "Result",
      "crate": "core",
      "path": "core::result::Result<core::option::Option<core::result::Result<bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration, core::result::Result<bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration, bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration>>>, bevy_mod_scripting_core::error::InteropError>",
      "generics": [
        {
          "type_id": "core::option::Option<core::result::Result<bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration, core::result::Result<bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration, bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration>>>",
          "name": "T"
        },
        {
          "type_id": "bevy_mod_scripting_core::error::InteropError",
          "name": "E"
        }
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Ok",
          "fields": [
            {
              "type": "core::option::Option<core::result::Result<bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration, core::result::Result<bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration, bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration>>>"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Err",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::error::InteropError"
            }
          ]
        }
      ],
      "generated": false,
      "insignificance": 1000
    }
  },
  "functions": {
    "::construct": {
      "namespace": null,
      "identifier": "construct",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "name": "ctxt"
        },
        {
          "kind": {
            "union": [
              {
                "val": "bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration"
              },
              {
                "union": [
                  {
                    "val": "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration"
                  },
                  {
                    "val": "bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration"
                  }
                ]
              }
            ]
          },
          "documentation": "The type to construct.",
          "name": "registration"
        },
        {
          "kind": {
            "hashMap": [
              {
                "primitive": "string"
              },
              {
                "unknown": "bevy_mod_scripting_core::bindings::script_value::ScriptValue"
              }
            ]
          },
          "documentation": "The values to use to construct the type.",
          "name": "payload"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "primitive": "reflectReference"
          }
        },
        "documentation": "The constructed type.",
        "name": "reference"
      },
      "documentation": "Attempts to construct the given type, given an arbitrary map of values.\n"
    },
    "::system_builder": {
      "namespace": null,
      "identifier": "system_builder",
      "arguments": [
        {
          "kind": {
            "primitive": "string"
          },
          "documentation": "The function name in the script this system should call when run.",
          "name": "callback"
        },
        {
          "kind": {
            "val": "bevy_mod_scripting_core::script::context_key::ScriptAttachment"
          },
          "documentation": "The script attachment to use for the system. This is the attachment that will be used for the system's callback.",
          "name": "attachment"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "val": "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder"
          }
        },
        "documentation": "The system builder",
        "name": "builder"
      },
      "documentation": "Creates a new script system builder, which can be used to add new systems to the world.\n"
    },
    "ReflectReference::clear": {
      "namespace": "ReflectReference",
      "identifier": "clear",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "primitive": "reflectReference"
          },
          "documentation": "The reference to clear.",
          "name": "reference"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "tuple": []
          }
        },
        "documentation": "Nothing if the reference was cleared",
        "name": "result"
      },
      "documentation": "Clears the container, if the reference is an appropriate container type."
    },
    "ReflectReference::display_ref": {
      "namespace": "ReflectReference",
      "identifier": "display_ref",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "primitive": "reflectReference"
          },
          "documentation": "The reference to display.",
          "name": "reference"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "primitive": "string"
          }
        },
        "documentation": "The display string.",
        "name": "display"
      },
      "documentation": "Displays this reference without printing the exact contents.\n\nThis is useful for debugging and logging.\n"
    },
    "ReflectReference::display_value": {
      "namespace": "ReflectReference",
      "identifier": "display_value",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "primitive": "reflectReference"
          },
          "documentation": "The reference to display.",
          "name": "reference"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "primitive": "string"
          }
        },
        "documentation": "The display string.",
        "name": "display"
      },
      "documentation": "Displays the \"value\" of this reference\n\nThis is useful for debugging and logging.\n"
    },
    "ReflectReference::functions": {
      "namespace": "ReflectReference",
      "identifier": "functions",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "primitive": "reflectReference"
          },
          "documentation": "The reference to list the functions of.",
          "name": "reference"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "vec": {
              "val": "bevy_mod_scripting_core::docgen::info::FunctionInfo"
            }
          }
        },
        "documentation": "The functions available on the reference.",
        "name": "functions"
      },
      "documentation": "Lists the functions available on the reference.\n"
    },
    "ReflectReference::insert": {
      "namespace": "ReflectReference",
      "identifier": "insert",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "primitive": "reflectReference"
          },
          "documentation": "The reference to insert the value into.",
          "name": "reference"
        },
        {
          "kind": {
            "unknown": "bevy_mod_scripting_core::bindings::script_value::ScriptValue"
          },
          "documentation": "The index to insert the value at.",
          "name": "key"
        },
        {
          "kind": {
            "unknown": "bevy_mod_scripting_core::bindings::script_value::ScriptValue"
          },
          "documentation": "The value to insert.",
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "tuple": []
          }
        },
        "documentation": "Nothing if the value was inserted successfully.",
        "name": "result"
      },
      "documentation": "Inserts the value into the reference at the specified index, if the reference is an appropriate container type.\n"
    },
    "ReflectReference::iter": {
      "namespace": "ReflectReference",
      "identifier": "iter",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "primitive": "reflectReference"
          },
          "documentation": "The reference to iterate over.",
          "name": "reference"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "primitive": "dynamicFunctionMut"
          }
        },
        "documentation": "The iterator function.",
        "name": "iter"
      },
      "documentation": "Iterates over the reference, if the reference is an appropriate container type.\n\nReturns an \"next\" iterator function.\n\nThe iterator function should be called until it returns `nil` to signal the end of the iteration.\n"
    },
    "ReflectReference::len": {
      "namespace": "ReflectReference",
      "identifier": "len",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "primitive": "reflectReference"
          },
          "documentation": "The reference to get the length of.",
          "name": "reference"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "option": {
              "primitive": "usize"
            }
          }
        },
        "documentation": "The length of the reference, if the reference is a container.",
        "name": "len"
      },
      "documentation": "Retrieves the length of the reference, if the reference is an appropriate container type.\n"
    },
    "ReflectReference::map_get": {
      "namespace": "ReflectReference",
      "identifier": "map_get",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "primitive": "reflectReference"
          },
          "documentation": "The reference to index into.",
          "name": "reference"
        },
        {
          "kind": {
            "unknown": "bevy_mod_scripting_core::bindings::script_value::ScriptValue"
          },
          "documentation": "The key to index with.",
          "name": "key"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "option": {
              "unknown": "bevy_mod_scripting_core::bindings::script_value::ScriptValue"
            }
          }
        },
        "documentation": "The value at the key, if the reference is a map.",
        "name": "value"
      },
      "documentation": "Gets and clones the value under the specified key if the underlying type is a map type.\n"
    },
    "ReflectReference::pop": {
      "namespace": "ReflectReference",
      "identifier": "pop",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "primitive": "reflectReference"
          },
          "documentation": "The reference to pop the value from.",
          "name": "reference"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "unknown": "bevy_mod_scripting_core::bindings::script_value::ScriptValue"
          }
        },
        "documentation": "The value that was popped, if the reference supports popping.",
        "name": "value"
      },
      "documentation": "Pops the value from the reference, if the reference is an appropriate container type.\n"
    },
    "ReflectReference::push": {
      "namespace": "ReflectReference",
      "identifier": "push",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "primitive": "reflectReference"
          },
          "documentation": "The reference to push the value into.",
          "name": "reference"
        },
        {
          "kind": {
            "unknown": "bevy_mod_scripting_core::bindings::script_value::ScriptValue"
          },
          "documentation": "The value to push.",
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "tuple": []
          }
        },
        "documentation": "Nothing if the value was pushed successfully.",
        "name": "result"
      },
      "documentation": "Pushes the value into the reference, if the reference is an appropriate container type.\n"
    },
    "ReflectReference::remove": {
      "namespace": "ReflectReference",
      "identifier": "remove",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "primitive": "reflectReference"
          },
          "documentation": "The reference to remove the value from.",
          "name": "reference"
        },
        {
          "kind": {
            "unknown": "bevy_mod_scripting_core::bindings::script_value::ScriptValue"
          },
          "documentation": "The key to remove the value at.",
          "name": "key"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "unknown": "bevy_mod_scripting_core::bindings::script_value::ScriptValue"
          }
        },
        "documentation": "The removed value if any",
        "name": "result"
      },
      "documentation": "Removes the value at the specified key from the reference, if the reference is an appropriate container type.\n"
    },
    "ReflectReference::variant_name": {
      "namespace": "ReflectReference",
      "identifier": "variant_name",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "primitive": "reflectReference"
          },
          "documentation": "The reference to get the variant name of.",
          "name": "reference"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "option": {
              "primitive": "string"
            }
          }
        },
        "documentation": "The name of the variant, if the reference is an enum.",
        "name": "variant_name"
      },
      "documentation": "If this type is an enum, will return the name of the variant it represents on the type.\n"
    },
    "World::add_default_component": {
      "namespace": "World",
      "identifier": "add_default_component",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "name": "entity"
        },
        {
          "kind": {
            "val": "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration"
          },
          "documentation": "The resource to add.",
          "name": "registration"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "tuple": []
          }
        },
        "documentation": "Nothing if the resource was added successfully.",
        "name": "result"
      },
      "documentation": "Adds the given resource to the world."
    },
    "World::add_system": {
      "namespace": "World",
      "identifier": "add_system",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "name": "ctxt"
        },
        {
          "kind": {
            "val": "bevy_system_reflection::ReflectSchedule"
          },
          "documentation": "The schedule to add the system to.",
          "name": "schedule"
        },
        {
          "kind": {
            "val": "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder"
          },
          "documentation": "The system builder specifying the system and its dependencies.",
          "name": "builder"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "val": "bevy_system_reflection::ReflectSystem"
          }
        },
        "documentation": "The system that was added.",
        "name": "system"
      },
      "documentation": "Adds the given system to the world.\n"
    },
    "World::despawn": {
      "namespace": "World",
      "identifier": "despawn",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "documentation": "The entity to despawn.",
          "name": "entity"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "tuple": []
          }
        }
      },
      "documentation": "Despawns the given entity."
    },
    "World::despawn_descendants": {
      "namespace": "World",
      "identifier": "despawn_descendants",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "documentation": "The entity to despawn the descendants of.",
          "name": "entity"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "tuple": []
          }
        },
        "documentation": "Nothing if the descendants were despawned successfully.",
        "name": "result"
      },
      "documentation": "Despawn the descendants of the given entity."
    },
    "World::despawn_recursive": {
      "namespace": "World",
      "identifier": "despawn_recursive",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "documentation": "The entity to despawn recursively.",
          "name": "entity"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "tuple": []
          }
        },
        "documentation": "Nothing if the entity and its descendants were despawned successfully.",
        "name": "result"
      },
      "documentation": "Despawns the entity and all its descendants.\n"
    },
    "World::exit": {
      "namespace": "World",
      "identifier": "exit",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "tuple": []
          }
        },
        "documentation": "Nothing if the program was exited successfully.",
        "name": "result"
      },
      "documentation": "Quits the program."
    },
    "World::get_children": {
      "namespace": "World",
      "identifier": "get_children",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "documentation": "The entity to retrieve the children of.",
          "name": "entity"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "vec": {
              "val": "bevy_ecs::entity::Entity"
            }
          }
        },
        "documentation": "The children of the entity.",
        "name": "children"
      },
      "documentation": "Retrieves the children of the given entity."
    },
    "World::get_component": {
      "namespace": "World",
      "identifier": "get_component",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "documentation": "The entity to retrieve the component from.",
          "name": "entity"
        },
        {
          "kind": {
            "val": "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration"
          },
          "documentation": "The component to retrieve.",
          "name": "registration"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "option": {
              "primitive": "reflectReference"
            }
          }
        },
        "documentation": "The component on the entity, if it exists.",
        "name": "component"
      },
      "documentation": "Tries to retrieve the given component type on an entity.\n"
    },
    "World::get_parent": {
      "namespace": "World",
      "identifier": "get_parent",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "documentation": "The entity to retrieve the parent of.",
          "name": "entity"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "option": {
              "val": "bevy_ecs::entity::Entity"
            }
          }
        },
        "documentation": "The parent of the entity",
        "name": "parent"
      },
      "documentation": "Retrieves the parent of the given entity."
    },
    "World::get_resource": {
      "namespace": "World",
      "identifier": "get_resource",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "val": "bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration"
          },
          "documentation": "The registration of the resource to retrieve.",
          "name": "registration"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "option": {
              "primitive": "reflectReference"
            }
          }
        },
        "documentation": "The resource, if it exists.",
        "name": "resource"
      },
      "documentation": "Retrieves the resource with the given registration."
    },
    "World::get_schedule_by_name": {
      "namespace": "World",
      "identifier": "get_schedule_by_name",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "primitive": "string"
          },
          "documentation": "The name of the schedule to retrieve.",
          "name": "name"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "option": {
              "val": "bevy_system_reflection::ReflectSchedule"
            }
          }
        },
        "documentation": "The schedule with the given name, if it exists",
        "name": "schedule"
      },
      "documentation": "Retrieves the schedule with the given name, Also ensures the schedule is initialized before returning it.\n\nSchedules in bevy are \"containers\" for systems, each schedule runs separately and contains different systems.\n\nBy default among others bevy contains the following schedules:\n- `Update`: Runs every frame.\n- `PostUpdate`: Runs after the `Update` schedule.\n- `FixedUpdate`: Runs at a fixed rate.\n"
    },
    "World::get_type_by_name": {
      "namespace": "World",
      "identifier": "get_type_by_name",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "primitive": "string"
          },
          "documentation": "The name of the type to retrieve.",
          "name": "type_name"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "option": {
              "union": [
                {
                  "val": "bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration"
                },
                {
                  "union": [
                    {
                      "val": "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration"
                    },
                    {
                      "val": "bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration"
                    }
                  ]
                }
              ]
            }
          }
        },
        "documentation": "The registration of the type, if it exists.",
        "name": "type"
      },
      "documentation": "Returns either a `ScriptComponentRegistration` or `ScriptResourceRegistration` depending on the type of the type requested.\nIf the type is neither returns a `ScriptTypeRegistration`.\n"
    },
    "World::has_component": {
      "namespace": "World",
      "identifier": "has_component",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "documentation": "The entity to check.",
          "name": "entity"
        },
        {
          "kind": {
            "val": "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration"
          },
          "documentation": "The component to check for.",
          "name": "registration"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "primitive": "bool"
          }
        },
        "documentation": "Whether the entity has the component.",
        "name": "has_component"
      },
      "documentation": "Checks if the given entity has the given component.\n"
    },
    "World::has_entity": {
      "namespace": "World",
      "identifier": "has_entity",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "name": "e"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "primitive": "bool"
          }
        },
        "documentation": "Whether the entity exists.",
        "name": "has_entity"
      },
      "documentation": "Checks if the given entity exists."
    },
    "World::has_resource": {
      "namespace": "World",
      "identifier": "has_resource",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "val": "bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration"
          },
          "documentation": "The registration of the resource to check for.",
          "name": "registration"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "primitive": "bool"
          }
        },
        "documentation": "Whether the world has the resource.",
        "name": "has_resource"
      },
      "documentation": "Checks if the world has the given resource.\n"
    },
    "World::insert_children": {
      "namespace": "World",
      "identifier": "insert_children",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "documentation": "The parent entity to receive children",
          "name": "entity"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "documentation": "The index to insert the children at",
          "name": "index"
        },
        {
          "kind": {
            "vec": {
              "val": "bevy_ecs::entity::Entity"
            }
          },
          "documentation": "The children entities to insert",
          "name": "children"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "tuple": []
          }
        },
        "documentation": "Nothing if the children were inserted successfully.",
        "name": "result"
      },
      "documentation": "Inserts the given children entities into the provided parent entity.\n"
    },
    "World::insert_component": {
      "namespace": "World",
      "identifier": "insert_component",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "documentation": "The entity to insert the component into.",
          "name": "entity"
        },
        {
          "kind": {
            "val": "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration"
          },
          "documentation": "The component registration of the component to insert.",
          "name": "registration"
        },
        {
          "kind": {
            "primitive": "reflectReference"
          },
          "documentation": "The value of the component to insert. Can be constructed using `construct`",
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "tuple": []
          }
        },
        "documentation": "Nothing if the component was inserted successfully.",
        "name": "result"
      },
      "documentation": "Inserts the given component value into the provided entity\n"
    },
    "World::push_children": {
      "namespace": "World",
      "identifier": "push_children",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "documentation": "The parent entity to receive children",
          "name": "entity"
        },
        {
          "kind": {
            "vec": {
              "val": "bevy_ecs::entity::Entity"
            }
          },
          "documentation": "The children entities to push",
          "name": "children"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "tuple": []
          }
        },
        "documentation": "Nothing if the children were pushed successfully.",
        "name": "result"
      },
      "documentation": "Pushes the given children entities into the provided parent entity."
    },
    "World::query": {
      "namespace": "World",
      "identifier": "query",
      "return_type": {
        "kind": {
          "interopResult": {
            "val": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder"
          }
        }
      },
      "documentation": "Creates a new `ScriptQueryBuilder` which can be used to query the ECS.\n\nReturns:\n* `query`: The new query builder."
    },
    "World::register_new_component": {
      "namespace": "World",
      "identifier": "register_new_component",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "primitive": "string"
          },
          "documentation": "The name of the component type",
          "name": "name"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "val": "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration"
          }
        },
        "documentation": "The registration of the new component type if successful.",
        "name": "registration"
      },
      "documentation": "Registers a new component type with the world.\n\nThe component will behave like any other native component for all intents and purposes.\nThe type that will be instantiated to back this component will be `DynamicComponent` which contains just one field:\n- `data`\n\nThis field can be set to any value and modified freely.\n"
    },
    "World::remove_component": {
      "namespace": "World",
      "identifier": "remove_component",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "documentation": "The entity to remove the component from.",
          "name": "entity"
        },
        {
          "kind": {
            "val": "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration"
          },
          "documentation": "The component to remove.",
          "name": "registration"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "tuple": []
          }
        },
        "documentation": "Nothing if the component was removed successfully or didn't exist in the first place.",
        "name": "result"
      },
      "documentation": "Removes the given component from the entity."
    },
    "World::remove_resource": {
      "namespace": "World",
      "identifier": "remove_resource",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "val": "bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration"
          },
          "documentation": "The resource to remove.",
          "name": "registration"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "tuple": []
          }
        },
        "documentation": "Nothing if the resource was removed successfully or didn't exist in the first place.",
        "name": "result"
      },
      "documentation": "Removes the given resource from the world."
    },
    "World::spawn": {
      "namespace": "World",
      "identifier": "spawn",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "val": "bevy_ecs::entity::Entity"
          }
        },
        "documentation": "The newly spawned entity",
        "name": "entity"
      },
      "documentation": "Spawns a new entity and returns it\n"
    },
    "bevy_asset::handle::Handle<bevy_mod_scripting_core::asset::ScriptAsset>::asset_path": {
      "namespace": "bevy_asset::handle::Handle<bevy_mod_scripting_core::asset::ScriptAsset>",
      "identifier": "asset_path",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "name": "ctxt"
        },
        {
          "kind": {
            "ref": "bevy_asset::handle::Handle<bevy_mod_scripting_core::asset::ScriptAsset>"
          },
          "documentation": "The handle to the script asset.",
          "name": "handle"
        }
      ],
      "return_type": {
        "kind": {
          "option": {
            "primitive": "string"
          }
        },
        "documentation": "The asset path of the script asset.",
        "name": "path"
      },
      "documentation": "Retrieves the path of the script asset if present.\nAssets can be unloaded, and as such if the given handle is no longer active, this will return `None`.\n"
    },
    "bevy_ecs::component::ComponentId::assert_receiver_is_total_eq": {
      "namespace": "bevy_ecs::component::ComponentId",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::component::ComponentId"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_ecs::component::ComponentId::clone": {
      "namespace": "bevy_ecs::component::ComponentId",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::component::ComponentId"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::component::ComponentId"
        }
      }
    },
    "bevy_ecs::component::ComponentId::eq": {
      "namespace": "bevy_ecs::component::ComponentId",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::component::ComponentId"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_ecs::component::ComponentId"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_ecs::component::ComponentId::index": {
      "namespace": "bevy_ecs::component::ComponentId",
      "identifier": "index",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::component::ComponentId"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "usize"
        }
      },
      "documentation": " Returns the index of the current component."
    },
    "bevy_ecs::component::ComponentId::new": {
      "namespace": "bevy_ecs::component::ComponentId",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::component::ComponentId"
        }
      },
      "documentation": " Creates a new [`ComponentId`].\n The `index` is a unique value associated with each type of component in a given world.\n Usually, this value is taken from a counter incremented for each type of component registered with the world."
    },
    "bevy_ecs::component::ComponentTicks::clone": {
      "namespace": "bevy_ecs::component::ComponentTicks",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::component::ComponentTicks"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::component::ComponentTicks"
        }
      }
    },
    "bevy_ecs::component::ComponentTicks::is_added": {
      "namespace": "bevy_ecs::component::ComponentTicks",
      "identifier": "is_added",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::component::ComponentTicks"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_ecs::component::Tick"
          },
          "name": "last_run"
        },
        {
          "kind": {
            "val": "bevy_ecs::component::Tick"
          },
          "name": "this_run"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if the component or resource was added after the system last ran\n (or the system is running for the first time)."
    },
    "bevy_ecs::component::ComponentTicks::is_changed": {
      "namespace": "bevy_ecs::component::ComponentTicks",
      "identifier": "is_changed",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::component::ComponentTicks"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_ecs::component::Tick"
          },
          "name": "last_run"
        },
        {
          "kind": {
            "val": "bevy_ecs::component::Tick"
          },
          "name": "this_run"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if the component or resource was added or mutably dereferenced after the system last ran\n (or the system is running for the first time)."
    },
    "bevy_ecs::component::ComponentTicks::new": {
      "namespace": "bevy_ecs::component::ComponentTicks",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::component::Tick"
          },
          "name": "change_tick"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::component::ComponentTicks"
        }
      },
      "documentation": " Creates a new instance with the same change tick for `added` and `changed`."
    },
    "bevy_ecs::component::ComponentTicks::set_changed": {
      "namespace": "bevy_ecs::component::ComponentTicks",
      "identifier": "set_changed",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_ecs::component::ComponentTicks"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_ecs::component::Tick"
          },
          "name": "change_tick"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Manually sets the change tick.\n This is normally done automatically via the [`DerefMut`] implementation\n on [`Mut<T>`](crate::change_detection::Mut), [`ResMut<T>`](crate::change_detection::ResMut), etc.\n However, components and resources that make use of interior mutability might require manual updates.\n # Example\n ```no_run\n # use bevy_ecs::{world::World, component::ComponentTicks};\n let world: World = unimplemented!();\n let component_ticks: ComponentTicks = unimplemented!();\n component_ticks.set_changed(world.read_change_tick());\n ```"
    },
    "bevy_ecs::component::Tick::assert_receiver_is_total_eq": {
      "namespace": "bevy_ecs::component::Tick",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::component::Tick"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_ecs::component::Tick::clone": {
      "namespace": "bevy_ecs::component::Tick",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::component::Tick"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::component::Tick"
        }
      }
    },
    "bevy_ecs::component::Tick::eq": {
      "namespace": "bevy_ecs::component::Tick",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::component::Tick"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_ecs::component::Tick"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_ecs::component::Tick::get": {
      "namespace": "bevy_ecs::component::Tick",
      "identifier": "get",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::component::Tick"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Gets the value of this change tick."
    },
    "bevy_ecs::component::Tick::is_newer_than": {
      "namespace": "bevy_ecs::component::Tick",
      "identifier": "is_newer_than",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::component::Tick"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_ecs::component::Tick"
          },
          "name": "last_run"
        },
        {
          "kind": {
            "val": "bevy_ecs::component::Tick"
          },
          "name": "this_run"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if this `Tick` occurred since the system's `last_run`.\n `this_run` is the current tick of the system, used as a reference to help deal with wraparound."
    },
    "bevy_ecs::component::Tick::new": {
      "namespace": "bevy_ecs::component::Tick",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "tick"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::component::Tick"
        }
      },
      "documentation": " Creates a new [`Tick`] wrapping the given value."
    },
    "bevy_ecs::component::Tick::set": {
      "namespace": "bevy_ecs::component::Tick",
      "identifier": "set",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_ecs::component::Tick"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "tick"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Sets the value of this change tick."
    },
    "bevy_ecs::entity::Entity::clone": {
      "namespace": "bevy_ecs::entity::Entity",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::entity::Entity"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::entity::Entity"
        }
      }
    },
    "bevy_ecs::entity::Entity::eq": {
      "namespace": "bevy_ecs::entity::Entity",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::entity::Entity"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_ecs::entity::Entity"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_ecs::entity::Entity::from_bits": {
      "namespace": "bevy_ecs::entity::Entity",
      "identifier": "from_bits",
      "arguments": [
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "bits"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::entity::Entity"
        }
      },
      "documentation": " Reconstruct an `Entity` previously destructured with [`Entity::to_bits`].\n Only useful when applied to results from `to_bits` in the same instance of an application.\n # Panics\n This method will likely panic if given `u64` values that did not come from [`Entity::to_bits`]."
    },
    "bevy_ecs::entity::Entity::from_raw": {
      "namespace": "bevy_ecs::entity::Entity",
      "identifier": "from_raw",
      "arguments": [
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::entity::Entity"
        }
      },
      "documentation": " Creates a new entity ID with the specified `index` and a generation of 1.\n # Note\n Spawning a specific `entity` value is __rarely the right choice__. Most apps should favor\n [`Commands::spawn`](crate::system::Commands::spawn). This method should generally\n only be used for sharing entities across apps, and only when they have a scheme\n worked out to share an index space (which doesn't happen by default).\n In general, one should not try to synchronize the ECS by attempting to ensure that\n `Entity` lines up between instances, but instead insert a secondary identifier as\n a component."
    },
    "bevy_ecs::entity::Entity::generation": {
      "namespace": "bevy_ecs::entity::Entity",
      "identifier": "generation",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the generation of this Entity's index. The generation is incremented each time an\n entity with a given index is despawned. This serves as a \"count\" of the number of times a\n given index has been reused (index, generation) pairs uniquely identify a given Entity."
    },
    "bevy_ecs::entity::Entity::index": {
      "namespace": "bevy_ecs::entity::Entity",
      "identifier": "index",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Return a transiently unique identifier.\n No two simultaneously-live entities share the same index, but dead entities' indices may collide\n with both live and dead entities. Useful for compactly representing entities within a\n specific snapshot of the world, such as when serializing."
    },
    "bevy_ecs::entity::Entity::to_bits": {
      "namespace": "bevy_ecs::entity::Entity",
      "identifier": "to_bits",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Convert to a form convenient for passing outside of rust.\n Only useful for identifying entities within the same instance of an application. Do not use\n for serialization between runs.\n No particular structure is guaranteed for the returned bits."
    },
    "bevy_ecs::entity::hash::EntityHash::clone": {
      "namespace": "bevy_ecs::entity::hash::EntityHash",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::entity::hash::EntityHash"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::entity::hash::EntityHash"
        }
      }
    },
    "bevy_ecs::entity::hash_set::EntityHashSet::assert_receiver_is_total_eq": {
      "namespace": "bevy_ecs::entity::hash_set::EntityHashSet",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::entity::hash_set::EntityHashSet"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_ecs::entity::hash_set::EntityHashSet::clone": {
      "namespace": "bevy_ecs::entity::hash_set::EntityHashSet",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::entity::hash_set::EntityHashSet"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::entity::hash_set::EntityHashSet"
        }
      }
    },
    "bevy_ecs::entity::hash_set::EntityHashSet::eq": {
      "namespace": "bevy_ecs::entity::hash_set::EntityHashSet",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::entity::hash_set::EntityHashSet"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_ecs::entity::hash_set::EntityHashSet"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_ecs::entity::hash_set::EntityHashSet::is_empty": {
      "namespace": "bevy_ecs::entity::hash_set::EntityHashSet",
      "identifier": "is_empty",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::entity::hash_set::EntityHashSet"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if the set contains no elements."
    },
    "bevy_ecs::entity::hash_set::EntityHashSet::len": {
      "namespace": "bevy_ecs::entity::hash_set::EntityHashSet",
      "identifier": "len",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::entity::hash_set::EntityHashSet"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "usize"
        }
      },
      "documentation": " Returns the number of elements in the set."
    },
    "bevy_ecs::entity::hash_set::EntityHashSet::new": {
      "namespace": "bevy_ecs::entity::hash_set::EntityHashSet",
      "identifier": "new",
      "return_type": {
        "kind": {
          "val": "bevy_ecs::entity::hash_set::EntityHashSet"
        }
      },
      "documentation": " Creates an empty `EntityHashSet`.\n Equivalent to [`HashSet::with_hasher(EntityHash)`].\n [`HashSet::with_hasher(EntityHash)`]: HashSet::with_hasher"
    },
    "bevy_ecs::entity::hash_set::EntityHashSet::with_capacity": {
      "namespace": "bevy_ecs::entity::hash_set::EntityHashSet",
      "identifier": "with_capacity",
      "arguments": [
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "n"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::entity::hash_set::EntityHashSet"
        }
      },
      "documentation": " Creates an empty `EntityHashSet` with the specified capacity.\n Equivalent to [`HashSet::with_capacity_and_hasher(n, EntityHash)`].\n [`HashSet::with_capacity_and_hasher(n, EntityHash)`]: HashSet::with_capacity_and_hasher"
    },
    "bevy_ecs::entity_disabling::DefaultQueryFilters::empty": {
      "namespace": "bevy_ecs::entity_disabling::DefaultQueryFilters",
      "identifier": "empty",
      "return_type": {
        "kind": {
          "val": "bevy_ecs::entity_disabling::DefaultQueryFilters"
        }
      },
      "documentation": " Creates a new, completely empty [`DefaultQueryFilters`].\n This is provided as an escape hatch; in most cases you should initialize this using [`FromWorld`],\n which is automatically called when creating a new [`World`]."
    },
    "bevy_ecs::entity_disabling::DefaultQueryFilters::register_disabling_component": {
      "namespace": "bevy_ecs::entity_disabling::DefaultQueryFilters",
      "identifier": "register_disabling_component",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_ecs::entity_disabling::DefaultQueryFilters"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_ecs::component::ComponentId"
          },
          "name": "component_id"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Adds this [`ComponentId`] to the set of [`DefaultQueryFilters`],\n causing entities with this component to be excluded from queries.\n This method is idempotent, and will not add the same component multiple times.\n # Warning\n This method should only be called before the app starts, as it will not affect queries\n initialized before it is called.\n As discussed in the [module docs](crate::entity_disabling), this can have performance implications,\n as well as create interoperability issues, and should be used with caution."
    },
    "bevy_ecs::entity_disabling::Disabled::clone": {
      "namespace": "bevy_ecs::entity_disabling::Disabled",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::entity_disabling::Disabled"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::entity_disabling::Disabled"
        }
      }
    },
    "bevy_ecs::hierarchy::ChildOf::assert_receiver_is_total_eq": {
      "namespace": "bevy_ecs::hierarchy::ChildOf",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::hierarchy::ChildOf"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_ecs::hierarchy::ChildOf::clone": {
      "namespace": "bevy_ecs::hierarchy::ChildOf",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::hierarchy::ChildOf"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::hierarchy::ChildOf"
        }
      }
    },
    "bevy_ecs::hierarchy::ChildOf::eq": {
      "namespace": "bevy_ecs::hierarchy::ChildOf",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::hierarchy::ChildOf"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_ecs::hierarchy::ChildOf"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_ecs::hierarchy::ChildOf::get": {
      "namespace": "bevy_ecs::hierarchy::ChildOf",
      "identifier": "get",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::hierarchy::ChildOf"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::entity::Entity"
        }
      },
      "documentation": " The parent entity of this child entity."
    },
    "bevy_ecs::hierarchy::ChildOf::parent": {
      "namespace": "bevy_ecs::hierarchy::ChildOf",
      "identifier": "parent",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::hierarchy::ChildOf"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::entity::Entity"
        }
      },
      "documentation": " The parent entity of this child entity."
    },
    "bevy_ecs::hierarchy::Children::assert_receiver_is_total_eq": {
      "namespace": "bevy_ecs::hierarchy::Children",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::hierarchy::Children"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_ecs::hierarchy::Children::eq": {
      "namespace": "bevy_ecs::hierarchy::Children",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::hierarchy::Children"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_ecs::hierarchy::Children"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_ecs::hierarchy::Children::swap": {
      "namespace": "bevy_ecs::hierarchy::Children",
      "identifier": "swap",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_ecs::hierarchy::Children"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "a_index"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "b_index"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Swaps the child at `a_index` with the child at `b_index`."
    },
    "bevy_ecs::identifier::Identifier::clone": {
      "namespace": "bevy_ecs::identifier::Identifier",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::identifier::Identifier"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::identifier::Identifier"
        }
      }
    },
    "bevy_ecs::identifier::Identifier::eq": {
      "namespace": "bevy_ecs::identifier::Identifier",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::identifier::Identifier"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_ecs::identifier::Identifier"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_ecs::identifier::Identifier::from_bits": {
      "namespace": "bevy_ecs::identifier::Identifier",
      "identifier": "from_bits",
      "arguments": [
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::identifier::Identifier"
        }
      },
      "documentation": " Convert a `u64` into an [`Identifier`].\n # Panics\n This method will likely panic if given `u64` values that did not come from [`Identifier::to_bits`]."
    },
    "bevy_ecs::identifier::Identifier::low": {
      "namespace": "bevy_ecs::identifier::Identifier",
      "identifier": "low",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::identifier::Identifier"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the value of the low segment of the [`Identifier`]."
    },
    "bevy_ecs::identifier::Identifier::masked_high": {
      "namespace": "bevy_ecs::identifier::Identifier",
      "identifier": "masked_high",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::identifier::Identifier"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the masked value of the high segment of the [`Identifier`].\n Does not include the flag bits."
    },
    "bevy_ecs::identifier::Identifier::to_bits": {
      "namespace": "bevy_ecs::identifier::Identifier",
      "identifier": "to_bits",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::identifier::Identifier"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Convert the [`Identifier`] into a `u64`."
    },
    "bevy_ecs::name::Name::clone": {
      "namespace": "bevy_ecs::name::Name",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::name::Name"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::name::Name"
        }
      }
    },
    "bevy_ecs::name::Name::eq": {
      "namespace": "bevy_ecs::name::Name",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::name::Name"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_ecs::name::Name"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_ecs::removal_detection::RemovedComponentEntity::clone": {
      "namespace": "bevy_ecs::removal_detection::RemovedComponentEntity",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::removal_detection::RemovedComponentEntity"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::removal_detection::RemovedComponentEntity"
        }
      }
    },
    "bevy_input::ButtonState::assert_receiver_is_total_eq": {
      "namespace": "bevy_input::ButtonState",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::ButtonState"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_input::ButtonState::clone": {
      "namespace": "bevy_input::ButtonState",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::ButtonState"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::ButtonState"
        }
      }
    },
    "bevy_input::ButtonState::eq": {
      "namespace": "bevy_input::ButtonState",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::ButtonState"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::ButtonState"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::ButtonState::is_pressed": {
      "namespace": "bevy_input::ButtonState",
      "identifier": "is_pressed",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::ButtonState"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Is this button pressed?"
    },
    "bevy_input::gamepad::AxisSettings::clamp": {
      "namespace": "bevy_input::gamepad::AxisSettings",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::AxisSettings"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "raw_value"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Clamps the `raw_value` according to the `AxisSettings`."
    },
    "bevy_input::gamepad::AxisSettings::clone": {
      "namespace": "bevy_input::gamepad::AxisSettings",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::AxisSettings"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::AxisSettings"
        }
      }
    },
    "bevy_input::gamepad::AxisSettings::deadzone_lowerbound": {
      "namespace": "bevy_input::gamepad::AxisSettings",
      "identifier": "deadzone_lowerbound",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::AxisSettings"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the value above which inputs will be rounded up to 0.0."
    },
    "bevy_input::gamepad::AxisSettings::deadzone_upperbound": {
      "namespace": "bevy_input::gamepad::AxisSettings",
      "identifier": "deadzone_upperbound",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::AxisSettings"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the value below which positive inputs will be rounded down to 0.0."
    },
    "bevy_input::gamepad::AxisSettings::eq": {
      "namespace": "bevy_input::gamepad::AxisSettings",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::AxisSettings"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gamepad::AxisSettings"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gamepad::AxisSettings::livezone_lowerbound": {
      "namespace": "bevy_input::gamepad::AxisSettings",
      "identifier": "livezone_lowerbound",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::AxisSettings"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the value below which negative inputs will be rounded down to -1.0."
    },
    "bevy_input::gamepad::AxisSettings::livezone_upperbound": {
      "namespace": "bevy_input::gamepad::AxisSettings",
      "identifier": "livezone_upperbound",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::AxisSettings"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the value above which inputs will be rounded up to 1.0."
    },
    "bevy_input::gamepad::AxisSettings::set_deadzone_lowerbound": {
      "namespace": "bevy_input::gamepad::AxisSettings",
      "identifier": "set_deadzone_lowerbound",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_input::gamepad::AxisSettings"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Try to set the value above which inputs will be rounded up to 0.0.\n If the value passed is less than -1.0 or less than `livezone_lowerbound`,\n the value will not be changed.\n Returns the new value of `deadzone_lowerbound`."
    },
    "bevy_input::gamepad::AxisSettings::set_deadzone_upperbound": {
      "namespace": "bevy_input::gamepad::AxisSettings",
      "identifier": "set_deadzone_upperbound",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_input::gamepad::AxisSettings"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Try to set the value below which positive inputs will be rounded down to 0.0.\n If the value passed is negative or greater than `livezone_upperbound`,\n the value will not be changed.\n Returns the new value of `deadzone_upperbound`."
    },
    "bevy_input::gamepad::AxisSettings::set_livezone_lowerbound": {
      "namespace": "bevy_input::gamepad::AxisSettings",
      "identifier": "set_livezone_lowerbound",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_input::gamepad::AxisSettings"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Try to set the value below which negative inputs will be rounded down to -1.0.\n If the value passed is positive or greater than `deadzone_lowerbound`,\n the value will not be changed.\n Returns the new value of `livezone_lowerbound`."
    },
    "bevy_input::gamepad::AxisSettings::set_livezone_upperbound": {
      "namespace": "bevy_input::gamepad::AxisSettings",
      "identifier": "set_livezone_upperbound",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_input::gamepad::AxisSettings"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Try to set the value above which inputs will be rounded up to 1.0.\n If the value passed is negative or less than `deadzone_upperbound`,\n the value will not be changed.\n Returns the new value of `livezone_upperbound`."
    },
    "bevy_input::gamepad::AxisSettings::set_threshold": {
      "namespace": "bevy_input::gamepad::AxisSettings",
      "identifier": "set_threshold",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_input::gamepad::AxisSettings"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Try to set the minimum value by which input must change before the changes will be applied.\n If the value passed is not within [0.0..=2.0], the value will not be changed.\n Returns the new value of threshold."
    },
    "bevy_input::gamepad::AxisSettings::threshold": {
      "namespace": "bevy_input::gamepad::AxisSettings",
      "identifier": "threshold",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::AxisSettings"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the minimum value by which input must change before the change is registered."
    },
    "bevy_input::gamepad::ButtonAxisSettings::clone": {
      "namespace": "bevy_input::gamepad::ButtonAxisSettings",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::ButtonAxisSettings"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::ButtonAxisSettings"
        }
      }
    },
    "bevy_input::gamepad::ButtonSettings::clone": {
      "namespace": "bevy_input::gamepad::ButtonSettings",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::ButtonSettings"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::ButtonSettings"
        }
      }
    },
    "bevy_input::gamepad::ButtonSettings::eq": {
      "namespace": "bevy_input::gamepad::ButtonSettings",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::ButtonSettings"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gamepad::ButtonSettings"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gamepad::ButtonSettings::is_pressed": {
      "namespace": "bevy_input::gamepad::ButtonSettings",
      "identifier": "is_pressed",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::ButtonSettings"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if the button is pressed.\n A button is considered pressed if the `value` passed is greater than or equal to the press threshold."
    },
    "bevy_input::gamepad::ButtonSettings::is_released": {
      "namespace": "bevy_input::gamepad::ButtonSettings",
      "identifier": "is_released",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::ButtonSettings"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if the button is released.\n A button is considered released if the `value` passed is lower than or equal to the release threshold."
    },
    "bevy_input::gamepad::ButtonSettings::press_threshold": {
      "namespace": "bevy_input::gamepad::ButtonSettings",
      "identifier": "press_threshold",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::ButtonSettings"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the button input threshold above which the button is considered pressed."
    },
    "bevy_input::gamepad::ButtonSettings::release_threshold": {
      "namespace": "bevy_input::gamepad::ButtonSettings",
      "identifier": "release_threshold",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::ButtonSettings"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the button input threshold below which the button is considered released."
    },
    "bevy_input::gamepad::ButtonSettings::set_press_threshold": {
      "namespace": "bevy_input::gamepad::ButtonSettings",
      "identifier": "set_press_threshold",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_input::gamepad::ButtonSettings"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Try to set the button input threshold above which the button is considered pressed.\n If the value passed is outside the range [release threshold..=1.0], the value will not be changed.\n Returns the new value of the press threshold."
    },
    "bevy_input::gamepad::ButtonSettings::set_release_threshold": {
      "namespace": "bevy_input::gamepad::ButtonSettings",
      "identifier": "set_release_threshold",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_input::gamepad::ButtonSettings"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Try to set the button input threshold below which the button is considered released. If the\n value passed is outside the range [0.0..=press threshold], the value will not be changed.\n Returns the new value of the release threshold."
    },
    "bevy_input::gamepad::Gamepad::dpad": {
      "namespace": "bevy_input::gamepad::Gamepad",
      "identifier": "dpad",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::Gamepad"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns the directional pad as a [`Vec2`]."
    },
    "bevy_input::gamepad::Gamepad::just_pressed": {
      "namespace": "bevy_input::gamepad::Gamepad",
      "identifier": "just_pressed",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::Gamepad"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_input::gamepad::GamepadButton"
          },
          "name": "button_type"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if the [`GamepadButton`] has been pressed during the current frame.\n Note: This function does not imply information regarding the current state of [`ButtonInput::pressed`] or [`ButtonInput::just_released`]."
    },
    "bevy_input::gamepad::Gamepad::just_released": {
      "namespace": "bevy_input::gamepad::Gamepad",
      "identifier": "just_released",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::Gamepad"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_input::gamepad::GamepadButton"
          },
          "name": "button_type"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if the [`GamepadButton`] has been released during the current frame.\n Note: This function does not imply information regarding the current state of [`ButtonInput::pressed`] or [`ButtonInput::just_pressed`]."
    },
    "bevy_input::gamepad::Gamepad::left_stick": {
      "namespace": "bevy_input::gamepad::Gamepad",
      "identifier": "left_stick",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::Gamepad"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns the left stick as a [`Vec2`]."
    },
    "bevy_input::gamepad::Gamepad::pressed": {
      "namespace": "bevy_input::gamepad::Gamepad",
      "identifier": "pressed",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::Gamepad"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_input::gamepad::GamepadButton"
          },
          "name": "button_type"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if the [`GamepadButton`] has been pressed."
    },
    "bevy_input::gamepad::Gamepad::product_id": {
      "namespace": "bevy_input::gamepad::Gamepad",
      "identifier": "product_id",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::Gamepad"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "option": {
            "primitive": "u16"
          }
        }
      },
      "documentation": " Returns the USB product ID as assigned by the [vendor], if available.\n [vendor]: Self::vendor_id"
    },
    "bevy_input::gamepad::Gamepad::right_stick": {
      "namespace": "bevy_input::gamepad::Gamepad",
      "identifier": "right_stick",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::Gamepad"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns the right stick as a [`Vec2`]."
    },
    "bevy_input::gamepad::Gamepad::vendor_id": {
      "namespace": "bevy_input::gamepad::Gamepad",
      "identifier": "vendor_id",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::Gamepad"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "option": {
            "primitive": "u16"
          }
        }
      },
      "documentation": " Returns the USB vendor ID as assigned by the USB-IF, if available."
    },
    "bevy_input::gamepad::GamepadAxis::assert_receiver_is_total_eq": {
      "namespace": "bevy_input::gamepad::GamepadAxis",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadAxis"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_input::gamepad::GamepadAxis::clone": {
      "namespace": "bevy_input::gamepad::GamepadAxis",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadAxis"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadAxis"
        }
      }
    },
    "bevy_input::gamepad::GamepadAxis::eq": {
      "namespace": "bevy_input::gamepad::GamepadAxis",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadAxis"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadAxis"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gamepad::GamepadAxisChangedEvent::clone": {
      "namespace": "bevy_input::gamepad::GamepadAxisChangedEvent",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadAxisChangedEvent"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadAxisChangedEvent"
        }
      }
    },
    "bevy_input::gamepad::GamepadAxisChangedEvent::eq": {
      "namespace": "bevy_input::gamepad::GamepadAxisChangedEvent",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadAxisChangedEvent"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadAxisChangedEvent"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gamepad::GamepadAxisChangedEvent::new": {
      "namespace": "bevy_input::gamepad::GamepadAxisChangedEvent",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "name": "entity"
        },
        {
          "kind": {
            "val": "bevy_input::gamepad::GamepadAxis"
          },
          "name": "axis"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadAxisChangedEvent"
        }
      },
      "documentation": " Creates a new [`GamepadAxisChangedEvent`]."
    },
    "bevy_input::gamepad::GamepadButton::assert_receiver_is_total_eq": {
      "namespace": "bevy_input::gamepad::GamepadButton",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadButton"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_input::gamepad::GamepadButton::clone": {
      "namespace": "bevy_input::gamepad::GamepadButton",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadButton"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadButton"
        }
      }
    },
    "bevy_input::gamepad::GamepadButton::eq": {
      "namespace": "bevy_input::gamepad::GamepadButton",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadButton"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadButton"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gamepad::GamepadButtonChangedEvent::clone": {
      "namespace": "bevy_input::gamepad::GamepadButtonChangedEvent",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadButtonChangedEvent"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadButtonChangedEvent"
        }
      }
    },
    "bevy_input::gamepad::GamepadButtonChangedEvent::eq": {
      "namespace": "bevy_input::gamepad::GamepadButtonChangedEvent",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadButtonChangedEvent"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadButtonChangedEvent"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gamepad::GamepadButtonChangedEvent::new": {
      "namespace": "bevy_input::gamepad::GamepadButtonChangedEvent",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "name": "entity"
        },
        {
          "kind": {
            "val": "bevy_input::gamepad::GamepadButton"
          },
          "name": "button"
        },
        {
          "kind": {
            "val": "bevy_input::ButtonState"
          },
          "name": "state"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadButtonChangedEvent"
        }
      },
      "documentation": " Creates a new [`GamepadButtonChangedEvent`]."
    },
    "bevy_input::gamepad::GamepadButtonStateChangedEvent::assert_receiver_is_total_eq": {
      "namespace": "bevy_input::gamepad::GamepadButtonStateChangedEvent",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadButtonStateChangedEvent"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_input::gamepad::GamepadButtonStateChangedEvent::clone": {
      "namespace": "bevy_input::gamepad::GamepadButtonStateChangedEvent",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadButtonStateChangedEvent"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadButtonStateChangedEvent"
        }
      }
    },
    "bevy_input::gamepad::GamepadButtonStateChangedEvent::eq": {
      "namespace": "bevy_input::gamepad::GamepadButtonStateChangedEvent",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadButtonStateChangedEvent"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadButtonStateChangedEvent"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gamepad::GamepadButtonStateChangedEvent::new": {
      "namespace": "bevy_input::gamepad::GamepadButtonStateChangedEvent",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "name": "entity"
        },
        {
          "kind": {
            "val": "bevy_input::gamepad::GamepadButton"
          },
          "name": "button"
        },
        {
          "kind": {
            "val": "bevy_input::ButtonState"
          },
          "name": "state"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadButtonStateChangedEvent"
        }
      },
      "documentation": " Creates a new [`GamepadButtonStateChangedEvent`]."
    },
    "bevy_input::gamepad::GamepadConnection::clone": {
      "namespace": "bevy_input::gamepad::GamepadConnection",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadConnection"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadConnection"
        }
      }
    },
    "bevy_input::gamepad::GamepadConnection::eq": {
      "namespace": "bevy_input::gamepad::GamepadConnection",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadConnection"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadConnection"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gamepad::GamepadConnectionEvent::clone": {
      "namespace": "bevy_input::gamepad::GamepadConnectionEvent",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadConnectionEvent"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadConnectionEvent"
        }
      }
    },
    "bevy_input::gamepad::GamepadConnectionEvent::connected": {
      "namespace": "bevy_input::gamepad::GamepadConnectionEvent",
      "identifier": "connected",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadConnectionEvent"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Whether the gamepad is connected."
    },
    "bevy_input::gamepad::GamepadConnectionEvent::disconnected": {
      "namespace": "bevy_input::gamepad::GamepadConnectionEvent",
      "identifier": "disconnected",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadConnectionEvent"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Whether the gamepad is disconnected."
    },
    "bevy_input::gamepad::GamepadConnectionEvent::eq": {
      "namespace": "bevy_input::gamepad::GamepadConnectionEvent",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadConnectionEvent"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadConnectionEvent"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gamepad::GamepadConnectionEvent::new": {
      "namespace": "bevy_input::gamepad::GamepadConnectionEvent",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "name": "gamepad"
        },
        {
          "kind": {
            "val": "bevy_input::gamepad::GamepadConnection"
          },
          "name": "connection"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadConnectionEvent"
        }
      },
      "documentation": " Creates a [`GamepadConnectionEvent`]."
    },
    "bevy_input::gamepad::GamepadEvent::clone": {
      "namespace": "bevy_input::gamepad::GamepadEvent",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadEvent"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadEvent"
        }
      }
    },
    "bevy_input::gamepad::GamepadEvent::eq": {
      "namespace": "bevy_input::gamepad::GamepadEvent",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadEvent"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadEvent"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gamepad::GamepadInput::assert_receiver_is_total_eq": {
      "namespace": "bevy_input::gamepad::GamepadInput",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadInput"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_input::gamepad::GamepadInput::clone": {
      "namespace": "bevy_input::gamepad::GamepadInput",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadInput"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadInput"
        }
      }
    },
    "bevy_input::gamepad::GamepadInput::eq": {
      "namespace": "bevy_input::gamepad::GamepadInput",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadInput"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadInput"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gamepad::GamepadRumbleIntensity::clone": {
      "namespace": "bevy_input::gamepad::GamepadRumbleIntensity",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadRumbleIntensity"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadRumbleIntensity"
        }
      }
    },
    "bevy_input::gamepad::GamepadRumbleIntensity::eq": {
      "namespace": "bevy_input::gamepad::GamepadRumbleIntensity",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadRumbleIntensity"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadRumbleIntensity"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gamepad::GamepadRumbleIntensity::strong_motor": {
      "namespace": "bevy_input::gamepad::GamepadRumbleIntensity",
      "identifier": "strong_motor",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "intensity"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadRumbleIntensity"
        }
      },
      "documentation": " Creates a new rumble intensity with strong motor intensity set to the given value.\n Clamped within the `0.0` to `1.0` range."
    },
    "bevy_input::gamepad::GamepadRumbleIntensity::weak_motor": {
      "namespace": "bevy_input::gamepad::GamepadRumbleIntensity",
      "identifier": "weak_motor",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "intensity"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadRumbleIntensity"
        }
      },
      "documentation": " Creates a new rumble intensity with weak motor intensity set to the given value.\n Clamped within the `0.0` to `1.0` range."
    },
    "bevy_input::gamepad::GamepadRumbleRequest::clone": {
      "namespace": "bevy_input::gamepad::GamepadRumbleRequest",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadRumbleRequest"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadRumbleRequest"
        }
      }
    },
    "bevy_input::gamepad::GamepadRumbleRequest::gamepad": {
      "namespace": "bevy_input::gamepad::GamepadRumbleRequest",
      "identifier": "gamepad",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadRumbleRequest"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::entity::Entity"
        }
      },
      "documentation": " Get the [`Entity`] associated with this request."
    },
    "bevy_input::gamepad::GamepadSettings::clone": {
      "namespace": "bevy_input::gamepad::GamepadSettings",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadSettings"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadSettings"
        }
      }
    },
    "bevy_input::gamepad::RawGamepadAxisChangedEvent::clone": {
      "namespace": "bevy_input::gamepad::RawGamepadAxisChangedEvent",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::RawGamepadAxisChangedEvent"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::RawGamepadAxisChangedEvent"
        }
      }
    },
    "bevy_input::gamepad::RawGamepadAxisChangedEvent::eq": {
      "namespace": "bevy_input::gamepad::RawGamepadAxisChangedEvent",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::RawGamepadAxisChangedEvent"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gamepad::RawGamepadAxisChangedEvent"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gamepad::RawGamepadAxisChangedEvent::new": {
      "namespace": "bevy_input::gamepad::RawGamepadAxisChangedEvent",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "name": "gamepad"
        },
        {
          "kind": {
            "val": "bevy_input::gamepad::GamepadAxis"
          },
          "name": "axis_type"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::RawGamepadAxisChangedEvent"
        }
      },
      "documentation": " Creates a [`RawGamepadAxisChangedEvent`]."
    },
    "bevy_input::gamepad::RawGamepadButtonChangedEvent::clone": {
      "namespace": "bevy_input::gamepad::RawGamepadButtonChangedEvent",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::RawGamepadButtonChangedEvent"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::RawGamepadButtonChangedEvent"
        }
      }
    },
    "bevy_input::gamepad::RawGamepadButtonChangedEvent::eq": {
      "namespace": "bevy_input::gamepad::RawGamepadButtonChangedEvent",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::RawGamepadButtonChangedEvent"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gamepad::RawGamepadButtonChangedEvent"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gamepad::RawGamepadButtonChangedEvent::new": {
      "namespace": "bevy_input::gamepad::RawGamepadButtonChangedEvent",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "name": "gamepad"
        },
        {
          "kind": {
            "val": "bevy_input::gamepad::GamepadButton"
          },
          "name": "button_type"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::RawGamepadButtonChangedEvent"
        }
      },
      "documentation": " Creates a [`RawGamepadButtonChangedEvent`]."
    },
    "bevy_input::gamepad::RawGamepadEvent::clone": {
      "namespace": "bevy_input::gamepad::RawGamepadEvent",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::RawGamepadEvent"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::RawGamepadEvent"
        }
      }
    },
    "bevy_input::gamepad::RawGamepadEvent::eq": {
      "namespace": "bevy_input::gamepad::RawGamepadEvent",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::RawGamepadEvent"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gamepad::RawGamepadEvent"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gestures::DoubleTapGesture::clone": {
      "namespace": "bevy_input::gestures::DoubleTapGesture",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gestures::DoubleTapGesture"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gestures::DoubleTapGesture"
        }
      }
    },
    "bevy_input::gestures::DoubleTapGesture::eq": {
      "namespace": "bevy_input::gestures::DoubleTapGesture",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gestures::DoubleTapGesture"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gestures::DoubleTapGesture"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gestures::PanGesture::clone": {
      "namespace": "bevy_input::gestures::PanGesture",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gestures::PanGesture"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gestures::PanGesture"
        }
      }
    },
    "bevy_input::gestures::PanGesture::eq": {
      "namespace": "bevy_input::gestures::PanGesture",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gestures::PanGesture"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gestures::PanGesture"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gestures::PinchGesture::clone": {
      "namespace": "bevy_input::gestures::PinchGesture",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gestures::PinchGesture"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gestures::PinchGesture"
        }
      }
    },
    "bevy_input::gestures::PinchGesture::eq": {
      "namespace": "bevy_input::gestures::PinchGesture",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gestures::PinchGesture"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gestures::PinchGesture"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gestures::RotationGesture::clone": {
      "namespace": "bevy_input::gestures::RotationGesture",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gestures::RotationGesture"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gestures::RotationGesture"
        }
      }
    },
    "bevy_input::gestures::RotationGesture::eq": {
      "namespace": "bevy_input::gestures::RotationGesture",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gestures::RotationGesture"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gestures::RotationGesture"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::keyboard::Key::assert_receiver_is_total_eq": {
      "namespace": "bevy_input::keyboard::Key",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::Key"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_input::keyboard::Key::clone": {
      "namespace": "bevy_input::keyboard::Key",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::Key"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::keyboard::Key"
        }
      }
    },
    "bevy_input::keyboard::Key::eq": {
      "namespace": "bevy_input::keyboard::Key",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::Key"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::keyboard::Key"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::keyboard::KeyCode::assert_receiver_is_total_eq": {
      "namespace": "bevy_input::keyboard::KeyCode",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::KeyCode"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_input::keyboard::KeyCode::clone": {
      "namespace": "bevy_input::keyboard::KeyCode",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::KeyCode"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::keyboard::KeyCode"
        }
      }
    },
    "bevy_input::keyboard::KeyCode::eq": {
      "namespace": "bevy_input::keyboard::KeyCode",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::KeyCode"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::keyboard::KeyCode"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::keyboard::KeyboardFocusLost::assert_receiver_is_total_eq": {
      "namespace": "bevy_input::keyboard::KeyboardFocusLost",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::KeyboardFocusLost"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_input::keyboard::KeyboardFocusLost::clone": {
      "namespace": "bevy_input::keyboard::KeyboardFocusLost",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::KeyboardFocusLost"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::keyboard::KeyboardFocusLost"
        }
      }
    },
    "bevy_input::keyboard::KeyboardFocusLost::eq": {
      "namespace": "bevy_input::keyboard::KeyboardFocusLost",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::KeyboardFocusLost"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::keyboard::KeyboardFocusLost"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::keyboard::KeyboardInput::assert_receiver_is_total_eq": {
      "namespace": "bevy_input::keyboard::KeyboardInput",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::KeyboardInput"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_input::keyboard::KeyboardInput::clone": {
      "namespace": "bevy_input::keyboard::KeyboardInput",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::KeyboardInput"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::keyboard::KeyboardInput"
        }
      }
    },
    "bevy_input::keyboard::KeyboardInput::eq": {
      "namespace": "bevy_input::keyboard::KeyboardInput",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::KeyboardInput"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::keyboard::KeyboardInput"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::keyboard::NativeKey::assert_receiver_is_total_eq": {
      "namespace": "bevy_input::keyboard::NativeKey",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::NativeKey"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_input::keyboard::NativeKey::clone": {
      "namespace": "bevy_input::keyboard::NativeKey",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::NativeKey"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::keyboard::NativeKey"
        }
      }
    },
    "bevy_input::keyboard::NativeKey::eq": {
      "namespace": "bevy_input::keyboard::NativeKey",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::NativeKey"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::keyboard::NativeKey"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::keyboard::NativeKeyCode::assert_receiver_is_total_eq": {
      "namespace": "bevy_input::keyboard::NativeKeyCode",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::NativeKeyCode"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_input::keyboard::NativeKeyCode::clone": {
      "namespace": "bevy_input::keyboard::NativeKeyCode",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::NativeKeyCode"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::keyboard::NativeKeyCode"
        }
      }
    },
    "bevy_input::keyboard::NativeKeyCode::eq": {
      "namespace": "bevy_input::keyboard::NativeKeyCode",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::NativeKeyCode"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::keyboard::NativeKeyCode"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::mouse::AccumulatedMouseMotion::clone": {
      "namespace": "bevy_input::mouse::AccumulatedMouseMotion",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::AccumulatedMouseMotion"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::mouse::AccumulatedMouseMotion"
        }
      }
    },
    "bevy_input::mouse::AccumulatedMouseMotion::eq": {
      "namespace": "bevy_input::mouse::AccumulatedMouseMotion",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::AccumulatedMouseMotion"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::mouse::AccumulatedMouseMotion"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::mouse::AccumulatedMouseScroll::clone": {
      "namespace": "bevy_input::mouse::AccumulatedMouseScroll",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::AccumulatedMouseScroll"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::mouse::AccumulatedMouseScroll"
        }
      }
    },
    "bevy_input::mouse::AccumulatedMouseScroll::eq": {
      "namespace": "bevy_input::mouse::AccumulatedMouseScroll",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::AccumulatedMouseScroll"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::mouse::AccumulatedMouseScroll"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::mouse::MouseButton::assert_receiver_is_total_eq": {
      "namespace": "bevy_input::mouse::MouseButton",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseButton"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_input::mouse::MouseButton::clone": {
      "namespace": "bevy_input::mouse::MouseButton",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseButton"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::mouse::MouseButton"
        }
      }
    },
    "bevy_input::mouse::MouseButton::eq": {
      "namespace": "bevy_input::mouse::MouseButton",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseButton"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseButton"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::mouse::MouseButtonInput::assert_receiver_is_total_eq": {
      "namespace": "bevy_input::mouse::MouseButtonInput",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseButtonInput"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_input::mouse::MouseButtonInput::clone": {
      "namespace": "bevy_input::mouse::MouseButtonInput",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseButtonInput"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::mouse::MouseButtonInput"
        }
      }
    },
    "bevy_input::mouse::MouseButtonInput::eq": {
      "namespace": "bevy_input::mouse::MouseButtonInput",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseButtonInput"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseButtonInput"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::mouse::MouseMotion::clone": {
      "namespace": "bevy_input::mouse::MouseMotion",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseMotion"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::mouse::MouseMotion"
        }
      }
    },
    "bevy_input::mouse::MouseMotion::eq": {
      "namespace": "bevy_input::mouse::MouseMotion",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseMotion"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseMotion"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::mouse::MouseScrollUnit::assert_receiver_is_total_eq": {
      "namespace": "bevy_input::mouse::MouseScrollUnit",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseScrollUnit"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_input::mouse::MouseScrollUnit::clone": {
      "namespace": "bevy_input::mouse::MouseScrollUnit",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseScrollUnit"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::mouse::MouseScrollUnit"
        }
      }
    },
    "bevy_input::mouse::MouseScrollUnit::eq": {
      "namespace": "bevy_input::mouse::MouseScrollUnit",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseScrollUnit"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseScrollUnit"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::mouse::MouseWheel::clone": {
      "namespace": "bevy_input::mouse::MouseWheel",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseWheel"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::mouse::MouseWheel"
        }
      }
    },
    "bevy_input::mouse::MouseWheel::eq": {
      "namespace": "bevy_input::mouse::MouseWheel",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseWheel"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseWheel"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::touch::ForceTouch::clone": {
      "namespace": "bevy_input::touch::ForceTouch",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::touch::ForceTouch"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::touch::ForceTouch"
        }
      }
    },
    "bevy_input::touch::ForceTouch::eq": {
      "namespace": "bevy_input::touch::ForceTouch",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::touch::ForceTouch"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::touch::ForceTouch"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::touch::TouchInput::clone": {
      "namespace": "bevy_input::touch::TouchInput",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::touch::TouchInput"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::touch::TouchInput"
        }
      }
    },
    "bevy_input::touch::TouchInput::eq": {
      "namespace": "bevy_input::touch::TouchInput",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::touch::TouchInput"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::touch::TouchInput"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::touch::TouchPhase::assert_receiver_is_total_eq": {
      "namespace": "bevy_input::touch::TouchPhase",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::touch::TouchPhase"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_input::touch::TouchPhase::clone": {
      "namespace": "bevy_input::touch::TouchPhase",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::touch::TouchPhase"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::touch::TouchPhase"
        }
      }
    },
    "bevy_input::touch::TouchPhase::eq": {
      "namespace": "bevy_input::touch::TouchPhase",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::touch::TouchPhase"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::touch::TouchPhase"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::aspect_ratio::AspectRatio::clone": {
      "namespace": "bevy_math::aspect_ratio::AspectRatio",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::aspect_ratio::AspectRatio"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::aspect_ratio::AspectRatio"
        }
      }
    },
    "bevy_math::aspect_ratio::AspectRatio::eq": {
      "namespace": "bevy_math::aspect_ratio::AspectRatio",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::aspect_ratio::AspectRatio"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::aspect_ratio::AspectRatio"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::aspect_ratio::AspectRatio::inverse": {
      "namespace": "bevy_math::aspect_ratio::AspectRatio",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::aspect_ratio::AspectRatio"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::aspect_ratio::AspectRatio"
        }
      },
      "documentation": " Returns the inverse of this aspect ratio (height/width)."
    },
    "bevy_math::aspect_ratio::AspectRatio::is_landscape": {
      "namespace": "bevy_math::aspect_ratio::AspectRatio",
      "identifier": "is_landscape",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::aspect_ratio::AspectRatio"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the aspect ratio represents a landscape orientation."
    },
    "bevy_math::aspect_ratio::AspectRatio::is_portrait": {
      "namespace": "bevy_math::aspect_ratio::AspectRatio",
      "identifier": "is_portrait",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::aspect_ratio::AspectRatio"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the aspect ratio represents a portrait orientation."
    },
    "bevy_math::aspect_ratio::AspectRatio::is_square": {
      "namespace": "bevy_math::aspect_ratio::AspectRatio",
      "identifier": "is_square",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::aspect_ratio::AspectRatio"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the aspect ratio is exactly square."
    },
    "bevy_math::aspect_ratio::AspectRatio::ratio": {
      "namespace": "bevy_math::aspect_ratio::AspectRatio",
      "identifier": "ratio",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::aspect_ratio::AspectRatio"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the aspect ratio as a f32 value."
    },
    "bevy_math::bounding::bounded2d::Aabb2d::bounding_circle": {
      "namespace": "bevy_math::bounding::bounded2d::Aabb2d",
      "identifier": "bounding_circle",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded2d::Aabb2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::bounded2d::BoundingCircle"
        }
      },
      "documentation": " Computes the smallest [`BoundingCircle`] containing this [`Aabb2d`]."
    },
    "bevy_math::bounding::bounded2d::Aabb2d::clone": {
      "namespace": "bevy_math::bounding::bounded2d::Aabb2d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded2d::Aabb2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::bounded2d::Aabb2d"
        }
      }
    },
    "bevy_math::bounding::bounded2d::Aabb2d::closest_point": {
      "namespace": "bevy_math::bounding::bounded2d::Aabb2d",
      "identifier": "closest_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded2d::Aabb2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Finds the point on the AABB that is closest to the given `point`.\n If the point is outside the AABB, the returned point will be on the perimeter of the AABB.\n Otherwise, it will be inside the AABB and returned as is."
    },
    "bevy_math::bounding::bounded2d::Aabb2d::eq": {
      "namespace": "bevy_math::bounding::bounded2d::Aabb2d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded2d::Aabb2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded2d::Aabb2d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::bounding::bounded2d::Aabb2d::new": {
      "namespace": "bevy_math::bounding::bounded2d::Aabb2d",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "center"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "half_size"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::bounded2d::Aabb2d"
        }
      },
      "documentation": " Constructs an AABB from its center and half-size."
    },
    "bevy_math::bounding::bounded2d::BoundingCircle::aabb_2d": {
      "namespace": "bevy_math::bounding::bounded2d::BoundingCircle",
      "identifier": "aabb_2d",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded2d::BoundingCircle"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::bounded2d::Aabb2d"
        }
      },
      "documentation": " Computes the smallest [`Aabb2d`] containing this [`BoundingCircle`]."
    },
    "bevy_math::bounding::bounded2d::BoundingCircle::clone": {
      "namespace": "bevy_math::bounding::bounded2d::BoundingCircle",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded2d::BoundingCircle"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::bounded2d::BoundingCircle"
        }
      }
    },
    "bevy_math::bounding::bounded2d::BoundingCircle::closest_point": {
      "namespace": "bevy_math::bounding::bounded2d::BoundingCircle",
      "identifier": "closest_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded2d::BoundingCircle"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Finds the point on the bounding circle that is closest to the given `point`.\n If the point is outside the circle, the returned point will be on the perimeter of the circle.\n Otherwise, it will be inside the circle and returned as is."
    },
    "bevy_math::bounding::bounded2d::BoundingCircle::eq": {
      "namespace": "bevy_math::bounding::bounded2d::BoundingCircle",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded2d::BoundingCircle"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded2d::BoundingCircle"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::bounding::bounded2d::BoundingCircle::new": {
      "namespace": "bevy_math::bounding::bounded2d::BoundingCircle",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "center"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::bounded2d::BoundingCircle"
        }
      },
      "documentation": " Constructs a bounding circle from its center and radius."
    },
    "bevy_math::bounding::bounded2d::BoundingCircle::radius": {
      "namespace": "bevy_math::bounding::bounded2d::BoundingCircle",
      "identifier": "radius",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded2d::BoundingCircle"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the radius of the bounding circle"
    },
    "bevy_math::bounding::bounded3d::Aabb3d::bounding_sphere": {
      "namespace": "bevy_math::bounding::bounded3d::Aabb3d",
      "identifier": "bounding_sphere",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded3d::Aabb3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::bounded3d::BoundingSphere"
        }
      },
      "documentation": " Computes the smallest [`BoundingSphere`] containing this [`Aabb3d`]."
    },
    "bevy_math::bounding::bounded3d::Aabb3d::clone": {
      "namespace": "bevy_math::bounding::bounded3d::Aabb3d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded3d::Aabb3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::bounded3d::Aabb3d"
        }
      }
    },
    "bevy_math::bounding::bounded3d::Aabb3d::eq": {
      "namespace": "bevy_math::bounding::bounded3d::Aabb3d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded3d::Aabb3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded3d::Aabb3d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::bounding::bounded3d::BoundingSphere::aabb_3d": {
      "namespace": "bevy_math::bounding::bounded3d::BoundingSphere",
      "identifier": "aabb_3d",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded3d::BoundingSphere"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::bounded3d::Aabb3d"
        }
      },
      "documentation": " Computes the smallest [`Aabb3d`] containing this [`BoundingSphere`]."
    },
    "bevy_math::bounding::bounded3d::BoundingSphere::clone": {
      "namespace": "bevy_math::bounding::bounded3d::BoundingSphere",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded3d::BoundingSphere"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::bounded3d::BoundingSphere"
        }
      }
    },
    "bevy_math::bounding::bounded3d::BoundingSphere::eq": {
      "namespace": "bevy_math::bounding::bounded3d::BoundingSphere",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded3d::BoundingSphere"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded3d::BoundingSphere"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::bounding::bounded3d::BoundingSphere::radius": {
      "namespace": "bevy_math::bounding::bounded3d::BoundingSphere",
      "identifier": "radius",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded3d::BoundingSphere"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the radius of the bounding sphere"
    },
    "bevy_math::bounding::raycast2d::AabbCast2d::aabb_collision_at": {
      "namespace": "bevy_math::bounding::raycast2d::AabbCast2d",
      "identifier": "aabb_collision_at",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast2d::AabbCast2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::bounding::bounded2d::Aabb2d"
          },
          "name": "aabb"
        }
      ],
      "return_type": {
        "kind": {
          "option": {
            "primitive": "f32"
          }
        }
      },
      "documentation": " Get the distance at which the [`Aabb2d`]s collide, if at all."
    },
    "bevy_math::bounding::raycast2d::AabbCast2d::clone": {
      "namespace": "bevy_math::bounding::raycast2d::AabbCast2d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast2d::AabbCast2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::raycast2d::AabbCast2d"
        }
      }
    },
    "bevy_math::bounding::raycast2d::AabbCast2d::from_ray": {
      "namespace": "bevy_math::bounding::raycast2d::AabbCast2d",
      "identifier": "from_ray",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::bounding::bounded2d::Aabb2d"
          },
          "name": "aabb"
        },
        {
          "kind": {
            "val": "bevy_math::ray::Ray2d"
          },
          "name": "ray"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::raycast2d::AabbCast2d"
        }
      },
      "documentation": " Construct an [`AabbCast2d`] from an [`Aabb2d`], [`Ray2d`], and max distance."
    },
    "bevy_math::bounding::raycast2d::AabbCast2d::new": {
      "namespace": "bevy_math::bounding::raycast2d::AabbCast2d",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::bounding::bounded2d::Aabb2d"
          },
          "name": "aabb"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "origin"
        },
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "direction"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::raycast2d::AabbCast2d"
        }
      },
      "documentation": " Construct an [`AabbCast2d`] from an [`Aabb2d`], origin, [`Dir2`], and max distance."
    },
    "bevy_math::bounding::raycast2d::BoundingCircleCast::circle_collision_at": {
      "namespace": "bevy_math::bounding::raycast2d::BoundingCircleCast",
      "identifier": "circle_collision_at",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast2d::BoundingCircleCast"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::bounding::bounded2d::BoundingCircle"
          },
          "name": "circle"
        }
      ],
      "return_type": {
        "kind": {
          "option": {
            "primitive": "f32"
          }
        }
      },
      "documentation": " Get the distance at which the [`BoundingCircle`]s collide, if at all."
    },
    "bevy_math::bounding::raycast2d::BoundingCircleCast::clone": {
      "namespace": "bevy_math::bounding::raycast2d::BoundingCircleCast",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast2d::BoundingCircleCast"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::raycast2d::BoundingCircleCast"
        }
      }
    },
    "bevy_math::bounding::raycast2d::BoundingCircleCast::from_ray": {
      "namespace": "bevy_math::bounding::raycast2d::BoundingCircleCast",
      "identifier": "from_ray",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::bounding::bounded2d::BoundingCircle"
          },
          "name": "circle"
        },
        {
          "kind": {
            "val": "bevy_math::ray::Ray2d"
          },
          "name": "ray"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::raycast2d::BoundingCircleCast"
        }
      },
      "documentation": " Construct a [`BoundingCircleCast`] from a [`BoundingCircle`], [`Ray2d`], and max distance."
    },
    "bevy_math::bounding::raycast2d::BoundingCircleCast::new": {
      "namespace": "bevy_math::bounding::raycast2d::BoundingCircleCast",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::bounding::bounded2d::BoundingCircle"
          },
          "name": "circle"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "origin"
        },
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "direction"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::raycast2d::BoundingCircleCast"
        }
      },
      "documentation": " Construct a [`BoundingCircleCast`] from a [`BoundingCircle`], origin, [`Dir2`], and max distance."
    },
    "bevy_math::bounding::raycast2d::RayCast2d::aabb_intersection_at": {
      "namespace": "bevy_math::bounding::raycast2d::RayCast2d",
      "identifier": "aabb_intersection_at",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast2d::RayCast2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded2d::Aabb2d"
          },
          "name": "aabb"
        }
      ],
      "return_type": {
        "kind": {
          "option": {
            "primitive": "f32"
          }
        }
      },
      "documentation": " Get the distance of an intersection with an [`Aabb2d`], if any."
    },
    "bevy_math::bounding::raycast2d::RayCast2d::circle_intersection_at": {
      "namespace": "bevy_math::bounding::raycast2d::RayCast2d",
      "identifier": "circle_intersection_at",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast2d::RayCast2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded2d::BoundingCircle"
          },
          "name": "circle"
        }
      ],
      "return_type": {
        "kind": {
          "option": {
            "primitive": "f32"
          }
        }
      },
      "documentation": " Get the distance of an intersection with a [`BoundingCircle`], if any."
    },
    "bevy_math::bounding::raycast2d::RayCast2d::clone": {
      "namespace": "bevy_math::bounding::raycast2d::RayCast2d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast2d::RayCast2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::raycast2d::RayCast2d"
        }
      }
    },
    "bevy_math::bounding::raycast2d::RayCast2d::direction_recip": {
      "namespace": "bevy_math::bounding::raycast2d::RayCast2d",
      "identifier": "direction_recip",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast2d::RayCast2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Get the cached multiplicative inverse of the direction of the ray."
    },
    "bevy_math::bounding::raycast2d::RayCast2d::from_ray": {
      "namespace": "bevy_math::bounding::raycast2d::RayCast2d",
      "identifier": "from_ray",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::ray::Ray2d"
          },
          "name": "ray"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::raycast2d::RayCast2d"
        }
      },
      "documentation": " Construct a [`RayCast2d`] from a [`Ray2d`] and max distance."
    },
    "bevy_math::bounding::raycast2d::RayCast2d::new": {
      "namespace": "bevy_math::bounding::raycast2d::RayCast2d",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "origin"
        },
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "direction"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::raycast2d::RayCast2d"
        }
      },
      "documentation": " Construct a [`RayCast2d`] from an origin, [`Dir2`], and max distance."
    },
    "bevy_math::bounding::raycast3d::AabbCast3d::aabb_collision_at": {
      "namespace": "bevy_math::bounding::raycast3d::AabbCast3d",
      "identifier": "aabb_collision_at",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast3d::AabbCast3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::bounding::bounded3d::Aabb3d"
          },
          "name": "aabb"
        }
      ],
      "return_type": {
        "kind": {
          "option": {
            "primitive": "f32"
          }
        }
      },
      "documentation": " Get the distance at which the [`Aabb3d`]s collide, if at all."
    },
    "bevy_math::bounding::raycast3d::AabbCast3d::clone": {
      "namespace": "bevy_math::bounding::raycast3d::AabbCast3d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast3d::AabbCast3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::raycast3d::AabbCast3d"
        }
      }
    },
    "bevy_math::bounding::raycast3d::AabbCast3d::from_ray": {
      "namespace": "bevy_math::bounding::raycast3d::AabbCast3d",
      "identifier": "from_ray",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::bounding::bounded3d::Aabb3d"
          },
          "name": "aabb"
        },
        {
          "kind": {
            "val": "bevy_math::ray::Ray3d"
          },
          "name": "ray"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::raycast3d::AabbCast3d"
        }
      },
      "documentation": " Construct an [`AabbCast3d`] from an [`Aabb3d`], [`Ray3d`], and max distance."
    },
    "bevy_math::bounding::raycast3d::BoundingSphereCast::clone": {
      "namespace": "bevy_math::bounding::raycast3d::BoundingSphereCast",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast3d::BoundingSphereCast"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::raycast3d::BoundingSphereCast"
        }
      }
    },
    "bevy_math::bounding::raycast3d::BoundingSphereCast::from_ray": {
      "namespace": "bevy_math::bounding::raycast3d::BoundingSphereCast",
      "identifier": "from_ray",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::bounding::bounded3d::BoundingSphere"
          },
          "name": "sphere"
        },
        {
          "kind": {
            "val": "bevy_math::ray::Ray3d"
          },
          "name": "ray"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::raycast3d::BoundingSphereCast"
        }
      },
      "documentation": " Construct a [`BoundingSphereCast`] from a [`BoundingSphere`], [`Ray3d`], and max distance."
    },
    "bevy_math::bounding::raycast3d::BoundingSphereCast::sphere_collision_at": {
      "namespace": "bevy_math::bounding::raycast3d::BoundingSphereCast",
      "identifier": "sphere_collision_at",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast3d::BoundingSphereCast"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::bounding::bounded3d::BoundingSphere"
          },
          "name": "sphere"
        }
      ],
      "return_type": {
        "kind": {
          "option": {
            "primitive": "f32"
          }
        }
      },
      "documentation": " Get the distance at which the [`BoundingSphere`]s collide, if at all."
    },
    "bevy_math::bounding::raycast3d::RayCast3d::aabb_intersection_at": {
      "namespace": "bevy_math::bounding::raycast3d::RayCast3d",
      "identifier": "aabb_intersection_at",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast3d::RayCast3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded3d::Aabb3d"
          },
          "name": "aabb"
        }
      ],
      "return_type": {
        "kind": {
          "option": {
            "primitive": "f32"
          }
        }
      },
      "documentation": " Get the distance of an intersection with an [`Aabb3d`], if any."
    },
    "bevy_math::bounding::raycast3d::RayCast3d::clone": {
      "namespace": "bevy_math::bounding::raycast3d::RayCast3d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast3d::RayCast3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::raycast3d::RayCast3d"
        }
      }
    },
    "bevy_math::bounding::raycast3d::RayCast3d::direction_recip": {
      "namespace": "bevy_math::bounding::raycast3d::RayCast3d",
      "identifier": "direction_recip",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast3d::RayCast3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Get the cached multiplicative inverse of the direction of the ray."
    },
    "bevy_math::bounding::raycast3d::RayCast3d::from_ray": {
      "namespace": "bevy_math::bounding::raycast3d::RayCast3d",
      "identifier": "from_ray",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::ray::Ray3d"
          },
          "name": "ray"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::raycast3d::RayCast3d"
        }
      },
      "documentation": " Construct a [`RayCast3d`] from a [`Ray3d`] and max distance."
    },
    "bevy_math::bounding::raycast3d::RayCast3d::sphere_intersection_at": {
      "namespace": "bevy_math::bounding::raycast3d::RayCast3d",
      "identifier": "sphere_intersection_at",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast3d::RayCast3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded3d::BoundingSphere"
          },
          "name": "sphere"
        }
      ],
      "return_type": {
        "kind": {
          "option": {
            "primitive": "f32"
          }
        }
      },
      "documentation": " Get the distance of an intersection with a [`BoundingSphere`], if any."
    },
    "bevy_math::compass::CompassOctant::assert_receiver_is_total_eq": {
      "namespace": "bevy_math::compass::CompassOctant",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::compass::CompassOctant"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_math::compass::CompassOctant::clone": {
      "namespace": "bevy_math::compass::CompassOctant",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::compass::CompassOctant"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::compass::CompassOctant"
        }
      }
    },
    "bevy_math::compass::CompassOctant::eq": {
      "namespace": "bevy_math::compass::CompassOctant",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::compass::CompassOctant"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::compass::CompassOctant"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::compass::CompassOctant::neg": {
      "namespace": "bevy_math::compass::CompassOctant",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::compass::CompassOctant"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::compass::CompassOctant"
        }
      }
    },
    "bevy_math::compass::CompassOctant::opposite": {
      "namespace": "bevy_math::compass::CompassOctant",
      "identifier": "opposite",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::compass::CompassOctant"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::compass::CompassOctant"
        }
      },
      "documentation": " Returns the opposite [`CompassOctant`], located 180 degrees from `self`.\n This can also be accessed via the `-` operator, using the [`Neg`] trait."
    },
    "bevy_math::compass::CompassOctant::to_index": {
      "namespace": "bevy_math::compass::CompassOctant",
      "identifier": "to_index",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::compass::CompassOctant"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "usize"
        }
      },
      "documentation": " Converts a [`CompassOctant`] to a standard index.\n Starts at 0 for [`CompassOctant::North`] and increments clockwise."
    },
    "bevy_math::compass::CompassQuadrant::assert_receiver_is_total_eq": {
      "namespace": "bevy_math::compass::CompassQuadrant",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::compass::CompassQuadrant"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_math::compass::CompassQuadrant::clone": {
      "namespace": "bevy_math::compass::CompassQuadrant",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::compass::CompassQuadrant"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::compass::CompassQuadrant"
        }
      }
    },
    "bevy_math::compass::CompassQuadrant::eq": {
      "namespace": "bevy_math::compass::CompassQuadrant",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::compass::CompassQuadrant"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::compass::CompassQuadrant"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::compass::CompassQuadrant::neg": {
      "namespace": "bevy_math::compass::CompassQuadrant",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::compass::CompassQuadrant"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::compass::CompassQuadrant"
        }
      }
    },
    "bevy_math::compass::CompassQuadrant::opposite": {
      "namespace": "bevy_math::compass::CompassQuadrant",
      "identifier": "opposite",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::compass::CompassQuadrant"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::compass::CompassQuadrant"
        }
      },
      "documentation": " Returns the opposite [`CompassQuadrant`], located 180 degrees from `self`.\n This can also be accessed via the `-` operator, using the [`Neg`] trait."
    },
    "bevy_math::compass::CompassQuadrant::to_index": {
      "namespace": "bevy_math::compass::CompassQuadrant",
      "identifier": "to_index",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::compass::CompassQuadrant"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "usize"
        }
      },
      "documentation": " Converts a [`CompassQuadrant`] to a standard index.\n Starts at 0 for [`CompassQuadrant::North`] and increments clockwise."
    },
    "bevy_math::curve::easing::EaseFunction::clone": {
      "namespace": "bevy_math::curve::easing::EaseFunction",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::curve::easing::EaseFunction"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::curve::easing::EaseFunction"
        }
      }
    },
    "bevy_math::curve::easing::EaseFunction::eq": {
      "namespace": "bevy_math::curve::easing::EaseFunction",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::curve::easing::EaseFunction"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::curve::easing::EaseFunction"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::curve::easing::JumpAt::assert_receiver_is_total_eq": {
      "namespace": "bevy_math::curve::easing::JumpAt",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::curve::easing::JumpAt"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_math::curve::easing::JumpAt::clone": {
      "namespace": "bevy_math::curve::easing::JumpAt",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::curve::easing::JumpAt"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::curve::easing::JumpAt"
        }
      }
    },
    "bevy_math::curve::easing::JumpAt::eq": {
      "namespace": "bevy_math::curve::easing::JumpAt",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::curve::easing::JumpAt"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::curve::easing::JumpAt"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::curve::interval::Interval::clamp": {
      "namespace": "bevy_math::curve::interval::Interval",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::curve::interval::Interval"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Clamp the given `value` to lie within this interval."
    },
    "bevy_math::curve::interval::Interval::clone": {
      "namespace": "bevy_math::curve::interval::Interval",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::curve::interval::Interval"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::curve::interval::Interval"
        }
      }
    },
    "bevy_math::curve::interval::Interval::contains": {
      "namespace": "bevy_math::curve::interval::Interval",
      "identifier": "contains",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::curve::interval::Interval"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "item"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if `item` is contained in this interval."
    },
    "bevy_math::curve::interval::Interval::contains_interval": {
      "namespace": "bevy_math::curve::interval::Interval",
      "identifier": "contains_interval",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::curve::interval::Interval"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::curve::interval::Interval"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if the other interval is contained in this interval.\n This is non-strict: each interval will contain itself."
    },
    "bevy_math::curve::interval::Interval::end": {
      "namespace": "bevy_math::curve::interval::Interval",
      "identifier": "end",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::curve::interval::Interval"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the end of this interval."
    },
    "bevy_math::curve::interval::Interval::eq": {
      "namespace": "bevy_math::curve::interval::Interval",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::curve::interval::Interval"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::curve::interval::Interval"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::curve::interval::Interval::has_finite_end": {
      "namespace": "bevy_math::curve::interval::Interval",
      "identifier": "has_finite_end",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::curve::interval::Interval"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if this interval has a finite end."
    },
    "bevy_math::curve::interval::Interval::has_finite_start": {
      "namespace": "bevy_math::curve::interval::Interval",
      "identifier": "has_finite_start",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::curve::interval::Interval"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if this interval has a finite start."
    },
    "bevy_math::curve::interval::Interval::is_bounded": {
      "namespace": "bevy_math::curve::interval::Interval",
      "identifier": "is_bounded",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::curve::interval::Interval"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if this interval is bounded — that is, if both its start and end are finite.\n Equivalently, an interval is bounded if its length is finite."
    },
    "bevy_math::curve::interval::Interval::length": {
      "namespace": "bevy_math::curve::interval::Interval",
      "identifier": "length",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::curve::interval::Interval"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the length of this interval. Note that the result may be infinite (`f32::INFINITY`)."
    },
    "bevy_math::curve::interval::Interval::start": {
      "namespace": "bevy_math::curve::interval::Interval",
      "identifier": "start",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::curve::interval::Interval"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the start of this interval."
    },
    "bevy_math::direction::Dir2::as_vec2": {
      "namespace": "bevy_math::direction::Dir2",
      "identifier": "as_vec2",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::direction::Dir2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns the inner [`Vec2`]"
    },
    "bevy_math::direction::Dir2::clone": {
      "namespace": "bevy_math::direction::Dir2",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::direction::Dir2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir2"
        }
      }
    },
    "bevy_math::direction::Dir2::eq": {
      "namespace": "bevy_math::direction::Dir2",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::direction::Dir2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::direction::Dir2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::direction::Dir2::fast_renormalize": {
      "namespace": "bevy_math::direction::Dir2",
      "identifier": "fast_renormalize",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir2"
        }
      },
      "documentation": " Returns `self` after an approximate normalization, assuming the value is already nearly normalized.\n Useful for preventing numerical error accumulation.\n See [`Dir3::fast_renormalize`] for an example of when such error accumulation might occur."
    },
    "bevy_math::direction::Dir2::from_xy_unchecked": {
      "namespace": "bevy_math::direction::Dir2",
      "identifier": "from_xy_unchecked",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir2"
        }
      },
      "documentation": " Create a direction from its `x` and `y` components, assuming the resulting vector is normalized.\n # Warning\n The vector produced from `x` and `y` must be normalized, i.e its length must be `1.0`."
    },
    "bevy_math::direction::Dir2::mul": {
      "namespace": "bevy_math::direction::Dir2",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "bevy_math::direction::Dir2::neg": {
      "namespace": "bevy_math::direction::Dir2",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir2"
        }
      }
    },
    "bevy_math::direction::Dir2::new_unchecked": {
      "namespace": "bevy_math::direction::Dir2",
      "identifier": "new_unchecked",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir2"
        }
      },
      "documentation": " Create a [`Dir2`] from a [`Vec2`] that is already normalized.\n # Warning\n `value` must be normalized, i.e its length must be `1.0`."
    },
    "bevy_math::direction::Dir2::rotation_from": {
      "namespace": "bevy_math::direction::Dir2",
      "identifier": "rotation_from",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      },
      "documentation": " Get the rotation that rotates `other` to this direction."
    },
    "bevy_math::direction::Dir2::rotation_from_x": {
      "namespace": "bevy_math::direction::Dir2",
      "identifier": "rotation_from_x",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      },
      "documentation": " Get the rotation that rotates the X-axis to this direction."
    },
    "bevy_math::direction::Dir2::rotation_from_y": {
      "namespace": "bevy_math::direction::Dir2",
      "identifier": "rotation_from_y",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      },
      "documentation": " Get the rotation that rotates the Y-axis to this direction."
    },
    "bevy_math::direction::Dir2::rotation_to": {
      "namespace": "bevy_math::direction::Dir2",
      "identifier": "rotation_to",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      },
      "documentation": " Get the rotation that rotates this direction to `other`."
    },
    "bevy_math::direction::Dir2::rotation_to_x": {
      "namespace": "bevy_math::direction::Dir2",
      "identifier": "rotation_to_x",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      },
      "documentation": " Get the rotation that rotates this direction to the X-axis."
    },
    "bevy_math::direction::Dir2::rotation_to_y": {
      "namespace": "bevy_math::direction::Dir2",
      "identifier": "rotation_to_y",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      },
      "documentation": " Get the rotation that rotates this direction to the Y-axis."
    },
    "bevy_math::direction::Dir2::slerp": {
      "namespace": "bevy_math::direction::Dir2",
      "identifier": "slerp",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir2"
        }
      },
      "documentation": " Performs a spherical linear interpolation between `self` and `rhs`\n based on the value `s`.\n This corresponds to interpolating between the two directions at a constant angular velocity.\n When `s == 0.0`, the result will be equal to `self`.\n When `s == 1.0`, the result will be equal to `rhs`.\n # Example\n ```\n # use bevy_math::Dir2;\n # use approx::{assert_relative_eq, RelativeEq};\n #\n let dir1 = Dir2::X;\n let dir2 = Dir2::Y;\n let result1 = dir1.slerp(dir2, 1.0 / 3.0);\n #[cfg(feature = \"approx\")]\n assert_relative_eq!(result1, Dir2::from_xy(0.75_f32.sqrt(), 0.5).unwrap());\n let result2 = dir1.slerp(dir2, 0.5);\n #[cfg(feature = \"approx\")]\n assert_relative_eq!(result2, Dir2::from_xy(0.5_f32.sqrt(), 0.5_f32.sqrt()).unwrap());\n ```"
    },
    "bevy_math::direction::Dir3::as_vec3": {
      "namespace": "bevy_math::direction::Dir3",
      "identifier": "as_vec3",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::direction::Dir3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns the inner [`Vec3`]"
    },
    "bevy_math::direction::Dir3::clone": {
      "namespace": "bevy_math::direction::Dir3",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::direction::Dir3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      }
    },
    "bevy_math::direction::Dir3::eq": {
      "namespace": "bevy_math::direction::Dir3",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::direction::Dir3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::direction::Dir3"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::direction::Dir3::fast_renormalize": {
      "namespace": "bevy_math::direction::Dir3",
      "identifier": "fast_renormalize",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": " Returns `self` after an approximate normalization, assuming the value is already nearly normalized.\n Useful for preventing numerical error accumulation.\n # Example\n The following seemingly benign code would start accumulating errors over time,\n leading to `dir` eventually not being normalized anymore.\n ```\n # use bevy_math::prelude::*;\n # let N: usize = 200;\n let mut dir = Dir3::X;\n let quaternion = Quat::from_euler(EulerRot::XYZ, 1.0, 2.0, 3.0);\n for i in 0..N {\n     dir = quaternion * dir;\n }\n ```\n Instead, do the following.\n ```\n # use bevy_math::prelude::*;\n # let N: usize = 200;\n let mut dir = Dir3::X;\n let quaternion = Quat::from_euler(EulerRot::XYZ, 1.0, 2.0, 3.0);\n for i in 0..N {\n     dir = quaternion * dir;\n     dir = dir.fast_renormalize();\n }\n ```"
    },
    "bevy_math::direction::Dir3::from_xyz_unchecked": {
      "namespace": "bevy_math::direction::Dir3",
      "identifier": "from_xyz_unchecked",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": " Create a direction from its `x`, `y`, and `z` components, assuming the resulting vector is normalized.\n # Warning\n The vector produced from `x`, `y`, and `z` must be normalized, i.e its length must be `1.0`."
    },
    "bevy_math::direction::Dir3::mul": {
      "namespace": "bevy_math::direction::Dir3",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "bevy_math::direction::Dir3::neg": {
      "namespace": "bevy_math::direction::Dir3",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      }
    },
    "bevy_math::direction::Dir3::new_unchecked": {
      "namespace": "bevy_math::direction::Dir3",
      "identifier": "new_unchecked",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": " Create a [`Dir3`] from a [`Vec3`] that is already normalized.\n # Warning\n `value` must be normalized, i.e its length must be `1.0`."
    },
    "bevy_math::direction::Dir3::slerp": {
      "namespace": "bevy_math::direction::Dir3",
      "identifier": "slerp",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::direction::Dir3"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": " Performs a spherical linear interpolation between `self` and `rhs`\n based on the value `s`.\n This corresponds to interpolating between the two directions at a constant angular velocity.\n When `s == 0.0`, the result will be equal to `self`.\n When `s == 1.0`, the result will be equal to `rhs`.\n # Example\n ```\n # use bevy_math::Dir3;\n # use approx::{assert_relative_eq, RelativeEq};\n #\n let dir1 = Dir3::X;\n let dir2 = Dir3::Y;\n let result1 = dir1.slerp(dir2, 1.0 / 3.0);\n #[cfg(feature = \"approx\")]\n assert_relative_eq!(\n     result1,\n     Dir3::from_xyz(0.75_f32.sqrt(), 0.5, 0.0).unwrap(),\n     epsilon = 0.000001\n );\n let result2 = dir1.slerp(dir2, 0.5);\n #[cfg(feature = \"approx\")]\n assert_relative_eq!(result2, Dir3::from_xyz(0.5_f32.sqrt(), 0.5_f32.sqrt(), 0.0).unwrap());\n ```"
    },
    "bevy_math::direction::Dir3A::as_vec3a": {
      "namespace": "bevy_math::direction::Dir3A",
      "identifier": "as_vec3a",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::direction::Dir3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns the inner [`Vec3A`]"
    },
    "bevy_math::direction::Dir3A::clone": {
      "namespace": "bevy_math::direction::Dir3A",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::direction::Dir3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3A"
        }
      }
    },
    "bevy_math::direction::Dir3A::eq": {
      "namespace": "bevy_math::direction::Dir3A",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::direction::Dir3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::direction::Dir3A"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::direction::Dir3A::fast_renormalize": {
      "namespace": "bevy_math::direction::Dir3A",
      "identifier": "fast_renormalize",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3A"
        }
      },
      "documentation": " Returns `self` after an approximate normalization, assuming the value is already nearly normalized.\n Useful for preventing numerical error accumulation.\n See [`Dir3::fast_renormalize`] for an example of when such error accumulation might occur."
    },
    "bevy_math::direction::Dir3A::from_xyz_unchecked": {
      "namespace": "bevy_math::direction::Dir3A",
      "identifier": "from_xyz_unchecked",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3A"
        }
      },
      "documentation": " Create a direction from its `x`, `y`, and `z` components, assuming the resulting vector is normalized.\n # Warning\n The vector produced from `x`, `y`, and `z` must be normalized, i.e its length must be `1.0`."
    },
    "bevy_math::direction::Dir3A::mul": {
      "namespace": "bevy_math::direction::Dir3A",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "bevy_math::direction::Dir3A::neg": {
      "namespace": "bevy_math::direction::Dir3A",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3A"
        }
      }
    },
    "bevy_math::direction::Dir3A::new_unchecked": {
      "namespace": "bevy_math::direction::Dir3A",
      "identifier": "new_unchecked",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3A"
        }
      },
      "documentation": " Create a [`Dir3A`] from a [`Vec3A`] that is already normalized.\n # Warning\n `value` must be normalized, i.e its length must be `1.0`."
    },
    "bevy_math::direction::Dir3A::slerp": {
      "namespace": "bevy_math::direction::Dir3A",
      "identifier": "slerp",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::direction::Dir3A"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3A"
        }
      },
      "documentation": " Performs a spherical linear interpolation between `self` and `rhs`\n based on the value `s`.\n This corresponds to interpolating between the two directions at a constant angular velocity.\n When `s == 0.0`, the result will be equal to `self`.\n When `s == 1.0`, the result will be equal to `rhs`.\n # Example\n ```\n # use bevy_math::Dir3A;\n # use approx::{assert_relative_eq, RelativeEq};\n #\n let dir1 = Dir3A::X;\n let dir2 = Dir3A::Y;\n let result1 = dir1.slerp(dir2, 1.0 / 3.0);\n #[cfg(feature = \"approx\")]\n assert_relative_eq!(\n     result1,\n     Dir3A::from_xyz(0.75_f32.sqrt(), 0.5, 0.0).unwrap(),\n     epsilon = 0.000001\n );\n let result2 = dir1.slerp(dir2, 0.5);\n #[cfg(feature = \"approx\")]\n assert_relative_eq!(result2, Dir3A::from_xyz(0.5_f32.sqrt(), 0.5_f32.sqrt(), 0.0).unwrap());\n ```"
    },
    "bevy_math::float_ord::FloatOrd::clone": {
      "namespace": "bevy_math::float_ord::FloatOrd",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::float_ord::FloatOrd"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::float_ord::FloatOrd"
        }
      }
    },
    "bevy_math::float_ord::FloatOrd::eq": {
      "namespace": "bevy_math::float_ord::FloatOrd",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::float_ord::FloatOrd"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::float_ord::FloatOrd"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::float_ord::FloatOrd::ge": {
      "namespace": "bevy_math::float_ord::FloatOrd",
      "identifier": "ge",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::float_ord::FloatOrd"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::float_ord::FloatOrd"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::float_ord::FloatOrd::gt": {
      "namespace": "bevy_math::float_ord::FloatOrd",
      "identifier": "gt",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::float_ord::FloatOrd"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::float_ord::FloatOrd"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::float_ord::FloatOrd::le": {
      "namespace": "bevy_math::float_ord::FloatOrd",
      "identifier": "le",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::float_ord::FloatOrd"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::float_ord::FloatOrd"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::float_ord::FloatOrd::lt": {
      "namespace": "bevy_math::float_ord::FloatOrd",
      "identifier": "lt",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::float_ord::FloatOrd"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::float_ord::FloatOrd"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::float_ord::FloatOrd::neg": {
      "namespace": "bevy_math::float_ord::FloatOrd",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::float_ord::FloatOrd"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::float_ord::FloatOrd"
        }
      }
    },
    "bevy_math::isometry::Isometry2d::clone": {
      "namespace": "bevy_math::isometry::Isometry2d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::isometry::Isometry2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry2d"
        }
      }
    },
    "bevy_math::isometry::Isometry2d::eq": {
      "namespace": "bevy_math::isometry::Isometry2d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::isometry::Isometry2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::isometry::Isometry2d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::isometry::Isometry2d::from_rotation": {
      "namespace": "bevy_math::isometry::Isometry2d",
      "identifier": "from_rotation",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry2d"
        }
      },
      "documentation": " Create a two-dimensional isometry from a rotation."
    },
    "bevy_math::isometry::Isometry2d::from_translation": {
      "namespace": "bevy_math::isometry::Isometry2d",
      "identifier": "from_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry2d"
        }
      },
      "documentation": " Create a two-dimensional isometry from a translation."
    },
    "bevy_math::isometry::Isometry2d::from_xy": {
      "namespace": "bevy_math::isometry::Isometry2d",
      "identifier": "from_xy",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry2d"
        }
      },
      "documentation": " Create a two-dimensional isometry from a translation with the given `x` and `y` components."
    },
    "bevy_math::isometry::Isometry2d::inverse": {
      "namespace": "bevy_math::isometry::Isometry2d",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::isometry::Isometry2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry2d"
        }
      },
      "documentation": " The inverse isometry that undoes this one."
    },
    "bevy_math::isometry::Isometry2d::inverse_mul": {
      "namespace": "bevy_math::isometry::Isometry2d",
      "identifier": "inverse_mul",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::isometry::Isometry2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::isometry::Isometry2d"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry2d"
        }
      },
      "documentation": " Compute `iso1.inverse() * iso2` in a more efficient way for one-shot cases.\n If the same isometry is used multiple times, it is more efficient to instead compute\n the inverse once and use that for each transformation."
    },
    "bevy_math::isometry::Isometry2d::inverse_transform_point": {
      "namespace": "bevy_math::isometry::Isometry2d",
      "identifier": "inverse_transform_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::isometry::Isometry2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Transform a point by rotating and translating it using the inverse of this isometry.\n This is more efficient than `iso.inverse().transform_point(point)` for one-shot cases.\n If the same isometry is used multiple times, it is more efficient to instead compute\n the inverse once and use that for each transformation."
    },
    "bevy_math::isometry::Isometry2d::mul": {
      "namespace": "bevy_math::isometry::Isometry2d",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::isometry::Isometry2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::isometry::Isometry2d"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry2d"
        }
      }
    },
    "bevy_math::isometry::Isometry2d::mul-1": {
      "namespace": "bevy_math::isometry::Isometry2d",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::isometry::Isometry2d"
          }
        },
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir2"
        }
      }
    },
    "bevy_math::isometry::Isometry2d::mul-2": {
      "namespace": "bevy_math::isometry::Isometry2d",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::isometry::Isometry2d"
          }
        },
        {
          "kind": {
            "val": "glam::Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "bevy_math::isometry::Isometry2d::new": {
      "namespace": "bevy_math::isometry::Isometry2d",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "translation"
        },
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry2d"
        }
      },
      "documentation": " Create a two-dimensional isometry from a rotation and a translation."
    },
    "bevy_math::isometry::Isometry2d::transform_point": {
      "namespace": "bevy_math::isometry::Isometry2d",
      "identifier": "transform_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::isometry::Isometry2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Transform a point by rotating and translating it using this isometry."
    },
    "bevy_math::isometry::Isometry3d::clone": {
      "namespace": "bevy_math::isometry::Isometry3d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::isometry::Isometry3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry3d"
        }
      }
    },
    "bevy_math::isometry::Isometry3d::eq": {
      "namespace": "bevy_math::isometry::Isometry3d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::isometry::Isometry3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::isometry::Isometry3d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::isometry::Isometry3d::from_rotation": {
      "namespace": "bevy_math::isometry::Isometry3d",
      "identifier": "from_rotation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry3d"
        }
      },
      "documentation": " Create a three-dimensional isometry from a rotation."
    },
    "bevy_math::isometry::Isometry3d::from_xyz": {
      "namespace": "bevy_math::isometry::Isometry3d",
      "identifier": "from_xyz",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry3d"
        }
      },
      "documentation": " Create a three-dimensional isometry from a translation with the given `x`, `y`, and `z` components."
    },
    "bevy_math::isometry::Isometry3d::inverse": {
      "namespace": "bevy_math::isometry::Isometry3d",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::isometry::Isometry3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry3d"
        }
      },
      "documentation": " The inverse isometry that undoes this one."
    },
    "bevy_math::isometry::Isometry3d::inverse_mul": {
      "namespace": "bevy_math::isometry::Isometry3d",
      "identifier": "inverse_mul",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::isometry::Isometry3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::isometry::Isometry3d"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry3d"
        }
      },
      "documentation": " Compute `iso1.inverse() * iso2` in a more efficient way for one-shot cases.\n If the same isometry is used multiple times, it is more efficient to instead compute\n the inverse once and use that for each transformation."
    },
    "bevy_math::isometry::Isometry3d::mul": {
      "namespace": "bevy_math::isometry::Isometry3d",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::isometry::Isometry3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::isometry::Isometry3d"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry3d"
        }
      }
    },
    "bevy_math::isometry::Isometry3d::mul-1": {
      "namespace": "bevy_math::isometry::Isometry3d",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::isometry::Isometry3d"
          }
        },
        {
          "kind": {
            "val": "bevy_math::direction::Dir3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      }
    },
    "bevy_math::isometry::Isometry3d::mul-2": {
      "namespace": "bevy_math::isometry::Isometry3d",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::isometry::Isometry3d"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "bevy_math::isometry::Isometry3d::mul-3": {
      "namespace": "bevy_math::isometry::Isometry3d",
      "identifier": "mul-3",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::isometry::Isometry3d"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "bevy_math::primitives::dim2::Annulus::clone": {
      "namespace": "bevy_math::primitives::dim2::Annulus",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Annulus"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Annulus"
        }
      }
    },
    "bevy_math::primitives::dim2::Annulus::closest_point": {
      "namespace": "bevy_math::primitives::dim2::Annulus",
      "identifier": "closest_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Annulus"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Finds the point on the annulus that is closest to the given `point`:\n - If the point is outside of the annulus completely, the returned point will be on the outer perimeter.\n - If the point is inside of the inner circle (hole) of the annulus, the returned point will be on the inner perimeter.\n - Otherwise, the returned point is overlapping the annulus and returned as is."
    },
    "bevy_math::primitives::dim2::Annulus::diameter": {
      "namespace": "bevy_math::primitives::dim2::Annulus",
      "identifier": "diameter",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Annulus"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the diameter of the annulus"
    },
    "bevy_math::primitives::dim2::Annulus::eq": {
      "namespace": "bevy_math::primitives::dim2::Annulus",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Annulus"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Annulus"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim2::Annulus::new": {
      "namespace": "bevy_math::primitives::dim2::Annulus",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "inner_radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "outer_radius"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Annulus"
        }
      },
      "documentation": " Create a new [`Annulus`] from the radii of the inner and outer circle"
    },
    "bevy_math::primitives::dim2::Annulus::thickness": {
      "namespace": "bevy_math::primitives::dim2::Annulus",
      "identifier": "thickness",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Annulus"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the thickness of the annulus"
    },
    "bevy_math::primitives::dim2::Arc2d::angle": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "angle",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Arc2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the angle of the arc"
    },
    "bevy_math::primitives::dim2::Arc2d::apothem": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "apothem",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Arc2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the length of the apothem of this arc, that is,\n the distance from the center of the circle to the midpoint of the chord, in the direction of the midpoint of the arc.\n Equivalently, the [`radius`](Self::radius) minus the [`sagitta`](Self::sagitta).\n Note that for a [`major`](Self::is_major) arc, the apothem will be negative."
    },
    "bevy_math::primitives::dim2::Arc2d::chord_length": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "chord_length",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Arc2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the distance between the endpoints (the length of the chord)"
    },
    "bevy_math::primitives::dim2::Arc2d::chord_midpoint": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "chord_midpoint",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Arc2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Get the midpoint of the two endpoints (the midpoint of the chord)"
    },
    "bevy_math::primitives::dim2::Arc2d::clone": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Arc2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Arc2d"
        }
      }
    },
    "bevy_math::primitives::dim2::Arc2d::eq": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Arc2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Arc2d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim2::Arc2d::from_degrees": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "from_degrees",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Arc2d"
        }
      },
      "documentation": " Create a new [`Arc2d`] from a `radius` and an `angle` in degrees."
    },
    "bevy_math::primitives::dim2::Arc2d::from_radians": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "from_radians",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Arc2d"
        }
      },
      "documentation": " Create a new [`Arc2d`] from a `radius` and an `angle` in radians"
    },
    "bevy_math::primitives::dim2::Arc2d::from_turns": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "from_turns",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "fraction"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Arc2d"
        }
      },
      "documentation": " Create a new [`Arc2d`] from a `radius` and a `fraction` of a single turn.\n For instance, `0.5` turns is a semicircle."
    },
    "bevy_math::primitives::dim2::Arc2d::half_chord_length": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "half_chord_length",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Arc2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get half the distance between the endpoints (half the length of the chord)"
    },
    "bevy_math::primitives::dim2::Arc2d::is_major": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "is_major",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Arc2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Produces true if the arc is at least half a circle.\n **Note:** This is not the negation of [`is_minor`](Self::is_minor): an exact semicircle is both major and minor."
    },
    "bevy_math::primitives::dim2::Arc2d::is_minor": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "is_minor",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Arc2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Produces true if the arc is at most half a circle.\n **Note:** This is not the negation of [`is_major`](Self::is_major): an exact semicircle is both major and minor."
    },
    "bevy_math::primitives::dim2::Arc2d::left_endpoint": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "left_endpoint",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Arc2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Get the left-hand end point of the arc"
    },
    "bevy_math::primitives::dim2::Arc2d::length": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "length",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Arc2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the length of the arc"
    },
    "bevy_math::primitives::dim2::Arc2d::midpoint": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "midpoint",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Arc2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Get the midpoint of the arc"
    },
    "bevy_math::primitives::dim2::Arc2d::new": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "half_angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Arc2d"
        }
      },
      "documentation": " Create a new [`Arc2d`] from a `radius` and a `half_angle`"
    },
    "bevy_math::primitives::dim2::Arc2d::right_endpoint": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "right_endpoint",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Arc2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Get the right-hand end point of the arc"
    },
    "bevy_math::primitives::dim2::Arc2d::sagitta": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "sagitta",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Arc2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the length of the sagitta of this arc, that is,\n the length of the line between the midpoints of the arc and its chord.\n Equivalently, the height of the triangle whose base is the chord and whose apex is the midpoint of the arc.\n The sagitta is also the sum of the [`radius`](Self::radius) and the [`apothem`](Self::apothem)."
    },
    "bevy_math::primitives::dim2::Capsule2d::clone": {
      "namespace": "bevy_math::primitives::dim2::Capsule2d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Capsule2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Capsule2d"
        }
      }
    },
    "bevy_math::primitives::dim2::Capsule2d::eq": {
      "namespace": "bevy_math::primitives::dim2::Capsule2d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Capsule2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Capsule2d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim2::Capsule2d::new": {
      "namespace": "bevy_math::primitives::dim2::Capsule2d",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "length"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Capsule2d"
        }
      },
      "documentation": " Create a new `Capsule2d` from a radius and length"
    },
    "bevy_math::primitives::dim2::Capsule2d::to_inner_rectangle": {
      "namespace": "bevy_math::primitives::dim2::Capsule2d",
      "identifier": "to_inner_rectangle",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Capsule2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Rectangle"
        }
      },
      "documentation": " Get the part connecting the semicircular ends of the capsule as a [`Rectangle`]"
    },
    "bevy_math::primitives::dim2::Circle::clone": {
      "namespace": "bevy_math::primitives::dim2::Circle",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Circle"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Circle"
        }
      }
    },
    "bevy_math::primitives::dim2::Circle::closest_point": {
      "namespace": "bevy_math::primitives::dim2::Circle",
      "identifier": "closest_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Circle"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Finds the point on the circle that is closest to the given `point`.\n If the point is outside the circle, the returned point will be on the perimeter of the circle.\n Otherwise, it will be inside the circle and returned as is."
    },
    "bevy_math::primitives::dim2::Circle::diameter": {
      "namespace": "bevy_math::primitives::dim2::Circle",
      "identifier": "diameter",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Circle"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the diameter of the circle"
    },
    "bevy_math::primitives::dim2::Circle::eq": {
      "namespace": "bevy_math::primitives::dim2::Circle",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Circle"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Circle"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim2::Circle::new": {
      "namespace": "bevy_math::primitives::dim2::Circle",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Circle"
        }
      },
      "documentation": " Create a new [`Circle`] from a `radius`"
    },
    "bevy_math::primitives::dim2::CircularSector::angle": {
      "namespace": "bevy_math::primitives::dim2::CircularSector",
      "identifier": "angle",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSector"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the angle of the sector"
    },
    "bevy_math::primitives::dim2::CircularSector::apothem": {
      "namespace": "bevy_math::primitives::dim2::CircularSector",
      "identifier": "apothem",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSector"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the length of the apothem of this sector\n See [`Arc2d::apothem`]"
    },
    "bevy_math::primitives::dim2::CircularSector::arc_length": {
      "namespace": "bevy_math::primitives::dim2::CircularSector",
      "identifier": "arc_length",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSector"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the length of the arc defining the sector"
    },
    "bevy_math::primitives::dim2::CircularSector::chord_length": {
      "namespace": "bevy_math::primitives::dim2::CircularSector",
      "identifier": "chord_length",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSector"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the length of the chord defined by the sector\n See [`Arc2d::chord_length`]"
    },
    "bevy_math::primitives::dim2::CircularSector::chord_midpoint": {
      "namespace": "bevy_math::primitives::dim2::CircularSector",
      "identifier": "chord_midpoint",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSector"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Get the midpoint of the chord defined by the sector\n See [`Arc2d::chord_midpoint`]"
    },
    "bevy_math::primitives::dim2::CircularSector::clone": {
      "namespace": "bevy_math::primitives::dim2::CircularSector",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSector"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::CircularSector"
        }
      }
    },
    "bevy_math::primitives::dim2::CircularSector::eq": {
      "namespace": "bevy_math::primitives::dim2::CircularSector",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSector"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSector"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim2::CircularSector::from_degrees": {
      "namespace": "bevy_math::primitives::dim2::CircularSector",
      "identifier": "from_degrees",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::CircularSector"
        }
      },
      "documentation": " Create a new [`CircularSector`] from a `radius` and an `angle` in degrees."
    },
    "bevy_math::primitives::dim2::CircularSector::from_radians": {
      "namespace": "bevy_math::primitives::dim2::CircularSector",
      "identifier": "from_radians",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::CircularSector"
        }
      },
      "documentation": " Create a new [`CircularSector`] from a `radius` and an `angle` in radians."
    },
    "bevy_math::primitives::dim2::CircularSector::from_turns": {
      "namespace": "bevy_math::primitives::dim2::CircularSector",
      "identifier": "from_turns",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "fraction"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::CircularSector"
        }
      },
      "documentation": " Create a new [`CircularSector`] from a `radius` and a number of `turns` of a circle.\n For instance, `0.5` turns is a semicircle."
    },
    "bevy_math::primitives::dim2::CircularSector::half_angle": {
      "namespace": "bevy_math::primitives::dim2::CircularSector",
      "identifier": "half_angle",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSector"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get half the angle of the sector"
    },
    "bevy_math::primitives::dim2::CircularSector::half_chord_length": {
      "namespace": "bevy_math::primitives::dim2::CircularSector",
      "identifier": "half_chord_length",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSector"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get half the length of the chord defined by the sector\n See [`Arc2d::half_chord_length`]"
    },
    "bevy_math::primitives::dim2::CircularSector::new": {
      "namespace": "bevy_math::primitives::dim2::CircularSector",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::CircularSector"
        }
      },
      "documentation": " Create a new [`CircularSector`] from a `radius` and an `angle`"
    },
    "bevy_math::primitives::dim2::CircularSector::radius": {
      "namespace": "bevy_math::primitives::dim2::CircularSector",
      "identifier": "radius",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSector"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the radius of the sector"
    },
    "bevy_math::primitives::dim2::CircularSector::sagitta": {
      "namespace": "bevy_math::primitives::dim2::CircularSector",
      "identifier": "sagitta",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSector"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the length of the sagitta of this sector\n See [`Arc2d::sagitta`]"
    },
    "bevy_math::primitives::dim2::CircularSegment::angle": {
      "namespace": "bevy_math::primitives::dim2::CircularSegment",
      "identifier": "angle",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSegment"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the angle of the segment"
    },
    "bevy_math::primitives::dim2::CircularSegment::apothem": {
      "namespace": "bevy_math::primitives::dim2::CircularSegment",
      "identifier": "apothem",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSegment"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the length of the apothem of this segment,\n which is the signed distance between the segment and the center of its circle\n See [`Arc2d::apothem`]"
    },
    "bevy_math::primitives::dim2::CircularSegment::arc_length": {
      "namespace": "bevy_math::primitives::dim2::CircularSegment",
      "identifier": "arc_length",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSegment"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the length of the arc defining the segment"
    },
    "bevy_math::primitives::dim2::CircularSegment::chord_length": {
      "namespace": "bevy_math::primitives::dim2::CircularSegment",
      "identifier": "chord_length",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSegment"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the length of the segment's base, also known as its chord"
    },
    "bevy_math::primitives::dim2::CircularSegment::chord_midpoint": {
      "namespace": "bevy_math::primitives::dim2::CircularSegment",
      "identifier": "chord_midpoint",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSegment"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Get the midpoint of the segment's base, also known as its chord"
    },
    "bevy_math::primitives::dim2::CircularSegment::clone": {
      "namespace": "bevy_math::primitives::dim2::CircularSegment",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSegment"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::CircularSegment"
        }
      }
    },
    "bevy_math::primitives::dim2::CircularSegment::eq": {
      "namespace": "bevy_math::primitives::dim2::CircularSegment",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSegment"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSegment"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim2::CircularSegment::from_degrees": {
      "namespace": "bevy_math::primitives::dim2::CircularSegment",
      "identifier": "from_degrees",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::CircularSegment"
        }
      },
      "documentation": " Create a new [`CircularSegment`] from a `radius` and an `angle` in degrees."
    },
    "bevy_math::primitives::dim2::CircularSegment::from_radians": {
      "namespace": "bevy_math::primitives::dim2::CircularSegment",
      "identifier": "from_radians",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::CircularSegment"
        }
      },
      "documentation": " Create a new [`CircularSegment`] from a `radius` and an `angle` in radians."
    },
    "bevy_math::primitives::dim2::CircularSegment::from_turns": {
      "namespace": "bevy_math::primitives::dim2::CircularSegment",
      "identifier": "from_turns",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "fraction"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::CircularSegment"
        }
      },
      "documentation": " Create a new [`CircularSegment`] from a `radius` and a number of `turns` of a circle.\n For instance, `0.5` turns is a semicircle."
    },
    "bevy_math::primitives::dim2::CircularSegment::half_angle": {
      "namespace": "bevy_math::primitives::dim2::CircularSegment",
      "identifier": "half_angle",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSegment"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the half-angle of the segment"
    },
    "bevy_math::primitives::dim2::CircularSegment::half_chord_length": {
      "namespace": "bevy_math::primitives::dim2::CircularSegment",
      "identifier": "half_chord_length",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSegment"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get half the length of the segment's base, also known as its chord"
    },
    "bevy_math::primitives::dim2::CircularSegment::new": {
      "namespace": "bevy_math::primitives::dim2::CircularSegment",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::CircularSegment"
        }
      },
      "documentation": " Create a new [`CircularSegment`] from a `radius`, and an `angle`"
    },
    "bevy_math::primitives::dim2::CircularSegment::radius": {
      "namespace": "bevy_math::primitives::dim2::CircularSegment",
      "identifier": "radius",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSegment"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the radius of the segment"
    },
    "bevy_math::primitives::dim2::CircularSegment::sagitta": {
      "namespace": "bevy_math::primitives::dim2::CircularSegment",
      "identifier": "sagitta",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSegment"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the length of the sagitta of this segment, also known as its height\n See [`Arc2d::sagitta`]"
    },
    "bevy_math::primitives::dim2::Ellipse::clone": {
      "namespace": "bevy_math::primitives::dim2::Ellipse",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Ellipse"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Ellipse"
        }
      }
    },
    "bevy_math::primitives::dim2::Ellipse::eccentricity": {
      "namespace": "bevy_math::primitives::dim2::Ellipse",
      "identifier": "eccentricity",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Ellipse"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the [eccentricity](https://en.wikipedia.org/wiki/Eccentricity_(mathematics)) of the ellipse.\n It can be thought of as a measure of how \"stretched\" or elongated the ellipse is.\n The value should be in the range [0, 1), where 0 represents a circle, and 1 represents a parabola."
    },
    "bevy_math::primitives::dim2::Ellipse::eq": {
      "namespace": "bevy_math::primitives::dim2::Ellipse",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Ellipse"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Ellipse"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim2::Ellipse::focal_length": {
      "namespace": "bevy_math::primitives::dim2::Ellipse",
      "identifier": "focal_length",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Ellipse"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the focal length of the ellipse. This corresponds to the distance between one of the foci and the center of the ellipse.\n The focal length of an ellipse is related to its eccentricity by `eccentricity = focal_length / semi_major`"
    },
    "bevy_math::primitives::dim2::Ellipse::from_size": {
      "namespace": "bevy_math::primitives::dim2::Ellipse",
      "identifier": "from_size",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "size"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Ellipse"
        }
      },
      "documentation": " Create a new `Ellipse` from a given full size.\n `size.x` is the diameter along the X axis, and `size.y` is the diameter along the Y axis."
    },
    "bevy_math::primitives::dim2::Ellipse::new": {
      "namespace": "bevy_math::primitives::dim2::Ellipse",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "half_width"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "half_height"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Ellipse"
        }
      },
      "documentation": " Create a new `Ellipse` from half of its width and height.\n This corresponds to the two perpendicular radii defining the ellipse."
    },
    "bevy_math::primitives::dim2::Ellipse::semi_major": {
      "namespace": "bevy_math::primitives::dim2::Ellipse",
      "identifier": "semi_major",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Ellipse"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the length of the semi-major axis. This corresponds to the longest radius of the ellipse."
    },
    "bevy_math::primitives::dim2::Ellipse::semi_minor": {
      "namespace": "bevy_math::primitives::dim2::Ellipse",
      "identifier": "semi_minor",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Ellipse"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the length of the semi-minor axis. This corresponds to the shortest radius of the ellipse."
    },
    "bevy_math::primitives::dim2::Line2d::clone": {
      "namespace": "bevy_math::primitives::dim2::Line2d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Line2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Line2d"
        }
      }
    },
    "bevy_math::primitives::dim2::Line2d::eq": {
      "namespace": "bevy_math::primitives::dim2::Line2d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Line2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Line2d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim2::Plane2d::clone": {
      "namespace": "bevy_math::primitives::dim2::Plane2d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Plane2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Plane2d"
        }
      }
    },
    "bevy_math::primitives::dim2::Plane2d::eq": {
      "namespace": "bevy_math::primitives::dim2::Plane2d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Plane2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Plane2d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim2::Plane2d::new": {
      "namespace": "bevy_math::primitives::dim2::Plane2d",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "normal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Plane2d"
        }
      },
      "documentation": " Create a new `Plane2d` from a normal\n # Panics\n Panics if the given `normal` is zero (or very close to zero), or non-finite."
    },
    "bevy_math::primitives::dim2::Rectangle::clone": {
      "namespace": "bevy_math::primitives::dim2::Rectangle",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Rectangle"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Rectangle"
        }
      }
    },
    "bevy_math::primitives::dim2::Rectangle::closest_point": {
      "namespace": "bevy_math::primitives::dim2::Rectangle",
      "identifier": "closest_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Rectangle"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Finds the point on the rectangle that is closest to the given `point`.\n If the point is outside the rectangle, the returned point will be on the perimeter of the rectangle.\n Otherwise, it will be inside the rectangle and returned as is."
    },
    "bevy_math::primitives::dim2::Rectangle::eq": {
      "namespace": "bevy_math::primitives::dim2::Rectangle",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Rectangle"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Rectangle"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim2::Rectangle::from_corners": {
      "namespace": "bevy_math::primitives::dim2::Rectangle",
      "identifier": "from_corners",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "point1"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "point2"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Rectangle"
        }
      },
      "documentation": " Create a new `Rectangle` from two corner points"
    },
    "bevy_math::primitives::dim2::Rectangle::from_length": {
      "namespace": "bevy_math::primitives::dim2::Rectangle",
      "identifier": "from_length",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "length"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Rectangle"
        }
      },
      "documentation": " Create a `Rectangle` from a single length.\n The resulting `Rectangle` will be the same size in every direction."
    },
    "bevy_math::primitives::dim2::Rectangle::from_size": {
      "namespace": "bevy_math::primitives::dim2::Rectangle",
      "identifier": "from_size",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "size"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Rectangle"
        }
      },
      "documentation": " Create a new `Rectangle` from a given full size"
    },
    "bevy_math::primitives::dim2::Rectangle::new": {
      "namespace": "bevy_math::primitives::dim2::Rectangle",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "width"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "height"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Rectangle"
        }
      },
      "documentation": " Create a new `Rectangle` from a full width and height"
    },
    "bevy_math::primitives::dim2::Rectangle::size": {
      "namespace": "bevy_math::primitives::dim2::Rectangle",
      "identifier": "size",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Rectangle"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Get the size of the rectangle"
    },
    "bevy_math::primitives::dim2::RegularPolygon::circumradius": {
      "namespace": "bevy_math::primitives::dim2::RegularPolygon",
      "identifier": "circumradius",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::RegularPolygon"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the radius of the circumcircle on which all vertices\n of the regular polygon lie"
    },
    "bevy_math::primitives::dim2::RegularPolygon::clone": {
      "namespace": "bevy_math::primitives::dim2::RegularPolygon",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::RegularPolygon"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::RegularPolygon"
        }
      }
    },
    "bevy_math::primitives::dim2::RegularPolygon::eq": {
      "namespace": "bevy_math::primitives::dim2::RegularPolygon",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::RegularPolygon"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::RegularPolygon"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim2::RegularPolygon::external_angle_degrees": {
      "namespace": "bevy_math::primitives::dim2::RegularPolygon",
      "identifier": "external_angle_degrees",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::RegularPolygon"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the external angle of the regular polygon in degrees.\n This is the angle formed by two adjacent sides with points\n within the angle being in the exterior of the polygon"
    },
    "bevy_math::primitives::dim2::RegularPolygon::external_angle_radians": {
      "namespace": "bevy_math::primitives::dim2::RegularPolygon",
      "identifier": "external_angle_radians",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::RegularPolygon"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the external angle of the regular polygon in radians.\n This is the angle formed by two adjacent sides with points\n within the angle being in the exterior of the polygon"
    },
    "bevy_math::primitives::dim2::RegularPolygon::inradius": {
      "namespace": "bevy_math::primitives::dim2::RegularPolygon",
      "identifier": "inradius",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::RegularPolygon"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the inradius or apothem of the regular polygon.\n This is the radius of the largest circle that can\n be drawn within the polygon"
    },
    "bevy_math::primitives::dim2::RegularPolygon::internal_angle_degrees": {
      "namespace": "bevy_math::primitives::dim2::RegularPolygon",
      "identifier": "internal_angle_degrees",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::RegularPolygon"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the internal angle of the regular polygon in degrees.\n This is the angle formed by two adjacent sides with points\n within the angle being in the interior of the polygon"
    },
    "bevy_math::primitives::dim2::RegularPolygon::internal_angle_radians": {
      "namespace": "bevy_math::primitives::dim2::RegularPolygon",
      "identifier": "internal_angle_radians",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::RegularPolygon"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the internal angle of the regular polygon in radians.\n This is the angle formed by two adjacent sides with points\n within the angle being in the interior of the polygon"
    },
    "bevy_math::primitives::dim2::RegularPolygon::new": {
      "namespace": "bevy_math::primitives::dim2::RegularPolygon",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "circumradius"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "sides"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::RegularPolygon"
        }
      },
      "documentation": " Create a new `RegularPolygon`\n from the radius of the circumcircle and a number of sides\n # Panics\n Panics if `circumradius` is negative"
    },
    "bevy_math::primitives::dim2::RegularPolygon::side_length": {
      "namespace": "bevy_math::primitives::dim2::RegularPolygon",
      "identifier": "side_length",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::RegularPolygon"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the length of one side of the regular polygon"
    },
    "bevy_math::primitives::dim2::Rhombus::circumradius": {
      "namespace": "bevy_math::primitives::dim2::Rhombus",
      "identifier": "circumradius",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Rhombus"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the radius of the circumcircle on which all vertices\n of the rhombus lie"
    },
    "bevy_math::primitives::dim2::Rhombus::clone": {
      "namespace": "bevy_math::primitives::dim2::Rhombus",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Rhombus"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Rhombus"
        }
      }
    },
    "bevy_math::primitives::dim2::Rhombus::closest_point": {
      "namespace": "bevy_math::primitives::dim2::Rhombus",
      "identifier": "closest_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Rhombus"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Finds the point on the rhombus that is closest to the given `point`.\n If the point is outside the rhombus, the returned point will be on the perimeter of the rhombus.\n Otherwise, it will be inside the rhombus and returned as is."
    },
    "bevy_math::primitives::dim2::Rhombus::eq": {
      "namespace": "bevy_math::primitives::dim2::Rhombus",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Rhombus"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Rhombus"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim2::Rhombus::from_inradius": {
      "namespace": "bevy_math::primitives::dim2::Rhombus",
      "identifier": "from_inradius",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "inradius"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Rhombus"
        }
      },
      "documentation": " Create a new `Rhombus` from a given inradius with all inner angles equal."
    },
    "bevy_math::primitives::dim2::Rhombus::from_side": {
      "namespace": "bevy_math::primitives::dim2::Rhombus",
      "identifier": "from_side",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "side"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Rhombus"
        }
      },
      "documentation": " Create a new `Rhombus` from a side length with all inner angles equal."
    },
    "bevy_math::primitives::dim2::Rhombus::inradius": {
      "namespace": "bevy_math::primitives::dim2::Rhombus",
      "identifier": "inradius",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Rhombus"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the radius of the largest circle that can\n be drawn within the rhombus"
    },
    "bevy_math::primitives::dim2::Rhombus::new": {
      "namespace": "bevy_math::primitives::dim2::Rhombus",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "horizontal_diagonal"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "vertical_diagonal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Rhombus"
        }
      },
      "documentation": " Create a new `Rhombus` from a vertical and horizontal diagonal sizes."
    },
    "bevy_math::primitives::dim2::Rhombus::side": {
      "namespace": "bevy_math::primitives::dim2::Rhombus",
      "identifier": "side",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Rhombus"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the length of each side of the rhombus"
    },
    "bevy_math::primitives::dim2::Segment2d::center": {
      "namespace": "bevy_math::primitives::dim2::Segment2d",
      "identifier": "center",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Segment2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Compute the midpoint between the two endpoints of the line segment."
    },
    "bevy_math::primitives::dim2::Segment2d::centered": {
      "namespace": "bevy_math::primitives::dim2::Segment2d",
      "identifier": "centered",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Segment2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Segment2d"
        }
      },
      "documentation": " Compute the segment with its center at the origin, keeping the same direction and length."
    },
    "bevy_math::primitives::dim2::Segment2d::clone": {
      "namespace": "bevy_math::primitives::dim2::Segment2d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Segment2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Segment2d"
        }
      }
    },
    "bevy_math::primitives::dim2::Segment2d::direction": {
      "namespace": "bevy_math::primitives::dim2::Segment2d",
      "identifier": "direction",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Segment2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir2"
        }
      },
      "documentation": " Compute the normalized direction pointing from the first endpoint to the second endpoint.\n For the non-panicking version, see [`Segment2d::try_direction`].\n # Panics\n Panics if a valid direction could not be computed, for example when the endpoints are coincident, NaN, or infinite."
    },
    "bevy_math::primitives::dim2::Segment2d::eq": {
      "namespace": "bevy_math::primitives::dim2::Segment2d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Segment2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Segment2d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim2::Segment2d::from_direction_and_length": {
      "namespace": "bevy_math::primitives::dim2::Segment2d",
      "identifier": "from_direction_and_length",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "direction"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "length"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Segment2d"
        }
      },
      "documentation": " Create a new `Segment2d` centered at the origin with the given direction and length.\n The endpoints will be at `-direction * length / 2.0` and `direction * length / 2.0`."
    },
    "bevy_math::primitives::dim2::Segment2d::from_ray_and_length": {
      "namespace": "bevy_math::primitives::dim2::Segment2d",
      "identifier": "from_ray_and_length",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::ray::Ray2d"
          },
          "name": "ray"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "length"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Segment2d"
        }
      },
      "documentation": " Create a new `Segment2d` starting from the origin of the given `ray`,\n going in the direction of the ray for the given `length`.\n The endpoints will be at `ray.origin` and `ray.origin + length * ray.direction`."
    },
    "bevy_math::primitives::dim2::Segment2d::from_scaled_direction": {
      "namespace": "bevy_math::primitives::dim2::Segment2d",
      "identifier": "from_scaled_direction",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "scaled_direction"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Segment2d"
        }
      },
      "documentation": " Create a new `Segment2d` centered at the origin from a vector representing\n the direction and length of the line segment.\n The endpoints will be at `-scaled_direction / 2.0` and `scaled_direction / 2.0`."
    },
    "bevy_math::primitives::dim2::Segment2d::left_normal": {
      "namespace": "bevy_math::primitives::dim2::Segment2d",
      "identifier": "left_normal",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Segment2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir2"
        }
      },
      "documentation": " Compute the normalized counterclockwise normal on the left-hand side of the line segment.\n For the non-panicking version, see [`Segment2d::try_left_normal`].\n # Panics\n Panics if a valid normal could not be computed, for example when the endpoints are coincident, NaN, or infinite."
    },
    "bevy_math::primitives::dim2::Segment2d::length": {
      "namespace": "bevy_math::primitives::dim2::Segment2d",
      "identifier": "length",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Segment2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Compute the length of the line segment."
    },
    "bevy_math::primitives::dim2::Segment2d::length_squared": {
      "namespace": "bevy_math::primitives::dim2::Segment2d",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Segment2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Compute the squared length of the line segment."
    },
    "bevy_math::primitives::dim2::Segment2d::new": {
      "namespace": "bevy_math::primitives::dim2::Segment2d",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "point1"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "point2"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Segment2d"
        }
      },
      "documentation": " Create a new `Segment2d` from its endpoints."
    },
    "bevy_math::primitives::dim2::Segment2d::point1": {
      "namespace": "bevy_math::primitives::dim2::Segment2d",
      "identifier": "point1",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Segment2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Get the position of the first endpoint of the line segment."
    },
    "bevy_math::primitives::dim2::Segment2d::point2": {
      "namespace": "bevy_math::primitives::dim2::Segment2d",
      "identifier": "point2",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Segment2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Get the position of the second endpoint of the line segment."
    },
    "bevy_math::primitives::dim2::Segment2d::resized": {
      "namespace": "bevy_math::primitives::dim2::Segment2d",
      "identifier": "resized",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Segment2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "length"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Segment2d"
        }
      },
      "documentation": " Compute the segment with a new length, keeping the same direction and center."
    },
    "bevy_math::primitives::dim2::Segment2d::reverse": {
      "namespace": "bevy_math::primitives::dim2::Segment2d",
      "identifier": "reverse",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_math::primitives::dim2::Segment2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Reverses the direction of the line segment by swapping the endpoints."
    },
    "bevy_math::primitives::dim2::Segment2d::reversed": {
      "namespace": "bevy_math::primitives::dim2::Segment2d",
      "identifier": "reversed",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::primitives::dim2::Segment2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Segment2d"
        }
      },
      "documentation": " Returns the line segment with its direction reversed by swapping the endpoints."
    },
    "bevy_math::primitives::dim2::Segment2d::right_normal": {
      "namespace": "bevy_math::primitives::dim2::Segment2d",
      "identifier": "right_normal",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Segment2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir2"
        }
      },
      "documentation": " Compute the normalized clockwise normal on the right-hand side of the line segment.\n For the non-panicking version, see [`Segment2d::try_right_normal`].\n # Panics\n Panics if a valid normal could not be computed, for example when the endpoints are coincident, NaN, or infinite."
    },
    "bevy_math::primitives::dim2::Segment2d::rotated": {
      "namespace": "bevy_math::primitives::dim2::Segment2d",
      "identifier": "rotated",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Segment2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Segment2d"
        }
      },
      "documentation": " Compute the segment rotated around the origin by the given rotation."
    },
    "bevy_math::primitives::dim2::Segment2d::rotated_around": {
      "namespace": "bevy_math::primitives::dim2::Segment2d",
      "identifier": "rotated_around",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Segment2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "rotation"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Segment2d"
        }
      },
      "documentation": " Compute the segment rotated around the given point by the given rotation."
    },
    "bevy_math::primitives::dim2::Segment2d::rotated_around_center": {
      "namespace": "bevy_math::primitives::dim2::Segment2d",
      "identifier": "rotated_around_center",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Segment2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Segment2d"
        }
      },
      "documentation": " Compute the segment rotated around its own center."
    },
    "bevy_math::primitives::dim2::Segment2d::scaled_direction": {
      "namespace": "bevy_math::primitives::dim2::Segment2d",
      "identifier": "scaled_direction",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Segment2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Compute the vector from the first endpoint to the second endpoint."
    },
    "bevy_math::primitives::dim2::Segment2d::scaled_left_normal": {
      "namespace": "bevy_math::primitives::dim2::Segment2d",
      "identifier": "scaled_left_normal",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Segment2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Compute the non-normalized counterclockwise normal on the left-hand side of the line segment.\n The length of the normal is the distance between the endpoints."
    },
    "bevy_math::primitives::dim2::Segment2d::scaled_right_normal": {
      "namespace": "bevy_math::primitives::dim2::Segment2d",
      "identifier": "scaled_right_normal",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Segment2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Compute the non-normalized clockwise normal on the right-hand side of the line segment.\n The length of the normal is the distance between the endpoints."
    },
    "bevy_math::primitives::dim2::Segment2d::translated": {
      "namespace": "bevy_math::primitives::dim2::Segment2d",
      "identifier": "translated",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Segment2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Segment2d"
        }
      },
      "documentation": " Compute the segment translated by the given vector."
    },
    "bevy_math::primitives::dim2::Triangle2d::clone": {
      "namespace": "bevy_math::primitives::dim2::Triangle2d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Triangle2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Triangle2d"
        }
      }
    },
    "bevy_math::primitives::dim2::Triangle2d::eq": {
      "namespace": "bevy_math::primitives::dim2::Triangle2d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Triangle2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Triangle2d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim2::Triangle2d::is_acute": {
      "namespace": "bevy_math::primitives::dim2::Triangle2d",
      "identifier": "is_acute",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Triangle2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Checks if the triangle is acute, meaning all angles are less than 90 degrees"
    },
    "bevy_math::primitives::dim2::Triangle2d::is_degenerate": {
      "namespace": "bevy_math::primitives::dim2::Triangle2d",
      "identifier": "is_degenerate",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Triangle2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Checks if the triangle is degenerate, meaning it has zero area.\n A triangle is degenerate if the cross product of the vectors `ab` and `ac` has a length less than `10e-7`.\n This indicates that the three vertices are collinear or nearly collinear."
    },
    "bevy_math::primitives::dim2::Triangle2d::is_obtuse": {
      "namespace": "bevy_math::primitives::dim2::Triangle2d",
      "identifier": "is_obtuse",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Triangle2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Checks if the triangle is obtuse, meaning one angle is greater than 90 degrees"
    },
    "bevy_math::primitives::dim2::Triangle2d::new": {
      "namespace": "bevy_math::primitives::dim2::Triangle2d",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "a"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "b"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "c"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Triangle2d"
        }
      },
      "documentation": " Create a new `Triangle2d` from points `a`, `b`, and `c`"
    },
    "bevy_math::primitives::dim2::Triangle2d::reverse": {
      "namespace": "bevy_math::primitives::dim2::Triangle2d",
      "identifier": "reverse",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_math::primitives::dim2::Triangle2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Reverse the [`WindingOrder`] of the triangle\n by swapping the first and last vertices."
    },
    "bevy_math::primitives::dim2::Triangle2d::reversed": {
      "namespace": "bevy_math::primitives::dim2::Triangle2d",
      "identifier": "reversed",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::primitives::dim2::Triangle2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Triangle2d"
        }
      },
      "documentation": " This triangle but reversed."
    },
    "bevy_math::primitives::dim3::Capsule3d::clone": {
      "namespace": "bevy_math::primitives::dim3::Capsule3d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Capsule3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Capsule3d"
        }
      }
    },
    "bevy_math::primitives::dim3::Capsule3d::eq": {
      "namespace": "bevy_math::primitives::dim3::Capsule3d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Capsule3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Capsule3d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim3::Capsule3d::new": {
      "namespace": "bevy_math::primitives::dim3::Capsule3d",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "length"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Capsule3d"
        }
      },
      "documentation": " Create a new `Capsule3d` from a radius and length"
    },
    "bevy_math::primitives::dim3::Capsule3d::to_cylinder": {
      "namespace": "bevy_math::primitives::dim3::Capsule3d",
      "identifier": "to_cylinder",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Capsule3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Cylinder"
        }
      },
      "documentation": " Get the part connecting the hemispherical ends\n of the capsule as a [`Cylinder`]"
    },
    "bevy_math::primitives::dim3::Cone::base": {
      "namespace": "bevy_math::primitives::dim3::Cone",
      "identifier": "base",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cone"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Circle"
        }
      },
      "documentation": " Get the base of the cone as a [`Circle`]"
    },
    "bevy_math::primitives::dim3::Cone::base_area": {
      "namespace": "bevy_math::primitives::dim3::Cone",
      "identifier": "base_area",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cone"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the surface area of the base of the cone"
    },
    "bevy_math::primitives::dim3::Cone::clone": {
      "namespace": "bevy_math::primitives::dim3::Cone",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cone"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Cone"
        }
      }
    },
    "bevy_math::primitives::dim3::Cone::eq": {
      "namespace": "bevy_math::primitives::dim3::Cone",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cone"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cone"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim3::Cone::lateral_area": {
      "namespace": "bevy_math::primitives::dim3::Cone",
      "identifier": "lateral_area",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cone"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the surface area of the side of the cone,\n also known as the lateral area"
    },
    "bevy_math::primitives::dim3::Cone::new": {
      "namespace": "bevy_math::primitives::dim3::Cone",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "height"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Cone"
        }
      },
      "documentation": " Create a new [`Cone`] from a radius and height."
    },
    "bevy_math::primitives::dim3::Cone::slant_height": {
      "namespace": "bevy_math::primitives::dim3::Cone",
      "identifier": "slant_height",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cone"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the slant height of the cone, the length of the line segment\n connecting a point on the base to the apex"
    },
    "bevy_math::primitives::dim3::ConicalFrustum::clone": {
      "namespace": "bevy_math::primitives::dim3::ConicalFrustum",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::ConicalFrustum"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::ConicalFrustum"
        }
      }
    },
    "bevy_math::primitives::dim3::ConicalFrustum::eq": {
      "namespace": "bevy_math::primitives::dim3::ConicalFrustum",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::ConicalFrustum"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::ConicalFrustum"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim3::Cuboid::clone": {
      "namespace": "bevy_math::primitives::dim3::Cuboid",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cuboid"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Cuboid"
        }
      }
    },
    "bevy_math::primitives::dim3::Cuboid::closest_point": {
      "namespace": "bevy_math::primitives::dim3::Cuboid",
      "identifier": "closest_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cuboid"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Finds the point on the cuboid that is closest to the given `point`.\n If the point is outside the cuboid, the returned point will be on the surface of the cuboid.\n Otherwise, it will be inside the cuboid and returned as is."
    },
    "bevy_math::primitives::dim3::Cuboid::eq": {
      "namespace": "bevy_math::primitives::dim3::Cuboid",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cuboid"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cuboid"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim3::Cuboid::from_corners": {
      "namespace": "bevy_math::primitives::dim3::Cuboid",
      "identifier": "from_corners",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "point1"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "point2"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Cuboid"
        }
      },
      "documentation": " Create a new `Cuboid` from two corner points"
    },
    "bevy_math::primitives::dim3::Cuboid::from_length": {
      "namespace": "bevy_math::primitives::dim3::Cuboid",
      "identifier": "from_length",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "length"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Cuboid"
        }
      },
      "documentation": " Create a `Cuboid` from a single length.\n The resulting `Cuboid` will be the same size in every direction."
    },
    "bevy_math::primitives::dim3::Cuboid::from_size": {
      "namespace": "bevy_math::primitives::dim3::Cuboid",
      "identifier": "from_size",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "size"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Cuboid"
        }
      },
      "documentation": " Create a new `Cuboid` from a given full size"
    },
    "bevy_math::primitives::dim3::Cuboid::new": {
      "namespace": "bevy_math::primitives::dim3::Cuboid",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x_length"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y_length"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z_length"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Cuboid"
        }
      },
      "documentation": " Create a new `Cuboid` from a full x, y, and z length"
    },
    "bevy_math::primitives::dim3::Cuboid::size": {
      "namespace": "bevy_math::primitives::dim3::Cuboid",
      "identifier": "size",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cuboid"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Get the size of the cuboid"
    },
    "bevy_math::primitives::dim3::Cylinder::base": {
      "namespace": "bevy_math::primitives::dim3::Cylinder",
      "identifier": "base",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cylinder"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Circle"
        }
      },
      "documentation": " Get the base of the cylinder as a [`Circle`]"
    },
    "bevy_math::primitives::dim3::Cylinder::base_area": {
      "namespace": "bevy_math::primitives::dim3::Cylinder",
      "identifier": "base_area",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cylinder"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the surface area of one base of the cylinder"
    },
    "bevy_math::primitives::dim3::Cylinder::clone": {
      "namespace": "bevy_math::primitives::dim3::Cylinder",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cylinder"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Cylinder"
        }
      }
    },
    "bevy_math::primitives::dim3::Cylinder::eq": {
      "namespace": "bevy_math::primitives::dim3::Cylinder",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cylinder"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cylinder"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim3::Cylinder::lateral_area": {
      "namespace": "bevy_math::primitives::dim3::Cylinder",
      "identifier": "lateral_area",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cylinder"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the surface area of the side of the cylinder,\n also known as the lateral area"
    },
    "bevy_math::primitives::dim3::Cylinder::new": {
      "namespace": "bevy_math::primitives::dim3::Cylinder",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "height"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Cylinder"
        }
      },
      "documentation": " Create a new `Cylinder` from a radius and full height"
    },
    "bevy_math::primitives::dim3::InfinitePlane3d::clone": {
      "namespace": "bevy_math::primitives::dim3::InfinitePlane3d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::InfinitePlane3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::InfinitePlane3d"
        }
      }
    },
    "bevy_math::primitives::dim3::InfinitePlane3d::eq": {
      "namespace": "bevy_math::primitives::dim3::InfinitePlane3d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::InfinitePlane3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::InfinitePlane3d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim3::InfinitePlane3d::isometry_from_xy": {
      "namespace": "bevy_math::primitives::dim3::InfinitePlane3d",
      "identifier": "isometry_from_xy",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::InfinitePlane3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "origin"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry3d"
        }
      },
      "documentation": " Computes an [`Isometry3d`] which transforms points from the XY-plane to this plane with the\n given `origin`.\n ## Guarantees\n * the transformation is a [congruence] meaning it will preserve all distances and angles of\n   the transformed geometry\n * uses the least rotation possible to transform the geometry\n * if two geometries are transformed with the same isometry, then the relations between\n   them, like distances, are also preserved\n * compared to projections, the transformation is lossless (up to floating point errors)\n   reversible\n ## Non-Guarantees\n * the rotation used is generally not unique\n * the orientation of the transformed geometry in the XY plane might be arbitrary, to\n   enforce some kind of alignment the user has to use an extra transformation ontop of this\n   one\n See [`isometries_xy`] for example usescases.\n [congruence]: https://en.wikipedia.org/wiki/Congruence_(geometry)\n [`isometries_xy`]: `InfinitePlane3d::isometries_xy`"
    },
    "bevy_math::primitives::dim3::InfinitePlane3d::isometry_into_xy": {
      "namespace": "bevy_math::primitives::dim3::InfinitePlane3d",
      "identifier": "isometry_into_xy",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::InfinitePlane3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "origin"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry3d"
        }
      },
      "documentation": " Computes an [`Isometry3d`] which transforms points from the plane in 3D space with the given\n `origin` to the XY-plane.\n ## Guarantees\n * the transformation is a [congruence] meaning it will preserve all distances and angles of\n   the transformed geometry\n * uses the least rotation possible to transform the geometry\n * if two geometries are transformed with the same isometry, then the relations between\n   them, like distances, are also preserved\n * compared to projections, the transformation is lossless (up to floating point errors)\n   reversible\n ## Non-Guarantees\n * the rotation used is generally not unique\n * the orientation of the transformed geometry in the XY plane might be arbitrary, to\n   enforce some kind of alignment the user has to use an extra transformation ontop of this\n   one\n See [`isometries_xy`] for example usescases.\n [congruence]: https://en.wikipedia.org/wiki/Congruence_(geometry)\n [`isometries_xy`]: `InfinitePlane3d::isometries_xy`"
    },
    "bevy_math::primitives::dim3::Line3d::clone": {
      "namespace": "bevy_math::primitives::dim3::Line3d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Line3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Line3d"
        }
      }
    },
    "bevy_math::primitives::dim3::Line3d::eq": {
      "namespace": "bevy_math::primitives::dim3::Line3d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Line3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Line3d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim3::Plane3d::clone": {
      "namespace": "bevy_math::primitives::dim3::Plane3d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Plane3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Plane3d"
        }
      }
    },
    "bevy_math::primitives::dim3::Plane3d::eq": {
      "namespace": "bevy_math::primitives::dim3::Plane3d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Plane3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Plane3d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim3::Plane3d::new": {
      "namespace": "bevy_math::primitives::dim3::Plane3d",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "normal"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "half_size"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Plane3d"
        }
      },
      "documentation": " Create a new `Plane3d` from a normal and a half size\n # Panics\n Panics if the given `normal` is zero (or very close to zero), or non-finite."
    },
    "bevy_math::primitives::dim3::Segment3d::center": {
      "namespace": "bevy_math::primitives::dim3::Segment3d",
      "identifier": "center",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Segment3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Compute the midpoint between the two endpoints of the line segment."
    },
    "bevy_math::primitives::dim3::Segment3d::centered": {
      "namespace": "bevy_math::primitives::dim3::Segment3d",
      "identifier": "centered",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Segment3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Segment3d"
        }
      },
      "documentation": " Compute the segment with its center at the origin, keeping the same direction and length."
    },
    "bevy_math::primitives::dim3::Segment3d::clone": {
      "namespace": "bevy_math::primitives::dim3::Segment3d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Segment3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Segment3d"
        }
      }
    },
    "bevy_math::primitives::dim3::Segment3d::direction": {
      "namespace": "bevy_math::primitives::dim3::Segment3d",
      "identifier": "direction",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Segment3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": " Compute the normalized direction pointing from the first endpoint to the second endpoint.\n For the non-panicking version, see [`Segment3d::try_direction`].\n # Panics\n Panics if a valid direction could not be computed, for example when the endpoints are coincident, NaN, or infinite."
    },
    "bevy_math::primitives::dim3::Segment3d::eq": {
      "namespace": "bevy_math::primitives::dim3::Segment3d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Segment3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Segment3d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim3::Segment3d::from_direction_and_length": {
      "namespace": "bevy_math::primitives::dim3::Segment3d",
      "identifier": "from_direction_and_length",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir3"
          },
          "name": "direction"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "length"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Segment3d"
        }
      },
      "documentation": " Create a new `Segment3d` centered at the origin with the given direction and length.\n The endpoints will be at `-direction * length / 2.0` and `direction * length / 2.0`."
    },
    "bevy_math::primitives::dim3::Segment3d::from_ray_and_length": {
      "namespace": "bevy_math::primitives::dim3::Segment3d",
      "identifier": "from_ray_and_length",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::ray::Ray3d"
          },
          "name": "ray"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "length"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Segment3d"
        }
      },
      "documentation": " Create a new `Segment3d` starting from the origin of the given `ray`,\n going in the direction of the ray for the given `length`.\n The endpoints will be at `ray.origin` and `ray.origin + length * ray.direction`."
    },
    "bevy_math::primitives::dim3::Segment3d::from_scaled_direction": {
      "namespace": "bevy_math::primitives::dim3::Segment3d",
      "identifier": "from_scaled_direction",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "scaled_direction"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Segment3d"
        }
      },
      "documentation": " Create a new `Segment3d` centered at the origin from a vector representing\n the direction and length of the line segment.\n The endpoints will be at `-scaled_direction / 2.0` and `scaled_direction / 2.0`."
    },
    "bevy_math::primitives::dim3::Segment3d::length": {
      "namespace": "bevy_math::primitives::dim3::Segment3d",
      "identifier": "length",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Segment3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Compute the length of the line segment."
    },
    "bevy_math::primitives::dim3::Segment3d::length_squared": {
      "namespace": "bevy_math::primitives::dim3::Segment3d",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Segment3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Compute the squared length of the line segment."
    },
    "bevy_math::primitives::dim3::Segment3d::new": {
      "namespace": "bevy_math::primitives::dim3::Segment3d",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "point1"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "point2"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Segment3d"
        }
      },
      "documentation": " Create a new `Segment3d` from its endpoints."
    },
    "bevy_math::primitives::dim3::Segment3d::point1": {
      "namespace": "bevy_math::primitives::dim3::Segment3d",
      "identifier": "point1",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Segment3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Get the position of the first endpoint of the line segment."
    },
    "bevy_math::primitives::dim3::Segment3d::point2": {
      "namespace": "bevy_math::primitives::dim3::Segment3d",
      "identifier": "point2",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Segment3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Get the position of the second endpoint of the line segment."
    },
    "bevy_math::primitives::dim3::Segment3d::resized": {
      "namespace": "bevy_math::primitives::dim3::Segment3d",
      "identifier": "resized",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Segment3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "length"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Segment3d"
        }
      },
      "documentation": " Compute the segment with a new length, keeping the same direction and center."
    },
    "bevy_math::primitives::dim3::Segment3d::reverse": {
      "namespace": "bevy_math::primitives::dim3::Segment3d",
      "identifier": "reverse",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_math::primitives::dim3::Segment3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Reverses the direction of the line segment by swapping the endpoints."
    },
    "bevy_math::primitives::dim3::Segment3d::reversed": {
      "namespace": "bevy_math::primitives::dim3::Segment3d",
      "identifier": "reversed",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::primitives::dim3::Segment3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Segment3d"
        }
      },
      "documentation": " Returns the line segment with its direction reversed by swapping the endpoints."
    },
    "bevy_math::primitives::dim3::Segment3d::rotated": {
      "namespace": "bevy_math::primitives::dim3::Segment3d",
      "identifier": "rotated",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Segment3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Segment3d"
        }
      },
      "documentation": " Compute the segment rotated around the origin by the given rotation."
    },
    "bevy_math::primitives::dim3::Segment3d::rotated_around": {
      "namespace": "bevy_math::primitives::dim3::Segment3d",
      "identifier": "rotated_around",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Segment3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Segment3d"
        }
      },
      "documentation": " Compute the segment rotated around the given point by the given rotation."
    },
    "bevy_math::primitives::dim3::Segment3d::rotated_around_center": {
      "namespace": "bevy_math::primitives::dim3::Segment3d",
      "identifier": "rotated_around_center",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Segment3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Segment3d"
        }
      },
      "documentation": " Compute the segment rotated around its own center."
    },
    "bevy_math::primitives::dim3::Segment3d::scaled_direction": {
      "namespace": "bevy_math::primitives::dim3::Segment3d",
      "identifier": "scaled_direction",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Segment3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Compute the vector from the first endpoint to the second endpoint."
    },
    "bevy_math::primitives::dim3::Segment3d::translated": {
      "namespace": "bevy_math::primitives::dim3::Segment3d",
      "identifier": "translated",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Segment3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Segment3d"
        }
      },
      "documentation": " Compute the segment translated by the given vector."
    },
    "bevy_math::primitives::dim3::Sphere::clone": {
      "namespace": "bevy_math::primitives::dim3::Sphere",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Sphere"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Sphere"
        }
      }
    },
    "bevy_math::primitives::dim3::Sphere::closest_point": {
      "namespace": "bevy_math::primitives::dim3::Sphere",
      "identifier": "closest_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Sphere"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Finds the point on the sphere that is closest to the given `point`.\n If the point is outside the sphere, the returned point will be on the surface of the sphere.\n Otherwise, it will be inside the sphere and returned as is."
    },
    "bevy_math::primitives::dim3::Sphere::diameter": {
      "namespace": "bevy_math::primitives::dim3::Sphere",
      "identifier": "diameter",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Sphere"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the diameter of the sphere"
    },
    "bevy_math::primitives::dim3::Sphere::eq": {
      "namespace": "bevy_math::primitives::dim3::Sphere",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Sphere"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Sphere"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim3::Sphere::new": {
      "namespace": "bevy_math::primitives::dim3::Sphere",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Sphere"
        }
      },
      "documentation": " Create a new [`Sphere`] from a `radius`"
    },
    "bevy_math::primitives::dim3::Tetrahedron::centroid": {
      "namespace": "bevy_math::primitives::dim3::Tetrahedron",
      "identifier": "centroid",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Tetrahedron"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Get the centroid of the tetrahedron.\n This function finds the geometric center of the tetrahedron\n by averaging the vertices: `centroid = (a + b + c + d) / 4`."
    },
    "bevy_math::primitives::dim3::Tetrahedron::clone": {
      "namespace": "bevy_math::primitives::dim3::Tetrahedron",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Tetrahedron"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Tetrahedron"
        }
      }
    },
    "bevy_math::primitives::dim3::Tetrahedron::eq": {
      "namespace": "bevy_math::primitives::dim3::Tetrahedron",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Tetrahedron"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Tetrahedron"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim3::Tetrahedron::new": {
      "namespace": "bevy_math::primitives::dim3::Tetrahedron",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "a"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "b"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "c"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "d"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Tetrahedron"
        }
      },
      "documentation": " Create a new [`Tetrahedron`] from points `a`, `b`, `c` and `d`."
    },
    "bevy_math::primitives::dim3::Tetrahedron::signed_volume": {
      "namespace": "bevy_math::primitives::dim3::Tetrahedron",
      "identifier": "signed_volume",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Tetrahedron"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the signed volume of the tetrahedron.\n If it's negative, the normal vector of the face defined by\n the first three points using the right-hand rule points\n away from the fourth vertex."
    },
    "bevy_math::primitives::dim3::Torus::clone": {
      "namespace": "bevy_math::primitives::dim3::Torus",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Torus"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Torus"
        }
      }
    },
    "bevy_math::primitives::dim3::Torus::eq": {
      "namespace": "bevy_math::primitives::dim3::Torus",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Torus"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Torus"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim3::Torus::inner_radius": {
      "namespace": "bevy_math::primitives::dim3::Torus",
      "identifier": "inner_radius",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Torus"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the inner radius of the torus.\n For a ring torus, this corresponds to the radius of the hole,\n or `major_radius - minor_radius`"
    },
    "bevy_math::primitives::dim3::Torus::new": {
      "namespace": "bevy_math::primitives::dim3::Torus",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "inner_radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "outer_radius"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Torus"
        }
      },
      "documentation": " Create a new `Torus` from an inner and outer radius.\n The inner radius is the radius of the hole, and the outer radius\n is the radius of the entire object"
    },
    "bevy_math::primitives::dim3::Torus::outer_radius": {
      "namespace": "bevy_math::primitives::dim3::Torus",
      "identifier": "outer_radius",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Torus"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the outer radius of the torus.\n This corresponds to the overall radius of the entire object,\n or `major_radius + minor_radius`"
    },
    "bevy_math::primitives::dim3::Triangle3d::centroid": {
      "namespace": "bevy_math::primitives::dim3::Triangle3d",
      "identifier": "centroid",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Triangle3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Get the centroid of the triangle.\n This function finds the geometric center of the triangle by averaging the vertices:\n `centroid = (a + b + c) / 3`."
    },
    "bevy_math::primitives::dim3::Triangle3d::circumcenter": {
      "namespace": "bevy_math::primitives::dim3::Triangle3d",
      "identifier": "circumcenter",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Triangle3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Get the circumcenter of the triangle."
    },
    "bevy_math::primitives::dim3::Triangle3d::clone": {
      "namespace": "bevy_math::primitives::dim3::Triangle3d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Triangle3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Triangle3d"
        }
      }
    },
    "bevy_math::primitives::dim3::Triangle3d::eq": {
      "namespace": "bevy_math::primitives::dim3::Triangle3d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Triangle3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Triangle3d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim3::Triangle3d::is_acute": {
      "namespace": "bevy_math::primitives::dim3::Triangle3d",
      "identifier": "is_acute",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Triangle3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Checks if the triangle is acute, meaning all angles are less than 90 degrees"
    },
    "bevy_math::primitives::dim3::Triangle3d::is_degenerate": {
      "namespace": "bevy_math::primitives::dim3::Triangle3d",
      "identifier": "is_degenerate",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Triangle3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Checks if the triangle is degenerate, meaning it has zero area.\n A triangle is degenerate if the cross product of the vectors `ab` and `ac` has a length less than `10e-7`.\n This indicates that the three vertices are collinear or nearly collinear."
    },
    "bevy_math::primitives::dim3::Triangle3d::is_obtuse": {
      "namespace": "bevy_math::primitives::dim3::Triangle3d",
      "identifier": "is_obtuse",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Triangle3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Checks if the triangle is obtuse, meaning one angle is greater than 90 degrees"
    },
    "bevy_math::primitives::dim3::Triangle3d::new": {
      "namespace": "bevy_math::primitives::dim3::Triangle3d",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "a"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "b"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "c"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Triangle3d"
        }
      },
      "documentation": " Create a new [`Triangle3d`] from points `a`, `b`, and `c`."
    },
    "bevy_math::primitives::dim3::Triangle3d::reverse": {
      "namespace": "bevy_math::primitives::dim3::Triangle3d",
      "identifier": "reverse",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_math::primitives::dim3::Triangle3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Reverse the triangle by swapping the first and last vertices."
    },
    "bevy_math::primitives::dim3::Triangle3d::reversed": {
      "namespace": "bevy_math::primitives::dim3::Triangle3d",
      "identifier": "reversed",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::primitives::dim3::Triangle3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Triangle3d"
        }
      },
      "documentation": " This triangle but reversed."
    },
    "bevy_math::ray::Ray2d::clone": {
      "namespace": "bevy_math::ray::Ray2d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::ray::Ray2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::ray::Ray2d"
        }
      }
    },
    "bevy_math::ray::Ray2d::eq": {
      "namespace": "bevy_math::ray::Ray2d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::ray::Ray2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::ray::Ray2d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::ray::Ray2d::get_point": {
      "namespace": "bevy_math::ray::Ray2d",
      "identifier": "get_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::ray::Ray2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "distance"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Get a point at a given distance along the ray"
    },
    "bevy_math::ray::Ray2d::intersect_plane": {
      "namespace": "bevy_math::ray::Ray2d",
      "identifier": "intersect_plane",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::ray::Ray2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "plane_origin"
        },
        {
          "kind": {
            "val": "bevy_math::primitives::dim2::Plane2d"
          },
          "name": "plane"
        }
      ],
      "return_type": {
        "kind": {
          "option": {
            "primitive": "f32"
          }
        }
      },
      "documentation": " Get the distance to a plane if the ray intersects it"
    },
    "bevy_math::ray::Ray2d::new": {
      "namespace": "bevy_math::ray::Ray2d",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "origin"
        },
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "direction"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::ray::Ray2d"
        }
      },
      "documentation": " Create a new `Ray2d` from a given origin and direction"
    },
    "bevy_math::ray::Ray3d::clone": {
      "namespace": "bevy_math::ray::Ray3d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::ray::Ray3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::ray::Ray3d"
        }
      }
    },
    "bevy_math::ray::Ray3d::eq": {
      "namespace": "bevy_math::ray::Ray3d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::ray::Ray3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::ray::Ray3d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::ray::Ray3d::get_point": {
      "namespace": "bevy_math::ray::Ray3d",
      "identifier": "get_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::ray::Ray3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "distance"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Get a point at a given distance along the ray"
    },
    "bevy_math::ray::Ray3d::intersect_plane": {
      "namespace": "bevy_math::ray::Ray3d",
      "identifier": "intersect_plane",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::ray::Ray3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "plane_origin"
        },
        {
          "kind": {
            "val": "bevy_math::primitives::dim3::InfinitePlane3d"
          },
          "name": "plane"
        }
      ],
      "return_type": {
        "kind": {
          "option": {
            "primitive": "f32"
          }
        }
      },
      "documentation": " Get the distance to a plane if the ray intersects it"
    },
    "bevy_math::ray::Ray3d::new": {
      "namespace": "bevy_math::ray::Ray3d",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "origin"
        },
        {
          "kind": {
            "val": "bevy_math::direction::Dir3"
          },
          "name": "direction"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::ray::Ray3d"
        }
      },
      "documentation": " Create a new `Ray3d` from a given origin and direction"
    },
    "bevy_math::rects::irect::IRect::as_rect": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "as_rect",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::rect::Rect"
        }
      },
      "documentation": " Returns self as [`Rect`] (f32)"
    },
    "bevy_math::rects::irect::IRect::as_urect": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "as_urect",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::urect::URect"
        }
      },
      "documentation": " Returns self as [`URect`] (u32)"
    },
    "bevy_math::rects::irect::IRect::assert_receiver_is_total_eq": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_math::rects::irect::IRect::center": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "center",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " The center point of the rectangle.\n # Rounding Behavior\n If the (min + max) contains odd numbers they will be rounded down to the nearest whole number when calculating the center.\n # Examples\n ```\n # use bevy_math::{IRect, IVec2};\n let r = IRect::new(0, 0, 5, 2); // w=5 h=2\n assert_eq!(r.center(), IVec2::new(2, 1));\n ```"
    },
    "bevy_math::rects::irect::IRect::clone": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::irect::IRect"
        }
      }
    },
    "bevy_math::rects::irect::IRect::contains": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "contains",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Check if a point lies within this rectangle, inclusive of its edges.\n # Examples\n ```\n # use bevy_math::IRect;\n let r = IRect::new(0, 0, 5, 1); // w=5 h=1\n assert!(r.contains(r.center()));\n assert!(r.contains(r.min));\n assert!(r.contains(r.max));\n ```"
    },
    "bevy_math::rects::irect::IRect::eq": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::rects::irect::IRect::from_center_half_size": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "from_center_half_size",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "origin"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "half_size"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::irect::IRect"
        }
      },
      "documentation": " Create a new rectangle from its center and half-size.\n # Panics\n This method panics if any of the components of the half-size is negative.\n # Examples\n ```\n # use bevy_math::{IRect, IVec2};\n let r = IRect::from_center_half_size(IVec2::ZERO, IVec2::ONE); // w=2 h=2\n assert_eq!(r.min, IVec2::splat(-1));\n assert_eq!(r.max, IVec2::splat(1));\n ```"
    },
    "bevy_math::rects::irect::IRect::from_center_size": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "from_center_size",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "origin"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "size"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::irect::IRect"
        }
      },
      "documentation": " Create a new rectangle from its center and size.\n # Rounding Behavior\n If the size contains odd numbers they will be rounded down to the nearest whole number.\n # Panics\n This method panics if any of the components of the size is negative.\n # Examples\n ```\n # use bevy_math::{IRect, IVec2};\n let r = IRect::from_center_size(IVec2::ZERO, IVec2::new(3, 2)); // w=2 h=2\n assert_eq!(r.min, IVec2::splat(-1));\n assert_eq!(r.max, IVec2::splat(1));\n ```"
    },
    "bevy_math::rects::irect::IRect::from_corners": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "from_corners",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "p0"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "p1"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::irect::IRect"
        }
      },
      "documentation": " Create a new rectangle from two corner points.\n The two points do not need to be the minimum and/or maximum corners.\n They only need to be two opposite corners.\n # Examples\n ```\n # use bevy_math::{IRect, IVec2};\n // Unit rect from [0,0] to [1,1]\n let r = IRect::from_corners(IVec2::ZERO, IVec2::ONE); // w=1 h=1\n // Same; the points do not need to be ordered\n let r = IRect::from_corners(IVec2::ONE, IVec2::ZERO); // w=1 h=1\n ```"
    },
    "bevy_math::rects::irect::IRect::half_size": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "half_size",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Rectangle half-size.\n # Rounding Behavior\n If the full size contains odd numbers they will be rounded down to the nearest whole number when calculating the half size.\n # Examples\n ```\n # use bevy_math::{IRect, IVec2};\n let r = IRect::new(0, 0, 4, 3); // w=4 h=3\n assert_eq!(r.half_size(), IVec2::new(2, 1));\n ```"
    },
    "bevy_math::rects::irect::IRect::height": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "height",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Rectangle height (max.y - min.y).\n # Examples\n ```\n # use bevy_math::IRect;\n let r = IRect::new(0, 0, 5, 1); // w=5 h=1\n assert_eq!(r.height(), 1);\n ```"
    },
    "bevy_math::rects::irect::IRect::inflate": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "inflate",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "expansion"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::irect::IRect"
        }
      },
      "documentation": " Create a new rectangle by expanding it evenly on all sides.\n A positive expansion value produces a larger rectangle,\n while a negative expansion value produces a smaller rectangle.\n If this would result in zero or negative width or height, [`IRect::EMPTY`] is returned instead.\n # Examples\n ```\n # use bevy_math::{IRect, IVec2};\n let r = IRect::new(0, 0, 5, 1); // w=5 h=1\n let r2 = r.inflate(3); // w=11 h=7\n assert_eq!(r2.min, IVec2::splat(-3));\n assert_eq!(r2.max, IVec2::new(8, 4));\n let r = IRect::new(0, -1, 4, 3); // w=4 h=4\n let r2 = r.inflate(-1); // w=2 h=2\n assert_eq!(r2.min, IVec2::new(1, 0));\n assert_eq!(r2.max, IVec2::new(3, 2));\n ```"
    },
    "bevy_math::rects::irect::IRect::intersect": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "intersect",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::rects::irect::IRect"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::irect::IRect"
        }
      },
      "documentation": " Build a new rectangle formed of the intersection of this rectangle and another rectangle.\n The intersection is the largest rectangle enclosed in both rectangles. If the intersection\n is empty, this method returns an empty rectangle ([`IRect::is_empty()`] returns `true`), but\n the actual values of [`IRect::min`] and [`IRect::max`] are implementation-dependent.\n # Examples\n ```\n # use bevy_math::{IRect, IVec2};\n let r1 = IRect::new(0, 0, 5, 1); // w=5 h=1\n let r2 = IRect::new(1, -1, 3, 3); // w=2 h=4\n let r = r1.intersect(r2);\n assert_eq!(r.min, IVec2::new(1, 0));\n assert_eq!(r.max, IVec2::new(3, 1));\n ```"
    },
    "bevy_math::rects::irect::IRect::is_empty": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "is_empty",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Check if the rectangle is empty.\n # Examples\n ```\n # use bevy_math::{IRect, IVec2};\n let r = IRect::from_corners(IVec2::ZERO, IVec2::new(0, 1)); // w=0 h=1\n assert!(r.is_empty());\n ```"
    },
    "bevy_math::rects::irect::IRect::new": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "x0"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "y0"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "x1"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "y1"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::irect::IRect"
        }
      },
      "documentation": " Create a new rectangle from two corner points.\n The two points do not need to be the minimum and/or maximum corners.\n They only need to be two opposite corners.\n # Examples\n ```\n # use bevy_math::IRect;\n let r = IRect::new(0, 4, 10, 6); // w=10 h=2\n let r = IRect::new(2, 3, 5, -1); // w=3 h=4\n ```"
    },
    "bevy_math::rects::irect::IRect::size": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "size",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Rectangle size.\n # Examples\n ```\n # use bevy_math::{IRect, IVec2};\n let r = IRect::new(0, 0, 5, 1); // w=5 h=1\n assert_eq!(r.size(), IVec2::new(5, 1));\n ```"
    },
    "bevy_math::rects::irect::IRect::union": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "union",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::rects::irect::IRect"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::irect::IRect"
        }
      },
      "documentation": " Build a new rectangle formed of the union of this rectangle and another rectangle.\n The union is the smallest rectangle enclosing both rectangles.\n # Examples\n ```\n # use bevy_math::{IRect, IVec2};\n let r1 = IRect::new(0, 0, 5, 1); // w=5 h=1\n let r2 = IRect::new(1, -1, 3, 3); // w=2 h=4\n let r = r1.union(r2);\n assert_eq!(r.min, IVec2::new(0, -1));\n assert_eq!(r.max, IVec2::new(5, 3));\n ```"
    },
    "bevy_math::rects::irect::IRect::union_point": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "union_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::irect::IRect"
        }
      },
      "documentation": " Build a new rectangle formed of the union of this rectangle and a point.\n The union is the smallest rectangle enclosing both the rectangle and the point. If the\n point is already inside the rectangle, this method returns a copy of the rectangle.\n # Examples\n ```\n # use bevy_math::{IRect, IVec2};\n let r = IRect::new(0, 0, 5, 1); // w=5 h=1\n let u = r.union_point(IVec2::new(3, 6));\n assert_eq!(u.min, IVec2::ZERO);\n assert_eq!(u.max, IVec2::new(5, 6));\n ```"
    },
    "bevy_math::rects::irect::IRect::width": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "width",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Rectangle width (max.x - min.x).\n # Examples\n ```\n # use bevy_math::IRect;\n let r = IRect::new(0, 0, 5, 1); // w=5 h=1\n assert_eq!(r.width(), 5);\n ```"
    },
    "bevy_math::rects::rect::Rect::as_irect": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "as_irect",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::irect::IRect"
        }
      },
      "documentation": " Returns self as [`IRect`] (i32)"
    },
    "bevy_math::rects::rect::Rect::as_urect": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "as_urect",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::urect::URect"
        }
      },
      "documentation": " Returns self as [`URect`] (u32)"
    },
    "bevy_math::rects::rect::Rect::center": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "center",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " The center point of the rectangle.\n # Examples\n ```\n # use bevy_math::{Rect, Vec2};\n let r = Rect::new(0., 0., 5., 1.); // w=5 h=1\n assert!(r.center().abs_diff_eq(Vec2::new(2.5, 0.5), 1e-5));\n ```"
    },
    "bevy_math::rects::rect::Rect::clone": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::rect::Rect"
        }
      }
    },
    "bevy_math::rects::rect::Rect::contains": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "contains",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Check if a point lies within this rectangle, inclusive of its edges.\n # Examples\n ```\n # use bevy_math::Rect;\n let r = Rect::new(0., 0., 5., 1.); // w=5 h=1\n assert!(r.contains(r.center()));\n assert!(r.contains(r.min));\n assert!(r.contains(r.max));\n ```"
    },
    "bevy_math::rects::rect::Rect::eq": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::rects::rect::Rect::from_center_half_size": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "from_center_half_size",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "origin"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "half_size"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::rect::Rect"
        }
      },
      "documentation": " Create a new rectangle from its center and half-size.\n # Panics\n This method panics if any of the components of the half-size is negative.\n # Examples\n ```\n # use bevy_math::{Rect, Vec2};\n let r = Rect::from_center_half_size(Vec2::ZERO, Vec2::ONE); // w=2 h=2\n assert!(r.min.abs_diff_eq(Vec2::splat(-1.), 1e-5));\n assert!(r.max.abs_diff_eq(Vec2::splat(1.), 1e-5));\n ```"
    },
    "bevy_math::rects::rect::Rect::from_center_size": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "from_center_size",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "origin"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "size"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::rect::Rect"
        }
      },
      "documentation": " Create a new rectangle from its center and size.\n # Panics\n This method panics if any of the components of the size is negative.\n # Examples\n ```\n # use bevy_math::{Rect, Vec2};\n let r = Rect::from_center_size(Vec2::ZERO, Vec2::ONE); // w=1 h=1\n assert!(r.min.abs_diff_eq(Vec2::splat(-0.5), 1e-5));\n assert!(r.max.abs_diff_eq(Vec2::splat(0.5), 1e-5));\n ```"
    },
    "bevy_math::rects::rect::Rect::from_corners": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "from_corners",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "p0"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "p1"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::rect::Rect"
        }
      },
      "documentation": " Create a new rectangle from two corner points.\n The two points do not need to be the minimum and/or maximum corners.\n They only need to be two opposite corners.\n # Examples\n ```\n # use bevy_math::{Rect, Vec2};\n // Unit rect from [0,0] to [1,1]\n let r = Rect::from_corners(Vec2::ZERO, Vec2::ONE); // w=1 h=1\n // Same; the points do not need to be ordered\n let r = Rect::from_corners(Vec2::ONE, Vec2::ZERO); // w=1 h=1\n ```"
    },
    "bevy_math::rects::rect::Rect::half_size": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "half_size",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Rectangle half-size.\n # Examples\n ```\n # use bevy_math::{Rect, Vec2};\n let r = Rect::new(0., 0., 5., 1.); // w=5 h=1\n assert!(r.half_size().abs_diff_eq(Vec2::new(2.5, 0.5), 1e-5));\n ```"
    },
    "bevy_math::rects::rect::Rect::height": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "height",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Rectangle height (max.y - min.y).\n # Examples\n ```\n # use bevy_math::Rect;\n let r = Rect::new(0., 0., 5., 1.); // w=5 h=1\n assert!((r.height() - 1.).abs() <= 1e-5);\n ```"
    },
    "bevy_math::rects::rect::Rect::inflate": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "inflate",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "expansion"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::rect::Rect"
        }
      },
      "documentation": " Create a new rectangle by expanding it evenly on all sides.\n A positive expansion value produces a larger rectangle,\n while a negative expansion value produces a smaller rectangle.\n If this would result in zero or negative width or height, [`Rect::EMPTY`] is returned instead.\n # Examples\n ```\n # use bevy_math::{Rect, Vec2};\n let r = Rect::new(0., 0., 5., 1.); // w=5 h=1\n let r2 = r.inflate(3.); // w=11 h=7\n assert!(r2.min.abs_diff_eq(Vec2::splat(-3.), 1e-5));\n assert!(r2.max.abs_diff_eq(Vec2::new(8., 4.), 1e-5));\n let r = Rect::new(0., -1., 6., 7.); // w=6 h=8\n let r2 = r.inflate(-2.); // w=11 h=7\n assert!(r2.min.abs_diff_eq(Vec2::new(2., 1.), 1e-5));\n assert!(r2.max.abs_diff_eq(Vec2::new(4., 5.), 1e-5));\n ```"
    },
    "bevy_math::rects::rect::Rect::intersect": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "intersect",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::rects::rect::Rect"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::rect::Rect"
        }
      },
      "documentation": " Build a new rectangle formed of the intersection of this rectangle and another rectangle.\n The intersection is the largest rectangle enclosed in both rectangles. If the intersection\n is empty, this method returns an empty rectangle ([`Rect::is_empty()`] returns `true`), but\n the actual values of [`Rect::min`] and [`Rect::max`] are implementation-dependent.\n # Examples\n ```\n # use bevy_math::{Rect, Vec2};\n let r1 = Rect::new(0., 0., 5., 1.); // w=5 h=1\n let r2 = Rect::new(1., -1., 3., 3.); // w=2 h=4\n let r = r1.intersect(r2);\n assert!(r.min.abs_diff_eq(Vec2::new(1., 0.), 1e-5));\n assert!(r.max.abs_diff_eq(Vec2::new(3., 1.), 1e-5));\n ```"
    },
    "bevy_math::rects::rect::Rect::is_empty": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "is_empty",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Check if the rectangle is empty.\n # Examples\n ```\n # use bevy_math::{Rect, Vec2};\n let r = Rect::from_corners(Vec2::ZERO, Vec2::new(0., 1.)); // w=0 h=1\n assert!(r.is_empty());\n ```"
    },
    "bevy_math::rects::rect::Rect::new": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x0"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y0"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x1"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y1"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::rect::Rect"
        }
      },
      "documentation": " Create a new rectangle from two corner points.\n The two points do not need to be the minimum and/or maximum corners.\n They only need to be two opposite corners.\n # Examples\n ```\n # use bevy_math::Rect;\n let r = Rect::new(0., 4., 10., 6.); // w=10 h=2\n let r = Rect::new(2., 3., 5., -1.); // w=3 h=4\n ```"
    },
    "bevy_math::rects::rect::Rect::normalize": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "normalize",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::rects::rect::Rect"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::rect::Rect"
        }
      },
      "documentation": " Build a new rectangle from this one with its coordinates expressed\n relative to `other` in a normalized ([0..1] x [0..1]) coordinate system.\n # Examples\n ```\n # use bevy_math::{Rect, Vec2};\n let r = Rect::new(2., 3., 4., 6.);\n let s = Rect::new(0., 0., 10., 10.);\n let n = r.normalize(s);\n assert_eq!(n.min.x, 0.2);\n assert_eq!(n.min.y, 0.3);\n assert_eq!(n.max.x, 0.4);\n assert_eq!(n.max.y, 0.6);\n ```"
    },
    "bevy_math::rects::rect::Rect::size": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "size",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Rectangle size.\n # Examples\n ```\n # use bevy_math::{Rect, Vec2};\n let r = Rect::new(0., 0., 5., 1.); // w=5 h=1\n assert!(r.size().abs_diff_eq(Vec2::new(5., 1.), 1e-5));\n ```"
    },
    "bevy_math::rects::rect::Rect::union": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "union",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::rects::rect::Rect"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::rect::Rect"
        }
      },
      "documentation": " Build a new rectangle formed of the union of this rectangle and another rectangle.\n The union is the smallest rectangle enclosing both rectangles.\n # Examples\n ```\n # use bevy_math::{Rect, Vec2};\n let r1 = Rect::new(0., 0., 5., 1.); // w=5 h=1\n let r2 = Rect::new(1., -1., 3., 3.); // w=2 h=4\n let r = r1.union(r2);\n assert!(r.min.abs_diff_eq(Vec2::new(0., -1.), 1e-5));\n assert!(r.max.abs_diff_eq(Vec2::new(5., 3.), 1e-5));\n ```"
    },
    "bevy_math::rects::rect::Rect::union_point": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "union_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::rect::Rect"
        }
      },
      "documentation": " Build a new rectangle formed of the union of this rectangle and a point.\n The union is the smallest rectangle enclosing both the rectangle and the point. If the\n point is already inside the rectangle, this method returns a copy of the rectangle.\n # Examples\n ```\n # use bevy_math::{Rect, Vec2};\n let r = Rect::new(0., 0., 5., 1.); // w=5 h=1\n let u = r.union_point(Vec2::new(3., 6.));\n assert!(u.min.abs_diff_eq(Vec2::ZERO, 1e-5));\n assert!(u.max.abs_diff_eq(Vec2::new(5., 6.), 1e-5));\n ```"
    },
    "bevy_math::rects::rect::Rect::width": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "width",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Rectangle width (max.x - min.x).\n # Examples\n ```\n # use bevy_math::Rect;\n let r = Rect::new(0., 0., 5., 1.); // w=5 h=1\n assert!((r.width() - 5.).abs() <= 1e-5);\n ```"
    },
    "bevy_math::rects::urect::URect::as_irect": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "as_irect",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::irect::IRect"
        }
      },
      "documentation": " Returns self as [`IRect`] (i32)"
    },
    "bevy_math::rects::urect::URect::as_rect": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "as_rect",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::rect::Rect"
        }
      },
      "documentation": " Returns self as [`Rect`] (f32)"
    },
    "bevy_math::rects::urect::URect::assert_receiver_is_total_eq": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_math::rects::urect::URect::center": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "center",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " The center point of the rectangle.\n # Rounding Behavior\n If the (min + max) contains odd numbers they will be rounded down to the nearest whole number when calculating the center.\n # Examples\n ```\n # use bevy_math::{URect, UVec2};\n let r = URect::new(0, 0, 4, 2); // w=4 h=2\n assert_eq!(r.center(), UVec2::new(2, 1));\n ```"
    },
    "bevy_math::rects::urect::URect::clone": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::urect::URect"
        }
      }
    },
    "bevy_math::rects::urect::URect::contains": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "contains",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Check if a point lies within this rectangle, inclusive of its edges.\n # Examples\n ```\n # use bevy_math::URect;\n let r = URect::new(0, 0, 5, 1); // w=5 h=1\n assert!(r.contains(r.center()));\n assert!(r.contains(r.min));\n assert!(r.contains(r.max));\n ```"
    },
    "bevy_math::rects::urect::URect::eq": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::rects::urect::URect::from_center_half_size": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "from_center_half_size",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "origin"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "half_size"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::urect::URect"
        }
      },
      "documentation": " Create a new rectangle from its center and half-size.\n # Panics\n This method panics if any of the components of the half-size is negative or if `origin - half_size` results in any negatives.\n # Examples\n ```\n # use bevy_math::{URect, UVec2};\n let r = URect::from_center_half_size(UVec2::ONE, UVec2::ONE); // w=2 h=2\n assert_eq!(r.min, UVec2::splat(0));\n assert_eq!(r.max, UVec2::splat(2));\n ```"
    },
    "bevy_math::rects::urect::URect::from_center_size": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "from_center_size",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "origin"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "size"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::urect::URect"
        }
      },
      "documentation": " Create a new rectangle from its center and size.\n # Rounding Behavior\n If the size contains odd numbers they will be rounded down to the nearest whole number.\n # Panics\n This method panics if any of the components of the size is negative or if `origin - (size / 2)` results in any negatives.\n # Examples\n ```\n # use bevy_math::{URect, UVec2};\n let r = URect::from_center_size(UVec2::ONE, UVec2::splat(2)); // w=2 h=2\n assert_eq!(r.min, UVec2::splat(0));\n assert_eq!(r.max, UVec2::splat(2));\n ```"
    },
    "bevy_math::rects::urect::URect::from_corners": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "from_corners",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "p0"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "p1"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::urect::URect"
        }
      },
      "documentation": " Create a new rectangle from two corner points.\n The two points do not need to be the minimum and/or maximum corners.\n They only need to be two opposite corners.\n # Examples\n ```\n # use bevy_math::{URect, UVec2};\n // Unit rect from [0,0] to [1,1]\n let r = URect::from_corners(UVec2::ZERO, UVec2::ONE); // w=1 h=1\n // Same; the points do not need to be ordered\n let r = URect::from_corners(UVec2::ONE, UVec2::ZERO); // w=1 h=1\n ```"
    },
    "bevy_math::rects::urect::URect::half_size": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "half_size",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Rectangle half-size.\n # Rounding Behavior\n If the full size contains odd numbers they will be rounded down to the nearest whole number when calculating the half size.\n # Examples\n ```\n # use bevy_math::{URect, UVec2};\n let r = URect::new(0, 0, 4, 2); // w=4 h=2\n assert_eq!(r.half_size(), UVec2::new(2, 1));\n ```"
    },
    "bevy_math::rects::urect::URect::height": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "height",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Rectangle height (max.y - min.y).\n # Examples\n ```\n # use bevy_math::URect;\n let r = URect::new(0, 0, 5, 1); // w=5 h=1\n assert_eq!(r.height(), 1);\n ```"
    },
    "bevy_math::rects::urect::URect::inflate": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "inflate",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "expansion"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::urect::URect"
        }
      },
      "documentation": " Create a new rectangle by expanding it evenly on all sides.\n A positive expansion value produces a larger rectangle,\n while a negative expansion value produces a smaller rectangle.\n If this would result in zero width or height, [`URect::EMPTY`] is returned instead.\n # Examples\n ```\n # use bevy_math::{URect, UVec2};\n let r = URect::new(4, 4, 6, 6); // w=2 h=2\n let r2 = r.inflate(1); // w=4 h=4\n assert_eq!(r2.min, UVec2::splat(3));\n assert_eq!(r2.max, UVec2::splat(7));\n let r = URect::new(4, 4, 8, 8); // w=4 h=4\n let r2 = r.inflate(-1); // w=2 h=2\n assert_eq!(r2.min, UVec2::splat(5));\n assert_eq!(r2.max, UVec2::splat(7));\n ```"
    },
    "bevy_math::rects::urect::URect::intersect": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "intersect",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::rects::urect::URect"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::urect::URect"
        }
      },
      "documentation": " Build a new rectangle formed of the intersection of this rectangle and another rectangle.\n The intersection is the largest rectangle enclosed in both rectangles. If the intersection\n is empty, this method returns an empty rectangle ([`URect::is_empty()`] returns `true`), but\n the actual values of [`URect::min`] and [`URect::max`] are implementation-dependent.\n # Examples\n ```\n # use bevy_math::{URect, UVec2};\n let r1 = URect::new(0, 0, 2, 2); // w=2 h=2\n let r2 = URect::new(1, 1, 3, 3); // w=2 h=2\n let r = r1.intersect(r2);\n assert_eq!(r.min, UVec2::new(1, 1));\n assert_eq!(r.max, UVec2::new(2, 2));\n ```"
    },
    "bevy_math::rects::urect::URect::is_empty": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "is_empty",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Check if the rectangle is empty.\n # Examples\n ```\n # use bevy_math::{URect, UVec2};\n let r = URect::from_corners(UVec2::ZERO, UVec2::new(0, 1)); // w=0 h=1\n assert!(r.is_empty());\n ```"
    },
    "bevy_math::rects::urect::URect::new": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "x0"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "y0"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "x1"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "y1"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::urect::URect"
        }
      },
      "documentation": " Create a new rectangle from two corner points.\n The two points do not need to be the minimum and/or maximum corners.\n They only need to be two opposite corners.\n # Examples\n ```\n # use bevy_math::URect;\n let r = URect::new(0, 4, 10, 6); // w=10 h=2\n let r = URect::new(2, 4, 5, 0); // w=3 h=4\n ```"
    },
    "bevy_math::rects::urect::URect::size": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "size",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Rectangle size.\n # Examples\n ```\n # use bevy_math::{URect, UVec2};\n let r = URect::new(0, 0, 5, 1); // w=5 h=1\n assert_eq!(r.size(), UVec2::new(5, 1));\n ```"
    },
    "bevy_math::rects::urect::URect::union": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "union",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::rects::urect::URect"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::urect::URect"
        }
      },
      "documentation": " Build a new rectangle formed of the union of this rectangle and another rectangle.\n The union is the smallest rectangle enclosing both rectangles.\n # Examples\n ```\n # use bevy_math::{URect, UVec2};\n let r1 = URect::new(0, 0, 5, 1); // w=5 h=1\n let r2 = URect::new(1, 0, 3, 8); // w=2 h=4\n let r = r1.union(r2);\n assert_eq!(r.min, UVec2::new(0, 0));\n assert_eq!(r.max, UVec2::new(5, 8));\n ```"
    },
    "bevy_math::rects::urect::URect::union_point": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "union_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::urect::URect"
        }
      },
      "documentation": " Build a new rectangle formed of the union of this rectangle and a point.\n The union is the smallest rectangle enclosing both the rectangle and the point. If the\n point is already inside the rectangle, this method returns a copy of the rectangle.\n # Examples\n ```\n # use bevy_math::{URect, UVec2};\n let r = URect::new(0, 0, 5, 1); // w=5 h=1\n let u = r.union_point(UVec2::new(3, 6));\n assert_eq!(u.min, UVec2::ZERO);\n assert_eq!(u.max, UVec2::new(5, 6));\n ```"
    },
    "bevy_math::rects::urect::URect::width": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "width",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Rectangle width (max.x - min.x).\n # Examples\n ```\n # use bevy_math::URect;\n let r = URect::new(0, 0, 5, 1); // w=5 h=1\n assert_eq!(r.width(), 5);\n ```"
    },
    "bevy_math::rotation2d::Rot2::angle_to": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "angle_to",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the angle in radians needed to make `self` and `other` coincide."
    },
    "bevy_math::rotation2d::Rot2::as_degrees": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "as_degrees",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the rotation in degrees in the `(-180, 180]` range."
    },
    "bevy_math::rotation2d::Rot2::as_radians": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "as_radians",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the rotation in radians in the `(-pi, pi]` range."
    },
    "bevy_math::rotation2d::Rot2::as_turn_fraction": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "as_turn_fraction",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the rotation as a fraction of a full 360 degree turn."
    },
    "bevy_math::rotation2d::Rot2::clone": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      }
    },
    "bevy_math::rotation2d::Rot2::degrees": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "degrees",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "degrees"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      },
      "documentation": " Creates a [`Rot2`] from a counterclockwise angle in degrees.\n # Note\n The input rotation will always be clamped to the range `(-180°, 180°]` by design.\n # Example\n ```\n # use bevy_math::Rot2;\n # use approx::assert_relative_eq;\n let rot1 = Rot2::degrees(270.0);\n let rot2 = Rot2::degrees(-90.0);\n #[cfg(feature = \"approx\")]\n assert_relative_eq!(rot1, rot2);\n let rot3 = Rot2::degrees(180.0);\n #[cfg(feature = \"approx\")]\n assert_relative_eq!(rot1 * rot1, rot3);\n ```"
    },
    "bevy_math::rotation2d::Rot2::eq": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::rotation2d::Rot2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::rotation2d::Rot2::fast_renormalize": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "fast_renormalize",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      },
      "documentation": " Returns `self` after an approximate normalization, assuming the value is already nearly normalized.\n Useful for preventing numerical error accumulation.\n See [`Dir3::fast_renormalize`](crate::Dir3::fast_renormalize) for an example of when such error accumulation might occur."
    },
    "bevy_math::rotation2d::Rot2::from_sin_cos": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "from_sin_cos",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "sin"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "cos"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      },
      "documentation": " Creates a [`Rot2`] from the sine and cosine of an angle in radians.\n The rotation is only valid if `sin * sin + cos * cos == 1.0`.\n # Panics\n Panics if `sin * sin + cos * cos != 1.0` when the `glam_assert` feature is enabled."
    },
    "bevy_math::rotation2d::Rot2::inverse": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      },
      "documentation": " Returns the inverse of the rotation. This is also the conjugate\n of the unit complex number representing the rotation."
    },
    "bevy_math::rotation2d::Rot2::is_finite": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if the rotation is neither infinite nor NaN."
    },
    "bevy_math::rotation2d::Rot2::is_nan": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if the rotation is NaN."
    },
    "bevy_math::rotation2d::Rot2::is_near_identity": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "is_near_identity",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if the rotation is near [`Rot2::IDENTITY`]."
    },
    "bevy_math::rotation2d::Rot2::is_normalized": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "is_normalized",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns whether `self` has a length of `1.0` or not.\n Uses a precision threshold of approximately `1e-4`."
    },
    "bevy_math::rotation2d::Rot2::length": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "length",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the length or norm of the complex number used to represent the rotation.\n The length is typically expected to be `1.0`. Unexpectedly denormalized rotations\n can be a result of incorrect construction or floating point error caused by\n successive operations."
    },
    "bevy_math::rotation2d::Rot2::length_recip": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "length_recip",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes `1.0 / self.length()`.\n For valid results, `self` must _not_ have a length of zero."
    },
    "bevy_math::rotation2d::Rot2::length_squared": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the squared length or norm of the complex number used to represent the rotation.\n This is generally faster than [`Rot2::length()`], as it avoids a square\n root operation.\n The length is typically expected to be `1.0`. Unexpectedly denormalized rotations\n can be a result of incorrect construction or floating point error caused by\n successive operations."
    },
    "bevy_math::rotation2d::Rot2::mul": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      }
    },
    "bevy_math::rotation2d::Rot2::mul-1": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          }
        },
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir2"
        }
      }
    },
    "bevy_math::rotation2d::Rot2::mul-2": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          }
        },
        {
          "kind": {
            "val": "glam::Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "bevy_math::rotation2d::Rot2::nlerp": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "nlerp",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "end"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      },
      "documentation": " Performs a linear interpolation between `self` and `rhs` based on\n the value `s`, and normalizes the rotation afterwards.\n When `s == 0.0`, the result will be equal to `self`.\n When `s == 1.0`, the result will be equal to `rhs`.\n This is slightly more efficient than [`slerp`](Self::slerp), and produces a similar result\n when the difference between the two rotations is small. At larger differences,\n the result resembles a kind of ease-in-out effect.\n If you would like the angular velocity to remain constant, consider using [`slerp`](Self::slerp) instead.\n # Details\n `nlerp` corresponds to computing an angle for a point at position `s` on a line drawn\n between the endpoints of the arc formed by `self` and `rhs` on a unit circle,\n and normalizing the result afterwards.\n Note that if the angles are opposite like 0 and π, the line will pass through the origin,\n and the resulting angle will always be either `self` or `rhs` depending on `s`.\n If `s` happens to be `0.5` in this case, a valid rotation cannot be computed, and `self`\n will be returned as a fallback.\n # Example\n ```\n # use bevy_math::Rot2;\n #\n let rot1 = Rot2::IDENTITY;\n let rot2 = Rot2::degrees(135.0);\n let result1 = rot1.nlerp(rot2, 1.0 / 3.0);\n assert_eq!(result1.as_degrees(), 28.675055);\n let result2 = rot1.nlerp(rot2, 0.5);\n assert_eq!(result2.as_degrees(), 67.5);\n ```"
    },
    "bevy_math::rotation2d::Rot2::normalize": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "normalize",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      },
      "documentation": " Returns `self` with a length of `1.0`.\n Note that [`Rot2`] should typically already be normalized by design.\n Manual normalization is only needed when successive operations result in\n accumulated floating point error, or if the rotation was constructed\n with invalid values.\n # Panics\n Panics if `self` has a length of zero, NaN, or infinity when debug assertions are enabled."
    },
    "bevy_math::rotation2d::Rot2::radians": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "radians",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radians"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      },
      "documentation": " Creates a [`Rot2`] from a counterclockwise angle in radians.\n # Note\n The input rotation will always be clamped to the range `(-π, π]` by design.\n # Example\n ```\n # use bevy_math::Rot2;\n # use approx::assert_relative_eq;\n # use std::f32::consts::{FRAC_PI_2, PI};\n let rot1 = Rot2::radians(3.0 * FRAC_PI_2);\n let rot2 = Rot2::radians(-FRAC_PI_2);\n #[cfg(feature = \"approx\")]\n assert_relative_eq!(rot1, rot2);\n let rot3 = Rot2::radians(PI);\n #[cfg(feature = \"approx\")]\n assert_relative_eq!(rot1 * rot1, rot3);\n ```"
    },
    "bevy_math::rotation2d::Rot2::sin_cos": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "sin_cos",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": [
            {
              "primitive": "f32"
            },
            {
              "primitive": "f32"
            }
          ]
        }
      },
      "documentation": " Returns the sine and cosine of the rotation angle in radians."
    },
    "bevy_math::rotation2d::Rot2::slerp": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "slerp",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "end"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      },
      "documentation": " Performs a spherical linear interpolation between `self` and `end`\n based on the value `s`.\n This corresponds to interpolating between the two angles at a constant angular velocity.\n When `s == 0.0`, the result will be equal to `self`.\n When `s == 1.0`, the result will be equal to `rhs`.\n If you would like the rotation to have a kind of ease-in-out effect, consider\n using the slightly more efficient [`nlerp`](Self::nlerp) instead.\n # Example\n ```\n # use bevy_math::Rot2;\n #\n let rot1 = Rot2::IDENTITY;\n let rot2 = Rot2::degrees(135.0);\n let result1 = rot1.slerp(rot2, 1.0 / 3.0);\n assert_eq!(result1.as_degrees(), 45.0);\n let result2 = rot1.slerp(rot2, 0.5);\n assert_eq!(result2.as_degrees(), 67.5);\n ```"
    },
    "bevy_math::rotation2d::Rot2::turn_fraction": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "turn_fraction",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "fraction"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      },
      "documentation": " Creates a [`Rot2`] from a counterclockwise fraction of a full turn of 360 degrees.\n # Note\n The input rotation will always be clamped to the range `(-50%, 50%]` by design.\n # Example\n ```\n # use bevy_math::Rot2;\n # use approx::assert_relative_eq;\n let rot1 = Rot2::turn_fraction(0.75);\n let rot2 = Rot2::turn_fraction(-0.25);\n #[cfg(feature = \"approx\")]\n assert_relative_eq!(rot1, rot2);\n let rot3 = Rot2::turn_fraction(0.5);\n #[cfg(feature = \"approx\")]\n assert_relative_eq!(rot1 * rot1, rot3);\n ```"
    },
    "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration::short_name": {
      "namespace": "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration",
      "identifier": "short_name",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration"
          },
          "documentation": "The type registration.",
          "name": "registration"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "str"
        },
        "documentation": "The short name of the",
        "name": "short_name"
      },
      "documentation": "Retrieves the short name of the type.\nThe short name is a more human-readable version of the type name."
    },
    "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration::type_name": {
      "namespace": "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration",
      "identifier": "type_name",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration"
          },
          "documentation": "The type registration.",
          "name": "registration"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "str"
        },
        "documentation": "The name of the type.",
        "name": "type_name"
      },
      "documentation": "Retrieves the name of the type.\n"
    },
    "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder::build": {
      "namespace": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder",
      "identifier": "build",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context.",
          "name": "ctxt"
        },
        {
          "kind": {
            "val": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder"
          },
          "documentation": "The query to build.",
          "name": "query"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "vec": {
              "val": "bevy_mod_scripting_core::bindings::query::ScriptQueryResult"
            }
          }
        },
        "documentation": "The entities and component references that match the query.",
        "name": "result"
      },
      "documentation": "Builds the query and retrieves the entities and component references.\n"
    },
    "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder::component": {
      "namespace": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder",
      "identifier": "component",
      "arguments": [
        {
          "kind": {
            "val": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder"
          },
          "documentation": "The query to add the component to",
          "name": "query"
        },
        {
          "kind": {
            "val": "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration"
          },
          "name": "components"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder"
        },
        "documentation": "The query with the component added",
        "name": "query"
      },
      "documentation": "Adds a component to be retrieved by the query\n"
    },
    "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder::with": {
      "namespace": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder",
      "identifier": "with",
      "arguments": [
        {
          "kind": {
            "val": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder"
          },
          "documentation": "The query to add the component to",
          "name": "query"
        },
        {
          "kind": {
            "val": "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration"
          },
          "name": "with"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder"
        },
        "documentation": "The query with the component added",
        "name": "query"
      },
      "documentation": "Adds a component to filter the query by. This component will NOT be retrieved.\n"
    },
    "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder::without": {
      "namespace": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder",
      "identifier": "without",
      "arguments": [
        {
          "kind": {
            "val": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder"
          },
          "documentation": "The query to add the component to",
          "name": "query"
        },
        {
          "kind": {
            "val": "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration"
          },
          "name": "without"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder"
        },
        "documentation": "The query with the component added",
        "name": "query"
      },
      "documentation": "Adds a component to filter the query by. This component will NOT be retrieved.\n"
    },
    "bevy_mod_scripting_core::bindings::query::ScriptQueryResult::components": {
      "namespace": "bevy_mod_scripting_core::bindings::query::ScriptQueryResult",
      "identifier": "components",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_mod_scripting_core::bindings::query::ScriptQueryResult"
          },
          "documentation": "The query result to retrieve the components from.",
          "name": "query"
        }
      ],
      "return_type": {
        "kind": {
          "vec": {
            "primitive": "reflectReference"
          }
        },
        "documentation": "The components from the query result.",
        "name": "components"
      },
      "documentation": "Retrieves the components from the query result.\n\nThese are ordered by the order they were added to the query.\n"
    },
    "bevy_mod_scripting_core::bindings::query::ScriptQueryResult::entity": {
      "namespace": "bevy_mod_scripting_core::bindings::query::ScriptQueryResult",
      "identifier": "entity",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_mod_scripting_core::bindings::query::ScriptQueryResult"
          },
          "documentation": "The query result to retrieve the entity from.",
          "name": "query"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::entity::Entity"
        },
        "documentation": "The entity from the query result.",
        "name": "entity"
      },
      "documentation": "Retrieves the entity from the query result.\n"
    },
    "bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration::short_name": {
      "namespace": "bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration",
      "identifier": "short_name",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration"
          },
          "documentation": "The type registration.",
          "name": "registration"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "str"
        },
        "documentation": "The short name of the",
        "name": "short_name"
      },
      "documentation": "Retrieves the short name of the type.\nThe short name is a more human-readable version of the type name."
    },
    "bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration::type_name": {
      "namespace": "bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration",
      "identifier": "type_name",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration"
          },
          "documentation": "The type registration.",
          "name": "registration"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "str"
        },
        "documentation": "The name of the type.",
        "name": "type_name"
      },
      "documentation": "Retrieves the name of the type.\n"
    },
    "bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration::short_name": {
      "namespace": "bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration",
      "identifier": "short_name",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration"
          },
          "documentation": "The type registration.",
          "name": "registration"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "string"
        },
        "documentation": "The short name of the",
        "name": "short_name"
      },
      "documentation": "Retrieves the short name of the type.\nThe short name is a more human-readable version of the type name."
    },
    "bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration::type_name": {
      "namespace": "bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration",
      "identifier": "type_name",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration"
          },
          "documentation": "The type registration.",
          "name": "registration"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "string"
        },
        "documentation": "The name of the type.",
        "name": "type_name"
      },
      "documentation": "Retrieves the name of the type.\n"
    },
    "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder::after": {
      "namespace": "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder",
      "identifier": "after",
      "arguments": [
        {
          "kind": {
            "val": "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder"
          },
          "documentation": "The system builder to add the dependency to.",
          "name": "builder"
        },
        {
          "kind": {
            "val": "bevy_system_reflection::ReflectSystem"
          },
          "documentation": "The system to run after.",
          "name": "system"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder"
        },
        "documentation": "The system builder with the dependency added.",
        "name": "builder"
      },
      "documentation": "Specifies the system is to run *after* the given system\n\nNote: this is an experimental feature, and the ordering might not work correctly for script initialized systems\n"
    },
    "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder::before": {
      "namespace": "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder",
      "identifier": "before",
      "arguments": [
        {
          "kind": {
            "val": "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder"
          },
          "documentation": "The system builder to add the dependency to.",
          "name": "builder"
        },
        {
          "kind": {
            "val": "bevy_system_reflection::ReflectSystem"
          },
          "documentation": "The system to run before.",
          "name": "system"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder"
        },
        "documentation": "The system builder with the dependency added.",
        "name": "builder"
      },
      "documentation": "Specifies the system is to run *before* the given system.\n\nNote: this is an experimental feature, and the ordering might not work correctly for script initialized systems\n"
    },
    "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder::exclusive": {
      "namespace": "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder",
      "identifier": "exclusive",
      "arguments": [
        {
          "kind": {
            "val": "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder"
          },
          "documentation": "The system builder to make exclusive.",
          "name": "builder"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder"
        },
        "documentation": "The system builder that is now exclusive.",
        "name": "builder"
      },
      "documentation": "Specifies the system is to run exclusively, meaning it can access anything, but will not run in parallel with other systems."
    },
    "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder::query": {
      "namespace": "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder",
      "identifier": "query",
      "arguments": [
        {
          "kind": {
            "val": "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder"
          },
          "documentation": "The system builder to add the query to.",
          "name": "builder"
        },
        {
          "kind": {
            "val": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder"
          },
          "documentation": "The query to add.",
          "name": "query"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "val": "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder"
          }
        },
        "documentation": "The system builder with the query added.",
        "name": "builder"
      },
      "documentation": "Adds a query to the system builder.\n"
    },
    "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder::resource": {
      "namespace": "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder",
      "identifier": "resource",
      "arguments": [
        {
          "kind": {
            "val": "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder"
          },
          "documentation": "The system builder to add the resource to.",
          "name": "builder"
        },
        {
          "kind": {
            "val": "bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration"
          },
          "documentation": "The resource to add.",
          "name": "resource"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_mod_scripting_core::bindings::script_system::ScriptSystemBuilder"
        },
        "documentation": "The system builder with the resource added.",
        "name": "builder"
      },
      "documentation": "Requests the system have access to the given resource. The resource will be added to the\nlist of arguments of the callback in the order they're provided."
    },
    "bevy_mod_scripting_core::script::context_key::ScriptAttachment::new_entity_script": {
      "namespace": "bevy_mod_scripting_core::script::context_key::ScriptAttachment",
      "identifier": "new_entity_script",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "documentation": "The entity to attach the script to.",
          "name": "entity"
        },
        {
          "kind": {
            "val": "bevy_asset::handle::Handle<bevy_mod_scripting_core::asset::ScriptAsset>"
          },
          "documentation": "The script asset to attach to the entity.",
          "name": "script"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "val": "bevy_mod_scripting_core::script::context_key::ScriptAttachment"
          }
        },
        "documentation": "The new script attachment for the entity.",
        "name": "attachment"
      },
      "documentation": "Creates a new script attachment descriptor for an entity attached script.\n"
    },
    "bevy_mod_scripting_core::script::context_key::ScriptAttachment::new_static_script": {
      "namespace": "bevy_mod_scripting_core::script::context_key::ScriptAttachment",
      "identifier": "new_static_script",
      "arguments": [
        {
          "kind": {
            "val": "bevy_asset::handle::Handle<bevy_mod_scripting_core::asset::ScriptAsset>"
          },
          "documentation": "The script asset to create the attachment from.",
          "name": "script"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "val": "bevy_mod_scripting_core::script::context_key::ScriptAttachment"
          }
        },
        "documentation": "The new script attachment.",
        "name": "attachment"
      },
      "documentation": "Creates a new script attachment descriptor from a script asset.\n "
    },
    "bevy_platform::time::Instant::add": {
      "namespace": "bevy_platform::time::Instant",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "bevy_platform::time::Instant"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "core::time::Duration"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_platform::time::Instant"
        }
      },
      "documentation": " # Panics\n This function may panic if the resulting point in time cannot be represented by the\n underlying data structure. See [`Instant::checked_add`] for a version without panic."
    },
    "bevy_platform::time::Instant::assert_receiver_is_total_eq": {
      "namespace": "bevy_platform::time::Instant",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_platform::time::Instant"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_platform::time::Instant::clone": {
      "namespace": "bevy_platform::time::Instant",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_platform::time::Instant"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_platform::time::Instant"
        }
      }
    },
    "bevy_platform::time::Instant::duration_since": {
      "namespace": "bevy_platform::time::Instant",
      "identifier": "duration_since",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_platform::time::Instant"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_platform::time::Instant"
          },
          "name": "earlier"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::time::Duration"
        }
      },
      "documentation": " Returns the amount of time elapsed from another instant to this one,\n or zero duration if that instant is later than this one.\n # Panics\n Previous Rust versions panicked when `earlier` was later than `self`. Currently this\n method saturates. Future versions may reintroduce the panic in some circumstances.\n See [Monotonicity].\n [Monotonicity]: Instant#monotonicity\n # Examples\n ```no_run\n use std::time::{Duration, Instant};\n use std::thread::sleep;\n let now = Instant::now();\n sleep(Duration::new(1, 0));\n let new_now = Instant::now();\n println!(\"{:?}\", new_now.duration_since(now));\n println!(\"{:?}\", now.duration_since(new_now)); // 0ns\n ```"
    },
    "bevy_platform::time::Instant::elapsed": {
      "namespace": "bevy_platform::time::Instant",
      "identifier": "elapsed",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_platform::time::Instant"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::time::Duration"
        }
      },
      "documentation": " Returns the amount of time elapsed since this instant.\n # Panics\n Previous Rust versions panicked when the current time was earlier than self. Currently this\n method returns a Duration of zero in that case. Future versions may reintroduce the panic.\n See [Monotonicity].\n [Monotonicity]: Instant#monotonicity\n # Examples\n ```no_run\n use std::thread::sleep;\n use std::time::{Duration, Instant};\n let instant = Instant::now();\n let three_secs = Duration::from_secs(3);\n sleep(three_secs);\n assert!(instant.elapsed() >= three_secs);\n ```"
    },
    "bevy_platform::time::Instant::eq": {
      "namespace": "bevy_platform::time::Instant",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_platform::time::Instant"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_platform::time::Instant"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_platform::time::Instant::now": {
      "namespace": "bevy_platform::time::Instant",
      "identifier": "now",
      "return_type": {
        "kind": {
          "val": "bevy_platform::time::Instant"
        }
      },
      "documentation": " Returns an instant corresponding to \"now\".\n # Examples\n ```\n use std::time::Instant;\n let now = Instant::now();\n ```"
    },
    "bevy_platform::time::Instant::saturating_duration_since": {
      "namespace": "bevy_platform::time::Instant",
      "identifier": "saturating_duration_since",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_platform::time::Instant"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_platform::time::Instant"
          },
          "name": "earlier"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::time::Duration"
        }
      },
      "documentation": " Returns the amount of time elapsed from another instant to this one,\n or zero duration if that instant is later than this one.\n # Examples\n ```no_run\n use std::time::{Duration, Instant};\n use std::thread::sleep;\n let now = Instant::now();\n sleep(Duration::new(1, 0));\n let new_now = Instant::now();\n println!(\"{:?}\", new_now.saturating_duration_since(now));\n println!(\"{:?}\", now.saturating_duration_since(new_now)); // 0ns\n ```"
    },
    "bevy_platform::time::Instant::sub": {
      "namespace": "bevy_platform::time::Instant",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "bevy_platform::time::Instant"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "core::time::Duration"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_platform::time::Instant"
        }
      }
    },
    "bevy_platform::time::Instant::sub-1": {
      "namespace": "bevy_platform::time::Instant",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "bevy_platform::time::Instant"
          }
        },
        {
          "kind": {
            "val": "bevy_platform::time::Instant"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::time::Duration"
        }
      }
    },
    "bevy_system_reflection::ReflectSchedule::get_system_by_name": {
      "namespace": "bevy_system_reflection::ReflectSchedule",
      "identifier": "get_system_by_name",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "name": "ctxt"
        },
        {
          "kind": {
            "ref": "bevy_system_reflection::ReflectSchedule"
          },
          "documentation": "The schedule to retrieve the system from.",
          "name": "schedule"
        },
        {
          "kind": {
            "primitive": "string"
          },
          "documentation": "The identifier or full path of the system to retrieve.",
          "name": "name"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "option": {
              "val": "bevy_system_reflection::ReflectSystem"
            }
          }
        },
        "documentation": "The system with the given name, if it exists.",
        "name": "system"
      },
      "documentation": "Retrieves the system with the given name in the schedule\n"
    },
    "bevy_system_reflection::ReflectSchedule::render_dot": {
      "namespace": "bevy_system_reflection::ReflectSchedule",
      "identifier": "render_dot",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "documentation": "The function call context",
          "name": "ctxt"
        },
        {
          "kind": {
            "ref": "bevy_system_reflection::ReflectSchedule"
          },
          "documentation": "The schedule to render.",
          "name": "schedule"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "primitive": "string"
          }
        },
        "documentation": "The dot graph string.",
        "name": "dot"
      },
      "documentation": "Renders the schedule as a dot graph string.\n\nUseful for debugging scheduling.\n"
    },
    "bevy_system_reflection::ReflectSchedule::systems": {
      "namespace": "bevy_system_reflection::ReflectSchedule",
      "identifier": "systems",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "name": "ctxt"
        },
        {
          "kind": {
            "ref": "bevy_system_reflection::ReflectSchedule"
          },
          "documentation": "The schedule to retrieve the systems from.",
          "name": "schedule"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "vec": {
              "val": "bevy_system_reflection::ReflectSystem"
            }
          }
        },
        "documentation": "The systems in the schedule.",
        "name": "systems"
      },
      "documentation": "Retrieves all the systems in the schedule.\n"
    },
    "bevy_system_reflection::ReflectSystem::identifier": {
      "namespace": "bevy_system_reflection::ReflectSystem",
      "identifier": "identifier",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_system_reflection::ReflectSystem"
          },
          "documentation": "The system to retrieve the identifier from.",
          "name": "system"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "string"
        },
        "documentation": "The identifier of the system, e.g. `my_system`",
        "name": "identifier"
      },
      "documentation": "Retrieves the identifier of the system"
    },
    "bevy_system_reflection::ReflectSystem::path": {
      "namespace": "bevy_system_reflection::ReflectSystem",
      "identifier": "path",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_system_reflection::ReflectSystem"
          },
          "documentation": "The system to retrieve the path from.",
          "name": "system"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "string"
        },
        "documentation": "The full path of the system, e.g. `my_crate::systems::my_system<T>`",
        "name": "path"
      },
      "documentation": "Retrieves the full path of the system"
    },
    "bevy_time::fixed::Fixed::clone": {
      "namespace": "bevy_time::fixed::Fixed",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::fixed::Fixed"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_time::fixed::Fixed"
        }
      }
    },
    "bevy_time::real::Real::clone": {
      "namespace": "bevy_time::real::Real",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::real::Real"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_time::real::Real"
        }
      }
    },
    "bevy_time::stopwatch::Stopwatch::assert_receiver_is_total_eq": {
      "namespace": "bevy_time::stopwatch::Stopwatch",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::stopwatch::Stopwatch"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_time::stopwatch::Stopwatch::clone": {
      "namespace": "bevy_time::stopwatch::Stopwatch",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::stopwatch::Stopwatch"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_time::stopwatch::Stopwatch"
        }
      }
    },
    "bevy_time::stopwatch::Stopwatch::elapsed": {
      "namespace": "bevy_time::stopwatch::Stopwatch",
      "identifier": "elapsed",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::stopwatch::Stopwatch"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::time::Duration"
        }
      },
      "documentation": " Returns the elapsed time since the last [`reset`](Stopwatch::reset)\n of the stopwatch.\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut stopwatch = Stopwatch::new();\n stopwatch.tick(Duration::from_secs(1));\n assert_eq!(stopwatch.elapsed(), Duration::from_secs(1));\n ```\n # See Also\n [`elapsed_secs`](Stopwatch::elapsed_secs) - if an `f32` value is desirable instead.\n [`elapsed_secs_f64`](Stopwatch::elapsed_secs_f64) - if an `f64` is desirable instead."
    },
    "bevy_time::stopwatch::Stopwatch::elapsed_secs": {
      "namespace": "bevy_time::stopwatch::Stopwatch",
      "identifier": "elapsed_secs",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::stopwatch::Stopwatch"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the elapsed time since the last [`reset`](Stopwatch::reset)\n of the stopwatch, in seconds.\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut stopwatch = Stopwatch::new();\n stopwatch.tick(Duration::from_secs(1));\n assert_eq!(stopwatch.elapsed_secs(), 1.0);\n ```\n # See Also\n [`elapsed`](Stopwatch::elapsed) - if a `Duration` is desirable instead.\n [`elapsed_secs_f64`](Stopwatch::elapsed_secs_f64) - if an `f64` is desirable instead."
    },
    "bevy_time::stopwatch::Stopwatch::elapsed_secs_f64": {
      "namespace": "bevy_time::stopwatch::Stopwatch",
      "identifier": "elapsed_secs_f64",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::stopwatch::Stopwatch"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the elapsed time since the last [`reset`](Stopwatch::reset)\n of the stopwatch, in seconds, as f64.\n # See Also\n [`elapsed`](Stopwatch::elapsed) - if a `Duration` is desirable instead.\n [`elapsed_secs`](Stopwatch::elapsed_secs) - if an `f32` is desirable instead."
    },
    "bevy_time::stopwatch::Stopwatch::eq": {
      "namespace": "bevy_time::stopwatch::Stopwatch",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::stopwatch::Stopwatch"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_time::stopwatch::Stopwatch"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_time::stopwatch::Stopwatch::is_paused": {
      "namespace": "bevy_time::stopwatch::Stopwatch",
      "identifier": "is_paused",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::stopwatch::Stopwatch"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if the stopwatch is paused.\n # Examples\n ```\n # use bevy_time::*;\n let mut stopwatch = Stopwatch::new();\n assert!(!stopwatch.is_paused());\n stopwatch.pause();\n assert!(stopwatch.is_paused());\n stopwatch.unpause();\n assert!(!stopwatch.is_paused());\n ```"
    },
    "bevy_time::stopwatch::Stopwatch::new": {
      "namespace": "bevy_time::stopwatch::Stopwatch",
      "identifier": "new",
      "return_type": {
        "kind": {
          "val": "bevy_time::stopwatch::Stopwatch"
        }
      },
      "documentation": " Create a new unpaused `Stopwatch` with no elapsed time.\n # Examples\n ```\n # use bevy_time::*;\n let stopwatch = Stopwatch::new();\n assert_eq!(stopwatch.elapsed_secs(), 0.0);\n assert_eq!(stopwatch.is_paused(), false);\n ```"
    },
    "bevy_time::stopwatch::Stopwatch::pause": {
      "namespace": "bevy_time::stopwatch::Stopwatch",
      "identifier": "pause",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_time::stopwatch::Stopwatch"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Pauses the stopwatch. Any call to [`tick`](Stopwatch::tick) while\n paused will not have any effect on the elapsed time.\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut stopwatch = Stopwatch::new();\n stopwatch.pause();\n stopwatch.tick(Duration::from_secs_f32(1.5));\n assert!(stopwatch.is_paused());\n assert_eq!(stopwatch.elapsed_secs(), 0.0);\n ```"
    },
    "bevy_time::stopwatch::Stopwatch::reset": {
      "namespace": "bevy_time::stopwatch::Stopwatch",
      "identifier": "reset",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_time::stopwatch::Stopwatch"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Resets the stopwatch. The reset doesn't affect the paused state of the stopwatch.\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut stopwatch = Stopwatch::new();\n stopwatch.tick(Duration::from_secs_f32(1.5));\n stopwatch.reset();\n assert_eq!(stopwatch.elapsed_secs(), 0.0);\n ```"
    },
    "bevy_time::stopwatch::Stopwatch::set_elapsed": {
      "namespace": "bevy_time::stopwatch::Stopwatch",
      "identifier": "set_elapsed",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_time::stopwatch::Stopwatch"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "core::time::Duration"
          },
          "name": "time"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Sets the elapsed time of the stopwatch.\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut stopwatch = Stopwatch::new();\n stopwatch.set_elapsed(Duration::from_secs_f32(1.0));\n assert_eq!(stopwatch.elapsed_secs(), 1.0);\n ```"
    },
    "bevy_time::stopwatch::Stopwatch::unpause": {
      "namespace": "bevy_time::stopwatch::Stopwatch",
      "identifier": "unpause",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_time::stopwatch::Stopwatch"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Unpauses the stopwatch. Resume the effect of ticking on elapsed time.\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut stopwatch = Stopwatch::new();\n stopwatch.pause();\n stopwatch.tick(Duration::from_secs_f32(1.0));\n stopwatch.unpause();\n stopwatch.tick(Duration::from_secs_f32(1.0));\n assert!(!stopwatch.is_paused());\n assert_eq!(stopwatch.elapsed_secs(), 1.0);\n ```"
    },
    "bevy_time::timer::Timer::assert_receiver_is_total_eq": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_time::timer::Timer::clone": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_time::timer::Timer"
        }
      }
    },
    "bevy_time::timer::Timer::duration": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "duration",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::time::Duration"
        }
      },
      "documentation": " Returns the duration of the timer.\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let timer = Timer::new(Duration::from_secs(1), TimerMode::Once);\n assert_eq!(timer.duration(), Duration::from_secs(1));\n ```"
    },
    "bevy_time::timer::Timer::elapsed": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "elapsed",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::time::Duration"
        }
      },
      "documentation": " Returns the time elapsed on the timer. Guaranteed to be between 0.0 and `duration`.\n Will only equal `duration` when the timer is finished and non repeating.\n See also [`Stopwatch::elapsed`](Stopwatch::elapsed).\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut timer = Timer::from_seconds(1.0, TimerMode::Once);\n timer.tick(Duration::from_secs_f32(0.5));\n assert_eq!(timer.elapsed(), Duration::from_secs_f32(0.5));\n ```"
    },
    "bevy_time::timer::Timer::elapsed_secs": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "elapsed_secs",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the time elapsed on the timer as an `f32`.\n See also [`Timer::elapsed`](Timer::elapsed)."
    },
    "bevy_time::timer::Timer::elapsed_secs_f64": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "elapsed_secs_f64",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the time elapsed on the timer as an `f64`.\n See also [`Timer::elapsed`](Timer::elapsed)."
    },
    "bevy_time::timer::Timer::eq": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_time::timer::Timer::finished": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "finished",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if the timer has reached its duration.\n For repeating timers, this method behaves identically to [`Timer::just_finished`].\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut timer_once = Timer::from_seconds(1.0, TimerMode::Once);\n timer_once.tick(Duration::from_secs_f32(1.5));\n assert!(timer_once.finished());\n timer_once.tick(Duration::from_secs_f32(0.5));\n assert!(timer_once.finished());\n let mut timer_repeating = Timer::from_seconds(1.0, TimerMode::Repeating);\n timer_repeating.tick(Duration::from_secs_f32(1.1));\n assert!(timer_repeating.finished());\n timer_repeating.tick(Duration::from_secs_f32(0.8));\n assert!(!timer_repeating.finished());\n timer_repeating.tick(Duration::from_secs_f32(0.6));\n assert!(timer_repeating.finished());\n ```"
    },
    "bevy_time::timer::Timer::fraction": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "fraction",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the fraction of the timer elapsed time (goes from 0.0 to 1.0).\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut timer = Timer::from_seconds(2.0, TimerMode::Once);\n timer.tick(Duration::from_secs_f32(0.5));\n assert_eq!(timer.fraction(), 0.25);\n ```"
    },
    "bevy_time::timer::Timer::fraction_remaining": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "fraction_remaining",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the fraction of the timer remaining time (goes from 1.0 to 0.0).\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut timer = Timer::from_seconds(2.0, TimerMode::Once);\n timer.tick(Duration::from_secs_f32(0.5));\n assert_eq!(timer.fraction_remaining(), 0.75);\n ```"
    },
    "bevy_time::timer::Timer::from_seconds": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "from_seconds",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "duration"
        },
        {
          "kind": {
            "val": "bevy_time::timer::TimerMode"
          },
          "name": "mode"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_time::timer::Timer"
        }
      },
      "documentation": " Creates a new timer with a given duration in seconds.\n # Example\n ```\n # use bevy_time::*;\n let mut timer = Timer::from_seconds(1.0, TimerMode::Once);\n ```"
    },
    "bevy_time::timer::Timer::just_finished": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "just_finished",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` only on the tick the timer reached its duration.\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut timer = Timer::from_seconds(1.0, TimerMode::Once);\n timer.tick(Duration::from_secs_f32(1.5));\n assert!(timer.just_finished());\n timer.tick(Duration::from_secs_f32(0.5));\n assert!(!timer.just_finished());\n ```"
    },
    "bevy_time::timer::Timer::mode": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "mode",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_time::timer::TimerMode"
        }
      },
      "documentation": " Returns the mode of the timer.\n # Examples\n ```\n # use bevy_time::*;\n let mut timer = Timer::from_seconds(1.0, TimerMode::Repeating);\n assert_eq!(timer.mode(), TimerMode::Repeating);\n ```"
    },
    "bevy_time::timer::Timer::new": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "core::time::Duration"
          },
          "name": "duration"
        },
        {
          "kind": {
            "val": "bevy_time::timer::TimerMode"
          },
          "name": "mode"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_time::timer::Timer"
        }
      },
      "documentation": " Creates a new timer with a given duration.\n See also [`Timer::from_seconds`](Timer::from_seconds)."
    },
    "bevy_time::timer::Timer::pause": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "pause",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Pauses the Timer. Disables the ticking of the timer.\n See also [`Stopwatch::pause`](Stopwatch::pause).\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut timer = Timer::from_seconds(1.0, TimerMode::Once);\n timer.pause();\n timer.tick(Duration::from_secs_f32(0.5));\n assert_eq!(timer.elapsed_secs(), 0.0);\n ```"
    },
    "bevy_time::timer::Timer::paused": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "paused",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if the timer is paused.\n See also [`Stopwatch::is_paused`](Stopwatch::is_paused).\n # Examples\n ```\n # use bevy_time::*;\n let mut timer = Timer::from_seconds(1.0, TimerMode::Once);\n assert!(!timer.paused());\n timer.pause();\n assert!(timer.paused());\n timer.unpause();\n assert!(!timer.paused());\n ```"
    },
    "bevy_time::timer::Timer::remaining": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "remaining",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::time::Duration"
        }
      },
      "documentation": " Returns the remaining time using Duration\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut timer = Timer::from_seconds(2.0, TimerMode::Once);\n timer.tick(Duration::from_secs_f32(0.5));\n assert_eq!(timer.remaining(), Duration::from_secs_f32(1.5));\n ```"
    },
    "bevy_time::timer::Timer::remaining_secs": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "remaining_secs",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the remaining time in seconds\n # Examples\n ```\n # use bevy_time::*;\n use std::cmp::Ordering;\n use std::time::Duration;\n let mut timer = Timer::from_seconds(2.0, TimerMode::Once);\n timer.tick(Duration::from_secs_f32(0.5));\n let result = timer.remaining_secs().total_cmp(&1.5);\n assert_eq!(Ordering::Equal, result);\n ```"
    },
    "bevy_time::timer::Timer::reset": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "reset",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Resets the timer. The reset doesn't affect the `paused` state of the timer.\n See also [`Stopwatch::reset`](Stopwatch::reset).\n Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut timer = Timer::from_seconds(1.0, TimerMode::Once);\n timer.tick(Duration::from_secs_f32(1.5));\n timer.reset();\n assert!(!timer.finished());\n assert!(!timer.just_finished());\n assert_eq!(timer.elapsed_secs(), 0.0);\n ```"
    },
    "bevy_time::timer::Timer::set_duration": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "set_duration",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_time::timer::Timer"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "core::time::Duration"
          },
          "name": "duration"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Sets the duration of the timer.\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut timer = Timer::from_seconds(1.5, TimerMode::Once);\n timer.set_duration(Duration::from_secs(1));\n assert_eq!(timer.duration(), Duration::from_secs(1));\n ```"
    },
    "bevy_time::timer::Timer::set_elapsed": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "set_elapsed",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_time::timer::Timer"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "core::time::Duration"
          },
          "name": "time"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Sets the elapsed time of the timer without any other considerations.\n See also [`Stopwatch::set`](Stopwatch::set).\n #\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut timer = Timer::from_seconds(1.0, TimerMode::Once);\n timer.set_elapsed(Duration::from_secs(2));\n assert_eq!(timer.elapsed(), Duration::from_secs(2));\n // the timer is not finished even if the elapsed time is greater than the duration.\n assert!(!timer.finished());\n ```"
    },
    "bevy_time::timer::Timer::set_mode": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "set_mode",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_time::timer::Timer"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_time::timer::TimerMode"
          },
          "name": "mode"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Sets the mode of the timer.\n # Examples\n ```\n # use bevy_time::*;\n let mut timer = Timer::from_seconds(1.0, TimerMode::Repeating);\n timer.set_mode(TimerMode::Once);\n assert_eq!(timer.mode(), TimerMode::Once);\n ```"
    },
    "bevy_time::timer::Timer::times_finished_this_tick": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "times_finished_this_tick",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the number of times a repeating timer\n finished during the last [`tick`](Timer<T>::tick) call.\n For non repeating-timers, this method will only ever\n return 0 or 1.\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut timer = Timer::from_seconds(1.0, TimerMode::Repeating);\n timer.tick(Duration::from_secs_f32(6.0));\n assert_eq!(timer.times_finished_this_tick(), 6);\n timer.tick(Duration::from_secs_f32(2.0));\n assert_eq!(timer.times_finished_this_tick(), 2);\n timer.tick(Duration::from_secs_f32(0.5));\n assert_eq!(timer.times_finished_this_tick(), 0);\n ```"
    },
    "bevy_time::timer::Timer::unpause": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "unpause",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Unpauses the Timer. Resumes the ticking of the timer.\n See also [`Stopwatch::unpause()`](Stopwatch::unpause).\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut timer = Timer::from_seconds(1.0, TimerMode::Once);\n timer.pause();\n timer.tick(Duration::from_secs_f32(0.5));\n timer.unpause();\n timer.tick(Duration::from_secs_f32(0.5));\n assert_eq!(timer.elapsed_secs(), 0.5);\n ```"
    },
    "bevy_time::timer::TimerMode::assert_receiver_is_total_eq": {
      "namespace": "bevy_time::timer::TimerMode",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::TimerMode"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_time::timer::TimerMode::clone": {
      "namespace": "bevy_time::timer::TimerMode",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::TimerMode"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_time::timer::TimerMode"
        }
      }
    },
    "bevy_time::timer::TimerMode::eq": {
      "namespace": "bevy_time::timer::TimerMode",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::TimerMode"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_time::timer::TimerMode"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_time::virt::Virtual::clone": {
      "namespace": "bevy_time::virt::Virtual",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::virt::Virtual"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_time::virt::Virtual"
        }
      }
    },
    "bevy_transform::components::global_transform::GlobalTransform::affine": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "affine",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Returns the 3d affine transformation matrix as an [`Affine3A`]."
    },
    "bevy_transform::components::global_transform::GlobalTransform::back": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "back",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": "Return the local back vector (Z)."
    },
    "bevy_transform::components::global_transform::GlobalTransform::clone": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::global_transform::GlobalTransform"
        }
      }
    },
    "bevy_transform::components::global_transform::GlobalTransform::compute_matrix": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "compute_matrix",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Returns the 3d affine transformation matrix as a [`Mat4`]."
    },
    "bevy_transform::components::global_transform::GlobalTransform::compute_transform": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "compute_transform",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::transform::Transform"
        }
      },
      "documentation": " Returns the transformation as a [`Transform`].\n The transform is expected to be non-degenerate and without shearing, or the output\n will be invalid."
    },
    "bevy_transform::components::global_transform::GlobalTransform::down": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "down",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": "Return the local down vector (-Y)."
    },
    "bevy_transform::components::global_transform::GlobalTransform::eq": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_transform::components::global_transform::GlobalTransform::forward": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "forward",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": "Return the local forward vector (-Z)."
    },
    "bevy_transform::components::global_transform::GlobalTransform::from_isometry": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "from_isometry",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::isometry::Isometry3d"
          },
          "name": "iso"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::global_transform::GlobalTransform"
        }
      }
    },
    "bevy_transform::components::global_transform::GlobalTransform::from_rotation": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "from_rotation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::global_transform::GlobalTransform"
        }
      }
    },
    "bevy_transform::components::global_transform::GlobalTransform::from_scale": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "from_scale",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "scale"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::global_transform::GlobalTransform"
        }
      }
    },
    "bevy_transform::components::global_transform::GlobalTransform::from_translation": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "from_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::global_transform::GlobalTransform"
        }
      }
    },
    "bevy_transform::components::global_transform::GlobalTransform::from_xyz": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "from_xyz",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::global_transform::GlobalTransform"
        }
      }
    },
    "bevy_transform::components::global_transform::GlobalTransform::left": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "left",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": "Return the local left vector (-X)."
    },
    "bevy_transform::components::global_transform::GlobalTransform::mul": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "bevy_transform::components::global_transform::GlobalTransform::mul-1": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "bevy_transform::components::global_transform::GlobalTransform"
          }
        },
        {
          "kind": {
            "val": "bevy_transform::components::global_transform::GlobalTransform"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::global_transform::GlobalTransform"
        }
      }
    },
    "bevy_transform::components::global_transform::GlobalTransform::mul-2": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "bevy_transform::components::global_transform::GlobalTransform"
          }
        },
        {
          "kind": {
            "val": "bevy_transform::components::transform::Transform"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::global_transform::GlobalTransform"
        }
      }
    },
    "bevy_transform::components::global_transform::GlobalTransform::mul_transform": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "mul_transform",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_transform::components::transform::Transform"
          },
          "name": "transform"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::global_transform::GlobalTransform"
        }
      },
      "documentation": " Multiplies `self` with `transform` component by component, returning the\n resulting [`GlobalTransform`]"
    },
    "bevy_transform::components::global_transform::GlobalTransform::radius_vec3a": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "radius_vec3a",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "extents"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get an upper bound of the radius from the given `extents`."
    },
    "bevy_transform::components::global_transform::GlobalTransform::reparented_to": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "reparented_to",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "parent"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::transform::Transform"
        }
      },
      "documentation": " Returns the [`Transform`] `self` would have if it was a child of an entity\n with the `parent` [`GlobalTransform`].\n This is useful if you want to \"reparent\" an [`Entity`](bevy_ecs::entity::Entity).\n Say you have an entity `e1` that you want to turn into a child of `e2`,\n but you want `e1` to keep the same global transform, even after re-parenting. You would use:\n ```\n # use bevy_transform::prelude::{GlobalTransform, Transform};\n # use bevy_ecs::prelude::{Entity, Query, Component, Commands};\n #[derive(Component)]\n struct ToReparent {\n     new_parent: Entity,\n }\n fn reparent_system(\n     mut commands: Commands,\n     mut targets: Query<(&mut Transform, Entity, &GlobalTransform, &ToReparent)>,\n     transforms: Query<&GlobalTransform>,\n ) {\n     for (mut transform, entity, initial, to_reparent) in targets.iter_mut() {\n         if let Ok(parent_transform) = transforms.get(to_reparent.new_parent) {\n             *transform = initial.reparented_to(parent_transform);\n             commands.entity(entity)\n                 .remove::<ToReparent>()\n                 .set_parent(to_reparent.new_parent);\n         }\n     }\n }\n ```\n The transform is expected to be non-degenerate and without shearing, or the output\n will be invalid."
    },
    "bevy_transform::components::global_transform::GlobalTransform::right": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "right",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": "Return the local right vector (X)."
    },
    "bevy_transform::components::global_transform::GlobalTransform::rotation": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "rotation",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Get the rotation as a [`Quat`].\n The transform is expected to be non-degenerate and without shearing, or the output will be invalid.\n # Warning\n This is calculated using `to_scale_rotation_translation`, meaning that you\n should probably use it directly if you also need translation or scale."
    },
    "bevy_transform::components::global_transform::GlobalTransform::scale": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "scale",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Get the scale as a [`Vec3`].\n The transform is expected to be non-degenerate and without shearing, or the output will be invalid.\n Some of the computations overlap with `to_scale_rotation_translation`, which means you should use\n it instead if you also need rotation."
    },
    "bevy_transform::components::global_transform::GlobalTransform::to_isometry": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "to_isometry",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry3d"
        }
      },
      "documentation": " Returns the isometric part of the transformation as an [isometry]. Any scaling done by the\n transformation will be ignored.\n The transform is expected to be non-degenerate and without shearing, or the output\n will be invalid.\n [isometry]: Isometry3d"
    },
    "bevy_transform::components::global_transform::GlobalTransform::transform_point": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "transform_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Transforms the given point from local space to global space, applying shear, scale, rotation and translation.\n It can be used like this:\n ```\n # use bevy_transform::prelude::{GlobalTransform};\n # use bevy_math::prelude::Vec3;\n let global_transform = GlobalTransform::from_xyz(1., 2., 3.);\n let local_point = Vec3::new(1., 2., 3.);\n let global_point = global_transform.transform_point(local_point);\n assert_eq!(global_point, Vec3::new(2., 4., 6.));\n ```\n ```\n # use bevy_transform::prelude::{GlobalTransform};\n # use bevy_math::Vec3;\n let global_point = Vec3::new(2., 4., 6.);\n let global_transform = GlobalTransform::from_xyz(1., 2., 3.);\n let local_point = global_transform.affine().inverse().transform_point3(global_point);\n assert_eq!(local_point, Vec3::new(1., 2., 3.))\n ```\n To apply shear, scale, and rotation *without* applying translation, different functions are available:\n ```\n # use bevy_transform::prelude::{GlobalTransform};\n # use bevy_math::prelude::Vec3;\n let global_transform = GlobalTransform::from_xyz(1., 2., 3.);\n let local_direction = Vec3::new(1., 2., 3.);\n let global_direction = global_transform.affine().transform_vector3(local_direction);\n assert_eq!(global_direction, Vec3::new(1., 2., 3.));\n let roundtripped_local_direction = global_transform.affine().inverse().transform_vector3(global_direction);\n assert_eq!(roundtripped_local_direction, local_direction);\n ```"
    },
    "bevy_transform::components::global_transform::GlobalTransform::translation": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "translation",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Get the translation as a [`Vec3`]."
    },
    "bevy_transform::components::global_transform::GlobalTransform::translation_vec3a": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "translation_vec3a",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Get the translation as a [`Vec3A`]."
    },
    "bevy_transform::components::global_transform::GlobalTransform::up": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "up",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": "Return the local up vector (Y)."
    },
    "bevy_transform::components::transform::Transform::back": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "back",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": " Equivalent to [`local_z()`][Transform::local_z]"
    },
    "bevy_transform::components::transform::Transform::clone": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::transform::Transform"
        }
      }
    },
    "bevy_transform::components::transform::Transform::compute_affine": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "compute_affine",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Returns the 3d affine transformation matrix from this transforms translation,\n rotation, and scale."
    },
    "bevy_transform::components::transform::Transform::compute_matrix": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "compute_matrix",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Returns the 3d affine transformation matrix from this transforms translation,\n rotation, and scale."
    },
    "bevy_transform::components::transform::Transform::down": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "down",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": " Equivalent to [`-local_y()`][Transform::local_y]"
    },
    "bevy_transform::components::transform::Transform::eq": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_transform::components::transform::Transform::forward": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "forward",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": " Equivalent to [`-local_z()`][Transform::local_z]"
    },
    "bevy_transform::components::transform::Transform::from_isometry": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "from_isometry",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::isometry::Isometry3d"
          },
          "name": "iso"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::transform::Transform"
        }
      },
      "documentation": " Creates a new [`Transform`] that is equivalent to the given [isometry].\n [isometry]: Isometry3d"
    },
    "bevy_transform::components::transform::Transform::from_matrix": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "from_matrix",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat4"
          },
          "name": "world_from_local"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::transform::Transform"
        }
      },
      "documentation": " Extracts the translation, rotation, and scale from `matrix`. It must be a 3d affine\n transformation matrix."
    },
    "bevy_transform::components::transform::Transform::from_rotation": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "from_rotation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::transform::Transform"
        }
      },
      "documentation": " Creates a new [`Transform`], with `rotation`. Translation will be 0 and scale 1 on\n all axes."
    },
    "bevy_transform::components::transform::Transform::from_scale": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "from_scale",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "scale"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::transform::Transform"
        }
      },
      "documentation": " Creates a new [`Transform`], with `scale`. Translation will be 0 and rotation 0 on\n all axes."
    },
    "bevy_transform::components::transform::Transform::from_translation": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "from_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::transform::Transform"
        }
      },
      "documentation": " Creates a new [`Transform`], with `translation`. Rotation will be 0 and scale 1 on\n all axes."
    },
    "bevy_transform::components::transform::Transform::from_xyz": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "from_xyz",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::transform::Transform"
        }
      },
      "documentation": " Creates a new [`Transform`] at the position `(x, y, z)`. In 2d, the `z` component\n is used for z-ordering elements: higher `z`-value will be in front of lower\n `z`-value."
    },
    "bevy_transform::components::transform::Transform::is_finite": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, translation, rotation and scale all are\n finite. If any of them contains a `NaN`, positive or negative infinity,\n this will return `false`."
    },
    "bevy_transform::components::transform::Transform::left": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "left",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": " Equivalent to [`-local_x()`][Transform::local_x()]"
    },
    "bevy_transform::components::transform::Transform::local_x": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "local_x",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": " Get the unit vector in the local `X` direction."
    },
    "bevy_transform::components::transform::Transform::local_y": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "local_y",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": " Get the unit vector in the local `Y` direction."
    },
    "bevy_transform::components::transform::Transform::local_z": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "local_z",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": " Get the unit vector in the local `Z` direction."
    },
    "bevy_transform::components::transform::Transform::mul": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "bevy_transform::components::transform::Transform::mul-1": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "bevy_transform::components::transform::Transform"
          }
        },
        {
          "kind": {
            "val": "bevy_transform::components::global_transform::GlobalTransform"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::global_transform::GlobalTransform"
        }
      }
    },
    "bevy_transform::components::transform::Transform::mul-2": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "bevy_transform::components::transform::Transform"
          }
        },
        {
          "kind": {
            "val": "bevy_transform::components::transform::Transform"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::transform::Transform"
        }
      }
    },
    "bevy_transform::components::transform::Transform::mul_transform": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "mul_transform",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_transform::components::transform::Transform"
          },
          "name": "transform"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::transform::Transform"
        }
      },
      "documentation": " Multiplies `self` with `transform` component by component, returning the\n resulting [`Transform`]"
    },
    "bevy_transform::components::transform::Transform::right": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "right",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": " Equivalent to [`local_x()`][Transform::local_x()]"
    },
    "bevy_transform::components::transform::Transform::rotate": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "rotate",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Rotates this [`Transform`] by the given rotation.\n If this [`Transform`] has a parent, the `rotation` is relative to the rotation of the parent.\n # Examples\n - [`3d_rotation`]\n [`3d_rotation`]: https://github.com/bevyengine/bevy/blob/latest/examples/transforms/3d_rotation.rs"
    },
    "bevy_transform::components::transform::Transform::rotate_around": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "rotate_around",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "point"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Rotates this [`Transform`] around a `point` in space.\n If this [`Transform`] has a parent, the `point` is relative to the [`Transform`] of the parent."
    },
    "bevy_transform::components::transform::Transform::rotate_axis": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "rotate_axis",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::direction::Dir3"
          },
          "name": "axis"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Rotates this [`Transform`] around the given `axis` by `angle` (in radians).\n If this [`Transform`] has a parent, the `axis` is relative to the rotation of the parent.\n # Warning\n If you pass in an `axis` based on the current rotation (e.g. obtained via [`Transform::local_x`]),\n floating point errors can accumulate exponentially when applying rotations repeatedly this way. This will\n result in a denormalized rotation. In this case, it is recommended to normalize the [`Transform::rotation`] after\n each call to this method."
    },
    "bevy_transform::components::transform::Transform::rotate_local": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "rotate_local",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Rotates this [`Transform`] by the given `rotation`.\n The `rotation` is relative to this [`Transform`]'s current rotation."
    },
    "bevy_transform::components::transform::Transform::rotate_local_axis": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "rotate_local_axis",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::direction::Dir3"
          },
          "name": "axis"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Rotates this [`Transform`] around its local `axis` by `angle` (in radians).\n # Warning\n If you pass in an `axis` based on the current rotation (e.g. obtained via [`Transform::local_x`]),\n floating point errors can accumulate exponentially when applying rotations repeatedly this way. This will\n result in a denormalized rotation. In this case, it is recommended to normalize the [`Transform::rotation`] after\n each call to this method."
    },
    "bevy_transform::components::transform::Transform::rotate_local_x": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "rotate_local_x",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Rotates this [`Transform`] around its local `X` axis by `angle` (in radians)."
    },
    "bevy_transform::components::transform::Transform::rotate_local_y": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "rotate_local_y",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Rotates this [`Transform`] around its local `Y` axis by `angle` (in radians)."
    },
    "bevy_transform::components::transform::Transform::rotate_local_z": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "rotate_local_z",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Rotates this [`Transform`] around its local `Z` axis by `angle` (in radians)."
    },
    "bevy_transform::components::transform::Transform::rotate_x": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "rotate_x",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Rotates this [`Transform`] around the `X` axis by `angle` (in radians).\n If this [`Transform`] has a parent, the axis is relative to the rotation of the parent."
    },
    "bevy_transform::components::transform::Transform::rotate_y": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "rotate_y",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Rotates this [`Transform`] around the `Y` axis by `angle` (in radians).\n If this [`Transform`] has a parent, the axis is relative to the rotation of the parent."
    },
    "bevy_transform::components::transform::Transform::rotate_z": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "rotate_z",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Rotates this [`Transform`] around the `Z` axis by `angle` (in radians).\n If this [`Transform`] has a parent, the axis is relative to the rotation of the parent."
    },
    "bevy_transform::components::transform::Transform::to_isometry": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "to_isometry",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry3d"
        }
      },
      "documentation": " Get the [isometry] defined by this transform's rotation and translation, ignoring scale.\n [isometry]: Isometry3d"
    },
    "bevy_transform::components::transform::Transform::transform_point": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "transform_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Transforms the given `point`, applying scale, rotation and translation.\n If this [`Transform`] has an ancestor entity with a [`Transform`] component,\n [`Transform::transform_point`] will transform a point in local space into its\n parent transform's space.\n If this [`Transform`] does not have a parent, [`Transform::transform_point`] will\n transform a point in local space into worldspace coordinates.\n If you always want to transform a point in local space to worldspace, or if you need\n the inverse transformations, see [`GlobalTransform::transform_point()`]."
    },
    "bevy_transform::components::transform::Transform::translate_around": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "translate_around",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "point"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Translates this [`Transform`] around a `point` in space.\n If this [`Transform`] has a parent, the `point` is relative to the [`Transform`] of the parent."
    },
    "bevy_transform::components::transform::Transform::up": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "up",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": " Equivalent to [`local_y()`][Transform::local_y]"
    },
    "bevy_transform::components::transform::Transform::with_rotation": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "with_rotation",
      "arguments": [
        {
          "kind": {
            "val": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::transform::Transform"
        }
      },
      "documentation": " Returns this [`Transform`] with a new rotation."
    },
    "bevy_transform::components::transform::Transform::with_scale": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "with_scale",
      "arguments": [
        {
          "kind": {
            "val": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "scale"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::transform::Transform"
        }
      },
      "documentation": " Returns this [`Transform`] with a new scale."
    },
    "bevy_transform::components::transform::Transform::with_translation": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "with_translation",
      "arguments": [
        {
          "kind": {
            "val": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::transform::Transform"
        }
      },
      "documentation": " Returns this [`Transform`] with a new translation."
    },
    "bevy_transform::components::transform::TransformTreeChanged::clone": {
      "namespace": "bevy_transform::components::transform::TransformTreeChanged",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::TransformTreeChanged"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::transform::TransformTreeChanged"
        }
      }
    },
    "bevy_transform::components::transform::TransformTreeChanged::eq": {
      "namespace": "bevy_transform::components::transform::TransformTreeChanged",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::TransformTreeChanged"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_transform::components::transform::TransformTreeChanged"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "core::any::TypeId::assert_receiver_is_total_eq": {
      "namespace": "core::any::TypeId",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "core::any::TypeId"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "core::any::TypeId::clone": {
      "namespace": "core::any::TypeId",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "core::any::TypeId"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::any::TypeId"
        }
      }
    },
    "core::any::TypeId::eq": {
      "namespace": "core::any::TypeId",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "core::any::TypeId"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "core::any::TypeId"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "core::net::SocketAddr::assert_receiver_is_total_eq": {
      "namespace": "core::net::SocketAddr",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "core::net::SocketAddr"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "core::net::SocketAddr::clone": {
      "namespace": "core::net::SocketAddr",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "core::net::SocketAddr"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::net::SocketAddr"
        }
      }
    },
    "core::net::SocketAddr::eq": {
      "namespace": "core::net::SocketAddr",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "core::net::SocketAddr"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "core::net::SocketAddr"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "core::net::SocketAddr::is_ipv4": {
      "namespace": "core::net::SocketAddr",
      "identifier": "is_ipv4",
      "arguments": [
        {
          "kind": {
            "ref": "core::net::SocketAddr"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns [`true`] if the [IP address] in this `SocketAddr` is an\n [`IPv4` address], and [`false`] otherwise.\n [IP address]: IpAddr\n [`IPv4` address]: IpAddr::V4\n # Examples\n ```\n use std::net::{IpAddr, Ipv4Addr, SocketAddr};\n let socket = SocketAddr::new(IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)), 8080);\n assert_eq!(socket.is_ipv4(), true);\n assert_eq!(socket.is_ipv6(), false);\n ```"
    },
    "core::net::SocketAddr::is_ipv6": {
      "namespace": "core::net::SocketAddr",
      "identifier": "is_ipv6",
      "arguments": [
        {
          "kind": {
            "ref": "core::net::SocketAddr"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns [`true`] if the [IP address] in this `SocketAddr` is an\n [`IPv6` address], and [`false`] otherwise.\n [IP address]: IpAddr\n [`IPv6` address]: IpAddr::V6\n # Examples\n ```\n use std::net::{IpAddr, Ipv6Addr, SocketAddr};\n let socket = SocketAddr::new(IpAddr::V6(Ipv6Addr::new(0, 0, 0, 0, 0, 65535, 0, 1)), 8080);\n assert_eq!(socket.is_ipv4(), false);\n assert_eq!(socket.is_ipv6(), true);\n ```"
    },
    "core::net::SocketAddr::port": {
      "namespace": "core::net::SocketAddr",
      "identifier": "port",
      "arguments": [
        {
          "kind": {
            "ref": "core::net::SocketAddr"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u16"
        }
      },
      "documentation": " Returns the port number associated with this socket address.\n # Examples\n ```\n use std::net::{IpAddr, Ipv4Addr, SocketAddr};\n let socket = SocketAddr::new(IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)), 8080);\n assert_eq!(socket.port(), 8080);\n ```"
    },
    "core::net::SocketAddr::set_port": {
      "namespace": "core::net::SocketAddr",
      "identifier": "set_port",
      "arguments": [
        {
          "kind": {
            "mut": "core::net::SocketAddr"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u16"
          },
          "name": "new_port"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Changes the port number associated with this socket address.\n # Examples\n ```\n use std::net::{IpAddr, Ipv4Addr, SocketAddr};\n let mut socket = SocketAddr::new(IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)), 8080);\n socket.set_port(1025);\n assert_eq!(socket.port(), 1025);\n ```"
    },
    "core::ops::RangeFull::assert_receiver_is_total_eq": {
      "namespace": "core::ops::RangeFull",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "core::ops::RangeFull"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "core::ops::RangeFull::clone": {
      "namespace": "core::ops::RangeFull",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "core::ops::RangeFull"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::ops::RangeFull"
        }
      }
    },
    "core::ops::RangeFull::eq": {
      "namespace": "core::ops::RangeFull",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "core::ops::RangeFull"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "core::ops::RangeFull"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "core::sync::atomic::AtomicBool::into_inner": {
      "namespace": "core::sync::atomic::AtomicBool",
      "identifier": "into_inner",
      "arguments": [
        {
          "kind": {
            "val": "core::sync::atomic::AtomicBool"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Consumes the atomic and returns the contained value.\n This is safe because passing `self` by value guarantees that no other threads are\n concurrently accessing the atomic data.\n # Examples\n ```\n use std::sync::atomic::AtomicBool;\n let some_bool = AtomicBool::new(true);\n assert_eq!(some_bool.into_inner(), true);\n ```"
    },
    "core::sync::atomic::AtomicBool::new": {
      "namespace": "core::sync::atomic::AtomicBool",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::sync::atomic::AtomicBool"
        }
      },
      "documentation": " Creates a new `AtomicBool`.\n # Examples\n ```\n use std::sync::atomic::AtomicBool;\n let atomic_true = AtomicBool::new(true);\n let atomic_false = AtomicBool::new(false);\n ```"
    },
    "core::sync::atomic::AtomicI16::into_inner": {
      "namespace": "core::sync::atomic::AtomicI16",
      "identifier": "into_inner",
      "arguments": [
        {
          "kind": {
            "val": "core::sync::atomic::AtomicI16"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i16"
        }
      },
      "documentation": " Consumes the atomic and returns the contained value.\n This is safe because passing `self` by value guarantees that no other threads are\n concurrently accessing the atomic data.\n # Examples\n ```\nuse std::sync::atomic::AtomicI16;\nlet some_var = AtomicI16::new(5);\n assert_eq!(some_var.into_inner(), 5);\n ```"
    },
    "core::sync::atomic::AtomicI16::new": {
      "namespace": "core::sync::atomic::AtomicI16",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "i16"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::sync::atomic::AtomicI16"
        }
      },
      "documentation": " Creates a new atomic integer.\n # Examples\n ```\nuse std::sync::atomic::AtomicI16;\nlet atomic_forty_two = AtomicI16::new(42);\n ```"
    },
    "core::sync::atomic::AtomicI32::into_inner": {
      "namespace": "core::sync::atomic::AtomicI32",
      "identifier": "into_inner",
      "arguments": [
        {
          "kind": {
            "val": "core::sync::atomic::AtomicI32"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Consumes the atomic and returns the contained value.\n This is safe because passing `self` by value guarantees that no other threads are\n concurrently accessing the atomic data.\n # Examples\n ```\nuse std::sync::atomic::AtomicI32;\nlet some_var = AtomicI32::new(5);\n assert_eq!(some_var.into_inner(), 5);\n ```"
    },
    "core::sync::atomic::AtomicI32::new": {
      "namespace": "core::sync::atomic::AtomicI32",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::sync::atomic::AtomicI32"
        }
      },
      "documentation": " Creates a new atomic integer.\n # Examples\n ```\nuse std::sync::atomic::AtomicI32;\nlet atomic_forty_two = AtomicI32::new(42);\n ```"
    },
    "core::sync::atomic::AtomicI64::into_inner": {
      "namespace": "core::sync::atomic::AtomicI64",
      "identifier": "into_inner",
      "arguments": [
        {
          "kind": {
            "val": "core::sync::atomic::AtomicI64"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Consumes the atomic and returns the contained value.\n This is safe because passing `self` by value guarantees that no other threads are\n concurrently accessing the atomic data.\n # Examples\n ```\nuse std::sync::atomic::AtomicI64;\nlet some_var = AtomicI64::new(5);\n assert_eq!(some_var.into_inner(), 5);\n ```"
    },
    "core::sync::atomic::AtomicI64::new": {
      "namespace": "core::sync::atomic::AtomicI64",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::sync::atomic::AtomicI64"
        }
      },
      "documentation": " Creates a new atomic integer.\n # Examples\n ```\nuse std::sync::atomic::AtomicI64;\nlet atomic_forty_two = AtomicI64::new(42);\n ```"
    },
    "core::sync::atomic::AtomicI8::into_inner": {
      "namespace": "core::sync::atomic::AtomicI8",
      "identifier": "into_inner",
      "arguments": [
        {
          "kind": {
            "val": "core::sync::atomic::AtomicI8"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i8"
        }
      },
      "documentation": " Consumes the atomic and returns the contained value.\n This is safe because passing `self` by value guarantees that no other threads are\n concurrently accessing the atomic data.\n # Examples\n ```\nuse std::sync::atomic::AtomicI8;\nlet some_var = AtomicI8::new(5);\n assert_eq!(some_var.into_inner(), 5);\n ```"
    },
    "core::sync::atomic::AtomicI8::new": {
      "namespace": "core::sync::atomic::AtomicI8",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "i8"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::sync::atomic::AtomicI8"
        }
      },
      "documentation": " Creates a new atomic integer.\n # Examples\n ```\nuse std::sync::atomic::AtomicI8;\nlet atomic_forty_two = AtomicI8::new(42);\n ```"
    },
    "core::sync::atomic::AtomicIsize::into_inner": {
      "namespace": "core::sync::atomic::AtomicIsize",
      "identifier": "into_inner",
      "arguments": [
        {
          "kind": {
            "val": "core::sync::atomic::AtomicIsize"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "isize"
        }
      },
      "documentation": " Consumes the atomic and returns the contained value.\n This is safe because passing `self` by value guarantees that no other threads are\n concurrently accessing the atomic data.\n # Examples\n ```\nuse std::sync::atomic::AtomicIsize;\nlet some_var = AtomicIsize::new(5);\n assert_eq!(some_var.into_inner(), 5);\n ```"
    },
    "core::sync::atomic::AtomicIsize::new": {
      "namespace": "core::sync::atomic::AtomicIsize",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "isize"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::sync::atomic::AtomicIsize"
        }
      },
      "documentation": " Creates a new atomic integer.\n # Examples\n ```\nuse std::sync::atomic::AtomicIsize;\nlet atomic_forty_two = AtomicIsize::new(42);\n ```"
    },
    "core::sync::atomic::AtomicU16::into_inner": {
      "namespace": "core::sync::atomic::AtomicU16",
      "identifier": "into_inner",
      "arguments": [
        {
          "kind": {
            "val": "core::sync::atomic::AtomicU16"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u16"
        }
      },
      "documentation": " Consumes the atomic and returns the contained value.\n This is safe because passing `self` by value guarantees that no other threads are\n concurrently accessing the atomic data.\n # Examples\n ```\nuse std::sync::atomic::AtomicU16;\nlet some_var = AtomicU16::new(5);\n assert_eq!(some_var.into_inner(), 5);\n ```"
    },
    "core::sync::atomic::AtomicU16::new": {
      "namespace": "core::sync::atomic::AtomicU16",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u16"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::sync::atomic::AtomicU16"
        }
      },
      "documentation": " Creates a new atomic integer.\n # Examples\n ```\nuse std::sync::atomic::AtomicU16;\nlet atomic_forty_two = AtomicU16::new(42);\n ```"
    },
    "core::sync::atomic::AtomicU32::into_inner": {
      "namespace": "core::sync::atomic::AtomicU32",
      "identifier": "into_inner",
      "arguments": [
        {
          "kind": {
            "val": "core::sync::atomic::AtomicU32"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Consumes the atomic and returns the contained value.\n This is safe because passing `self` by value guarantees that no other threads are\n concurrently accessing the atomic data.\n # Examples\n ```\nuse std::sync::atomic::AtomicU32;\nlet some_var = AtomicU32::new(5);\n assert_eq!(some_var.into_inner(), 5);\n ```"
    },
    "core::sync::atomic::AtomicU32::new": {
      "namespace": "core::sync::atomic::AtomicU32",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::sync::atomic::AtomicU32"
        }
      },
      "documentation": " Creates a new atomic integer.\n # Examples\n ```\nuse std::sync::atomic::AtomicU32;\nlet atomic_forty_two = AtomicU32::new(42);\n ```"
    },
    "core::sync::atomic::AtomicU64::into_inner": {
      "namespace": "core::sync::atomic::AtomicU64",
      "identifier": "into_inner",
      "arguments": [
        {
          "kind": {
            "val": "core::sync::atomic::AtomicU64"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Consumes the atomic and returns the contained value.\n This is safe because passing `self` by value guarantees that no other threads are\n concurrently accessing the atomic data.\n # Examples\n ```\nuse std::sync::atomic::AtomicU64;\nlet some_var = AtomicU64::new(5);\n assert_eq!(some_var.into_inner(), 5);\n ```"
    },
    "core::sync::atomic::AtomicU64::new": {
      "namespace": "core::sync::atomic::AtomicU64",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::sync::atomic::AtomicU64"
        }
      },
      "documentation": " Creates a new atomic integer.\n # Examples\n ```\nuse std::sync::atomic::AtomicU64;\nlet atomic_forty_two = AtomicU64::new(42);\n ```"
    },
    "core::sync::atomic::AtomicU8::into_inner": {
      "namespace": "core::sync::atomic::AtomicU8",
      "identifier": "into_inner",
      "arguments": [
        {
          "kind": {
            "val": "core::sync::atomic::AtomicU8"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u8"
        }
      },
      "documentation": " Consumes the atomic and returns the contained value.\n This is safe because passing `self` by value guarantees that no other threads are\n concurrently accessing the atomic data.\n # Examples\n ```\nuse std::sync::atomic::AtomicU8;\nlet some_var = AtomicU8::new(5);\n assert_eq!(some_var.into_inner(), 5);\n ```"
    },
    "core::sync::atomic::AtomicU8::new": {
      "namespace": "core::sync::atomic::AtomicU8",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u8"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::sync::atomic::AtomicU8"
        }
      },
      "documentation": " Creates a new atomic integer.\n # Examples\n ```\nuse std::sync::atomic::AtomicU8;\nlet atomic_forty_two = AtomicU8::new(42);\n ```"
    },
    "core::sync::atomic::AtomicUsize::into_inner": {
      "namespace": "core::sync::atomic::AtomicUsize",
      "identifier": "into_inner",
      "arguments": [
        {
          "kind": {
            "val": "core::sync::atomic::AtomicUsize"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "usize"
        }
      },
      "documentation": " Consumes the atomic and returns the contained value.\n This is safe because passing `self` by value guarantees that no other threads are\n concurrently accessing the atomic data.\n # Examples\n ```\nuse std::sync::atomic::AtomicUsize;\nlet some_var = AtomicUsize::new(5);\n assert_eq!(some_var.into_inner(), 5);\n ```"
    },
    "core::sync::atomic::AtomicUsize::new": {
      "namespace": "core::sync::atomic::AtomicUsize",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::sync::atomic::AtomicUsize"
        }
      },
      "documentation": " Creates a new atomic integer.\n # Examples\n ```\nuse std::sync::atomic::AtomicUsize;\nlet atomic_forty_two = AtomicUsize::new(42);\n ```"
    },
    "core::time::Duration::abs_diff": {
      "namespace": "core::time::Duration",
      "identifier": "abs_diff",
      "arguments": [
        {
          "kind": {
            "val": "core::time::Duration"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "core::time::Duration"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::time::Duration"
        }
      },
      "documentation": " Computes the absolute difference between `self` and `other`.\n # Examples\n ```\n use std::time::Duration;\n assert_eq!(Duration::new(100, 0).abs_diff(Duration::new(80, 0)), Duration::new(20, 0));\n assert_eq!(Duration::new(100, 400_000_000).abs_diff(Duration::new(110, 0)), Duration::new(9, 600_000_000));\n ```"
    },
    "core::time::Duration::add": {
      "namespace": "core::time::Duration",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "core::time::Duration"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "core::time::Duration"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::time::Duration"
        }
      }
    },
    "core::time::Duration::as_micros": {
      "namespace": "core::time::Duration",
      "identifier": "as_micros",
      "arguments": [
        {
          "kind": {
            "ref": "core::time::Duration"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u128"
        }
      },
      "documentation": " Returns the total number of whole microseconds contained by this `Duration`.\n # Examples\n ```\n use std::time::Duration;\n let duration = Duration::new(5, 730_023_852);\n assert_eq!(duration.as_micros(), 5_730_023);\n ```"
    },
    "core::time::Duration::as_millis": {
      "namespace": "core::time::Duration",
      "identifier": "as_millis",
      "arguments": [
        {
          "kind": {
            "ref": "core::time::Duration"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u128"
        }
      },
      "documentation": " Returns the total number of whole milliseconds contained by this `Duration`.\n # Examples\n ```\n use std::time::Duration;\n let duration = Duration::new(5, 730_023_852);\n assert_eq!(duration.as_millis(), 5_730);\n ```"
    },
    "core::time::Duration::as_nanos": {
      "namespace": "core::time::Duration",
      "identifier": "as_nanos",
      "arguments": [
        {
          "kind": {
            "ref": "core::time::Duration"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u128"
        }
      },
      "documentation": " Returns the total number of nanoseconds contained by this `Duration`.\n # Examples\n ```\n use std::time::Duration;\n let duration = Duration::new(5, 730_023_852);\n assert_eq!(duration.as_nanos(), 5_730_023_852);\n ```"
    },
    "core::time::Duration::as_secs": {
      "namespace": "core::time::Duration",
      "identifier": "as_secs",
      "arguments": [
        {
          "kind": {
            "ref": "core::time::Duration"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Returns the number of _whole_ seconds contained by this `Duration`.\n The returned value does not include the fractional (nanosecond) part of the\n duration, which can be obtained using [`subsec_nanos`].\n # Examples\n ```\n use std::time::Duration;\n let duration = Duration::new(5, 730_023_852);\n assert_eq!(duration.as_secs(), 5);\n ```\n To determine the total number of seconds represented by the `Duration`\n including the fractional part, use [`as_secs_f64`] or [`as_secs_f32`]\n [`as_secs_f64`]: Duration::as_secs_f64\n [`as_secs_f32`]: Duration::as_secs_f32\n [`subsec_nanos`]: Duration::subsec_nanos"
    },
    "core::time::Duration::as_secs_f32": {
      "namespace": "core::time::Duration",
      "identifier": "as_secs_f32",
      "arguments": [
        {
          "kind": {
            "ref": "core::time::Duration"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the number of seconds contained by this `Duration` as `f32`.\n The returned value includes the fractional (nanosecond) part of the duration.\n # Examples\n ```\n use std::time::Duration;\n let dur = Duration::new(2, 700_000_000);\n assert_eq!(dur.as_secs_f32(), 2.7);\n ```"
    },
    "core::time::Duration::as_secs_f64": {
      "namespace": "core::time::Duration",
      "identifier": "as_secs_f64",
      "arguments": [
        {
          "kind": {
            "ref": "core::time::Duration"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the number of seconds contained by this `Duration` as `f64`.\n The returned value includes the fractional (nanosecond) part of the duration.\n # Examples\n ```\n use std::time::Duration;\n let dur = Duration::new(2, 700_000_000);\n assert_eq!(dur.as_secs_f64(), 2.7);\n ```"
    },
    "core::time::Duration::assert_receiver_is_total_eq": {
      "namespace": "core::time::Duration",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "core::time::Duration"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "core::time::Duration::clone": {
      "namespace": "core::time::Duration",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "core::time::Duration"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::time::Duration"
        }
      }
    },
    "core::time::Duration::div": {
      "namespace": "core::time::Duration",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "core::time::Duration"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::time::Duration"
        }
      }
    },
    "core::time::Duration::div_duration_f32": {
      "namespace": "core::time::Duration",
      "identifier": "div_duration_f32",
      "arguments": [
        {
          "kind": {
            "val": "core::time::Duration"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "core::time::Duration"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Divides `Duration` by `Duration` and returns `f32`.\n # Examples\n ```\n use std::time::Duration;\n let dur1 = Duration::new(2, 700_000_000);\n let dur2 = Duration::new(5, 400_000_000);\n assert_eq!(dur1.div_duration_f32(dur2), 0.5);\n ```"
    },
    "core::time::Duration::div_duration_f64": {
      "namespace": "core::time::Duration",
      "identifier": "div_duration_f64",
      "arguments": [
        {
          "kind": {
            "val": "core::time::Duration"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "core::time::Duration"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Divides `Duration` by `Duration` and returns `f64`.\n # Examples\n ```\n use std::time::Duration;\n let dur1 = Duration::new(2, 700_000_000);\n let dur2 = Duration::new(5, 400_000_000);\n assert_eq!(dur1.div_duration_f64(dur2), 0.5);\n ```"
    },
    "core::time::Duration::div_f32": {
      "namespace": "core::time::Duration",
      "identifier": "div_f32",
      "arguments": [
        {
          "kind": {
            "val": "core::time::Duration"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::time::Duration"
        }
      },
      "documentation": " Divides `Duration` by `f32`.\n # Panics\n This method will panic if result is negative, overflows `Duration` or not finite.\n # Examples\n ```\n use std::time::Duration;\n let dur = Duration::new(2, 700_000_000);\n // note that due to rounding errors result is slightly\n // different from 0.859_872_611\n assert_eq!(dur.div_f32(3.14), Duration::new(0, 859_872_580));\n assert_eq!(dur.div_f32(3.14e5), Duration::new(0, 8_599));\n ```"
    },
    "core::time::Duration::div_f64": {
      "namespace": "core::time::Duration",
      "identifier": "div_f64",
      "arguments": [
        {
          "kind": {
            "val": "core::time::Duration"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::time::Duration"
        }
      },
      "documentation": " Divides `Duration` by `f64`.\n # Panics\n This method will panic if result is negative, overflows `Duration` or not finite.\n # Examples\n ```\n use std::time::Duration;\n let dur = Duration::new(2, 700_000_000);\n assert_eq!(dur.div_f64(3.14), Duration::new(0, 859_872_611));\n assert_eq!(dur.div_f64(3.14e5), Duration::new(0, 8_599));\n ```"
    },
    "core::time::Duration::eq": {
      "namespace": "core::time::Duration",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "core::time::Duration"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "core::time::Duration"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "core::time::Duration::from_micros": {
      "namespace": "core::time::Duration",
      "identifier": "from_micros",
      "arguments": [
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "micros"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::time::Duration"
        }
      },
      "documentation": " Creates a new `Duration` from the specified number of microseconds.\n # Examples\n ```\n use std::time::Duration;\n let duration = Duration::from_micros(1_000_002);\n assert_eq!(1, duration.as_secs());\n assert_eq!(2_000, duration.subsec_nanos());\n ```"
    },
    "core::time::Duration::from_millis": {
      "namespace": "core::time::Duration",
      "identifier": "from_millis",
      "arguments": [
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "millis"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::time::Duration"
        }
      },
      "documentation": " Creates a new `Duration` from the specified number of milliseconds.\n # Examples\n ```\n use std::time::Duration;\n let duration = Duration::from_millis(2_569);\n assert_eq!(2, duration.as_secs());\n assert_eq!(569_000_000, duration.subsec_nanos());\n ```"
    },
    "core::time::Duration::from_nanos": {
      "namespace": "core::time::Duration",
      "identifier": "from_nanos",
      "arguments": [
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "nanos"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::time::Duration"
        }
      },
      "documentation": " Creates a new `Duration` from the specified number of nanoseconds.\n Note: Using this on the return value of `as_nanos()` might cause unexpected behavior:\n `as_nanos()` returns a u128, and can return values that do not fit in u64, e.g. 585 years.\n Instead, consider using the pattern `Duration::new(d.as_secs(), d.subsec_nanos())`\n if you cannot copy/clone the Duration directly.\n # Examples\n ```\n use std::time::Duration;\n let duration = Duration::from_nanos(1_000_000_123);\n assert_eq!(1, duration.as_secs());\n assert_eq!(123, duration.subsec_nanos());\n ```"
    },
    "core::time::Duration::from_secs": {
      "namespace": "core::time::Duration",
      "identifier": "from_secs",
      "arguments": [
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "secs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::time::Duration"
        }
      },
      "documentation": " Creates a new `Duration` from the specified number of whole seconds.\n # Examples\n ```\n use std::time::Duration;\n let duration = Duration::from_secs(5);\n assert_eq!(5, duration.as_secs());\n assert_eq!(0, duration.subsec_nanos());\n ```"
    },
    "core::time::Duration::from_secs_f32": {
      "namespace": "core::time::Duration",
      "identifier": "from_secs_f32",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "secs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::time::Duration"
        }
      },
      "documentation": " Creates a new `Duration` from the specified number of seconds represented\n as `f32`.\n # Panics\n This constructor will panic if `secs` is negative, overflows `Duration` or not finite.\n # Examples\n ```\n use std::time::Duration;\n let res = Duration::from_secs_f32(0.0);\n assert_eq!(res, Duration::new(0, 0));\n let res = Duration::from_secs_f32(1e-20);\n assert_eq!(res, Duration::new(0, 0));\n let res = Duration::from_secs_f32(4.2e-7);\n assert_eq!(res, Duration::new(0, 420));\n let res = Duration::from_secs_f32(2.7);\n assert_eq!(res, Duration::new(2, 700_000_048));\n let res = Duration::from_secs_f32(3e10);\n assert_eq!(res, Duration::new(30_000_001_024, 0));\n // subnormal float\n let res = Duration::from_secs_f32(f32::from_bits(1));\n assert_eq!(res, Duration::new(0, 0));\n // conversion uses rounding\n let res = Duration::from_secs_f32(0.999e-9);\n assert_eq!(res, Duration::new(0, 1));\n ```"
    },
    "core::time::Duration::from_secs_f64": {
      "namespace": "core::time::Duration",
      "identifier": "from_secs_f64",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "secs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::time::Duration"
        }
      },
      "documentation": " Creates a new `Duration` from the specified number of seconds represented\n as `f64`.\n # Panics\n This constructor will panic if `secs` is negative, overflows `Duration` or not finite.\n # Examples\n ```\n use std::time::Duration;\n let res = Duration::from_secs_f64(0.0);\n assert_eq!(res, Duration::new(0, 0));\n let res = Duration::from_secs_f64(1e-20);\n assert_eq!(res, Duration::new(0, 0));\n let res = Duration::from_secs_f64(4.2e-7);\n assert_eq!(res, Duration::new(0, 420));\n let res = Duration::from_secs_f64(2.7);\n assert_eq!(res, Duration::new(2, 700_000_000));\n let res = Duration::from_secs_f64(3e10);\n assert_eq!(res, Duration::new(30_000_000_000, 0));\n // subnormal float\n let res = Duration::from_secs_f64(f64::from_bits(1));\n assert_eq!(res, Duration::new(0, 0));\n // conversion uses rounding\n let res = Duration::from_secs_f64(0.999e-9);\n assert_eq!(res, Duration::new(0, 1));\n ```"
    },
    "core::time::Duration::is_zero": {
      "namespace": "core::time::Duration",
      "identifier": "is_zero",
      "arguments": [
        {
          "kind": {
            "ref": "core::time::Duration"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if this `Duration` spans no time.\n # Examples\n ```\n use std::time::Duration;\n assert!(Duration::ZERO.is_zero());\n assert!(Duration::new(0, 0).is_zero());\n assert!(Duration::from_nanos(0).is_zero());\n assert!(Duration::from_secs(0).is_zero());\n assert!(!Duration::new(1, 1).is_zero());\n assert!(!Duration::from_nanos(1).is_zero());\n assert!(!Duration::from_secs(1).is_zero());\n ```"
    },
    "core::time::Duration::mul": {
      "namespace": "core::time::Duration",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "core::time::Duration"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::time::Duration"
        }
      }
    },
    "core::time::Duration::mul_f32": {
      "namespace": "core::time::Duration",
      "identifier": "mul_f32",
      "arguments": [
        {
          "kind": {
            "val": "core::time::Duration"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::time::Duration"
        }
      },
      "documentation": " Multiplies `Duration` by `f32`.\n # Panics\n This method will panic if result is negative, overflows `Duration` or not finite.\n # Examples\n ```\n use std::time::Duration;\n let dur = Duration::new(2, 700_000_000);\n assert_eq!(dur.mul_f32(3.14), Duration::new(8, 478_000_641));\n assert_eq!(dur.mul_f32(3.14e5), Duration::new(847_800, 0));\n ```"
    },
    "core::time::Duration::mul_f64": {
      "namespace": "core::time::Duration",
      "identifier": "mul_f64",
      "arguments": [
        {
          "kind": {
            "val": "core::time::Duration"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::time::Duration"
        }
      },
      "documentation": " Multiplies `Duration` by `f64`.\n # Panics\n This method will panic if result is negative, overflows `Duration` or not finite.\n # Examples\n ```\n use std::time::Duration;\n let dur = Duration::new(2, 700_000_000);\n assert_eq!(dur.mul_f64(3.14), Duration::new(8, 478_000_000));\n assert_eq!(dur.mul_f64(3.14e5), Duration::new(847_800, 0));\n ```"
    },
    "core::time::Duration::new": {
      "namespace": "core::time::Duration",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "secs"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "nanos"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::time::Duration"
        }
      },
      "documentation": " Creates a new `Duration` from the specified number of whole seconds and\n additional nanoseconds.\n If the number of nanoseconds is greater than 1 billion (the number of\n nanoseconds in a second), then it will carry over into the seconds provided.\n # Panics\n This constructor will panic if the carry from the nanoseconds overflows\n the seconds counter.\n # Examples\n ```\n use std::time::Duration;\n let five_seconds = Duration::new(5, 0);\n ```"
    },
    "core::time::Duration::saturating_add": {
      "namespace": "core::time::Duration",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "core::time::Duration"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "core::time::Duration"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::time::Duration"
        }
      },
      "documentation": " Saturating `Duration` addition. Computes `self + other`, returning [`Duration::MAX`]\n if overflow occurred.\n # Examples\n ```\n #![feature(duration_constants)]\n use std::time::Duration;\n assert_eq!(Duration::new(0, 0).saturating_add(Duration::new(0, 1)), Duration::new(0, 1));\n assert_eq!(Duration::new(1, 0).saturating_add(Duration::new(u64::MAX, 0)), Duration::MAX);\n ```"
    },
    "core::time::Duration::saturating_mul": {
      "namespace": "core::time::Duration",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "core::time::Duration"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::time::Duration"
        }
      },
      "documentation": " Saturating `Duration` multiplication. Computes `self * other`, returning\n [`Duration::MAX`] if overflow occurred.\n # Examples\n ```\n #![feature(duration_constants)]\n use std::time::Duration;\n assert_eq!(Duration::new(0, 500_000_001).saturating_mul(2), Duration::new(1, 2));\n assert_eq!(Duration::new(u64::MAX - 1, 0).saturating_mul(2), Duration::MAX);\n ```"
    },
    "core::time::Duration::saturating_sub": {
      "namespace": "core::time::Duration",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "core::time::Duration"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "core::time::Duration"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::time::Duration"
        }
      },
      "documentation": " Saturating `Duration` subtraction. Computes `self - other`, returning [`Duration::ZERO`]\n if the result would be negative or if overflow occurred.\n # Examples\n ```\n use std::time::Duration;\n assert_eq!(Duration::new(0, 1).saturating_sub(Duration::new(0, 0)), Duration::new(0, 1));\n assert_eq!(Duration::new(0, 0).saturating_sub(Duration::new(0, 1)), Duration::ZERO);\n ```"
    },
    "core::time::Duration::sub": {
      "namespace": "core::time::Duration",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "core::time::Duration"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "core::time::Duration"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::time::Duration"
        }
      }
    },
    "core::time::Duration::subsec_micros": {
      "namespace": "core::time::Duration",
      "identifier": "subsec_micros",
      "arguments": [
        {
          "kind": {
            "ref": "core::time::Duration"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the fractional part of this `Duration`, in whole microseconds.\n This method does **not** return the length of the duration when\n represented by microseconds. The returned number always represents a\n fractional portion of a second (i.e., it is less than one million).\n # Examples\n ```\n use std::time::Duration;\n let duration = Duration::from_micros(1_234_567);\n assert_eq!(duration.as_secs(), 1);\n assert_eq!(duration.subsec_micros(), 234_567);\n ```"
    },
    "core::time::Duration::subsec_millis": {
      "namespace": "core::time::Duration",
      "identifier": "subsec_millis",
      "arguments": [
        {
          "kind": {
            "ref": "core::time::Duration"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the fractional part of this `Duration`, in whole milliseconds.\n This method does **not** return the length of the duration when\n represented by milliseconds. The returned number always represents a\n fractional portion of a second (i.e., it is less than one thousand).\n # Examples\n ```\n use std::time::Duration;\n let duration = Duration::from_millis(5_432);\n assert_eq!(duration.as_secs(), 5);\n assert_eq!(duration.subsec_millis(), 432);\n ```"
    },
    "core::time::Duration::subsec_nanos": {
      "namespace": "core::time::Duration",
      "identifier": "subsec_nanos",
      "arguments": [
        {
          "kind": {
            "ref": "core::time::Duration"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the fractional part of this `Duration`, in nanoseconds.\n This method does **not** return the length of the duration when\n represented by nanoseconds. The returned number always represents a\n fractional portion of a second (i.e., it is less than one billion).\n # Examples\n ```\n use std::time::Duration;\n let duration = Duration::from_millis(5_010);\n assert_eq!(duration.as_secs(), 5);\n assert_eq!(duration.subsec_nanos(), 10_000_000);\n ```"
    },
    "glam::Affine2::abs_diff_eq": {
      "namespace": "glam::Affine2",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Affine2"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs`\n is less than or equal to `max_abs_diff`.\n This can be used to compare if two 3x4 matrices contain similar elements. It works\n best when comparing with a known value. The `max_abs_diff` that should be used used\n depends on the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::Affine2::clone": {
      "namespace": "glam::Affine2",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine2"
        }
      }
    },
    "glam::Affine2::eq": {
      "namespace": "glam::Affine2",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Affine2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::Affine2::from_angle": {
      "namespace": "glam::Affine2",
      "identifier": "from_angle",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine2"
        }
      },
      "documentation": " Creates an affine transform from the given rotation `angle`."
    },
    "glam::Affine2::from_angle_translation": {
      "namespace": "glam::Affine2",
      "identifier": "from_angle_translation",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine2"
        }
      },
      "documentation": " Creates an affine transform from the given 2D rotation `angle` (in radians) and\n `translation`.\n Equivalent to `Affine2::from_translation(translation) * Affine2::from_angle(angle)`"
    },
    "glam::Affine2::from_cols": {
      "namespace": "glam::Affine2",
      "identifier": "from_cols",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "x_axis"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "y_axis"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "z_axis"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine2"
        }
      },
      "documentation": " Creates an affine transform from three column vectors."
    },
    "glam::Affine2::from_mat2": {
      "namespace": "glam::Affine2",
      "identifier": "from_mat2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat2"
          },
          "name": "matrix2"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine2"
        }
      },
      "documentation": " Creates an affine transform from a 2x2 matrix (expressing scale, shear and rotation)"
    },
    "glam::Affine2::from_mat2_translation": {
      "namespace": "glam::Affine2",
      "identifier": "from_mat2_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat2"
          },
          "name": "matrix2"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine2"
        }
      },
      "documentation": " Creates an affine transform from a 2x2 matrix (expressing scale, shear and rotation) and a\n translation vector.\n Equivalent to\n `Affine2::from_translation(translation) * Affine2::from_mat2(mat2)`"
    },
    "glam::Affine2::from_mat3": {
      "namespace": "glam::Affine2",
      "identifier": "from_mat3",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine2"
        }
      },
      "documentation": " The given `Mat3` must be an affine transform,"
    },
    "glam::Affine2::from_mat3a": {
      "namespace": "glam::Affine2",
      "identifier": "from_mat3a",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3A"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine2"
        }
      },
      "documentation": " The given [`Mat3A`] must be an affine transform,"
    },
    "glam::Affine2::from_scale": {
      "namespace": "glam::Affine2",
      "identifier": "from_scale",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "scale"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine2"
        }
      },
      "documentation": " Creates an affine transform that changes scale.\n Note that if any scale is zero the transform will be non-invertible."
    },
    "glam::Affine2::from_scale_angle_translation": {
      "namespace": "glam::Affine2",
      "identifier": "from_scale_angle_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "scale"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine2"
        }
      },
      "documentation": " Creates an affine transform from the given 2D `scale`, rotation `angle` (in radians) and\n `translation`.\n Equivalent to `Affine2::from_translation(translation) *\n Affine2::from_angle(angle) * Affine2::from_scale(scale)`"
    },
    "glam::Affine2::from_translation": {
      "namespace": "glam::Affine2",
      "identifier": "from_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine2"
        }
      },
      "documentation": " Creates an affine transformation from the given 2D `translation`."
    },
    "glam::Affine2::inverse": {
      "namespace": "glam::Affine2",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine2"
        }
      },
      "documentation": " Return the inverse of this transform.\n Note that if the transform is not invertible the result will be invalid."
    },
    "glam::Affine2::is_finite": {
      "namespace": "glam::Affine2",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.\n If any element is either `NaN`, positive or negative infinity, this will return\n `false`."
    },
    "glam::Affine2::is_nan": {
      "namespace": "glam::Affine2",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::Affine2::mul": {
      "namespace": "glam::Affine2",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::Affine2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Affine2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine2"
        }
      }
    },
    "glam::Affine2::mul-1": {
      "namespace": "glam::Affine2",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Affine2"
          }
        },
        {
          "kind": {
            "val": "glam::Mat3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      }
    },
    "glam::Affine2::mul-2": {
      "namespace": "glam::Affine2",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Affine2"
          }
        },
        {
          "kind": {
            "val": "glam::Mat3A"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      }
    },
    "glam::Affine2::to_cols_array": {
      "namespace": "glam::Affine2",
      "identifier": "to_cols_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f32"
            },
            6
          ]
        }
      },
      "documentation": " Creates a `[f32; 6]` array storing data in column major order."
    },
    "glam::Affine2::to_cols_array_2d": {
      "namespace": "glam::Affine2",
      "identifier": "to_cols_array_2d",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "array": [
                {
                  "primitive": "f32"
                },
                2
              ]
            },
            3
          ]
        }
      },
      "documentation": " Creates a `[[f32; 2]; 3]` 2D array storing data in\n column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::Affine2::transform_point2": {
      "namespace": "glam::Affine2",
      "identifier": "transform_point2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Transforms the given 2D point, applying shear, scale, rotation and translation."
    },
    "glam::Affine2::transform_vector2": {
      "namespace": "glam::Affine2",
      "identifier": "transform_vector2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Transforms the given 2D vector, applying shear, scale and rotation (but NOT\n translation).\n To also apply translation, use [`Self::transform_point2()`] instead."
    },
    "glam::Affine3A::abs_diff_eq": {
      "namespace": "glam::Affine3A",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Affine3A"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs`\n is less than or equal to `max_abs_diff`.\n This can be used to compare if two 3x4 matrices contain similar elements. It works\n best when comparing with a known value. The `max_abs_diff` that should be used used\n depends on the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::Affine3A::clone": {
      "namespace": "glam::Affine3A",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      }
    },
    "glam::Affine3A::eq": {
      "namespace": "glam::Affine3A",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Affine3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::Affine3A::from_axis_angle": {
      "namespace": "glam::Affine3A",
      "identifier": "from_axis_angle",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "axis"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates an affine transform containing a 3D rotation around a normalized\n rotation `axis` of `angle` (in radians)."
    },
    "glam::Affine3A::from_cols": {
      "namespace": "glam::Affine3A",
      "identifier": "from_cols",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "x_axis"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "y_axis"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "z_axis"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "w_axis"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates an affine transform from three column vectors."
    },
    "glam::Affine3A::from_mat3": {
      "namespace": "glam::Affine3A",
      "identifier": "from_mat3",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3"
          },
          "name": "mat3"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates an affine transform from a 3x3 matrix (expressing scale, shear and\n rotation)"
    },
    "glam::Affine3A::from_mat3_translation": {
      "namespace": "glam::Affine3A",
      "identifier": "from_mat3_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3"
          },
          "name": "mat3"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates an affine transform from a 3x3 matrix (expressing scale, shear and rotation)\n and a translation vector.\n Equivalent to `Affine3A::from_translation(translation) * Affine3A::from_mat3(mat3)`"
    },
    "glam::Affine3A::from_mat4": {
      "namespace": "glam::Affine3A",
      "identifier": "from_mat4",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat4"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " The given `Mat4` must be an affine transform,\n i.e. contain no perspective transform."
    },
    "glam::Affine3A::from_quat": {
      "namespace": "glam::Affine3A",
      "identifier": "from_quat",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates an affine transform from the given `rotation` quaternion."
    },
    "glam::Affine3A::from_rotation_translation": {
      "namespace": "glam::Affine3A",
      "identifier": "from_rotation_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates an affine transform from the given 3D `rotation` and `translation`.\n Equivalent to `Affine3A::from_translation(translation) * Affine3A::from_quat(rotation)`"
    },
    "glam::Affine3A::from_rotation_x": {
      "namespace": "glam::Affine3A",
      "identifier": "from_rotation_x",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates an affine transform containing a 3D rotation around the x axis of\n `angle` (in radians)."
    },
    "glam::Affine3A::from_rotation_y": {
      "namespace": "glam::Affine3A",
      "identifier": "from_rotation_y",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates an affine transform containing a 3D rotation around the y axis of\n `angle` (in radians)."
    },
    "glam::Affine3A::from_rotation_z": {
      "namespace": "glam::Affine3A",
      "identifier": "from_rotation_z",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates an affine transform containing a 3D rotation around the z axis of\n `angle` (in radians)."
    },
    "glam::Affine3A::from_scale": {
      "namespace": "glam::Affine3A",
      "identifier": "from_scale",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "scale"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates an affine transform that changes scale.\n Note that if any scale is zero the transform will be non-invertible."
    },
    "glam::Affine3A::from_scale_rotation_translation": {
      "namespace": "glam::Affine3A",
      "identifier": "from_scale_rotation_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "scale"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates an affine transform from the given 3D `scale`, `rotation` and\n `translation`.\n Equivalent to `Affine3A::from_translation(translation) *\n Affine3A::from_quat(rotation) * Affine3A::from_scale(scale)`"
    },
    "glam::Affine3A::from_translation": {
      "namespace": "glam::Affine3A",
      "identifier": "from_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates an affine transformation from the given 3D `translation`."
    },
    "glam::Affine3A::inverse": {
      "namespace": "glam::Affine3A",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Return the inverse of this transform.\n Note that if the transform is not invertible the result will be invalid."
    },
    "glam::Affine3A::is_finite": {
      "namespace": "glam::Affine3A",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.\n If any element is either `NaN`, positive or negative infinity, this will return\n `false`."
    },
    "glam::Affine3A::is_nan": {
      "namespace": "glam::Affine3A",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::Affine3A::look_at_lh": {
      "namespace": "glam::Affine3A",
      "identifier": "look_at_lh",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "center"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates a left-handed view transform using a camera position, an up direction, and a focal\n point.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=forward`.\n # Panics\n Will panic if `up` is not normalized when `glam_assert` is enabled."
    },
    "glam::Affine3A::look_at_rh": {
      "namespace": "glam::Affine3A",
      "identifier": "look_at_rh",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "center"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates a right-handed view transform using a camera position, an up direction, and a focal\n point.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=back`.\n # Panics\n Will panic if `up` is not normalized when `glam_assert` is enabled."
    },
    "glam::Affine3A::look_to_lh": {
      "namespace": "glam::Affine3A",
      "identifier": "look_to_lh",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "dir"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates a left-handed view transform using a camera position, an up direction, and a facing\n direction.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=forward`."
    },
    "glam::Affine3A::look_to_rh": {
      "namespace": "glam::Affine3A",
      "identifier": "look_to_rh",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "dir"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates a right-handed view transform using a camera position, an up direction, and a facing\n direction.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=back`."
    },
    "glam::Affine3A::mul": {
      "namespace": "glam::Affine3A",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::Affine3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Affine3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      }
    },
    "glam::Affine3A::mul-1": {
      "namespace": "glam::Affine3A",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Affine3A"
          }
        },
        {
          "kind": {
            "val": "glam::Mat4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      }
    },
    "glam::Affine3A::to_cols_array": {
      "namespace": "glam::Affine3A",
      "identifier": "to_cols_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f32"
            },
            12
          ]
        }
      },
      "documentation": " Creates a `[f32; 12]` array storing data in column major order."
    },
    "glam::Affine3A::to_cols_array_2d": {
      "namespace": "glam::Affine3A",
      "identifier": "to_cols_array_2d",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "array": [
                {
                  "primitive": "f32"
                },
                3
              ]
            },
            4
          ]
        }
      },
      "documentation": " Creates a `[[f32; 3]; 4]` 3D array storing data in\n column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::Affine3A::transform_point3": {
      "namespace": "glam::Affine3A",
      "identifier": "transform_point3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Transforms the given 3D points, applying shear, scale, rotation and translation."
    },
    "glam::Affine3A::transform_point3a": {
      "namespace": "glam::Affine3A",
      "identifier": "transform_point3a",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Transforms the given [`Vec3A`], applying shear, scale, rotation and translation."
    },
    "glam::Affine3A::transform_vector3": {
      "namespace": "glam::Affine3A",
      "identifier": "transform_vector3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Transforms the given 3D vector, applying shear, scale and rotation (but NOT\n translation).\n To also apply translation, use [`Self::transform_point3()`] instead."
    },
    "glam::Affine3A::transform_vector3a": {
      "namespace": "glam::Affine3A",
      "identifier": "transform_vector3a",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Transforms the given [`Vec3A`], applying shear, scale and rotation (but NOT\n translation).\n To also apply translation, use [`Self::transform_point3a()`] instead."
    },
    "glam::BVec2::all": {
      "namespace": "glam::BVec2",
      "identifier": "all",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if all the elements are true, false otherwise."
    },
    "glam::BVec2::any": {
      "namespace": "glam::BVec2",
      "identifier": "any",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if any of the elements are true, false otherwise."
    },
    "glam::BVec2::assert_receiver_is_total_eq": {
      "namespace": "glam::BVec2",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::BVec2::bitmask": {
      "namespace": "glam::BVec2",
      "identifier": "bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 2 bits set from the elements of `self`.\n A true element results in a `1` bit and a false element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::BVec2::clone": {
      "namespace": "glam::BVec2",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      }
    },
    "glam::BVec2::eq": {
      "namespace": "glam::BVec2",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::BVec2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::BVec2::from_array": {
      "namespace": "glam::BVec2",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "bool"
              },
              2
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Creates a new vector mask from a bool array."
    },
    "glam::BVec2::new": {
      "namespace": "glam::BVec2",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Creates a new vector mask."
    },
    "glam::BVec2::set": {
      "namespace": "glam::BVec2",
      "identifier": "set",
      "arguments": [
        {
          "kind": {
            "mut": "glam::BVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Sets the element at `index`.\n Panics if `index` is greater than 1."
    },
    "glam::BVec2::splat": {
      "namespace": "glam::BVec2",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Creates a vector mask with all elements set to `v`."
    },
    "glam::BVec2::test": {
      "namespace": "glam::BVec2",
      "identifier": "test",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Tests the value at `index`.\n Panics if `index` is greater than 1."
    },
    "glam::BVec3::all": {
      "namespace": "glam::BVec3",
      "identifier": "all",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if all the elements are true, false otherwise."
    },
    "glam::BVec3::any": {
      "namespace": "glam::BVec3",
      "identifier": "any",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if any of the elements are true, false otherwise."
    },
    "glam::BVec3::assert_receiver_is_total_eq": {
      "namespace": "glam::BVec3",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::BVec3::bitmask": {
      "namespace": "glam::BVec3",
      "identifier": "bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 3 bits set from the elements of `self`.\n A true element results in a `1` bit and a false element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::BVec3::clone": {
      "namespace": "glam::BVec3",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      }
    },
    "glam::BVec3::eq": {
      "namespace": "glam::BVec3",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::BVec3"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::BVec3::from_array": {
      "namespace": "glam::BVec3",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "bool"
              },
              3
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Creates a new vector mask from a bool array."
    },
    "glam::BVec3::new": {
      "namespace": "glam::BVec3",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Creates a new vector mask."
    },
    "glam::BVec3::set": {
      "namespace": "glam::BVec3",
      "identifier": "set",
      "arguments": [
        {
          "kind": {
            "mut": "glam::BVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Sets the element at `index`.\n Panics if `index` is greater than 2."
    },
    "glam::BVec3::splat": {
      "namespace": "glam::BVec3",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Creates a vector mask with all elements set to `v`."
    },
    "glam::BVec3::test": {
      "namespace": "glam::BVec3",
      "identifier": "test",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Tests the value at `index`.\n Panics if `index` is greater than 2."
    },
    "glam::BVec3A::all": {
      "namespace": "glam::BVec3A",
      "identifier": "all",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if all the elements are true, false otherwise."
    },
    "glam::BVec3A::any": {
      "namespace": "glam::BVec3A",
      "identifier": "any",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if any of the elements are true, false otherwise."
    },
    "glam::BVec3A::bitmask": {
      "namespace": "glam::BVec3A",
      "identifier": "bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 3 bits set from the elements of `self`.\n A true element results in a `1` bit and a false element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::BVec3A::clone": {
      "namespace": "glam::BVec3A",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3A"
        }
      }
    },
    "glam::BVec3A::eq": {
      "namespace": "glam::BVec3A",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::BVec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::BVec3A::from_array": {
      "namespace": "glam::BVec3A",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "bool"
              },
              3
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3A"
        }
      },
      "documentation": " Creates a new vector mask from a bool array."
    },
    "glam::BVec3A::new": {
      "namespace": "glam::BVec3A",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3A"
        }
      },
      "documentation": " Creates a new vector mask."
    },
    "glam::BVec3A::set": {
      "namespace": "glam::BVec3A",
      "identifier": "set",
      "arguments": [
        {
          "kind": {
            "mut": "glam::BVec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Sets the element at `index`.\n Panics if `index` is greater than 2."
    },
    "glam::BVec3A::splat": {
      "namespace": "glam::BVec3A",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3A"
        }
      },
      "documentation": " Creates a vector mask with all elements set to `v`."
    },
    "glam::BVec3A::test": {
      "namespace": "glam::BVec3A",
      "identifier": "test",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Tests the value at `index`.\n Panics if `index` is greater than 2."
    },
    "glam::BVec4::all": {
      "namespace": "glam::BVec4",
      "identifier": "all",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if all the elements are true, false otherwise."
    },
    "glam::BVec4::any": {
      "namespace": "glam::BVec4",
      "identifier": "any",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if any of the elements are true, false otherwise."
    },
    "glam::BVec4::assert_receiver_is_total_eq": {
      "namespace": "glam::BVec4",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::BVec4::bitmask": {
      "namespace": "glam::BVec4",
      "identifier": "bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 4 bits set from the elements of `self`.\n A true element results in a `1` bit and a false element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::BVec4::clone": {
      "namespace": "glam::BVec4",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      }
    },
    "glam::BVec4::eq": {
      "namespace": "glam::BVec4",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::BVec4"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::BVec4::from_array": {
      "namespace": "glam::BVec4",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "bool"
              },
              4
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Creates a new vector mask from a bool array."
    },
    "glam::BVec4::new": {
      "namespace": "glam::BVec4",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "z"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Creates a new vector mask."
    },
    "glam::BVec4::set": {
      "namespace": "glam::BVec4",
      "identifier": "set",
      "arguments": [
        {
          "kind": {
            "mut": "glam::BVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Sets the element at `index`.\n Panics if `index` is greater than 3."
    },
    "glam::BVec4::splat": {
      "namespace": "glam::BVec4",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Creates a vector mask with all elements set to `v`."
    },
    "glam::BVec4::test": {
      "namespace": "glam::BVec4",
      "identifier": "test",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Tests the value at `index`.\n Panics if `index` is greater than 3."
    },
    "glam::BVec4A::all": {
      "namespace": "glam::BVec4A",
      "identifier": "all",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec4A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if all the elements are true, false otherwise."
    },
    "glam::BVec4A::any": {
      "namespace": "glam::BVec4A",
      "identifier": "any",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec4A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if any of the elements are true, false otherwise."
    },
    "glam::BVec4A::bitmask": {
      "namespace": "glam::BVec4A",
      "identifier": "bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec4A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 4 bits set from the elements of `self`.\n A true element results in a `1` bit and a false element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::BVec4A::clone": {
      "namespace": "glam::BVec4A",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec4A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4A"
        }
      }
    },
    "glam::BVec4A::eq": {
      "namespace": "glam::BVec4A",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec4A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::BVec4A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::BVec4A::from_array": {
      "namespace": "glam::BVec4A",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "bool"
              },
              4
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4A"
        }
      },
      "documentation": " Creates a new vector mask from a bool array."
    },
    "glam::BVec4A::new": {
      "namespace": "glam::BVec4A",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "z"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4A"
        }
      },
      "documentation": " Creates a new vector mask."
    },
    "glam::BVec4A::set": {
      "namespace": "glam::BVec4A",
      "identifier": "set",
      "arguments": [
        {
          "kind": {
            "mut": "glam::BVec4A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Sets the element at `index`.\n Panics if `index` is greater than 3."
    },
    "glam::BVec4A::splat": {
      "namespace": "glam::BVec4A",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4A"
        }
      },
      "documentation": " Creates a vector mask with all elements set to `v`."
    },
    "glam::BVec4A::test": {
      "namespace": "glam::BVec4A",
      "identifier": "test",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec4A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Tests the value at `index`.\n Panics if `index` is greater than 3."
    },
    "glam::DAffine2::abs_diff_eq": {
      "namespace": "glam::DAffine2",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DAffine2"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs`\n is less than or equal to `max_abs_diff`.\n This can be used to compare if two 3x4 matrices contain similar elements. It works\n best when comparing with a known value. The `max_abs_diff` that should be used used\n depends on the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::DAffine2::clone": {
      "namespace": "glam::DAffine2",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine2"
        }
      }
    },
    "glam::DAffine2::eq": {
      "namespace": "glam::DAffine2",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DAffine2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::DAffine2::from_angle": {
      "namespace": "glam::DAffine2",
      "identifier": "from_angle",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine2"
        }
      },
      "documentation": " Creates an affine transform from the given rotation `angle`."
    },
    "glam::DAffine2::from_angle_translation": {
      "namespace": "glam::DAffine2",
      "identifier": "from_angle_translation",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine2"
        }
      },
      "documentation": " Creates an affine transform from the given 2D rotation `angle` (in radians) and\n `translation`.\n Equivalent to `DAffine2::from_translation(translation) * DAffine2::from_angle(angle)`"
    },
    "glam::DAffine2::from_cols": {
      "namespace": "glam::DAffine2",
      "identifier": "from_cols",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "x_axis"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "y_axis"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "z_axis"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine2"
        }
      },
      "documentation": " Creates an affine transform from three column vectors."
    },
    "glam::DAffine2::from_mat2": {
      "namespace": "glam::DAffine2",
      "identifier": "from_mat2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat2"
          },
          "name": "matrix2"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine2"
        }
      },
      "documentation": " Creates an affine transform from a 2x2 matrix (expressing scale, shear and rotation)"
    },
    "glam::DAffine2::from_mat2_translation": {
      "namespace": "glam::DAffine2",
      "identifier": "from_mat2_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat2"
          },
          "name": "matrix2"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine2"
        }
      },
      "documentation": " Creates an affine transform from a 2x2 matrix (expressing scale, shear and rotation) and a\n translation vector.\n Equivalent to\n `DAffine2::from_translation(translation) * DAffine2::from_mat2(mat2)`"
    },
    "glam::DAffine2::from_mat3": {
      "namespace": "glam::DAffine2",
      "identifier": "from_mat3",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat3"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine2"
        }
      },
      "documentation": " The given `DMat3` must be an affine transform,"
    },
    "glam::DAffine2::from_scale": {
      "namespace": "glam::DAffine2",
      "identifier": "from_scale",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "scale"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine2"
        }
      },
      "documentation": " Creates an affine transform that changes scale.\n Note that if any scale is zero the transform will be non-invertible."
    },
    "glam::DAffine2::from_scale_angle_translation": {
      "namespace": "glam::DAffine2",
      "identifier": "from_scale_angle_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "scale"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine2"
        }
      },
      "documentation": " Creates an affine transform from the given 2D `scale`, rotation `angle` (in radians) and\n `translation`.\n Equivalent to `DAffine2::from_translation(translation) *\n DAffine2::from_angle(angle) * DAffine2::from_scale(scale)`"
    },
    "glam::DAffine2::from_translation": {
      "namespace": "glam::DAffine2",
      "identifier": "from_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine2"
        }
      },
      "documentation": " Creates an affine transformation from the given 2D `translation`."
    },
    "glam::DAffine2::inverse": {
      "namespace": "glam::DAffine2",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine2"
        }
      },
      "documentation": " Return the inverse of this transform.\n Note that if the transform is not invertible the result will be invalid."
    },
    "glam::DAffine2::is_finite": {
      "namespace": "glam::DAffine2",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.\n If any element is either `NaN`, positive or negative infinity, this will return\n `false`."
    },
    "glam::DAffine2::is_nan": {
      "namespace": "glam::DAffine2",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::DAffine2::mul": {
      "namespace": "glam::DAffine2",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::DAffine2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DAffine2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine2"
        }
      }
    },
    "glam::DAffine2::mul-1": {
      "namespace": "glam::DAffine2",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DAffine2"
          }
        },
        {
          "kind": {
            "val": "glam::DMat3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      }
    },
    "glam::DAffine2::to_cols_array": {
      "namespace": "glam::DAffine2",
      "identifier": "to_cols_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f64"
            },
            6
          ]
        }
      },
      "documentation": " Creates a `[f64; 6]` array storing data in column major order."
    },
    "glam::DAffine2::to_cols_array_2d": {
      "namespace": "glam::DAffine2",
      "identifier": "to_cols_array_2d",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "array": [
                {
                  "primitive": "f64"
                },
                2
              ]
            },
            3
          ]
        }
      },
      "documentation": " Creates a `[[f64; 2]; 3]` 2D array storing data in\n column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::DAffine2::transform_point2": {
      "namespace": "glam::DAffine2",
      "identifier": "transform_point2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Transforms the given 2D point, applying shear, scale, rotation and translation."
    },
    "glam::DAffine2::transform_vector2": {
      "namespace": "glam::DAffine2",
      "identifier": "transform_vector2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Transforms the given 2D vector, applying shear, scale and rotation (but NOT\n translation).\n To also apply translation, use [`Self::transform_point2()`] instead."
    },
    "glam::DAffine3::abs_diff_eq": {
      "namespace": "glam::DAffine3",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DAffine3"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs`\n is less than or equal to `max_abs_diff`.\n This can be used to compare if two 3x4 matrices contain similar elements. It works\n best when comparing with a known value. The `max_abs_diff` that should be used used\n depends on the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::DAffine3::clone": {
      "namespace": "glam::DAffine3",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      }
    },
    "glam::DAffine3::eq": {
      "namespace": "glam::DAffine3",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DAffine3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::DAffine3::from_axis_angle": {
      "namespace": "glam::DAffine3",
      "identifier": "from_axis_angle",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "axis"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates an affine transform containing a 3D rotation around a normalized\n rotation `axis` of `angle` (in radians)."
    },
    "glam::DAffine3::from_cols": {
      "namespace": "glam::DAffine3",
      "identifier": "from_cols",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "x_axis"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "y_axis"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "z_axis"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "w_axis"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates an affine transform from three column vectors."
    },
    "glam::DAffine3::from_mat3": {
      "namespace": "glam::DAffine3",
      "identifier": "from_mat3",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat3"
          },
          "name": "mat3"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates an affine transform from a 3x3 matrix (expressing scale, shear and\n rotation)"
    },
    "glam::DAffine3::from_mat3_translation": {
      "namespace": "glam::DAffine3",
      "identifier": "from_mat3_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat3"
          },
          "name": "mat3"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates an affine transform from a 3x3 matrix (expressing scale, shear and rotation)\n and a translation vector.\n Equivalent to `DAffine3::from_translation(translation) * DAffine3::from_mat3(mat3)`"
    },
    "glam::DAffine3::from_mat4": {
      "namespace": "glam::DAffine3",
      "identifier": "from_mat4",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat4"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " The given `DMat4` must be an affine transform,\n i.e. contain no perspective transform."
    },
    "glam::DAffine3::from_quat": {
      "namespace": "glam::DAffine3",
      "identifier": "from_quat",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates an affine transform from the given `rotation` quaternion."
    },
    "glam::DAffine3::from_rotation_translation": {
      "namespace": "glam::DAffine3",
      "identifier": "from_rotation_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "rotation"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates an affine transform from the given 3D `rotation` and `translation`.\n Equivalent to `DAffine3::from_translation(translation) * DAffine3::from_quat(rotation)`"
    },
    "glam::DAffine3::from_rotation_x": {
      "namespace": "glam::DAffine3",
      "identifier": "from_rotation_x",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates an affine transform containing a 3D rotation around the x axis of\n `angle` (in radians)."
    },
    "glam::DAffine3::from_rotation_y": {
      "namespace": "glam::DAffine3",
      "identifier": "from_rotation_y",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates an affine transform containing a 3D rotation around the y axis of\n `angle` (in radians)."
    },
    "glam::DAffine3::from_rotation_z": {
      "namespace": "glam::DAffine3",
      "identifier": "from_rotation_z",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates an affine transform containing a 3D rotation around the z axis of\n `angle` (in radians)."
    },
    "glam::DAffine3::from_scale": {
      "namespace": "glam::DAffine3",
      "identifier": "from_scale",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "scale"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates an affine transform that changes scale.\n Note that if any scale is zero the transform will be non-invertible."
    },
    "glam::DAffine3::from_scale_rotation_translation": {
      "namespace": "glam::DAffine3",
      "identifier": "from_scale_rotation_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "scale"
        },
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "rotation"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates an affine transform from the given 3D `scale`, `rotation` and\n `translation`.\n Equivalent to `DAffine3::from_translation(translation) *\n DAffine3::from_quat(rotation) * DAffine3::from_scale(scale)`"
    },
    "glam::DAffine3::from_translation": {
      "namespace": "glam::DAffine3",
      "identifier": "from_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates an affine transformation from the given 3D `translation`."
    },
    "glam::DAffine3::inverse": {
      "namespace": "glam::DAffine3",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Return the inverse of this transform.\n Note that if the transform is not invertible the result will be invalid."
    },
    "glam::DAffine3::is_finite": {
      "namespace": "glam::DAffine3",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.\n If any element is either `NaN`, positive or negative infinity, this will return\n `false`."
    },
    "glam::DAffine3::is_nan": {
      "namespace": "glam::DAffine3",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::DAffine3::look_at_lh": {
      "namespace": "glam::DAffine3",
      "identifier": "look_at_lh",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "center"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates a left-handed view transform using a camera position, an up direction, and a focal\n point.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=forward`.\n # Panics\n Will panic if `up` is not normalized when `glam_assert` is enabled."
    },
    "glam::DAffine3::look_at_rh": {
      "namespace": "glam::DAffine3",
      "identifier": "look_at_rh",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "center"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates a right-handed view transform using a camera position, an up direction, and a focal\n point.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=back`.\n # Panics\n Will panic if `up` is not normalized when `glam_assert` is enabled."
    },
    "glam::DAffine3::look_to_lh": {
      "namespace": "glam::DAffine3",
      "identifier": "look_to_lh",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "dir"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates a left-handed view transform using a camera position, an up direction, and a facing\n direction.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=forward`."
    },
    "glam::DAffine3::look_to_rh": {
      "namespace": "glam::DAffine3",
      "identifier": "look_to_rh",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "dir"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates a right-handed view transform using a camera position, an up direction, and a facing\n direction.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=back`."
    },
    "glam::DAffine3::mul": {
      "namespace": "glam::DAffine3",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::DAffine3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DAffine3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      }
    },
    "glam::DAffine3::mul-1": {
      "namespace": "glam::DAffine3",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DAffine3"
          }
        },
        {
          "kind": {
            "val": "glam::DMat4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      }
    },
    "glam::DAffine3::to_cols_array": {
      "namespace": "glam::DAffine3",
      "identifier": "to_cols_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f64"
            },
            12
          ]
        }
      },
      "documentation": " Creates a `[f64; 12]` array storing data in column major order."
    },
    "glam::DAffine3::to_cols_array_2d": {
      "namespace": "glam::DAffine3",
      "identifier": "to_cols_array_2d",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "array": [
                {
                  "primitive": "f64"
                },
                3
              ]
            },
            4
          ]
        }
      },
      "documentation": " Creates a `[[f64; 3]; 4]` 3D array storing data in\n column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::DAffine3::transform_point3": {
      "namespace": "glam::DAffine3",
      "identifier": "transform_point3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Transforms the given 3D points, applying shear, scale, rotation and translation."
    },
    "glam::DAffine3::transform_vector3": {
      "namespace": "glam::DAffine3",
      "identifier": "transform_vector3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Transforms the given 3D vector, applying shear, scale and rotation (but NOT\n translation).\n To also apply translation, use [`Self::transform_point3()`] instead."
    },
    "glam::DMat2::abs": {
      "namespace": "glam::DMat2",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      },
      "documentation": " Takes the absolute value of each element in `self`"
    },
    "glam::DMat2::abs_diff_eq": {
      "namespace": "glam::DMat2",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DMat2"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs`\n is less than or equal to `max_abs_diff`.\n This can be used to compare if two matrices contain similar elements. It works best\n when comparing with a known value. The `max_abs_diff` that should be used used\n depends on the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::DMat2::add": {
      "namespace": "glam::DMat2",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DMat2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      }
    },
    "glam::DMat2::add_mat2": {
      "namespace": "glam::DMat2",
      "identifier": "add_mat2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      },
      "documentation": " Adds two 2x2 matrices."
    },
    "glam::DMat2::as_mat2": {
      "namespace": "glam::DMat2",
      "identifier": "as_mat2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      }
    },
    "glam::DMat2::clone": {
      "namespace": "glam::DMat2",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      }
    },
    "glam::DMat2::col": {
      "namespace": "glam::DMat2",
      "identifier": "col",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns the matrix column for the given `index`.\n # Panics\n Panics if `index` is greater than 1."
    },
    "glam::DMat2::determinant": {
      "namespace": "glam::DMat2",
      "identifier": "determinant",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the determinant of `self`."
    },
    "glam::DMat2::div": {
      "namespace": "glam::DMat2",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      }
    },
    "glam::DMat2::div_scalar": {
      "namespace": "glam::DMat2",
      "identifier": "div_scalar",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      },
      "documentation": " Divides a 2x2 matrix by a scalar."
    },
    "glam::DMat2::eq": {
      "namespace": "glam::DMat2",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::DMat2::from_angle": {
      "namespace": "glam::DMat2",
      "identifier": "from_angle",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      },
      "documentation": " Creates a 2x2 matrix containing a rotation of `angle` (in radians)."
    },
    "glam::DMat2::from_cols": {
      "namespace": "glam::DMat2",
      "identifier": "from_cols",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "x_axis"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "y_axis"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      },
      "documentation": " Creates a 2x2 matrix from two column vectors."
    },
    "glam::DMat2::from_diagonal": {
      "namespace": "glam::DMat2",
      "identifier": "from_diagonal",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "diagonal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      },
      "documentation": " Creates a 2x2 matrix with its diagonal set to `diagonal` and all other entries set to 0."
    },
    "glam::DMat2::from_mat3": {
      "namespace": "glam::DMat2",
      "identifier": "from_mat3",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat3"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      },
      "documentation": " Creates a 2x2 matrix from a 3x3 matrix, discarding the 2nd row and column."
    },
    "glam::DMat2::from_mat3_minor": {
      "namespace": "glam::DMat2",
      "identifier": "from_mat3_minor",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat3"
          },
          "name": "m"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "i"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "j"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      },
      "documentation": " Creates a 2x2 matrix from the minor of the given 3x3 matrix, discarding the `i`th column\n and `j`th row.\n # Panics\n Panics if `i` or `j` is greater than 2."
    },
    "glam::DMat2::from_scale_angle": {
      "namespace": "glam::DMat2",
      "identifier": "from_scale_angle",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "scale"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      },
      "documentation": " Creates a 2x2 matrix containing the combining non-uniform `scale` and rotation of\n `angle` (in radians)."
    },
    "glam::DMat2::inverse": {
      "namespace": "glam::DMat2",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      },
      "documentation": " Returns the inverse of `self`.\n If the matrix is not invertible the returned matrix will be invalid.\n # Panics\n Will panic if the determinant of `self` is zero when `glam_assert` is enabled."
    },
    "glam::DMat2::is_finite": {
      "namespace": "glam::DMat2",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.\n If any element is either `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::DMat2::is_nan": {
      "namespace": "glam::DMat2",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::DMat2::mul": {
      "namespace": "glam::DMat2",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DMat2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      }
    },
    "glam::DMat2::mul-1": {
      "namespace": "glam::DMat2",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat2"
          }
        },
        {
          "kind": {
            "val": "glam::DVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DMat2::mul-2": {
      "namespace": "glam::DMat2",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat2"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      }
    },
    "glam::DMat2::mul_mat2": {
      "namespace": "glam::DMat2",
      "identifier": "mul_mat2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      },
      "documentation": " Multiplies two 2x2 matrices."
    },
    "glam::DMat2::mul_scalar": {
      "namespace": "glam::DMat2",
      "identifier": "mul_scalar",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      },
      "documentation": " Multiplies a 2x2 matrix by a scalar."
    },
    "glam::DMat2::mul_vec2": {
      "namespace": "glam::DMat2",
      "identifier": "mul_vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Transforms a 2D vector."
    },
    "glam::DMat2::neg": {
      "namespace": "glam::DMat2",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      }
    },
    "glam::DMat2::row": {
      "namespace": "glam::DMat2",
      "identifier": "row",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns the matrix row for the given `index`.\n # Panics\n Panics if `index` is greater than 1."
    },
    "glam::DMat2::sub": {
      "namespace": "glam::DMat2",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DMat2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      }
    },
    "glam::DMat2::sub_mat2": {
      "namespace": "glam::DMat2",
      "identifier": "sub_mat2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      },
      "documentation": " Subtracts two 2x2 matrices."
    },
    "glam::DMat2::to_cols_array": {
      "namespace": "glam::DMat2",
      "identifier": "to_cols_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f64"
            },
            4
          ]
        }
      },
      "documentation": " Creates a `[f64; 4]` array storing data in column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::DMat2::to_cols_array_2d": {
      "namespace": "glam::DMat2",
      "identifier": "to_cols_array_2d",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "array": [
                {
                  "primitive": "f64"
                },
                2
              ]
            },
            2
          ]
        }
      },
      "documentation": " Creates a `[[f64; 2]; 2]` 2D array storing data in column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::DMat2::transpose": {
      "namespace": "glam::DMat2",
      "identifier": "transpose",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      },
      "documentation": " Returns the transpose of `self`."
    },
    "glam::DMat3::abs": {
      "namespace": "glam::DMat3",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Takes the absolute value of each element in `self`"
    },
    "glam::DMat3::abs_diff_eq": {
      "namespace": "glam::DMat3",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DMat3"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs`\n is less than or equal to `max_abs_diff`.\n This can be used to compare if two matrices contain similar elements. It works best\n when comparing with a known value. The `max_abs_diff` that should be used used\n depends on the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::DMat3::add": {
      "namespace": "glam::DMat3",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DMat3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      }
    },
    "glam::DMat3::add_mat3": {
      "namespace": "glam::DMat3",
      "identifier": "add_mat3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Adds two 3x3 matrices."
    },
    "glam::DMat3::as_mat3": {
      "namespace": "glam::DMat3",
      "identifier": "as_mat3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      }
    },
    "glam::DMat3::clone": {
      "namespace": "glam::DMat3",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      }
    },
    "glam::DMat3::col": {
      "namespace": "glam::DMat3",
      "identifier": "col",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns the matrix column for the given `index`.\n # Panics\n Panics if `index` is greater than 2."
    },
    "glam::DMat3::determinant": {
      "namespace": "glam::DMat3",
      "identifier": "determinant",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the determinant of `self`."
    },
    "glam::DMat3::div": {
      "namespace": "glam::DMat3",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      }
    },
    "glam::DMat3::div_scalar": {
      "namespace": "glam::DMat3",
      "identifier": "div_scalar",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Divides a 3x3 matrix by a scalar."
    },
    "glam::DMat3::eq": {
      "namespace": "glam::DMat3",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::DMat3::from_angle": {
      "namespace": "glam::DMat3",
      "identifier": "from_angle",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 2D rotation `angle` (in\n radians).\n The resulting matrix can be used to transform 2D points and vectors. See\n [`Self::transform_point2()`] and [`Self::transform_vector2()`]."
    },
    "glam::DMat3::from_axis_angle": {
      "namespace": "glam::DMat3",
      "identifier": "from_axis_angle",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "axis"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Creates a 3D rotation matrix from a normalized rotation `axis` and `angle` (in\n radians).\n # Panics\n Will panic if `axis` is not normalized when `glam_assert` is enabled."
    },
    "glam::DMat3::from_cols": {
      "namespace": "glam::DMat3",
      "identifier": "from_cols",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "x_axis"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "y_axis"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "z_axis"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Creates a 3x3 matrix from three column vectors."
    },
    "glam::DMat3::from_diagonal": {
      "namespace": "glam::DMat3",
      "identifier": "from_diagonal",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "diagonal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Creates a 3x3 matrix with its diagonal set to `diagonal` and all other entries set to 0."
    },
    "glam::DMat3::from_euler": {
      "namespace": "glam::DMat3",
      "identifier": "from_euler",
      "arguments": [
        {
          "kind": {
            "val": "glam::EulerRot"
          },
          "name": "order"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "a"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "b"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "c"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Creates a 3D rotation matrix from the given euler rotation sequence and the angles (in\n radians)."
    },
    "glam::DMat3::from_mat2": {
      "namespace": "glam::DMat3",
      "identifier": "from_mat2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat2"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 2x2 matrix.\n The resulting matrix can be used to transform 2D points and vectors. See\n [`Self::transform_point2()`] and [`Self::transform_vector2()`]."
    },
    "glam::DMat3::from_mat4": {
      "namespace": "glam::DMat3",
      "identifier": "from_mat4",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat4"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th row and column."
    },
    "glam::DMat3::from_mat4_minor": {
      "namespace": "glam::DMat3",
      "identifier": "from_mat4_minor",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat4"
          },
          "name": "m"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "i"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "j"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Creates a 3x3 matrix from the minor of the given 4x4 matrix, discarding the `i`th column\n and `j`th row.\n # Panics\n Panics if `i` or `j` is greater than 3."
    },
    "glam::DMat3::from_quat": {
      "namespace": "glam::DMat3",
      "identifier": "from_quat",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Creates a 3D rotation matrix from the given quaternion.\n # Panics\n Will panic if `rotation` is not normalized when `glam_assert` is enabled."
    },
    "glam::DMat3::from_rotation_x": {
      "namespace": "glam::DMat3",
      "identifier": "from_rotation_x",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Creates a 3D rotation matrix from `angle` (in radians) around the x axis."
    },
    "glam::DMat3::from_rotation_y": {
      "namespace": "glam::DMat3",
      "identifier": "from_rotation_y",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Creates a 3D rotation matrix from `angle` (in radians) around the y axis."
    },
    "glam::DMat3::from_rotation_z": {
      "namespace": "glam::DMat3",
      "identifier": "from_rotation_z",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Creates a 3D rotation matrix from `angle` (in radians) around the z axis."
    },
    "glam::DMat3::from_scale": {
      "namespace": "glam::DMat3",
      "identifier": "from_scale",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "scale"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given non-uniform 2D `scale`.\n The resulting matrix can be used to transform 2D points and vectors. See\n [`Self::transform_point2()`] and [`Self::transform_vector2()`].\n # Panics\n Will panic if all elements of `scale` are zero when `glam_assert` is enabled."
    },
    "glam::DMat3::from_scale_angle_translation": {
      "namespace": "glam::DMat3",
      "identifier": "from_scale_angle_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "scale"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 2D `scale`, rotation `angle` (in\n radians) and `translation`.\n The resulting matrix can be used to transform 2D points and vectors. See\n [`Self::transform_point2()`] and [`Self::transform_vector2()`]."
    },
    "glam::DMat3::from_translation": {
      "namespace": "glam::DMat3",
      "identifier": "from_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 2D `translation`.\n The resulting matrix can be used to transform 2D points and vectors. See\n [`Self::transform_point2()`] and [`Self::transform_vector2()`]."
    },
    "glam::DMat3::inverse": {
      "namespace": "glam::DMat3",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Returns the inverse of `self`.\n If the matrix is not invertible the returned matrix will be invalid.\n # Panics\n Will panic if the determinant of `self` is zero when `glam_assert` is enabled."
    },
    "glam::DMat3::is_finite": {
      "namespace": "glam::DMat3",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.\n If any element is either `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::DMat3::is_nan": {
      "namespace": "glam::DMat3",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::DMat3::mul": {
      "namespace": "glam::DMat3",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DAffine2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      }
    },
    "glam::DMat3::mul-1": {
      "namespace": "glam::DMat3",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat3"
          }
        },
        {
          "kind": {
            "val": "glam::DMat3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      }
    },
    "glam::DMat3::mul-2": {
      "namespace": "glam::DMat3",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat3"
          }
        },
        {
          "kind": {
            "val": "glam::DVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DMat3::mul-3": {
      "namespace": "glam::DMat3",
      "identifier": "mul-3",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat3"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      }
    },
    "glam::DMat3::mul_mat3": {
      "namespace": "glam::DMat3",
      "identifier": "mul_mat3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Multiplies two 3x3 matrices."
    },
    "glam::DMat3::mul_scalar": {
      "namespace": "glam::DMat3",
      "identifier": "mul_scalar",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Multiplies a 3x3 matrix by a scalar."
    },
    "glam::DMat3::mul_vec3": {
      "namespace": "glam::DMat3",
      "identifier": "mul_vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Transforms a 3D vector."
    },
    "glam::DMat3::neg": {
      "namespace": "glam::DMat3",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      }
    },
    "glam::DMat3::row": {
      "namespace": "glam::DMat3",
      "identifier": "row",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns the matrix row for the given `index`.\n # Panics\n Panics if `index` is greater than 2."
    },
    "glam::DMat3::sub": {
      "namespace": "glam::DMat3",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DMat3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      }
    },
    "glam::DMat3::sub_mat3": {
      "namespace": "glam::DMat3",
      "identifier": "sub_mat3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Subtracts two 3x3 matrices."
    },
    "glam::DMat3::to_cols_array": {
      "namespace": "glam::DMat3",
      "identifier": "to_cols_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f64"
            },
            9
          ]
        }
      },
      "documentation": " Creates a `[f64; 9]` array storing data in column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::DMat3::to_cols_array_2d": {
      "namespace": "glam::DMat3",
      "identifier": "to_cols_array_2d",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "array": [
                {
                  "primitive": "f64"
                },
                3
              ]
            },
            3
          ]
        }
      },
      "documentation": " Creates a `[[f64; 3]; 3]` 3D array storing data in column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::DMat3::to_euler": {
      "namespace": "glam::DMat3",
      "identifier": "to_euler",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::EulerRot"
          },
          "name": "order"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": [
            {
              "primitive": "f64"
            },
            {
              "primitive": "f64"
            },
            {
              "primitive": "f64"
            }
          ]
        }
      },
      "documentation": " Extract Euler angles with the given Euler rotation order.\n Note if the input matrix contains scales, shears, or other non-rotation transformations then\n the resulting Euler angles will be ill-defined.\n # Panics\n Will panic if any input matrix column is not normalized when `glam_assert` is enabled."
    },
    "glam::DMat3::transform_point2": {
      "namespace": "glam::DMat3",
      "identifier": "transform_point2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Transforms the given 2D vector as a point.\n This is the equivalent of multiplying `rhs` as a 3D vector where `z` is `1`.\n This method assumes that `self` contains a valid affine transform.\n # Panics\n Will panic if the 2nd row of `self` is not `(0, 0, 1)` when `glam_assert` is enabled."
    },
    "glam::DMat3::transform_vector2": {
      "namespace": "glam::DMat3",
      "identifier": "transform_vector2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Rotates the given 2D vector.\n This is the equivalent of multiplying `rhs` as a 3D vector where `z` is `0`.\n This method assumes that `self` contains a valid affine transform.\n # Panics\n Will panic if the 2nd row of `self` is not `(0, 0, 1)` when `glam_assert` is enabled."
    },
    "glam::DMat3::transpose": {
      "namespace": "glam::DMat3",
      "identifier": "transpose",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Returns the transpose of `self`."
    },
    "glam::DMat4::abs": {
      "namespace": "glam::DMat4",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Takes the absolute value of each element in `self`"
    },
    "glam::DMat4::abs_diff_eq": {
      "namespace": "glam::DMat4",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DMat4"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs`\n is less than or equal to `max_abs_diff`.\n This can be used to compare if two matrices contain similar elements. It works best\n when comparing with a known value. The `max_abs_diff` that should be used used\n depends on the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::DMat4::add": {
      "namespace": "glam::DMat4",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DMat4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      }
    },
    "glam::DMat4::add_mat4": {
      "namespace": "glam::DMat4",
      "identifier": "add_mat4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Adds two 4x4 matrices."
    },
    "glam::DMat4::as_mat4": {
      "namespace": "glam::DMat4",
      "identifier": "as_mat4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      }
    },
    "glam::DMat4::clone": {
      "namespace": "glam::DMat4",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      }
    },
    "glam::DMat4::col": {
      "namespace": "glam::DMat4",
      "identifier": "col",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns the matrix column for the given `index`.\n # Panics\n Panics if `index` is greater than 3."
    },
    "glam::DMat4::determinant": {
      "namespace": "glam::DMat4",
      "identifier": "determinant",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the determinant of `self`."
    },
    "glam::DMat4::div": {
      "namespace": "glam::DMat4",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      }
    },
    "glam::DMat4::div_scalar": {
      "namespace": "glam::DMat4",
      "identifier": "div_scalar",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Divides a 4x4 matrix by a scalar."
    },
    "glam::DMat4::eq": {
      "namespace": "glam::DMat4",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::DMat4::from_axis_angle": {
      "namespace": "glam::DMat4",
      "identifier": "from_axis_angle",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "axis"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates an affine transformation matrix containing a 3D rotation around a normalized\n rotation `axis` of `angle` (in radians).\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`].\n # Panics\n Will panic if `axis` is not normalized when `glam_assert` is enabled."
    },
    "glam::DMat4::from_cols": {
      "namespace": "glam::DMat4",
      "identifier": "from_cols",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "x_axis"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "y_axis"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "z_axis"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "w_axis"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates a 4x4 matrix from four column vectors."
    },
    "glam::DMat4::from_diagonal": {
      "namespace": "glam::DMat4",
      "identifier": "from_diagonal",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "diagonal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates a 4x4 matrix with its diagonal set to `diagonal` and all other entries set to 0."
    },
    "glam::DMat4::from_euler": {
      "namespace": "glam::DMat4",
      "identifier": "from_euler",
      "arguments": [
        {
          "kind": {
            "val": "glam::EulerRot"
          },
          "name": "order"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "a"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "b"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "c"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates a affine transformation matrix containing a rotation from the given euler\n rotation sequence and angles (in radians).\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`]."
    },
    "glam::DMat4::from_mat3": {
      "namespace": "glam::DMat4",
      "identifier": "from_mat3",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat3"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 3x3 linear transformation\n matrix.\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`]."
    },
    "glam::DMat4::from_quat": {
      "namespace": "glam::DMat4",
      "identifier": "from_quat",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given `rotation` quaternion.\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`].\n # Panics\n Will panic if `rotation` is not normalized when `glam_assert` is enabled."
    },
    "glam::DMat4::from_rotation_translation": {
      "namespace": "glam::DMat4",
      "identifier": "from_rotation_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "rotation"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 3D `translation`.\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`].\n # Panics\n Will panic if `rotation` is not normalized when `glam_assert` is enabled."
    },
    "glam::DMat4::from_rotation_x": {
      "namespace": "glam::DMat4",
      "identifier": "from_rotation_x",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates an affine transformation matrix containing a 3D rotation around the x axis of\n `angle` (in radians).\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`]."
    },
    "glam::DMat4::from_rotation_y": {
      "namespace": "glam::DMat4",
      "identifier": "from_rotation_y",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates an affine transformation matrix containing a 3D rotation around the y axis of\n `angle` (in radians).\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`]."
    },
    "glam::DMat4::from_rotation_z": {
      "namespace": "glam::DMat4",
      "identifier": "from_rotation_z",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates an affine transformation matrix containing a 3D rotation around the z axis of\n `angle` (in radians).\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`]."
    },
    "glam::DMat4::from_scale": {
      "namespace": "glam::DMat4",
      "identifier": "from_scale",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "scale"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates an affine transformation matrix containing the given 3D non-uniform `scale`.\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`].\n # Panics\n Will panic if all elements of `scale` are zero when `glam_assert` is enabled."
    },
    "glam::DMat4::from_scale_rotation_translation": {
      "namespace": "glam::DMat4",
      "identifier": "from_scale_rotation_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "scale"
        },
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "rotation"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 3D `scale`, `rotation` and\n `translation`.\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`].\n # Panics\n Will panic if `rotation` is not normalized when `glam_assert` is enabled."
    },
    "glam::DMat4::from_translation": {
      "namespace": "glam::DMat4",
      "identifier": "from_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 3D `translation`.\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`]."
    },
    "glam::DMat4::inverse": {
      "namespace": "glam::DMat4",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Returns the inverse of `self`.\n If the matrix is not invertible the returned matrix will be invalid.\n # Panics\n Will panic if the determinant of `self` is zero when `glam_assert` is enabled."
    },
    "glam::DMat4::is_finite": {
      "namespace": "glam::DMat4",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.\n If any element is either `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::DMat4::is_nan": {
      "namespace": "glam::DMat4",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::DMat4::look_at_lh": {
      "namespace": "glam::DMat4",
      "identifier": "look_at_lh",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "center"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates a left-handed view matrix using a camera position, an up direction, and a focal\n point.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=forward`.\n # Panics\n Will panic if `up` is not normalized when `glam_assert` is enabled."
    },
    "glam::DMat4::look_at_rh": {
      "namespace": "glam::DMat4",
      "identifier": "look_at_rh",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "center"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates a right-handed view matrix using a camera position, an up direction, and a focal\n point.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=back`.\n # Panics\n Will panic if `up` is not normalized when `glam_assert` is enabled."
    },
    "glam::DMat4::look_to_lh": {
      "namespace": "glam::DMat4",
      "identifier": "look_to_lh",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "dir"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates a left-handed view matrix using a camera position, an up direction, and a facing\n direction.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=forward`."
    },
    "glam::DMat4::look_to_rh": {
      "namespace": "glam::DMat4",
      "identifier": "look_to_rh",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "dir"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates a right-handed view matrix using a camera position, an up direction, and a facing\n direction.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=back`."
    },
    "glam::DMat4::mul": {
      "namespace": "glam::DMat4",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DAffine3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      }
    },
    "glam::DMat4::mul-1": {
      "namespace": "glam::DMat4",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat4"
          }
        },
        {
          "kind": {
            "val": "glam::DMat4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      }
    },
    "glam::DMat4::mul-2": {
      "namespace": "glam::DMat4",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat4"
          }
        },
        {
          "kind": {
            "val": "glam::DVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DMat4::mul-3": {
      "namespace": "glam::DMat4",
      "identifier": "mul-3",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat4"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      }
    },
    "glam::DMat4::mul_mat4": {
      "namespace": "glam::DMat4",
      "identifier": "mul_mat4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Multiplies two 4x4 matrices."
    },
    "glam::DMat4::mul_scalar": {
      "namespace": "glam::DMat4",
      "identifier": "mul_scalar",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Multiplies a 4x4 matrix by a scalar."
    },
    "glam::DMat4::mul_vec4": {
      "namespace": "glam::DMat4",
      "identifier": "mul_vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Transforms a 4D vector."
    },
    "glam::DMat4::neg": {
      "namespace": "glam::DMat4",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      }
    },
    "glam::DMat4::orthographic_lh": {
      "namespace": "glam::DMat4",
      "identifier": "orthographic_lh",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "left"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "right"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "bottom"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "top"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "near"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "far"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates a left-handed orthographic projection matrix with `[0,1]` depth range.\n Useful to map a left-handed coordinate system to the normalized device coordinates that WebGPU/Direct3D/Metal expect."
    },
    "glam::DMat4::orthographic_rh": {
      "namespace": "glam::DMat4",
      "identifier": "orthographic_rh",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "left"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "right"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "bottom"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "top"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "near"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "far"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates a right-handed orthographic projection matrix with `[0,1]` depth range.\n Useful to map a right-handed coordinate system to the normalized device coordinates that WebGPU/Direct3D/Metal expect."
    },
    "glam::DMat4::orthographic_rh_gl": {
      "namespace": "glam::DMat4",
      "identifier": "orthographic_rh_gl",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "left"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "right"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "bottom"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "top"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "near"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "far"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates a right-handed orthographic projection matrix with `[-1,1]` depth\n range.  This is the same as the OpenGL `glOrtho` function in OpenGL.\n See\n <https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glOrtho.xml>\n Useful to map a right-handed coordinate system to the normalized device coordinates that OpenGL expects."
    },
    "glam::DMat4::perspective_infinite_lh": {
      "namespace": "glam::DMat4",
      "identifier": "perspective_infinite_lh",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "fov_y_radians"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "aspect_ratio"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z_near"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates an infinite left-handed perspective projection matrix with `[0,1]` depth range.\n Like `perspective_lh`, but with an infinite value for `z_far`.\n The result is that points near `z_near` are mapped to depth `0`, and as they move towards infinity the depth approaches `1`.\n # Panics\n Will panic if `z_near` or `z_far` are less than or equal to zero when `glam_assert` is\n enabled."
    },
    "glam::DMat4::perspective_infinite_reverse_lh": {
      "namespace": "glam::DMat4",
      "identifier": "perspective_infinite_reverse_lh",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "fov_y_radians"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "aspect_ratio"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z_near"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates an infinite reverse left-handed perspective projection matrix with `[0,1]` depth range.\n Similar to `perspective_infinite_lh`, but maps `Z = z_near` to a depth of `1` and `Z = infinity` to a depth of `0`.\n # Panics\n Will panic if `z_near` is less than or equal to zero when `glam_assert` is enabled."
    },
    "glam::DMat4::perspective_infinite_reverse_rh": {
      "namespace": "glam::DMat4",
      "identifier": "perspective_infinite_reverse_rh",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "fov_y_radians"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "aspect_ratio"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z_near"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates an infinite reverse right-handed perspective projection matrix with `[0,1]` depth range.\n Similar to `perspective_infinite_rh`, but maps `Z = z_near` to a depth of `1` and `Z = infinity` to a depth of `0`.\n # Panics\n Will panic if `z_near` is less than or equal to zero when `glam_assert` is enabled."
    },
    "glam::DMat4::perspective_infinite_rh": {
      "namespace": "glam::DMat4",
      "identifier": "perspective_infinite_rh",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "fov_y_radians"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "aspect_ratio"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z_near"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates an infinite right-handed perspective projection matrix with `[0,1]` depth range.\n Like `perspective_rh`, but with an infinite value for `z_far`.\n The result is that points near `z_near` are mapped to depth `0`, and as they move towards infinity the depth approaches `1`.\n # Panics\n Will panic if `z_near` or `z_far` are less than or equal to zero when `glam_assert` is\n enabled."
    },
    "glam::DMat4::perspective_lh": {
      "namespace": "glam::DMat4",
      "identifier": "perspective_lh",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "fov_y_radians"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "aspect_ratio"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z_near"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z_far"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates a left-handed perspective projection matrix with `[0,1]` depth range.\n Useful to map the standard left-handed coordinate system into what WebGPU/Metal/Direct3D expect.\n # Panics\n Will panic if `z_near` or `z_far` are less than or equal to zero when `glam_assert` is\n enabled."
    },
    "glam::DMat4::perspective_rh": {
      "namespace": "glam::DMat4",
      "identifier": "perspective_rh",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "fov_y_radians"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "aspect_ratio"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z_near"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z_far"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates a right-handed perspective projection matrix with `[0,1]` depth range.\n Useful to map the standard right-handed coordinate system into what WebGPU/Metal/Direct3D expect.\n # Panics\n Will panic if `z_near` or `z_far` are less than or equal to zero when `glam_assert` is\n enabled."
    },
    "glam::DMat4::perspective_rh_gl": {
      "namespace": "glam::DMat4",
      "identifier": "perspective_rh_gl",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "fov_y_radians"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "aspect_ratio"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z_near"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z_far"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates a right-handed perspective projection matrix with `[-1,1]` depth range.\n Useful to map the standard right-handed coordinate system into what OpenGL expects.\n This is the same as the OpenGL `gluPerspective` function.\n See <https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluPerspective.xml>"
    },
    "glam::DMat4::project_point3": {
      "namespace": "glam::DMat4",
      "identifier": "project_point3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Transforms the given 3D vector as a point, applying perspective correction.\n This is the equivalent of multiplying the 3D vector as a 4D vector where `w` is `1.0`.\n The perspective divide is performed meaning the resulting 3D vector is divided by `w`.\n This method assumes that `self` contains a projective transform."
    },
    "glam::DMat4::row": {
      "namespace": "glam::DMat4",
      "identifier": "row",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns the matrix row for the given `index`.\n # Panics\n Panics if `index` is greater than 3."
    },
    "glam::DMat4::sub": {
      "namespace": "glam::DMat4",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DMat4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      }
    },
    "glam::DMat4::sub_mat4": {
      "namespace": "glam::DMat4",
      "identifier": "sub_mat4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Subtracts two 4x4 matrices."
    },
    "glam::DMat4::to_cols_array": {
      "namespace": "glam::DMat4",
      "identifier": "to_cols_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f64"
            },
            16
          ]
        }
      },
      "documentation": " Creates a `[f64; 16]` array storing data in column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::DMat4::to_cols_array_2d": {
      "namespace": "glam::DMat4",
      "identifier": "to_cols_array_2d",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "array": [
                {
                  "primitive": "f64"
                },
                4
              ]
            },
            4
          ]
        }
      },
      "documentation": " Creates a `[[f64; 4]; 4]` 4D array storing data in column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::DMat4::to_euler": {
      "namespace": "glam::DMat4",
      "identifier": "to_euler",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::EulerRot"
          },
          "name": "order"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": [
            {
              "primitive": "f64"
            },
            {
              "primitive": "f64"
            },
            {
              "primitive": "f64"
            }
          ]
        }
      },
      "documentation": " Extract Euler angles with the given Euler rotation order.\n Note if the upper 3x3 matrix contain scales, shears, or other non-rotation transformations\n then the resulting Euler angles will be ill-defined.\n # Panics\n Will panic if any column of the upper 3x3 rotation matrix is not normalized when\n `glam_assert` is enabled."
    },
    "glam::DMat4::transform_point3": {
      "namespace": "glam::DMat4",
      "identifier": "transform_point3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Transforms the given 3D vector as a point.\n This is the equivalent of multiplying the 3D vector as a 4D vector where `w` is\n `1.0`.\n This method assumes that `self` contains a valid affine transform. It does not perform\n a perspective divide, if `self` contains a perspective transform, or if you are unsure,\n the [`Self::project_point3()`] method should be used instead.\n # Panics\n Will panic if the 3rd row of `self` is not `(0, 0, 0, 1)` when `glam_assert` is enabled."
    },
    "glam::DMat4::transform_vector3": {
      "namespace": "glam::DMat4",
      "identifier": "transform_vector3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Transforms the give 3D vector as a direction.\n This is the equivalent of multiplying the 3D vector as a 4D vector where `w` is\n `0.0`.\n This method assumes that `self` contains a valid affine transform.\n # Panics\n Will panic if the 3rd row of `self` is not `(0, 0, 0, 1)` when `glam_assert` is enabled."
    },
    "glam::DMat4::transpose": {
      "namespace": "glam::DMat4",
      "identifier": "transpose",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Returns the transpose of `self`."
    },
    "glam::DQuat::abs_diff_eq": {
      "namespace": "glam::DQuat",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs`\n is less than or equal to `max_abs_diff`.\n This can be used to compare if two quaternions contain similar elements. It works\n best when comparing with a known value. The `max_abs_diff` that should be used used\n depends on the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::DQuat::add": {
      "namespace": "glam::DQuat",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Adds two quaternions.\n The sum is not guaranteed to be normalized.\n Note that addition is not the same as combining the rotations represented by the\n two quaternions! That corresponds to multiplication."
    },
    "glam::DQuat::angle_between": {
      "namespace": "glam::DQuat",
      "identifier": "angle_between",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the angle (in radians) for the minimal rotation\n for transforming this quaternion into another.\n Both quaternions must be normalized.\n # Panics\n Will panic if `self` or `rhs` are not normalized when `glam_assert` is enabled."
    },
    "glam::DQuat::as_quat": {
      "namespace": "glam::DQuat",
      "identifier": "as_quat",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      }
    },
    "glam::DQuat::clone": {
      "namespace": "glam::DQuat",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      }
    },
    "glam::DQuat::conjugate": {
      "namespace": "glam::DQuat",
      "identifier": "conjugate",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Returns the quaternion conjugate of `self`. For a unit quaternion the\n conjugate is also the inverse."
    },
    "glam::DQuat::div": {
      "namespace": "glam::DQuat",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Divides a quaternion by a scalar value.\n The quotient is not guaranteed to be normalized."
    },
    "glam::DQuat::dot": {
      "namespace": "glam::DQuat",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`. The dot product is\n equal to the cosine of the angle between two quaternion rotations."
    },
    "glam::DQuat::eq": {
      "namespace": "glam::DQuat",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DQuat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DQuat"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::DQuat::from_affine3": {
      "namespace": "glam::DQuat",
      "identifier": "from_affine3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine3"
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Creates a quaternion from a 3x3 rotation matrix inside a 3D affine transform.\n Note if the input affine matrix contain scales, shears, or other non-rotation\n transformations then the resulting quaternion will be ill-defined.\n # Panics\n Will panic if any input affine matrix column is not normalized when `glam_assert` is\n enabled."
    },
    "glam::DQuat::from_array": {
      "namespace": "glam::DQuat",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "f64"
              },
              4
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Creates a rotation quaternion from an array.\n # Preconditions\n This function does not check if the input is normalized, it is up to the user to\n provide normalized input or to normalized the resulting quaternion."
    },
    "glam::DQuat::from_axis_angle": {
      "namespace": "glam::DQuat",
      "identifier": "from_axis_angle",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "axis"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Create a quaternion for a normalized rotation `axis` and `angle` (in radians).\n The axis must be a unit vector.\n # Panics\n Will panic if `axis` is not normalized when `glam_assert` is enabled."
    },
    "glam::DQuat::from_euler": {
      "namespace": "glam::DQuat",
      "identifier": "from_euler",
      "arguments": [
        {
          "kind": {
            "val": "glam::EulerRot"
          },
          "name": "euler"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "a"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "b"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "c"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Creates a quaternion from the given Euler rotation sequence and the angles (in radians)."
    },
    "glam::DQuat::from_mat3": {
      "namespace": "glam::DQuat",
      "identifier": "from_mat3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "mat"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Creates a quaternion from a 3x3 rotation matrix.\n Note if the input matrix contain scales, shears, or other non-rotation transformations then\n the resulting quaternion will be ill-defined.\n # Panics\n Will panic if any input matrix column is not normalized when `glam_assert` is enabled."
    },
    "glam::DQuat::from_mat4": {
      "namespace": "glam::DQuat",
      "identifier": "from_mat4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "mat"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Creates a quaternion from the upper 3x3 rotation matrix inside a homogeneous 4x4 matrix.\n Note if the upper 3x3 matrix contain scales, shears, or other non-rotation transformations\n then the resulting quaternion will be ill-defined.\n # Panics\n Will panic if any column of the upper 3x3 rotation matrix is not normalized when\n `glam_assert` is enabled."
    },
    "glam::DQuat::from_rotation_arc": {
      "namespace": "glam::DQuat",
      "identifier": "from_rotation_arc",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "from"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "to"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Gets the minimal rotation for transforming `from` to `to`.  The rotation is in the\n plane spanned by the two vectors.  Will rotate at most 180 degrees.\n The inputs must be unit vectors.\n `from_rotation_arc(from, to) * from ≈ to`.\n For near-singular cases (from≈to and from≈-to) the current implementation\n is only accurate to about 0.001 (for `f32`).\n # Panics\n Will panic if `from` or `to` are not normalized when `glam_assert` is enabled."
    },
    "glam::DQuat::from_rotation_arc_2d": {
      "namespace": "glam::DQuat",
      "identifier": "from_rotation_arc_2d",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "from"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "to"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Gets the minimal rotation for transforming `from` to `to`.  The resulting rotation is\n around the z axis. Will rotate at most 180 degrees.\n The inputs must be unit vectors.\n `from_rotation_arc_2d(from, to) * from ≈ to`.\n For near-singular cases (from≈to and from≈-to) the current implementation\n is only accurate to about 0.001 (for `f32`).\n # Panics\n Will panic if `from` or `to` are not normalized when `glam_assert` is enabled."
    },
    "glam::DQuat::from_rotation_arc_colinear": {
      "namespace": "glam::DQuat",
      "identifier": "from_rotation_arc_colinear",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "from"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "to"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Gets the minimal rotation for transforming `from` to either `to` or `-to`.  This means\n that the resulting quaternion will rotate `from` so that it is colinear with `to`.\n The rotation is in the plane spanned by the two vectors.  Will rotate at most 90\n degrees.\n The inputs must be unit vectors.\n `to.dot(from_rotation_arc_colinear(from, to) * from).abs() ≈ 1`.\n # Panics\n Will panic if `from` or `to` are not normalized when `glam_assert` is enabled."
    },
    "glam::DQuat::from_rotation_x": {
      "namespace": "glam::DQuat",
      "identifier": "from_rotation_x",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Creates a quaternion from the `angle` (in radians) around the x axis."
    },
    "glam::DQuat::from_rotation_y": {
      "namespace": "glam::DQuat",
      "identifier": "from_rotation_y",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Creates a quaternion from the `angle` (in radians) around the y axis."
    },
    "glam::DQuat::from_rotation_z": {
      "namespace": "glam::DQuat",
      "identifier": "from_rotation_z",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Creates a quaternion from the `angle` (in radians) around the z axis."
    },
    "glam::DQuat::from_scaled_axis": {
      "namespace": "glam::DQuat",
      "identifier": "from_scaled_axis",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Create a quaternion that rotates `v.length()` radians around `v.normalize()`.\n `from_scaled_axis(Vec3::ZERO)` results in the identity quaternion."
    },
    "glam::DQuat::from_vec4": {
      "namespace": "glam::DQuat",
      "identifier": "from_vec4",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Creates a new rotation quaternion from a 4D vector.\n # Preconditions\n This function does not check if the input is normalized, it is up to the user to\n provide normalized input or to normalized the resulting quaternion."
    },
    "glam::DQuat::from_xyzw": {
      "namespace": "glam::DQuat",
      "identifier": "from_xyzw",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Creates a new rotation quaternion.\n This should generally not be called manually unless you know what you are doing.\n Use one of the other constructors instead such as `identity` or `from_axis_angle`.\n `from_xyzw` is mostly used by unit tests and `serde` deserialization.\n # Preconditions\n This function does not check if the input is normalized, it is up to the user to\n provide normalized input or to normalized the resulting quaternion."
    },
    "glam::DQuat::inverse": {
      "namespace": "glam::DQuat",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Returns the inverse of a normalized quaternion.\n Typically quaternion inverse returns the conjugate of a normalized quaternion.\n Because `self` is assumed to already be unit length this method *does not* normalize\n before returning the conjugate.\n # Panics\n Will panic if `self` is not normalized when `glam_assert` is enabled."
    },
    "glam::DQuat::is_finite": {
      "namespace": "glam::DQuat",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.\n If any element is either `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::DQuat::is_nan": {
      "namespace": "glam::DQuat",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NAN`."
    },
    "glam::DQuat::is_near_identity": {
      "namespace": "glam::DQuat",
      "identifier": "is_near_identity",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::DQuat::is_normalized": {
      "namespace": "glam::DQuat",
      "identifier": "is_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns whether `self` of length `1.0` or not.\n Uses a precision threshold of `1e-6`."
    },
    "glam::DQuat::length": {
      "namespace": "glam::DQuat",
      "identifier": "length",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes the length of `self`."
    },
    "glam::DQuat::length_recip": {
      "namespace": "glam::DQuat",
      "identifier": "length_recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes `1.0 / length()`.\n For valid results, `self` must _not_ be of length zero."
    },
    "glam::DQuat::length_squared": {
      "namespace": "glam::DQuat",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes the squared length of `self`.\n This is generally faster than `length()` as it avoids a square\n root operation."
    },
    "glam::DQuat::lerp": {
      "namespace": "glam::DQuat",
      "identifier": "lerp",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "end"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Performs a linear interpolation between `self` and `rhs` based on\n the value `s`.\n When `s` is `0.0`, the result will be equal to `self`.  When `s`\n is `1.0`, the result will be equal to `rhs`.\n # Panics\n Will panic if `self` or `end` are not normalized when `glam_assert` is enabled."
    },
    "glam::DQuat::mul": {
      "namespace": "glam::DQuat",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Multiplies two quaternions. If they each represent a rotation, the result will\n represent the combined rotation.\n Note that due to floating point rounding the result may not be perfectly\n normalized.\n # Panics\n Will panic if `self` or `rhs` are not normalized when `glam_assert` is enabled."
    },
    "glam::DQuat::mul-1": {
      "namespace": "glam::DQuat",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          }
        },
        {
          "kind": {
            "val": "glam::DVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DQuat::mul-2": {
      "namespace": "glam::DQuat",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      }
    },
    "glam::DQuat::mul_quat": {
      "namespace": "glam::DQuat",
      "identifier": "mul_quat",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Multiplies two quaternions. If they each represent a rotation, the result will\n represent the combined rotation.\n Note that due to floating point rounding the result may not be perfectly normalized.\n # Panics\n Will panic if `self` or `rhs` are not normalized when `glam_assert` is enabled."
    },
    "glam::DQuat::mul_vec3": {
      "namespace": "glam::DQuat",
      "identifier": "mul_vec3",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Multiplies a quaternion and a 3D vector, returning the rotated vector.\n # Panics\n Will panic if `self` is not normalized when `glam_assert` is enabled."
    },
    "glam::DQuat::neg": {
      "namespace": "glam::DQuat",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      }
    },
    "glam::DQuat::normalize": {
      "namespace": "glam::DQuat",
      "identifier": "normalize",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0.\n For valid results, `self` must _not_ be of length zero.\n Panics\n Will panic if `self` is zero length when `glam_assert` is enabled."
    },
    "glam::DQuat::rotate_towards": {
      "namespace": "glam::DQuat",
      "identifier": "rotate_towards",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DQuat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max_angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Rotates towards `rhs` up to `max_angle` (in radians).\n When `max_angle` is `0.0`, the result will be equal to `self`. When `max_angle` is equal to\n `self.angle_between(rhs)`, the result will be equal to `rhs`. If `max_angle` is negative,\n rotates towards the exact opposite of `rhs`. Will not go past the target.\n Both quaternions must be normalized.\n # Panics\n Will panic if `self` or `rhs` are not normalized when `glam_assert` is enabled."
    },
    "glam::DQuat::slerp": {
      "namespace": "glam::DQuat",
      "identifier": "slerp",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "end"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Performs a spherical linear interpolation between `self` and `end`\n based on the value `s`.\n When `s` is `0.0`, the result will be equal to `self`.  When `s`\n is `1.0`, the result will be equal to `end`.\n # Panics\n Will panic if `self` or `end` are not normalized when `glam_assert` is enabled."
    },
    "glam::DQuat::sub": {
      "namespace": "glam::DQuat",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Subtracts the `rhs` quaternion from `self`.\n The difference is not guaranteed to be normalized."
    },
    "glam::DQuat::to_array": {
      "namespace": "glam::DQuat",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f64"
            },
            4
          ]
        }
      },
      "documentation": " `[x, y, z, w]`"
    },
    "glam::DQuat::to_euler": {
      "namespace": "glam::DQuat",
      "identifier": "to_euler",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::EulerRot"
          },
          "name": "order"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": [
            {
              "primitive": "f64"
            },
            {
              "primitive": "f64"
            },
            {
              "primitive": "f64"
            }
          ]
        }
      },
      "documentation": " Returns the rotation angles for the given euler rotation sequence."
    },
    "glam::DQuat::to_scaled_axis": {
      "namespace": "glam::DQuat",
      "identifier": "to_scaled_axis",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns the rotation axis scaled by the rotation in radians."
    },
    "glam::DQuat::xyz": {
      "namespace": "glam::DQuat",
      "identifier": "xyz",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns the vector part of the quaternion."
    },
    "glam::DVec2::abs": {
      "namespace": "glam::DVec2",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::DVec2::abs_diff_eq": {
      "namespace": "glam::DVec2",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs` is\n less than or equal to `max_abs_diff`.\n This can be used to compare if two vectors contain similar elements. It works best when\n comparing with a known value. The `max_abs_diff` that should be used used depends on\n the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::DVec2::add": {
      "namespace": "glam::DVec2",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::add-1": {
      "namespace": "glam::DVec2",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          }
        },
        {
          "kind": {
            "val": "glam::DVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::add-2": {
      "namespace": "glam::DVec2",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::angle_between": {
      "namespace": "glam::DVec2",
      "identifier": "angle_between",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      }
    },
    "glam::DVec2::angle_to": {
      "namespace": "glam::DVec2",
      "identifier": "angle_to",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the angle of rotation (in radians) from `self` to `rhs` in the range `[-π, +π]`.\n The inputs do not need to be unit vectors however they must be non-zero."
    },
    "glam::DVec2::as_i16vec2": {
      "namespace": "glam::DVec2",
      "identifier": "as_i16vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i16`."
    },
    "glam::DVec2::as_i64vec2": {
      "namespace": "glam::DVec2",
      "identifier": "as_i64vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::DVec2::as_i8vec2": {
      "namespace": "glam::DVec2",
      "identifier": "as_i8vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i8`."
    },
    "glam::DVec2::as_ivec2": {
      "namespace": "glam::DVec2",
      "identifier": "as_ivec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::DVec2::as_u16vec2": {
      "namespace": "glam::DVec2",
      "identifier": "as_u16vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u16`."
    },
    "glam::DVec2::as_u64vec2": {
      "namespace": "glam::DVec2",
      "identifier": "as_u64vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::DVec2::as_u8vec2": {
      "namespace": "glam::DVec2",
      "identifier": "as_u8vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u8`."
    },
    "glam::DVec2::as_uvec2": {
      "namespace": "glam::DVec2",
      "identifier": "as_uvec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::DVec2::as_vec2": {
      "namespace": "glam::DVec2",
      "identifier": "as_vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::DVec2::ceil": {
      "namespace": "glam::DVec2",
      "identifier": "ceil",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector containing the smallest integer greater than or equal to a number for\n each element of `self`."
    },
    "glam::DVec2::clamp": {
      "namespace": "glam::DVec2",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`f64::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::DVec2::clamp_length": {
      "namespace": "glam::DVec2",
      "identifier": "clamp_length",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "min"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector with a length no less than `min` and no more than `max`.\n # Panics\n Will panic if `min` is greater than `max`, or if either `min` or `max` is negative, when `glam_assert` is enabled."
    },
    "glam::DVec2::clamp_length_max": {
      "namespace": "glam::DVec2",
      "identifier": "clamp_length_max",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector with a length no more than `max`.\n # Panics\n Will panic if `max` is negative when `glam_assert` is enabled."
    },
    "glam::DVec2::clamp_length_min": {
      "namespace": "glam::DVec2",
      "identifier": "clamp_length_min",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "min"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector with a length no less than `min`.\n # Panics\n Will panic if `min` is negative when `glam_assert` is enabled."
    },
    "glam::DVec2::clone": {
      "namespace": "glam::DVec2",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::cmpeq": {
      "namespace": "glam::DVec2",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::DVec2::cmpge": {
      "namespace": "glam::DVec2",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::DVec2::cmpgt": {
      "namespace": "glam::DVec2",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::DVec2::cmple": {
      "namespace": "glam::DVec2",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::DVec2::cmplt": {
      "namespace": "glam::DVec2",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::DVec2::cmpne": {
      "namespace": "glam::DVec2",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::DVec2::copysign": {
      "namespace": "glam::DVec2",
      "identifier": "copysign",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector with signs of `rhs` and the magnitudes of `self`."
    },
    "glam::DVec2::distance": {
      "namespace": "glam::DVec2",
      "identifier": "distance",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes the Euclidean distance between two points in space."
    },
    "glam::DVec2::distance_squared": {
      "namespace": "glam::DVec2",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::DVec2::div": {
      "namespace": "glam::DVec2",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::div-1": {
      "namespace": "glam::DVec2",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          }
        },
        {
          "kind": {
            "val": "glam::DVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::div-2": {
      "namespace": "glam::DVec2",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::div_euclid": {
      "namespace": "glam::DVec2",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`."
    },
    "glam::DVec2::dot": {
      "namespace": "glam::DVec2",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::DVec2::dot_into_vec": {
      "namespace": "glam::DVec2",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::DVec2::element_product": {
      "namespace": "glam::DVec2",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::DVec2::element_sum": {
      "namespace": "glam::DVec2",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::DVec2::eq": {
      "namespace": "glam::DVec2",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::DVec2::exp": {
      "namespace": "glam::DVec2",
      "identifier": "exp",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector containing `e^self` (the exponential function) for each element of\n `self`."
    },
    "glam::DVec2::extend": {
      "namespace": "glam::DVec2",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` and the given `z` value."
    },
    "glam::DVec2::floor": {
      "namespace": "glam::DVec2",
      "identifier": "floor",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector containing the largest integer less than or equal to a number for each\n element of `self`."
    },
    "glam::DVec2::fract": {
      "namespace": "glam::DVec2",
      "identifier": "fract",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector containing the fractional part of the vector as `self - self.trunc()`.\n Note that this differs from the GLSL implementation of `fract` which returns\n `self - self.floor()`.\n Note that this is fast but not precise for large numbers."
    },
    "glam::DVec2::fract_gl": {
      "namespace": "glam::DVec2",
      "identifier": "fract_gl",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector containing the fractional part of the vector as `self - self.floor()`.\n Note that this differs from the Rust implementation of `fract` which returns\n `self - self.trunc()`.\n Note that this is fast but not precise for large numbers."
    },
    "glam::DVec2::from_angle": {
      "namespace": "glam::DVec2",
      "identifier": "from_angle",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Creates a 2D vector containing `[angle.cos(), angle.sin()]`. This can be used in\n conjunction with the [`rotate()`][Self::rotate()] method, e.g.\n `DVec2::from_angle(PI).rotate(DVec2::Y)` will create the vector `[-1, 0]`\n and rotate [`DVec2::Y`] around it returning `-DVec2::Y`."
    },
    "glam::DVec2::from_array": {
      "namespace": "glam::DVec2",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "f64"
              },
              2
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::DVec2::is_finite": {
      "namespace": "glam::DVec2",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.  If any element is either\n `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::DVec2::is_finite_mask": {
      "namespace": "glam::DVec2",
      "identifier": "is_finite_mask",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Performs `is_finite` on each element of self, returning a vector mask of the results.\n In other words, this computes `[x.is_finite(), y.is_finite(), ...]`."
    },
    "glam::DVec2::is_nan": {
      "namespace": "glam::DVec2",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::DVec2::is_nan_mask": {
      "namespace": "glam::DVec2",
      "identifier": "is_nan_mask",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Performs `is_nan` on each element of self, returning a vector mask of the results.\n In other words, this computes `[x.is_nan(), y.is_nan(), ...]`."
    },
    "glam::DVec2::is_negative_bitmask": {
      "namespace": "glam::DVec2",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 2 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::DVec2::is_normalized": {
      "namespace": "glam::DVec2",
      "identifier": "is_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns whether `self` is length `1.0` or not.\n Uses a precision threshold of approximately `1e-4`."
    },
    "glam::DVec2::length": {
      "namespace": "glam::DVec2",
      "identifier": "length",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes the length of `self`."
    },
    "glam::DVec2::length_recip": {
      "namespace": "glam::DVec2",
      "identifier": "length_recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes `1.0 / length()`.\n For valid results, `self` must _not_ be of length zero."
    },
    "glam::DVec2::length_squared": {
      "namespace": "glam::DVec2",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes the squared length of `self`.\n This is faster than `length()` as it avoids a square root operation."
    },
    "glam::DVec2::lerp": {
      "namespace": "glam::DVec2",
      "identifier": "lerp",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Performs a linear interpolation between `self` and `rhs` based on the value `s`.\n When `s` is `0.0`, the result will be equal to `self`.  When `s` is `1.0`, the result\n will be equal to `rhs`. When `s` is outside of range `[0, 1]`, the result is linearly\n extrapolated."
    },
    "glam::DVec2::max": {
      "namespace": "glam::DVec2",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::DVec2::max_element": {
      "namespace": "glam::DVec2",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::DVec2::midpoint": {
      "namespace": "glam::DVec2",
      "identifier": "midpoint",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Calculates the midpoint between `self` and `rhs`.\n The midpoint is the average of, or halfway point between, two vectors.\n `a.midpoint(b)` should yield the same result as `a.lerp(b, 0.5)`\n while being slightly cheaper to compute."
    },
    "glam::DVec2::min": {
      "namespace": "glam::DVec2",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::DVec2::min_element": {
      "namespace": "glam::DVec2",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::DVec2::move_towards": {
      "namespace": "glam::DVec2",
      "identifier": "move_towards",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "d"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Moves towards `rhs` based on the value `d`.\n When `d` is `0.0`, the result will be equal to `self`. When `d` is equal to\n `self.distance(rhs)`, the result will be equal to `rhs`. Will not go past `rhs`."
    },
    "glam::DVec2::mul": {
      "namespace": "glam::DVec2",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::mul-1": {
      "namespace": "glam::DVec2",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          }
        },
        {
          "kind": {
            "val": "glam::DVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::mul-2": {
      "namespace": "glam::DVec2",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::mul_add": {
      "namespace": "glam::DVec2",
      "identifier": "mul_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "a"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "b"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Fused multiply-add. Computes `(self * a) + b` element-wise with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.\n Using `mul_add` *may* be more performant than an unfused multiply-add if the target\n architecture has a dedicated fma CPU instruction. However, this is not always true,\n and will be heavily dependant on designing algorithms with specific target hardware in\n mind."
    },
    "glam::DVec2::neg": {
      "namespace": "glam::DVec2",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::new": {
      "namespace": "glam::DVec2",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::DVec2::normalize": {
      "namespace": "glam::DVec2",
      "identifier": "normalize",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0.\n For valid results, `self` must be finite and _not_ of length zero, nor very close to zero.\n See also [`Self::try_normalize()`] and [`Self::normalize_or_zero()`].\n Panics\n Will panic if the resulting normalized vector is not finite when `glam_assert` is enabled."
    },
    "glam::DVec2::normalize_or": {
      "namespace": "glam::DVec2",
      "identifier": "normalize_or",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "fallback"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0 if possible, else returns a\n fallback value.\n In particular, if the input is zero (or very close to zero), or non-finite,\n the result of this operation will be the fallback value.\n See also [`Self::try_normalize()`]."
    },
    "glam::DVec2::normalize_or_zero": {
      "namespace": "glam::DVec2",
      "identifier": "normalize_or_zero",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0 if possible, else returns zero.\n In particular, if the input is zero (or very close to zero), or non-finite,\n the result of this operation will be zero.\n See also [`Self::try_normalize()`]."
    },
    "glam::DVec2::perp": {
      "namespace": "glam::DVec2",
      "identifier": "perp",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector that is equal to `self` rotated by 90 degrees."
    },
    "glam::DVec2::perp_dot": {
      "namespace": "glam::DVec2",
      "identifier": "perp_dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " The perpendicular dot product of `self` and `rhs`.\n Also known as the wedge product, 2D cross product, and determinant."
    },
    "glam::DVec2::powf": {
      "namespace": "glam::DVec2",
      "identifier": "powf",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "n"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector containing each element of `self` raised to the power of `n`."
    },
    "glam::DVec2::project_onto": {
      "namespace": "glam::DVec2",
      "identifier": "project_onto",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns the vector projection of `self` onto `rhs`.\n `rhs` must be of non-zero length.\n # Panics\n Will panic if `rhs` is zero length when `glam_assert` is enabled."
    },
    "glam::DVec2::project_onto_normalized": {
      "namespace": "glam::DVec2",
      "identifier": "project_onto_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns the vector projection of `self` onto `rhs`.\n `rhs` must be normalized.\n # Panics\n Will panic if `rhs` is not normalized when `glam_assert` is enabled."
    },
    "glam::DVec2::recip": {
      "namespace": "glam::DVec2",
      "identifier": "recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector containing the reciprocal `1.0/n` of each element of `self`."
    },
    "glam::DVec2::reflect": {
      "namespace": "glam::DVec2",
      "identifier": "reflect",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "normal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns the reflection vector for a given incident vector `self` and surface normal\n `normal`.\n `normal` must be normalized.\n # Panics\n Will panic if `normal` is not normalized when `glam_assert` is enabled."
    },
    "glam::DVec2::refract": {
      "namespace": "glam::DVec2",
      "identifier": "refract",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "normal"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "eta"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns the refraction direction for a given incident vector `self`, surface normal\n `normal` and ratio of indices of refraction, `eta`. When total internal reflection occurs,\n a zero vector will be returned.\n `self` and `normal` must be normalized.\n # Panics\n Will panic if `self` or `normal` is not normalized when `glam_assert` is enabled."
    },
    "glam::DVec2::reject_from": {
      "namespace": "glam::DVec2",
      "identifier": "reject_from",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns the vector rejection of `self` from `rhs`.\n The vector rejection is the vector perpendicular to the projection of `self` onto\n `rhs`, in rhs words the result of `self - self.project_onto(rhs)`.\n `rhs` must be of non-zero length.\n # Panics\n Will panic if `rhs` has a length of zero when `glam_assert` is enabled."
    },
    "glam::DVec2::reject_from_normalized": {
      "namespace": "glam::DVec2",
      "identifier": "reject_from_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns the vector rejection of `self` from `rhs`.\n The vector rejection is the vector perpendicular to the projection of `self` onto\n `rhs`, in rhs words the result of `self - self.project_onto(rhs)`.\n `rhs` must be normalized.\n # Panics\n Will panic if `rhs` is not normalized when `glam_assert` is enabled."
    },
    "glam::DVec2::rem": {
      "namespace": "glam::DVec2",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::rem-1": {
      "namespace": "glam::DVec2",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          }
        },
        {
          "kind": {
            "val": "glam::DVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::rem-2": {
      "namespace": "glam::DVec2",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::rem_euclid": {
      "namespace": "glam::DVec2",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n [Euclidean division]: f64::rem_euclid"
    },
    "glam::DVec2::rotate": {
      "namespace": "glam::DVec2",
      "identifier": "rotate",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns `rhs` rotated by the angle of `self`. If `self` is normalized,\n then this just rotation. This is what you usually want. Otherwise,\n it will be like a rotation with a multiplication by `self`'s length."
    },
    "glam::DVec2::rotate_towards": {
      "namespace": "glam::DVec2",
      "identifier": "rotate_towards",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max_angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Rotates towards `rhs` up to `max_angle` (in radians).\n When `max_angle` is `0.0`, the result will be equal to `self`. When `max_angle` is equal to\n `self.angle_between(rhs)`, the result will be equal to `rhs`. If `max_angle` is negative,\n rotates towards the exact opposite of `rhs`. Will not go past the target."
    },
    "glam::DVec2::round": {
      "namespace": "glam::DVec2",
      "identifier": "round",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector containing the nearest integer to a number for each element of `self`.\n Round half-way cases away from 0.0."
    },
    "glam::DVec2::select": {
      "namespace": "glam::DVec2",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec2"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::DVec2::signum": {
      "namespace": "glam::DVec2",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n - `1.0` if the number is positive, `+0.0` or `INFINITY`\n - `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`\n - `NAN` if the number is `NAN`"
    },
    "glam::DVec2::splat": {
      "namespace": "glam::DVec2",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::DVec2::sub": {
      "namespace": "glam::DVec2",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::sub-1": {
      "namespace": "glam::DVec2",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          }
        },
        {
          "kind": {
            "val": "glam::DVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::sub-2": {
      "namespace": "glam::DVec2",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::to_angle": {
      "namespace": "glam::DVec2",
      "identifier": "to_angle",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the angle (in radians) of this vector in the range `[-π, +π]`.\n The input does not need to be a unit vector however it must be non-zero."
    },
    "glam::DVec2::to_array": {
      "namespace": "glam::DVec2",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f64"
            },
            2
          ]
        }
      },
      "documentation": " `[x, y]`"
    },
    "glam::DVec2::trunc": {
      "namespace": "glam::DVec2",
      "identifier": "trunc",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector containing the integer part each element of `self`. This means numbers are\n always truncated towards zero."
    },
    "glam::DVec2::with_x": {
      "namespace": "glam::DVec2",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `x`."
    },
    "glam::DVec2::with_y": {
      "namespace": "glam::DVec2",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `y`."
    },
    "glam::DVec3::abs": {
      "namespace": "glam::DVec3",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::DVec3::abs_diff_eq": {
      "namespace": "glam::DVec3",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs` is\n less than or equal to `max_abs_diff`.\n This can be used to compare if two vectors contain similar elements. It works best when\n comparing with a known value. The `max_abs_diff` that should be used used depends on\n the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::DVec3::add": {
      "namespace": "glam::DVec3",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::add-1": {
      "namespace": "glam::DVec3",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          }
        },
        {
          "kind": {
            "val": "glam::DVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::add-2": {
      "namespace": "glam::DVec3",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::angle_between": {
      "namespace": "glam::DVec3",
      "identifier": "angle_between",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the angle (in radians) between two vectors in the range `[0, +π]`.\n The inputs do not need to be unit vectors however they must be non-zero."
    },
    "glam::DVec3::any_orthogonal_vector": {
      "namespace": "glam::DVec3",
      "identifier": "any_orthogonal_vector",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns some vector that is orthogonal to the given one.\n The input vector must be finite and non-zero.\n The output vector is not necessarily unit length. For that use\n [`Self::any_orthonormal_vector()`] instead."
    },
    "glam::DVec3::any_orthonormal_vector": {
      "namespace": "glam::DVec3",
      "identifier": "any_orthonormal_vector",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns any unit vector that is orthogonal to the given one.\n The input vector must be unit length.\n # Panics\n Will panic if `self` is not normalized when `glam_assert` is enabled."
    },
    "glam::DVec3::as_i16vec3": {
      "namespace": "glam::DVec3",
      "identifier": "as_i16vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i16`."
    },
    "glam::DVec3::as_i64vec3": {
      "namespace": "glam::DVec3",
      "identifier": "as_i64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::DVec3::as_i8vec3": {
      "namespace": "glam::DVec3",
      "identifier": "as_i8vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i8`."
    },
    "glam::DVec3::as_ivec3": {
      "namespace": "glam::DVec3",
      "identifier": "as_ivec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::DVec3::as_u16vec3": {
      "namespace": "glam::DVec3",
      "identifier": "as_u16vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u16`."
    },
    "glam::DVec3::as_u64vec3": {
      "namespace": "glam::DVec3",
      "identifier": "as_u64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::DVec3::as_u8vec3": {
      "namespace": "glam::DVec3",
      "identifier": "as_u8vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u8`."
    },
    "glam::DVec3::as_uvec3": {
      "namespace": "glam::DVec3",
      "identifier": "as_uvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::DVec3::as_vec3": {
      "namespace": "glam::DVec3",
      "identifier": "as_vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::DVec3::as_vec3a": {
      "namespace": "glam::DVec3",
      "identifier": "as_vec3a",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::DVec3::ceil": {
      "namespace": "glam::DVec3",
      "identifier": "ceil",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector containing the smallest integer greater than or equal to a number for\n each element of `self`."
    },
    "glam::DVec3::clamp": {
      "namespace": "glam::DVec3",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`f64::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::DVec3::clamp_length": {
      "namespace": "glam::DVec3",
      "identifier": "clamp_length",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "min"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector with a length no less than `min` and no more than `max`.\n # Panics\n Will panic if `min` is greater than `max`, or if either `min` or `max` is negative, when `glam_assert` is enabled."
    },
    "glam::DVec3::clamp_length_max": {
      "namespace": "glam::DVec3",
      "identifier": "clamp_length_max",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector with a length no more than `max`.\n # Panics\n Will panic if `max` is negative when `glam_assert` is enabled."
    },
    "glam::DVec3::clamp_length_min": {
      "namespace": "glam::DVec3",
      "identifier": "clamp_length_min",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "min"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector with a length no less than `min`.\n # Panics\n Will panic if `min` is negative when `glam_assert` is enabled."
    },
    "glam::DVec3::clone": {
      "namespace": "glam::DVec3",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::cmpeq": {
      "namespace": "glam::DVec3",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::DVec3::cmpge": {
      "namespace": "glam::DVec3",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::DVec3::cmpgt": {
      "namespace": "glam::DVec3",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::DVec3::cmple": {
      "namespace": "glam::DVec3",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::DVec3::cmplt": {
      "namespace": "glam::DVec3",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::DVec3::cmpne": {
      "namespace": "glam::DVec3",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::DVec3::copysign": {
      "namespace": "glam::DVec3",
      "identifier": "copysign",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector with signs of `rhs` and the magnitudes of `self`."
    },
    "glam::DVec3::cross": {
      "namespace": "glam::DVec3",
      "identifier": "cross",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Computes the cross product of `self` and `rhs`."
    },
    "glam::DVec3::distance": {
      "namespace": "glam::DVec3",
      "identifier": "distance",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes the Euclidean distance between two points in space."
    },
    "glam::DVec3::distance_squared": {
      "namespace": "glam::DVec3",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::DVec3::div": {
      "namespace": "glam::DVec3",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::div-1": {
      "namespace": "glam::DVec3",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          }
        },
        {
          "kind": {
            "val": "glam::DVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::div-2": {
      "namespace": "glam::DVec3",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::div_euclid": {
      "namespace": "glam::DVec3",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`."
    },
    "glam::DVec3::dot": {
      "namespace": "glam::DVec3",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::DVec3::dot_into_vec": {
      "namespace": "glam::DVec3",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::DVec3::element_product": {
      "namespace": "glam::DVec3",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::DVec3::element_sum": {
      "namespace": "glam::DVec3",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::DVec3::eq": {
      "namespace": "glam::DVec3",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::DVec3::exp": {
      "namespace": "glam::DVec3",
      "identifier": "exp",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector containing `e^self` (the exponential function) for each element of\n `self`."
    },
    "glam::DVec3::extend": {
      "namespace": "glam::DVec3",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` and the given `w` value."
    },
    "glam::DVec3::floor": {
      "namespace": "glam::DVec3",
      "identifier": "floor",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector containing the largest integer less than or equal to a number for each\n element of `self`."
    },
    "glam::DVec3::fract": {
      "namespace": "glam::DVec3",
      "identifier": "fract",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector containing the fractional part of the vector as `self - self.trunc()`.\n Note that this differs from the GLSL implementation of `fract` which returns\n `self - self.floor()`.\n Note that this is fast but not precise for large numbers."
    },
    "glam::DVec3::fract_gl": {
      "namespace": "glam::DVec3",
      "identifier": "fract_gl",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector containing the fractional part of the vector as `self - self.floor()`.\n Note that this differs from the Rust implementation of `fract` which returns\n `self - self.trunc()`.\n Note that this is fast but not precise for large numbers."
    },
    "glam::DVec3::from_array": {
      "namespace": "glam::DVec3",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "f64"
              },
              3
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::DVec3::is_finite": {
      "namespace": "glam::DVec3",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.  If any element is either\n `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::DVec3::is_finite_mask": {
      "namespace": "glam::DVec3",
      "identifier": "is_finite_mask",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Performs `is_finite` on each element of self, returning a vector mask of the results.\n In other words, this computes `[x.is_finite(), y.is_finite(), ...]`."
    },
    "glam::DVec3::is_nan": {
      "namespace": "glam::DVec3",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::DVec3::is_nan_mask": {
      "namespace": "glam::DVec3",
      "identifier": "is_nan_mask",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Performs `is_nan` on each element of self, returning a vector mask of the results.\n In other words, this computes `[x.is_nan(), y.is_nan(), ...]`."
    },
    "glam::DVec3::is_negative_bitmask": {
      "namespace": "glam::DVec3",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 3 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::DVec3::is_normalized": {
      "namespace": "glam::DVec3",
      "identifier": "is_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns whether `self` is length `1.0` or not.\n Uses a precision threshold of approximately `1e-4`."
    },
    "glam::DVec3::length": {
      "namespace": "glam::DVec3",
      "identifier": "length",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes the length of `self`."
    },
    "glam::DVec3::length_recip": {
      "namespace": "glam::DVec3",
      "identifier": "length_recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes `1.0 / length()`.\n For valid results, `self` must _not_ be of length zero."
    },
    "glam::DVec3::length_squared": {
      "namespace": "glam::DVec3",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes the squared length of `self`.\n This is faster than `length()` as it avoids a square root operation."
    },
    "glam::DVec3::lerp": {
      "namespace": "glam::DVec3",
      "identifier": "lerp",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Performs a linear interpolation between `self` and `rhs` based on the value `s`.\n When `s` is `0.0`, the result will be equal to `self`.  When `s` is `1.0`, the result\n will be equal to `rhs`. When `s` is outside of range `[0, 1]`, the result is linearly\n extrapolated."
    },
    "glam::DVec3::max": {
      "namespace": "glam::DVec3",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::DVec3::max_element": {
      "namespace": "glam::DVec3",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::DVec3::midpoint": {
      "namespace": "glam::DVec3",
      "identifier": "midpoint",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Calculates the midpoint between `self` and `rhs`.\n The midpoint is the average of, or halfway point between, two vectors.\n `a.midpoint(b)` should yield the same result as `a.lerp(b, 0.5)`\n while being slightly cheaper to compute."
    },
    "glam::DVec3::min": {
      "namespace": "glam::DVec3",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::DVec3::min_element": {
      "namespace": "glam::DVec3",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::DVec3::move_towards": {
      "namespace": "glam::DVec3",
      "identifier": "move_towards",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "d"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Moves towards `rhs` based on the value `d`.\n When `d` is `0.0`, the result will be equal to `self`. When `d` is equal to\n `self.distance(rhs)`, the result will be equal to `rhs`. Will not go past `rhs`."
    },
    "glam::DVec3::mul": {
      "namespace": "glam::DVec3",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::mul-1": {
      "namespace": "glam::DVec3",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          }
        },
        {
          "kind": {
            "val": "glam::DVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::mul-2": {
      "namespace": "glam::DVec3",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::mul_add": {
      "namespace": "glam::DVec3",
      "identifier": "mul_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "a"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "b"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Fused multiply-add. Computes `(self * a) + b` element-wise with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.\n Using `mul_add` *may* be more performant than an unfused multiply-add if the target\n architecture has a dedicated fma CPU instruction. However, this is not always true,\n and will be heavily dependant on designing algorithms with specific target hardware in\n mind."
    },
    "glam::DVec3::neg": {
      "namespace": "glam::DVec3",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::new": {
      "namespace": "glam::DVec3",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::DVec3::normalize": {
      "namespace": "glam::DVec3",
      "identifier": "normalize",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0.\n For valid results, `self` must be finite and _not_ of length zero, nor very close to zero.\n See also [`Self::try_normalize()`] and [`Self::normalize_or_zero()`].\n Panics\n Will panic if the resulting normalized vector is not finite when `glam_assert` is enabled."
    },
    "glam::DVec3::normalize_or": {
      "namespace": "glam::DVec3",
      "identifier": "normalize_or",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "fallback"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0 if possible, else returns a\n fallback value.\n In particular, if the input is zero (or very close to zero), or non-finite,\n the result of this operation will be the fallback value.\n See also [`Self::try_normalize()`]."
    },
    "glam::DVec3::normalize_or_zero": {
      "namespace": "glam::DVec3",
      "identifier": "normalize_or_zero",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0 if possible, else returns zero.\n In particular, if the input is zero (or very close to zero), or non-finite,\n the result of this operation will be zero.\n See also [`Self::try_normalize()`]."
    },
    "glam::DVec3::powf": {
      "namespace": "glam::DVec3",
      "identifier": "powf",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "n"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector containing each element of `self` raised to the power of `n`."
    },
    "glam::DVec3::project_onto": {
      "namespace": "glam::DVec3",
      "identifier": "project_onto",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns the vector projection of `self` onto `rhs`.\n `rhs` must be of non-zero length.\n # Panics\n Will panic if `rhs` is zero length when `glam_assert` is enabled."
    },
    "glam::DVec3::project_onto_normalized": {
      "namespace": "glam::DVec3",
      "identifier": "project_onto_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns the vector projection of `self` onto `rhs`.\n `rhs` must be normalized.\n # Panics\n Will panic if `rhs` is not normalized when `glam_assert` is enabled."
    },
    "glam::DVec3::recip": {
      "namespace": "glam::DVec3",
      "identifier": "recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector containing the reciprocal `1.0/n` of each element of `self`."
    },
    "glam::DVec3::reflect": {
      "namespace": "glam::DVec3",
      "identifier": "reflect",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "normal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns the reflection vector for a given incident vector `self` and surface normal\n `normal`.\n `normal` must be normalized.\n # Panics\n Will panic if `normal` is not normalized when `glam_assert` is enabled."
    },
    "glam::DVec3::refract": {
      "namespace": "glam::DVec3",
      "identifier": "refract",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "normal"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "eta"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns the refraction direction for a given incident vector `self`, surface normal\n `normal` and ratio of indices of refraction, `eta`. When total internal reflection occurs,\n a zero vector will be returned.\n `self` and `normal` must be normalized.\n # Panics\n Will panic if `self` or `normal` is not normalized when `glam_assert` is enabled."
    },
    "glam::DVec3::reject_from": {
      "namespace": "glam::DVec3",
      "identifier": "reject_from",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns the vector rejection of `self` from `rhs`.\n The vector rejection is the vector perpendicular to the projection of `self` onto\n `rhs`, in rhs words the result of `self - self.project_onto(rhs)`.\n `rhs` must be of non-zero length.\n # Panics\n Will panic if `rhs` has a length of zero when `glam_assert` is enabled."
    },
    "glam::DVec3::reject_from_normalized": {
      "namespace": "glam::DVec3",
      "identifier": "reject_from_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns the vector rejection of `self` from `rhs`.\n The vector rejection is the vector perpendicular to the projection of `self` onto\n `rhs`, in rhs words the result of `self - self.project_onto(rhs)`.\n `rhs` must be normalized.\n # Panics\n Will panic if `rhs` is not normalized when `glam_assert` is enabled."
    },
    "glam::DVec3::rem": {
      "namespace": "glam::DVec3",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::rem-1": {
      "namespace": "glam::DVec3",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          }
        },
        {
          "kind": {
            "val": "glam::DVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::rem-2": {
      "namespace": "glam::DVec3",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::rem_euclid": {
      "namespace": "glam::DVec3",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n [Euclidean division]: f64::rem_euclid"
    },
    "glam::DVec3::round": {
      "namespace": "glam::DVec3",
      "identifier": "round",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector containing the nearest integer to a number for each element of `self`.\n Round half-way cases away from 0.0."
    },
    "glam::DVec3::select": {
      "namespace": "glam::DVec3",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec3"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::DVec3::signum": {
      "namespace": "glam::DVec3",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n - `1.0` if the number is positive, `+0.0` or `INFINITY`\n - `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`\n - `NAN` if the number is `NAN`"
    },
    "glam::DVec3::splat": {
      "namespace": "glam::DVec3",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::DVec3::sub": {
      "namespace": "glam::DVec3",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::sub-1": {
      "namespace": "glam::DVec3",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          }
        },
        {
          "kind": {
            "val": "glam::DVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::sub-2": {
      "namespace": "glam::DVec3",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::to_array": {
      "namespace": "glam::DVec3",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f64"
            },
            3
          ]
        }
      },
      "documentation": " `[x, y, z]`"
    },
    "glam::DVec3::trunc": {
      "namespace": "glam::DVec3",
      "identifier": "trunc",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector containing the integer part each element of `self`. This means numbers are\n always truncated towards zero."
    },
    "glam::DVec3::truncate": {
      "namespace": "glam::DVec3",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Creates a 2D vector from the `x` and `y` elements of `self`, discarding `z`.\n Truncation may also be performed by using [`self.xy()`][crate::swizzles::Vec3Swizzles::xy()]."
    },
    "glam::DVec3::with_x": {
      "namespace": "glam::DVec3",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `x`."
    },
    "glam::DVec3::with_y": {
      "namespace": "glam::DVec3",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `y`."
    },
    "glam::DVec3::with_z": {
      "namespace": "glam::DVec3",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `z`."
    },
    "glam::DVec4::abs": {
      "namespace": "glam::DVec4",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::DVec4::abs_diff_eq": {
      "namespace": "glam::DVec4",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs` is\n less than or equal to `max_abs_diff`.\n This can be used to compare if two vectors contain similar elements. It works best when\n comparing with a known value. The `max_abs_diff` that should be used used depends on\n the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::DVec4::add": {
      "namespace": "glam::DVec4",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::add-1": {
      "namespace": "glam::DVec4",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          }
        },
        {
          "kind": {
            "val": "glam::DVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::add-2": {
      "namespace": "glam::DVec4",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::as_i16vec4": {
      "namespace": "glam::DVec4",
      "identifier": "as_i16vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i16`."
    },
    "glam::DVec4::as_i64vec4": {
      "namespace": "glam::DVec4",
      "identifier": "as_i64vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::DVec4::as_i8vec4": {
      "namespace": "glam::DVec4",
      "identifier": "as_i8vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i8`."
    },
    "glam::DVec4::as_ivec4": {
      "namespace": "glam::DVec4",
      "identifier": "as_ivec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::DVec4::as_u16vec4": {
      "namespace": "glam::DVec4",
      "identifier": "as_u16vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u16`."
    },
    "glam::DVec4::as_u64vec4": {
      "namespace": "glam::DVec4",
      "identifier": "as_u64vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::DVec4::as_u8vec4": {
      "namespace": "glam::DVec4",
      "identifier": "as_u8vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u8`."
    },
    "glam::DVec4::as_uvec4": {
      "namespace": "glam::DVec4",
      "identifier": "as_uvec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::DVec4::as_vec4": {
      "namespace": "glam::DVec4",
      "identifier": "as_vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::DVec4::ceil": {
      "namespace": "glam::DVec4",
      "identifier": "ceil",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector containing the smallest integer greater than or equal to a number for\n each element of `self`."
    },
    "glam::DVec4::clamp": {
      "namespace": "glam::DVec4",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`f64::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::DVec4::clamp_length": {
      "namespace": "glam::DVec4",
      "identifier": "clamp_length",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "min"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector with a length no less than `min` and no more than `max`.\n # Panics\n Will panic if `min` is greater than `max`, or if either `min` or `max` is negative, when `glam_assert` is enabled."
    },
    "glam::DVec4::clamp_length_max": {
      "namespace": "glam::DVec4",
      "identifier": "clamp_length_max",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector with a length no more than `max`.\n # Panics\n Will panic if `max` is negative when `glam_assert` is enabled."
    },
    "glam::DVec4::clamp_length_min": {
      "namespace": "glam::DVec4",
      "identifier": "clamp_length_min",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "min"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector with a length no less than `min`.\n # Panics\n Will panic if `min` is negative when `glam_assert` is enabled."
    },
    "glam::DVec4::clone": {
      "namespace": "glam::DVec4",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::cmpeq": {
      "namespace": "glam::DVec4",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::DVec4::cmpge": {
      "namespace": "glam::DVec4",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::DVec4::cmpgt": {
      "namespace": "glam::DVec4",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::DVec4::cmple": {
      "namespace": "glam::DVec4",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::DVec4::cmplt": {
      "namespace": "glam::DVec4",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::DVec4::cmpne": {
      "namespace": "glam::DVec4",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::DVec4::copysign": {
      "namespace": "glam::DVec4",
      "identifier": "copysign",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector with signs of `rhs` and the magnitudes of `self`."
    },
    "glam::DVec4::distance": {
      "namespace": "glam::DVec4",
      "identifier": "distance",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes the Euclidean distance between two points in space."
    },
    "glam::DVec4::distance_squared": {
      "namespace": "glam::DVec4",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::DVec4::div": {
      "namespace": "glam::DVec4",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::div-1": {
      "namespace": "glam::DVec4",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          }
        },
        {
          "kind": {
            "val": "glam::DVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::div-2": {
      "namespace": "glam::DVec4",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::div_euclid": {
      "namespace": "glam::DVec4",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`."
    },
    "glam::DVec4::dot": {
      "namespace": "glam::DVec4",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::DVec4::dot_into_vec": {
      "namespace": "glam::DVec4",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::DVec4::element_product": {
      "namespace": "glam::DVec4",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::DVec4::element_sum": {
      "namespace": "glam::DVec4",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::DVec4::eq": {
      "namespace": "glam::DVec4",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::DVec4::exp": {
      "namespace": "glam::DVec4",
      "identifier": "exp",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector containing `e^self` (the exponential function) for each element of\n `self`."
    },
    "glam::DVec4::floor": {
      "namespace": "glam::DVec4",
      "identifier": "floor",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector containing the largest integer less than or equal to a number for each\n element of `self`."
    },
    "glam::DVec4::fract": {
      "namespace": "glam::DVec4",
      "identifier": "fract",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector containing the fractional part of the vector as `self - self.trunc()`.\n Note that this differs from the GLSL implementation of `fract` which returns\n `self - self.floor()`.\n Note that this is fast but not precise for large numbers."
    },
    "glam::DVec4::fract_gl": {
      "namespace": "glam::DVec4",
      "identifier": "fract_gl",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector containing the fractional part of the vector as `self - self.floor()`.\n Note that this differs from the Rust implementation of `fract` which returns\n `self - self.trunc()`.\n Note that this is fast but not precise for large numbers."
    },
    "glam::DVec4::from_array": {
      "namespace": "glam::DVec4",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "f64"
              },
              4
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::DVec4::is_finite": {
      "namespace": "glam::DVec4",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.  If any element is either\n `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::DVec4::is_finite_mask": {
      "namespace": "glam::DVec4",
      "identifier": "is_finite_mask",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Performs `is_finite` on each element of self, returning a vector mask of the results.\n In other words, this computes `[x.is_finite(), y.is_finite(), ...]`."
    },
    "glam::DVec4::is_nan": {
      "namespace": "glam::DVec4",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::DVec4::is_nan_mask": {
      "namespace": "glam::DVec4",
      "identifier": "is_nan_mask",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Performs `is_nan` on each element of self, returning a vector mask of the results.\n In other words, this computes `[x.is_nan(), y.is_nan(), ...]`."
    },
    "glam::DVec4::is_negative_bitmask": {
      "namespace": "glam::DVec4",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 4 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::DVec4::is_normalized": {
      "namespace": "glam::DVec4",
      "identifier": "is_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns whether `self` is length `1.0` or not.\n Uses a precision threshold of approximately `1e-4`."
    },
    "glam::DVec4::length": {
      "namespace": "glam::DVec4",
      "identifier": "length",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes the length of `self`."
    },
    "glam::DVec4::length_recip": {
      "namespace": "glam::DVec4",
      "identifier": "length_recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes `1.0 / length()`.\n For valid results, `self` must _not_ be of length zero."
    },
    "glam::DVec4::length_squared": {
      "namespace": "glam::DVec4",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes the squared length of `self`.\n This is faster than `length()` as it avoids a square root operation."
    },
    "glam::DVec4::lerp": {
      "namespace": "glam::DVec4",
      "identifier": "lerp",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Performs a linear interpolation between `self` and `rhs` based on the value `s`.\n When `s` is `0.0`, the result will be equal to `self`.  When `s` is `1.0`, the result\n will be equal to `rhs`. When `s` is outside of range `[0, 1]`, the result is linearly\n extrapolated."
    },
    "glam::DVec4::max": {
      "namespace": "glam::DVec4",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::DVec4::max_element": {
      "namespace": "glam::DVec4",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::DVec4::midpoint": {
      "namespace": "glam::DVec4",
      "identifier": "midpoint",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Calculates the midpoint between `self` and `rhs`.\n The midpoint is the average of, or halfway point between, two vectors.\n `a.midpoint(b)` should yield the same result as `a.lerp(b, 0.5)`\n while being slightly cheaper to compute."
    },
    "glam::DVec4::min": {
      "namespace": "glam::DVec4",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::DVec4::min_element": {
      "namespace": "glam::DVec4",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::DVec4::move_towards": {
      "namespace": "glam::DVec4",
      "identifier": "move_towards",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "d"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Moves towards `rhs` based on the value `d`.\n When `d` is `0.0`, the result will be equal to `self`. When `d` is equal to\n `self.distance(rhs)`, the result will be equal to `rhs`. Will not go past `rhs`."
    },
    "glam::DVec4::mul": {
      "namespace": "glam::DVec4",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::mul-1": {
      "namespace": "glam::DVec4",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          }
        },
        {
          "kind": {
            "val": "glam::DVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::mul-2": {
      "namespace": "glam::DVec4",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::mul_add": {
      "namespace": "glam::DVec4",
      "identifier": "mul_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "a"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "b"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Fused multiply-add. Computes `(self * a) + b` element-wise with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.\n Using `mul_add` *may* be more performant than an unfused multiply-add if the target\n architecture has a dedicated fma CPU instruction. However, this is not always true,\n and will be heavily dependant on designing algorithms with specific target hardware in\n mind."
    },
    "glam::DVec4::neg": {
      "namespace": "glam::DVec4",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::new": {
      "namespace": "glam::DVec4",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::DVec4::normalize": {
      "namespace": "glam::DVec4",
      "identifier": "normalize",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0.\n For valid results, `self` must be finite and _not_ of length zero, nor very close to zero.\n See also [`Self::try_normalize()`] and [`Self::normalize_or_zero()`].\n Panics\n Will panic if the resulting normalized vector is not finite when `glam_assert` is enabled."
    },
    "glam::DVec4::normalize_or": {
      "namespace": "glam::DVec4",
      "identifier": "normalize_or",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "fallback"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0 if possible, else returns a\n fallback value.\n In particular, if the input is zero (or very close to zero), or non-finite,\n the result of this operation will be the fallback value.\n See also [`Self::try_normalize()`]."
    },
    "glam::DVec4::normalize_or_zero": {
      "namespace": "glam::DVec4",
      "identifier": "normalize_or_zero",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0 if possible, else returns zero.\n In particular, if the input is zero (or very close to zero), or non-finite,\n the result of this operation will be zero.\n See also [`Self::try_normalize()`]."
    },
    "glam::DVec4::powf": {
      "namespace": "glam::DVec4",
      "identifier": "powf",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "n"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector containing each element of `self` raised to the power of `n`."
    },
    "glam::DVec4::project_onto": {
      "namespace": "glam::DVec4",
      "identifier": "project_onto",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns the vector projection of `self` onto `rhs`.\n `rhs` must be of non-zero length.\n # Panics\n Will panic if `rhs` is zero length when `glam_assert` is enabled."
    },
    "glam::DVec4::project_onto_normalized": {
      "namespace": "glam::DVec4",
      "identifier": "project_onto_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns the vector projection of `self` onto `rhs`.\n `rhs` must be normalized.\n # Panics\n Will panic if `rhs` is not normalized when `glam_assert` is enabled."
    },
    "glam::DVec4::recip": {
      "namespace": "glam::DVec4",
      "identifier": "recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector containing the reciprocal `1.0/n` of each element of `self`."
    },
    "glam::DVec4::reflect": {
      "namespace": "glam::DVec4",
      "identifier": "reflect",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "normal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns the reflection vector for a given incident vector `self` and surface normal\n `normal`.\n `normal` must be normalized.\n # Panics\n Will panic if `normal` is not normalized when `glam_assert` is enabled."
    },
    "glam::DVec4::refract": {
      "namespace": "glam::DVec4",
      "identifier": "refract",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "normal"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "eta"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns the refraction direction for a given incident vector `self`, surface normal\n `normal` and ratio of indices of refraction, `eta`. When total internal reflection occurs,\n a zero vector will be returned.\n `self` and `normal` must be normalized.\n # Panics\n Will panic if `self` or `normal` is not normalized when `glam_assert` is enabled."
    },
    "glam::DVec4::reject_from": {
      "namespace": "glam::DVec4",
      "identifier": "reject_from",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns the vector rejection of `self` from `rhs`.\n The vector rejection is the vector perpendicular to the projection of `self` onto\n `rhs`, in rhs words the result of `self - self.project_onto(rhs)`.\n `rhs` must be of non-zero length.\n # Panics\n Will panic if `rhs` has a length of zero when `glam_assert` is enabled."
    },
    "glam::DVec4::reject_from_normalized": {
      "namespace": "glam::DVec4",
      "identifier": "reject_from_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns the vector rejection of `self` from `rhs`.\n The vector rejection is the vector perpendicular to the projection of `self` onto\n `rhs`, in rhs words the result of `self - self.project_onto(rhs)`.\n `rhs` must be normalized.\n # Panics\n Will panic if `rhs` is not normalized when `glam_assert` is enabled."
    },
    "glam::DVec4::rem": {
      "namespace": "glam::DVec4",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::rem-1": {
      "namespace": "glam::DVec4",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          }
        },
        {
          "kind": {
            "val": "glam::DVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::rem-2": {
      "namespace": "glam::DVec4",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::rem_euclid": {
      "namespace": "glam::DVec4",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n [Euclidean division]: f64::rem_euclid"
    },
    "glam::DVec4::round": {
      "namespace": "glam::DVec4",
      "identifier": "round",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector containing the nearest integer to a number for each element of `self`.\n Round half-way cases away from 0.0."
    },
    "glam::DVec4::select": {
      "namespace": "glam::DVec4",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec4"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::DVec4::signum": {
      "namespace": "glam::DVec4",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n - `1.0` if the number is positive, `+0.0` or `INFINITY`\n - `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`\n - `NAN` if the number is `NAN`"
    },
    "glam::DVec4::splat": {
      "namespace": "glam::DVec4",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::DVec4::sub": {
      "namespace": "glam::DVec4",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::sub-1": {
      "namespace": "glam::DVec4",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          }
        },
        {
          "kind": {
            "val": "glam::DVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::sub-2": {
      "namespace": "glam::DVec4",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::to_array": {
      "namespace": "glam::DVec4",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f64"
            },
            4
          ]
        }
      },
      "documentation": " `[x, y, z, w]`"
    },
    "glam::DVec4::trunc": {
      "namespace": "glam::DVec4",
      "identifier": "trunc",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector containing the integer part each element of `self`. This means numbers are\n always truncated towards zero."
    },
    "glam::DVec4::truncate": {
      "namespace": "glam::DVec4",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Creates a 3D vector from the `x`, `y` and `z` elements of `self`, discarding `w`.\n Truncation to [`DVec3`] may also be performed by using [`self.xyz()`][crate::swizzles::Vec4Swizzles::xyz()]."
    },
    "glam::DVec4::with_w": {
      "namespace": "glam::DVec4",
      "identifier": "with_w",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `w`."
    },
    "glam::DVec4::with_x": {
      "namespace": "glam::DVec4",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `x`."
    },
    "glam::DVec4::with_y": {
      "namespace": "glam::DVec4",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `y`."
    },
    "glam::DVec4::with_z": {
      "namespace": "glam::DVec4",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `z`."
    },
    "glam::EulerRot::assert_receiver_is_total_eq": {
      "namespace": "glam::EulerRot",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::EulerRot"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::EulerRot::clone": {
      "namespace": "glam::EulerRot",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::EulerRot"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::EulerRot"
        }
      }
    },
    "glam::EulerRot::eq": {
      "namespace": "glam::EulerRot",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::EulerRot"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::EulerRot"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::I16Vec2::abs": {
      "namespace": "glam::I16Vec2",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::I16Vec2::add": {
      "namespace": "glam::I16Vec2",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      }
    },
    "glam::I16Vec2::add-1": {
      "namespace": "glam::I16Vec2",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      }
    },
    "glam::I16Vec2::add-2": {
      "namespace": "glam::I16Vec2",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          }
        },
        {
          "kind": {
            "primitive": "i16"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      }
    },
    "glam::I16Vec2::as_dvec2": {
      "namespace": "glam::I16Vec2",
      "identifier": "as_dvec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::I16Vec2::as_i64vec2": {
      "namespace": "glam::I16Vec2",
      "identifier": "as_i64vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::I16Vec2::as_i8vec2": {
      "namespace": "glam::I16Vec2",
      "identifier": "as_i8vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i8`."
    },
    "glam::I16Vec2::as_ivec2": {
      "namespace": "glam::I16Vec2",
      "identifier": "as_ivec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::I16Vec2::as_u16vec2": {
      "namespace": "glam::I16Vec2",
      "identifier": "as_u16vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u16`."
    },
    "glam::I16Vec2::as_u64vec2": {
      "namespace": "glam::I16Vec2",
      "identifier": "as_u64vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::I16Vec2::as_u8vec2": {
      "namespace": "glam::I16Vec2",
      "identifier": "as_u8vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u8`."
    },
    "glam::I16Vec2::as_uvec2": {
      "namespace": "glam::I16Vec2",
      "identifier": "as_uvec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::I16Vec2::as_vec2": {
      "namespace": "glam::I16Vec2",
      "identifier": "as_vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::I16Vec2::assert_receiver_is_total_eq": {
      "namespace": "glam::I16Vec2",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::I16Vec2::clamp": {
      "namespace": "glam::I16Vec2",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`i16::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::I16Vec2::clone": {
      "namespace": "glam::I16Vec2",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      }
    },
    "glam::I16Vec2::cmpeq": {
      "namespace": "glam::I16Vec2",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::I16Vec2::cmpge": {
      "namespace": "glam::I16Vec2",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::I16Vec2::cmpgt": {
      "namespace": "glam::I16Vec2",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::I16Vec2::cmple": {
      "namespace": "glam::I16Vec2",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::I16Vec2::cmplt": {
      "namespace": "glam::I16Vec2",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::I16Vec2::cmpne": {
      "namespace": "glam::I16Vec2",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::I16Vec2::distance_squared": {
      "namespace": "glam::I16Vec2",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i16"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::I16Vec2::div": {
      "namespace": "glam::I16Vec2",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      }
    },
    "glam::I16Vec2::div-1": {
      "namespace": "glam::I16Vec2",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      }
    },
    "glam::I16Vec2::div-2": {
      "namespace": "glam::I16Vec2",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          }
        },
        {
          "kind": {
            "primitive": "i16"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      }
    },
    "glam::I16Vec2::div_euclid": {
      "namespace": "glam::I16Vec2",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow."
    },
    "glam::I16Vec2::dot": {
      "namespace": "glam::I16Vec2",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i16"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::I16Vec2::dot_into_vec": {
      "namespace": "glam::I16Vec2",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::I16Vec2::element_product": {
      "namespace": "glam::I16Vec2",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i16"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::I16Vec2::element_sum": {
      "namespace": "glam::I16Vec2",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i16"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::I16Vec2::eq": {
      "namespace": "glam::I16Vec2",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I16Vec2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::I16Vec2::extend": {
      "namespace": "glam::I16Vec2",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i16"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` and the given `z` value."
    },
    "glam::I16Vec2::from_array": {
      "namespace": "glam::I16Vec2",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "i16"
              },
              2
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::I16Vec2::is_negative_bitmask": {
      "namespace": "glam::I16Vec2",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 2 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::I16Vec2::length_squared": {
      "namespace": "glam::I16Vec2",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i16"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::I16Vec2::max": {
      "namespace": "glam::I16Vec2",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::I16Vec2::max_element": {
      "namespace": "glam::I16Vec2",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i16"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::I16Vec2::min": {
      "namespace": "glam::I16Vec2",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::I16Vec2::min_element": {
      "namespace": "glam::I16Vec2",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i16"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::I16Vec2::mul": {
      "namespace": "glam::I16Vec2",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      }
    },
    "glam::I16Vec2::mul-1": {
      "namespace": "glam::I16Vec2",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      }
    },
    "glam::I16Vec2::mul-2": {
      "namespace": "glam::I16Vec2",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          }
        },
        {
          "kind": {
            "primitive": "i16"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      }
    },
    "glam::I16Vec2::neg": {
      "namespace": "glam::I16Vec2",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      }
    },
    "glam::I16Vec2::new": {
      "namespace": "glam::I16Vec2",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "i16"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "i16"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::I16Vec2::perp": {
      "namespace": "glam::I16Vec2",
      "identifier": "perp",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Returns a vector that is equal to `self` rotated by 90 degrees."
    },
    "glam::I16Vec2::perp_dot": {
      "namespace": "glam::I16Vec2",
      "identifier": "perp_dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i16"
        }
      },
      "documentation": " The perpendicular dot product of `self` and `rhs`.\n Also known as the wedge product, 2D cross product, and determinant."
    },
    "glam::I16Vec2::rem": {
      "namespace": "glam::I16Vec2",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      }
    },
    "glam::I16Vec2::rem-1": {
      "namespace": "glam::I16Vec2",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      }
    },
    "glam::I16Vec2::rem-2": {
      "namespace": "glam::I16Vec2",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          }
        },
        {
          "kind": {
            "primitive": "i16"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      }
    },
    "glam::I16Vec2::rem_euclid": {
      "namespace": "glam::I16Vec2",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow.\n [Euclidean division]: i16::rem_euclid"
    },
    "glam::I16Vec2::rotate": {
      "namespace": "glam::I16Vec2",
      "identifier": "rotate",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Returns `rhs` rotated by the angle of `self`. If `self` is normalized,\n then this just rotation. This is what you usually want. Otherwise,\n it will be like a rotation with a multiplication by `self`'s length."
    },
    "glam::I16Vec2::saturating_add": {
      "namespace": "glam::I16Vec2",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::I16Vec2::saturating_add_unsigned": {
      "namespace": "glam::I16Vec2",
      "identifier": "saturating_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " In other words this computes `[self.x.saturating_add_unsigned(rhs.x), self.y.saturating_add_unsigned(rhs.y), ..]`."
    },
    "glam::I16Vec2::saturating_div": {
      "namespace": "glam::I16Vec2",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::I16Vec2::saturating_mul": {
      "namespace": "glam::I16Vec2",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::I16Vec2::saturating_sub": {
      "namespace": "glam::I16Vec2",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::I16Vec2::saturating_sub_unsigned": {
      "namespace": "glam::I16Vec2",
      "identifier": "saturating_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.saturating_sub_unsigned(rhs.x), self.y.saturating_sub_unsigned(rhs.y), ..]`."
    },
    "glam::I16Vec2::select": {
      "namespace": "glam::I16Vec2",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec2"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::I16Vec2::signum": {
      "namespace": "glam::I16Vec2",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n  - `0` if the number is zero\n  - `1` if the number is positive\n  - `-1` if the number is negative"
    },
    "glam::I16Vec2::splat": {
      "namespace": "glam::I16Vec2",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "i16"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::I16Vec2::sub": {
      "namespace": "glam::I16Vec2",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      }
    },
    "glam::I16Vec2::sub-1": {
      "namespace": "glam::I16Vec2",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      }
    },
    "glam::I16Vec2::sub-2": {
      "namespace": "glam::I16Vec2",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          }
        },
        {
          "kind": {
            "primitive": "i16"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      }
    },
    "glam::I16Vec2::to_array": {
      "namespace": "glam::I16Vec2",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "i16"
            },
            2
          ]
        }
      },
      "documentation": " `[x, y]`"
    },
    "glam::I16Vec2::with_x": {
      "namespace": "glam::I16Vec2",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i16"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `x`."
    },
    "glam::I16Vec2::with_y": {
      "namespace": "glam::I16Vec2",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i16"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `y`."
    },
    "glam::I16Vec2::wrapping_add": {
      "namespace": "glam::I16Vec2",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::I16Vec2::wrapping_add_unsigned": {
      "namespace": "glam::I16Vec2",
      "identifier": "wrapping_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_add_unsigned(rhs.x), self.y.wrapping_add_unsigned(rhs.y), ..]`."
    },
    "glam::I16Vec2::wrapping_div": {
      "namespace": "glam::I16Vec2",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::I16Vec2::wrapping_mul": {
      "namespace": "glam::I16Vec2",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::I16Vec2::wrapping_sub": {
      "namespace": "glam::I16Vec2",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::I16Vec2::wrapping_sub_unsigned": {
      "namespace": "glam::I16Vec2",
      "identifier": "wrapping_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_sub_unsigned(rhs.x), self.y.wrapping_sub_unsigned(rhs.y), ..]`."
    },
    "glam::I16Vec3::abs": {
      "namespace": "glam::I16Vec3",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::I16Vec3::add": {
      "namespace": "glam::I16Vec3",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      }
    },
    "glam::I16Vec3::add-1": {
      "namespace": "glam::I16Vec3",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      }
    },
    "glam::I16Vec3::add-2": {
      "namespace": "glam::I16Vec3",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          }
        },
        {
          "kind": {
            "primitive": "i16"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      }
    },
    "glam::I16Vec3::as_dvec3": {
      "namespace": "glam::I16Vec3",
      "identifier": "as_dvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::I16Vec3::as_i64vec3": {
      "namespace": "glam::I16Vec3",
      "identifier": "as_i64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::I16Vec3::as_i8vec3": {
      "namespace": "glam::I16Vec3",
      "identifier": "as_i8vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i8`."
    },
    "glam::I16Vec3::as_ivec3": {
      "namespace": "glam::I16Vec3",
      "identifier": "as_ivec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::I16Vec3::as_u16vec3": {
      "namespace": "glam::I16Vec3",
      "identifier": "as_u16vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u16`."
    },
    "glam::I16Vec3::as_u64vec3": {
      "namespace": "glam::I16Vec3",
      "identifier": "as_u64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::I16Vec3::as_u8vec3": {
      "namespace": "glam::I16Vec3",
      "identifier": "as_u8vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u8`."
    },
    "glam::I16Vec3::as_uvec3": {
      "namespace": "glam::I16Vec3",
      "identifier": "as_uvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::I16Vec3::as_vec3": {
      "namespace": "glam::I16Vec3",
      "identifier": "as_vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::I16Vec3::as_vec3a": {
      "namespace": "glam::I16Vec3",
      "identifier": "as_vec3a",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::I16Vec3::assert_receiver_is_total_eq": {
      "namespace": "glam::I16Vec3",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::I16Vec3::clamp": {
      "namespace": "glam::I16Vec3",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`i16::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::I16Vec3::clone": {
      "namespace": "glam::I16Vec3",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      }
    },
    "glam::I16Vec3::cmpeq": {
      "namespace": "glam::I16Vec3",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::I16Vec3::cmpge": {
      "namespace": "glam::I16Vec3",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::I16Vec3::cmpgt": {
      "namespace": "glam::I16Vec3",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::I16Vec3::cmple": {
      "namespace": "glam::I16Vec3",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::I16Vec3::cmplt": {
      "namespace": "glam::I16Vec3",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::I16Vec3::cmpne": {
      "namespace": "glam::I16Vec3",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::I16Vec3::cross": {
      "namespace": "glam::I16Vec3",
      "identifier": "cross",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Computes the cross product of `self` and `rhs`."
    },
    "glam::I16Vec3::distance_squared": {
      "namespace": "glam::I16Vec3",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i16"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::I16Vec3::div": {
      "namespace": "glam::I16Vec3",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      }
    },
    "glam::I16Vec3::div-1": {
      "namespace": "glam::I16Vec3",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      }
    },
    "glam::I16Vec3::div-2": {
      "namespace": "glam::I16Vec3",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          }
        },
        {
          "kind": {
            "primitive": "i16"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      }
    },
    "glam::I16Vec3::div_euclid": {
      "namespace": "glam::I16Vec3",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow."
    },
    "glam::I16Vec3::dot": {
      "namespace": "glam::I16Vec3",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i16"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::I16Vec3::dot_into_vec": {
      "namespace": "glam::I16Vec3",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::I16Vec3::element_product": {
      "namespace": "glam::I16Vec3",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i16"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::I16Vec3::element_sum": {
      "namespace": "glam::I16Vec3",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i16"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::I16Vec3::eq": {
      "namespace": "glam::I16Vec3",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I16Vec3"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::I16Vec3::extend": {
      "namespace": "glam::I16Vec3",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i16"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` and the given `w` value."
    },
    "glam::I16Vec3::from_array": {
      "namespace": "glam::I16Vec3",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "i16"
              },
              3
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::I16Vec3::is_negative_bitmask": {
      "namespace": "glam::I16Vec3",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 3 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::I16Vec3::length_squared": {
      "namespace": "glam::I16Vec3",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i16"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::I16Vec3::max": {
      "namespace": "glam::I16Vec3",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::I16Vec3::max_element": {
      "namespace": "glam::I16Vec3",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i16"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::I16Vec3::min": {
      "namespace": "glam::I16Vec3",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::I16Vec3::min_element": {
      "namespace": "glam::I16Vec3",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i16"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::I16Vec3::mul": {
      "namespace": "glam::I16Vec3",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      }
    },
    "glam::I16Vec3::mul-1": {
      "namespace": "glam::I16Vec3",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      }
    },
    "glam::I16Vec3::mul-2": {
      "namespace": "glam::I16Vec3",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          }
        },
        {
          "kind": {
            "primitive": "i16"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      }
    },
    "glam::I16Vec3::neg": {
      "namespace": "glam::I16Vec3",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      }
    },
    "glam::I16Vec3::new": {
      "namespace": "glam::I16Vec3",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "i16"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "i16"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "i16"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::I16Vec3::rem": {
      "namespace": "glam::I16Vec3",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      }
    },
    "glam::I16Vec3::rem-1": {
      "namespace": "glam::I16Vec3",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      }
    },
    "glam::I16Vec3::rem-2": {
      "namespace": "glam::I16Vec3",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          }
        },
        {
          "kind": {
            "primitive": "i16"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      }
    },
    "glam::I16Vec3::rem_euclid": {
      "namespace": "glam::I16Vec3",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow.\n [Euclidean division]: i16::rem_euclid"
    },
    "glam::I16Vec3::saturating_add": {
      "namespace": "glam::I16Vec3",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::I16Vec3::saturating_add_unsigned": {
      "namespace": "glam::I16Vec3",
      "identifier": "saturating_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " In other words this computes `[self.x.saturating_add_unsigned(rhs.x), self.y.saturating_add_unsigned(rhs.y), ..]`."
    },
    "glam::I16Vec3::saturating_div": {
      "namespace": "glam::I16Vec3",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::I16Vec3::saturating_mul": {
      "namespace": "glam::I16Vec3",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::I16Vec3::saturating_sub": {
      "namespace": "glam::I16Vec3",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::I16Vec3::saturating_sub_unsigned": {
      "namespace": "glam::I16Vec3",
      "identifier": "saturating_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.saturating_sub_unsigned(rhs.x), self.y.saturating_sub_unsigned(rhs.y), ..]`."
    },
    "glam::I16Vec3::select": {
      "namespace": "glam::I16Vec3",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec3"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::I16Vec3::signum": {
      "namespace": "glam::I16Vec3",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n  - `0` if the number is zero\n  - `1` if the number is positive\n  - `-1` if the number is negative"
    },
    "glam::I16Vec3::splat": {
      "namespace": "glam::I16Vec3",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "i16"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::I16Vec3::sub": {
      "namespace": "glam::I16Vec3",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      }
    },
    "glam::I16Vec3::sub-1": {
      "namespace": "glam::I16Vec3",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      }
    },
    "glam::I16Vec3::sub-2": {
      "namespace": "glam::I16Vec3",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          }
        },
        {
          "kind": {
            "primitive": "i16"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      }
    },
    "glam::I16Vec3::to_array": {
      "namespace": "glam::I16Vec3",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "i16"
            },
            3
          ]
        }
      },
      "documentation": " `[x, y, z]`"
    },
    "glam::I16Vec3::truncate": {
      "namespace": "glam::I16Vec3",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Creates a 2D vector from the `x` and `y` elements of `self`, discarding `z`.\n Truncation may also be performed by using [`self.xy()`][crate::swizzles::Vec3Swizzles::xy()]."
    },
    "glam::I16Vec3::with_x": {
      "namespace": "glam::I16Vec3",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i16"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `x`."
    },
    "glam::I16Vec3::with_y": {
      "namespace": "glam::I16Vec3",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i16"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `y`."
    },
    "glam::I16Vec3::with_z": {
      "namespace": "glam::I16Vec3",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i16"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `z`."
    },
    "glam::I16Vec3::wrapping_add": {
      "namespace": "glam::I16Vec3",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::I16Vec3::wrapping_add_unsigned": {
      "namespace": "glam::I16Vec3",
      "identifier": "wrapping_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_add_unsigned(rhs.x), self.y.wrapping_add_unsigned(rhs.y), ..]`."
    },
    "glam::I16Vec3::wrapping_div": {
      "namespace": "glam::I16Vec3",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::I16Vec3::wrapping_mul": {
      "namespace": "glam::I16Vec3",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::I16Vec3::wrapping_sub": {
      "namespace": "glam::I16Vec3",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::I16Vec3::wrapping_sub_unsigned": {
      "namespace": "glam::I16Vec3",
      "identifier": "wrapping_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_sub_unsigned(rhs.x), self.y.wrapping_sub_unsigned(rhs.y), ..]`."
    },
    "glam::I16Vec4::abs": {
      "namespace": "glam::I16Vec4",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::I16Vec4::add": {
      "namespace": "glam::I16Vec4",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      }
    },
    "glam::I16Vec4::add-1": {
      "namespace": "glam::I16Vec4",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      }
    },
    "glam::I16Vec4::add-2": {
      "namespace": "glam::I16Vec4",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          }
        },
        {
          "kind": {
            "primitive": "i16"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      }
    },
    "glam::I16Vec4::as_dvec4": {
      "namespace": "glam::I16Vec4",
      "identifier": "as_dvec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::I16Vec4::as_i64vec4": {
      "namespace": "glam::I16Vec4",
      "identifier": "as_i64vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::I16Vec4::as_i8vec4": {
      "namespace": "glam::I16Vec4",
      "identifier": "as_i8vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i8`."
    },
    "glam::I16Vec4::as_ivec4": {
      "namespace": "glam::I16Vec4",
      "identifier": "as_ivec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::I16Vec4::as_u16vec4": {
      "namespace": "glam::I16Vec4",
      "identifier": "as_u16vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u16`."
    },
    "glam::I16Vec4::as_u64vec4": {
      "namespace": "glam::I16Vec4",
      "identifier": "as_u64vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::I16Vec4::as_u8vec4": {
      "namespace": "glam::I16Vec4",
      "identifier": "as_u8vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u8`."
    },
    "glam::I16Vec4::as_uvec4": {
      "namespace": "glam::I16Vec4",
      "identifier": "as_uvec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::I16Vec4::as_vec4": {
      "namespace": "glam::I16Vec4",
      "identifier": "as_vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::I16Vec4::assert_receiver_is_total_eq": {
      "namespace": "glam::I16Vec4",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::I16Vec4::clamp": {
      "namespace": "glam::I16Vec4",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`i16::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::I16Vec4::clone": {
      "namespace": "glam::I16Vec4",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      }
    },
    "glam::I16Vec4::cmpeq": {
      "namespace": "glam::I16Vec4",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::I16Vec4::cmpge": {
      "namespace": "glam::I16Vec4",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::I16Vec4::cmpgt": {
      "namespace": "glam::I16Vec4",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::I16Vec4::cmple": {
      "namespace": "glam::I16Vec4",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::I16Vec4::cmplt": {
      "namespace": "glam::I16Vec4",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::I16Vec4::cmpne": {
      "namespace": "glam::I16Vec4",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::I16Vec4::distance_squared": {
      "namespace": "glam::I16Vec4",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i16"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::I16Vec4::div": {
      "namespace": "glam::I16Vec4",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      }
    },
    "glam::I16Vec4::div-1": {
      "namespace": "glam::I16Vec4",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      }
    },
    "glam::I16Vec4::div-2": {
      "namespace": "glam::I16Vec4",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          }
        },
        {
          "kind": {
            "primitive": "i16"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      }
    },
    "glam::I16Vec4::div_euclid": {
      "namespace": "glam::I16Vec4",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow."
    },
    "glam::I16Vec4::dot": {
      "namespace": "glam::I16Vec4",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i16"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::I16Vec4::dot_into_vec": {
      "namespace": "glam::I16Vec4",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::I16Vec4::element_product": {
      "namespace": "glam::I16Vec4",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i16"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::I16Vec4::element_sum": {
      "namespace": "glam::I16Vec4",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i16"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::I16Vec4::eq": {
      "namespace": "glam::I16Vec4",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I16Vec4"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::I16Vec4::from_array": {
      "namespace": "glam::I16Vec4",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "i16"
              },
              4
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::I16Vec4::is_negative_bitmask": {
      "namespace": "glam::I16Vec4",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 4 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::I16Vec4::length_squared": {
      "namespace": "glam::I16Vec4",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i16"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::I16Vec4::max": {
      "namespace": "glam::I16Vec4",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::I16Vec4::max_element": {
      "namespace": "glam::I16Vec4",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i16"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::I16Vec4::min": {
      "namespace": "glam::I16Vec4",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::I16Vec4::min_element": {
      "namespace": "glam::I16Vec4",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i16"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::I16Vec4::mul": {
      "namespace": "glam::I16Vec4",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      }
    },
    "glam::I16Vec4::mul-1": {
      "namespace": "glam::I16Vec4",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      }
    },
    "glam::I16Vec4::mul-2": {
      "namespace": "glam::I16Vec4",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          }
        },
        {
          "kind": {
            "primitive": "i16"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      }
    },
    "glam::I16Vec4::neg": {
      "namespace": "glam::I16Vec4",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      }
    },
    "glam::I16Vec4::new": {
      "namespace": "glam::I16Vec4",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "i16"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "i16"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "i16"
          },
          "name": "z"
        },
        {
          "kind": {
            "primitive": "i16"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::I16Vec4::rem": {
      "namespace": "glam::I16Vec4",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      }
    },
    "glam::I16Vec4::rem-1": {
      "namespace": "glam::I16Vec4",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      }
    },
    "glam::I16Vec4::rem-2": {
      "namespace": "glam::I16Vec4",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          }
        },
        {
          "kind": {
            "primitive": "i16"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      }
    },
    "glam::I16Vec4::rem_euclid": {
      "namespace": "glam::I16Vec4",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow.\n [Euclidean division]: i16::rem_euclid"
    },
    "glam::I16Vec4::saturating_add": {
      "namespace": "glam::I16Vec4",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::I16Vec4::saturating_add_unsigned": {
      "namespace": "glam::I16Vec4",
      "identifier": "saturating_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " In other words this computes `[self.x.saturating_add_unsigned(rhs.x), self.y.saturating_add_unsigned(rhs.y), ..]`."
    },
    "glam::I16Vec4::saturating_div": {
      "namespace": "glam::I16Vec4",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::I16Vec4::saturating_mul": {
      "namespace": "glam::I16Vec4",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::I16Vec4::saturating_sub": {
      "namespace": "glam::I16Vec4",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::I16Vec4::saturating_sub_unsigned": {
      "namespace": "glam::I16Vec4",
      "identifier": "saturating_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.saturating_sub_unsigned(rhs.x), self.y.saturating_sub_unsigned(rhs.y), ..]`."
    },
    "glam::I16Vec4::select": {
      "namespace": "glam::I16Vec4",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec4"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::I16Vec4::signum": {
      "namespace": "glam::I16Vec4",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n  - `0` if the number is zero\n  - `1` if the number is positive\n  - `-1` if the number is negative"
    },
    "glam::I16Vec4::splat": {
      "namespace": "glam::I16Vec4",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "i16"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::I16Vec4::sub": {
      "namespace": "glam::I16Vec4",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      }
    },
    "glam::I16Vec4::sub-1": {
      "namespace": "glam::I16Vec4",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      }
    },
    "glam::I16Vec4::sub-2": {
      "namespace": "glam::I16Vec4",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          }
        },
        {
          "kind": {
            "primitive": "i16"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      }
    },
    "glam::I16Vec4::to_array": {
      "namespace": "glam::I16Vec4",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "i16"
            },
            4
          ]
        }
      },
      "documentation": " `[x, y, z, w]`"
    },
    "glam::I16Vec4::truncate": {
      "namespace": "glam::I16Vec4",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Creates a 3D vector from the `x`, `y` and `z` elements of `self`, discarding `w`.\n Truncation to [`I16Vec3`] may also be performed by using [`self.xyz()`][crate::swizzles::Vec4Swizzles::xyz()]."
    },
    "glam::I16Vec4::with_w": {
      "namespace": "glam::I16Vec4",
      "identifier": "with_w",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i16"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `w`."
    },
    "glam::I16Vec4::with_x": {
      "namespace": "glam::I16Vec4",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i16"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `x`."
    },
    "glam::I16Vec4::with_y": {
      "namespace": "glam::I16Vec4",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i16"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `y`."
    },
    "glam::I16Vec4::with_z": {
      "namespace": "glam::I16Vec4",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i16"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `z`."
    },
    "glam::I16Vec4::wrapping_add": {
      "namespace": "glam::I16Vec4",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::I16Vec4::wrapping_add_unsigned": {
      "namespace": "glam::I16Vec4",
      "identifier": "wrapping_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_add_unsigned(rhs.x), self.y.wrapping_add_unsigned(rhs.y), ..]`."
    },
    "glam::I16Vec4::wrapping_div": {
      "namespace": "glam::I16Vec4",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::I16Vec4::wrapping_mul": {
      "namespace": "glam::I16Vec4",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::I16Vec4::wrapping_sub": {
      "namespace": "glam::I16Vec4",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::I16Vec4::wrapping_sub_unsigned": {
      "namespace": "glam::I16Vec4",
      "identifier": "wrapping_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_sub_unsigned(rhs.x), self.y.wrapping_sub_unsigned(rhs.y), ..]`."
    },
    "glam::I64Vec2::abs": {
      "namespace": "glam::I64Vec2",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::I64Vec2::add": {
      "namespace": "glam::I64Vec2",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::add-1": {
      "namespace": "glam::I64Vec2",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::add-2": {
      "namespace": "glam::I64Vec2",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          }
        },
        {
          "kind": {
            "primitive": "i64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::as_dvec2": {
      "namespace": "glam::I64Vec2",
      "identifier": "as_dvec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::I64Vec2::as_i16vec2": {
      "namespace": "glam::I64Vec2",
      "identifier": "as_i16vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i16`."
    },
    "glam::I64Vec2::as_i8vec2": {
      "namespace": "glam::I64Vec2",
      "identifier": "as_i8vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i8`."
    },
    "glam::I64Vec2::as_ivec2": {
      "namespace": "glam::I64Vec2",
      "identifier": "as_ivec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::I64Vec2::as_u16vec2": {
      "namespace": "glam::I64Vec2",
      "identifier": "as_u16vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u16`."
    },
    "glam::I64Vec2::as_u64vec2": {
      "namespace": "glam::I64Vec2",
      "identifier": "as_u64vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::I64Vec2::as_u8vec2": {
      "namespace": "glam::I64Vec2",
      "identifier": "as_u8vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u8`."
    },
    "glam::I64Vec2::as_uvec2": {
      "namespace": "glam::I64Vec2",
      "identifier": "as_uvec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::I64Vec2::as_vec2": {
      "namespace": "glam::I64Vec2",
      "identifier": "as_vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::I64Vec2::assert_receiver_is_total_eq": {
      "namespace": "glam::I64Vec2",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::I64Vec2::clamp": {
      "namespace": "glam::I64Vec2",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`i64::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::I64Vec2::clone": {
      "namespace": "glam::I64Vec2",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::cmpeq": {
      "namespace": "glam::I64Vec2",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec2::cmpge": {
      "namespace": "glam::I64Vec2",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec2::cmpgt": {
      "namespace": "glam::I64Vec2",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec2::cmple": {
      "namespace": "glam::I64Vec2",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec2::cmplt": {
      "namespace": "glam::I64Vec2",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec2::cmpne": {
      "namespace": "glam::I64Vec2",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec2::distance_squared": {
      "namespace": "glam::I64Vec2",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::I64Vec2::div": {
      "namespace": "glam::I64Vec2",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::div-1": {
      "namespace": "glam::I64Vec2",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::div-2": {
      "namespace": "glam::I64Vec2",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          }
        },
        {
          "kind": {
            "primitive": "i64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::div_euclid": {
      "namespace": "glam::I64Vec2",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow."
    },
    "glam::I64Vec2::dot": {
      "namespace": "glam::I64Vec2",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::I64Vec2::dot_into_vec": {
      "namespace": "glam::I64Vec2",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::I64Vec2::element_product": {
      "namespace": "glam::I64Vec2",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::I64Vec2::element_sum": {
      "namespace": "glam::I64Vec2",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::I64Vec2::eq": {
      "namespace": "glam::I64Vec2",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::I64Vec2::extend": {
      "namespace": "glam::I64Vec2",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` and the given `z` value."
    },
    "glam::I64Vec2::from_array": {
      "namespace": "glam::I64Vec2",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "i64"
              },
              2
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::I64Vec2::is_negative_bitmask": {
      "namespace": "glam::I64Vec2",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 2 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::I64Vec2::length_squared": {
      "namespace": "glam::I64Vec2",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::I64Vec2::max": {
      "namespace": "glam::I64Vec2",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::I64Vec2::max_element": {
      "namespace": "glam::I64Vec2",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::I64Vec2::min": {
      "namespace": "glam::I64Vec2",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::I64Vec2::min_element": {
      "namespace": "glam::I64Vec2",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::I64Vec2::mul": {
      "namespace": "glam::I64Vec2",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::mul-1": {
      "namespace": "glam::I64Vec2",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::mul-2": {
      "namespace": "glam::I64Vec2",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          }
        },
        {
          "kind": {
            "primitive": "i64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::neg": {
      "namespace": "glam::I64Vec2",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::new": {
      "namespace": "glam::I64Vec2",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::I64Vec2::perp": {
      "namespace": "glam::I64Vec2",
      "identifier": "perp",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector that is equal to `self` rotated by 90 degrees."
    },
    "glam::I64Vec2::perp_dot": {
      "namespace": "glam::I64Vec2",
      "identifier": "perp_dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " The perpendicular dot product of `self` and `rhs`.\n Also known as the wedge product, 2D cross product, and determinant."
    },
    "glam::I64Vec2::rem": {
      "namespace": "glam::I64Vec2",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::rem-1": {
      "namespace": "glam::I64Vec2",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::rem-2": {
      "namespace": "glam::I64Vec2",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          }
        },
        {
          "kind": {
            "primitive": "i64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::rem_euclid": {
      "namespace": "glam::I64Vec2",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow.\n [Euclidean division]: i64::rem_euclid"
    },
    "glam::I64Vec2::rotate": {
      "namespace": "glam::I64Vec2",
      "identifier": "rotate",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns `rhs` rotated by the angle of `self`. If `self` is normalized,\n then this just rotation. This is what you usually want. Otherwise,\n it will be like a rotation with a multiplication by `self`'s length."
    },
    "glam::I64Vec2::saturating_add": {
      "namespace": "glam::I64Vec2",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::I64Vec2::saturating_add_unsigned": {
      "namespace": "glam::I64Vec2",
      "identifier": "saturating_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " In other words this computes `[self.x.saturating_add_unsigned(rhs.x), self.y.saturating_add_unsigned(rhs.y), ..]`."
    },
    "glam::I64Vec2::saturating_div": {
      "namespace": "glam::I64Vec2",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::I64Vec2::saturating_mul": {
      "namespace": "glam::I64Vec2",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::I64Vec2::saturating_sub": {
      "namespace": "glam::I64Vec2",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::I64Vec2::saturating_sub_unsigned": {
      "namespace": "glam::I64Vec2",
      "identifier": "saturating_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.saturating_sub_unsigned(rhs.x), self.y.saturating_sub_unsigned(rhs.y), ..]`."
    },
    "glam::I64Vec2::select": {
      "namespace": "glam::I64Vec2",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec2"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::I64Vec2::signum": {
      "namespace": "glam::I64Vec2",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n  - `0` if the number is zero\n  - `1` if the number is positive\n  - `-1` if the number is negative"
    },
    "glam::I64Vec2::splat": {
      "namespace": "glam::I64Vec2",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::I64Vec2::sub": {
      "namespace": "glam::I64Vec2",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::sub-1": {
      "namespace": "glam::I64Vec2",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::sub-2": {
      "namespace": "glam::I64Vec2",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          }
        },
        {
          "kind": {
            "primitive": "i64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::to_array": {
      "namespace": "glam::I64Vec2",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "i64"
            },
            2
          ]
        }
      },
      "documentation": " `[x, y]`"
    },
    "glam::I64Vec2::with_x": {
      "namespace": "glam::I64Vec2",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `x`."
    },
    "glam::I64Vec2::with_y": {
      "namespace": "glam::I64Vec2",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `y`."
    },
    "glam::I64Vec2::wrapping_add": {
      "namespace": "glam::I64Vec2",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::I64Vec2::wrapping_add_unsigned": {
      "namespace": "glam::I64Vec2",
      "identifier": "wrapping_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_add_unsigned(rhs.x), self.y.wrapping_add_unsigned(rhs.y), ..]`."
    },
    "glam::I64Vec2::wrapping_div": {
      "namespace": "glam::I64Vec2",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::I64Vec2::wrapping_mul": {
      "namespace": "glam::I64Vec2",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::I64Vec2::wrapping_sub": {
      "namespace": "glam::I64Vec2",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::I64Vec2::wrapping_sub_unsigned": {
      "namespace": "glam::I64Vec2",
      "identifier": "wrapping_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_sub_unsigned(rhs.x), self.y.wrapping_sub_unsigned(rhs.y), ..]`."
    },
    "glam::I64Vec3::abs": {
      "namespace": "glam::I64Vec3",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::I64Vec3::add": {
      "namespace": "glam::I64Vec3",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::add-1": {
      "namespace": "glam::I64Vec3",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::add-2": {
      "namespace": "glam::I64Vec3",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          }
        },
        {
          "kind": {
            "primitive": "i64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::as_dvec3": {
      "namespace": "glam::I64Vec3",
      "identifier": "as_dvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::I64Vec3::as_i16vec3": {
      "namespace": "glam::I64Vec3",
      "identifier": "as_i16vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i16`."
    },
    "glam::I64Vec3::as_i8vec3": {
      "namespace": "glam::I64Vec3",
      "identifier": "as_i8vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i8`."
    },
    "glam::I64Vec3::as_ivec3": {
      "namespace": "glam::I64Vec3",
      "identifier": "as_ivec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::I64Vec3::as_u16vec3": {
      "namespace": "glam::I64Vec3",
      "identifier": "as_u16vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u16`."
    },
    "glam::I64Vec3::as_u64vec3": {
      "namespace": "glam::I64Vec3",
      "identifier": "as_u64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::I64Vec3::as_u8vec3": {
      "namespace": "glam::I64Vec3",
      "identifier": "as_u8vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u8`."
    },
    "glam::I64Vec3::as_uvec3": {
      "namespace": "glam::I64Vec3",
      "identifier": "as_uvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::I64Vec3::as_vec3": {
      "namespace": "glam::I64Vec3",
      "identifier": "as_vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::I64Vec3::as_vec3a": {
      "namespace": "glam::I64Vec3",
      "identifier": "as_vec3a",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::I64Vec3::assert_receiver_is_total_eq": {
      "namespace": "glam::I64Vec3",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::I64Vec3::clamp": {
      "namespace": "glam::I64Vec3",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`i64::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::I64Vec3::clone": {
      "namespace": "glam::I64Vec3",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::cmpeq": {
      "namespace": "glam::I64Vec3",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec3::cmpge": {
      "namespace": "glam::I64Vec3",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec3::cmpgt": {
      "namespace": "glam::I64Vec3",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec3::cmple": {
      "namespace": "glam::I64Vec3",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec3::cmplt": {
      "namespace": "glam::I64Vec3",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec3::cmpne": {
      "namespace": "glam::I64Vec3",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec3::cross": {
      "namespace": "glam::I64Vec3",
      "identifier": "cross",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Computes the cross product of `self` and `rhs`."
    },
    "glam::I64Vec3::distance_squared": {
      "namespace": "glam::I64Vec3",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::I64Vec3::div": {
      "namespace": "glam::I64Vec3",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::div-1": {
      "namespace": "glam::I64Vec3",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::div-2": {
      "namespace": "glam::I64Vec3",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          }
        },
        {
          "kind": {
            "primitive": "i64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::div_euclid": {
      "namespace": "glam::I64Vec3",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow."
    },
    "glam::I64Vec3::dot": {
      "namespace": "glam::I64Vec3",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::I64Vec3::dot_into_vec": {
      "namespace": "glam::I64Vec3",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::I64Vec3::element_product": {
      "namespace": "glam::I64Vec3",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::I64Vec3::element_sum": {
      "namespace": "glam::I64Vec3",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::I64Vec3::eq": {
      "namespace": "glam::I64Vec3",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::I64Vec3::extend": {
      "namespace": "glam::I64Vec3",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` and the given `w` value."
    },
    "glam::I64Vec3::from_array": {
      "namespace": "glam::I64Vec3",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "i64"
              },
              3
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::I64Vec3::is_negative_bitmask": {
      "namespace": "glam::I64Vec3",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 3 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::I64Vec3::length_squared": {
      "namespace": "glam::I64Vec3",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::I64Vec3::max": {
      "namespace": "glam::I64Vec3",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::I64Vec3::max_element": {
      "namespace": "glam::I64Vec3",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::I64Vec3::min": {
      "namespace": "glam::I64Vec3",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::I64Vec3::min_element": {
      "namespace": "glam::I64Vec3",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::I64Vec3::mul": {
      "namespace": "glam::I64Vec3",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::mul-1": {
      "namespace": "glam::I64Vec3",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::mul-2": {
      "namespace": "glam::I64Vec3",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          }
        },
        {
          "kind": {
            "primitive": "i64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::neg": {
      "namespace": "glam::I64Vec3",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::new": {
      "namespace": "glam::I64Vec3",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::I64Vec3::rem": {
      "namespace": "glam::I64Vec3",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::rem-1": {
      "namespace": "glam::I64Vec3",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::rem-2": {
      "namespace": "glam::I64Vec3",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          }
        },
        {
          "kind": {
            "primitive": "i64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::rem_euclid": {
      "namespace": "glam::I64Vec3",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow.\n [Euclidean division]: i64::rem_euclid"
    },
    "glam::I64Vec3::saturating_add": {
      "namespace": "glam::I64Vec3",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::I64Vec3::saturating_add_unsigned": {
      "namespace": "glam::I64Vec3",
      "identifier": "saturating_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " In other words this computes `[self.x.saturating_add_unsigned(rhs.x), self.y.saturating_add_unsigned(rhs.y), ..]`."
    },
    "glam::I64Vec3::saturating_div": {
      "namespace": "glam::I64Vec3",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::I64Vec3::saturating_mul": {
      "namespace": "glam::I64Vec3",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::I64Vec3::saturating_sub": {
      "namespace": "glam::I64Vec3",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::I64Vec3::saturating_sub_unsigned": {
      "namespace": "glam::I64Vec3",
      "identifier": "saturating_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.saturating_sub_unsigned(rhs.x), self.y.saturating_sub_unsigned(rhs.y), ..]`."
    },
    "glam::I64Vec3::select": {
      "namespace": "glam::I64Vec3",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec3"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::I64Vec3::signum": {
      "namespace": "glam::I64Vec3",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n  - `0` if the number is zero\n  - `1` if the number is positive\n  - `-1` if the number is negative"
    },
    "glam::I64Vec3::splat": {
      "namespace": "glam::I64Vec3",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::I64Vec3::sub": {
      "namespace": "glam::I64Vec3",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::sub-1": {
      "namespace": "glam::I64Vec3",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::sub-2": {
      "namespace": "glam::I64Vec3",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          }
        },
        {
          "kind": {
            "primitive": "i64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::to_array": {
      "namespace": "glam::I64Vec3",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "i64"
            },
            3
          ]
        }
      },
      "documentation": " `[x, y, z]`"
    },
    "glam::I64Vec3::truncate": {
      "namespace": "glam::I64Vec3",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Creates a 2D vector from the `x` and `y` elements of `self`, discarding `z`.\n Truncation may also be performed by using [`self.xy()`][crate::swizzles::Vec3Swizzles::xy()]."
    },
    "glam::I64Vec3::with_x": {
      "namespace": "glam::I64Vec3",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `x`."
    },
    "glam::I64Vec3::with_y": {
      "namespace": "glam::I64Vec3",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `y`."
    },
    "glam::I64Vec3::with_z": {
      "namespace": "glam::I64Vec3",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `z`."
    },
    "glam::I64Vec3::wrapping_add": {
      "namespace": "glam::I64Vec3",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::I64Vec3::wrapping_add_unsigned": {
      "namespace": "glam::I64Vec3",
      "identifier": "wrapping_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_add_unsigned(rhs.x), self.y.wrapping_add_unsigned(rhs.y), ..]`."
    },
    "glam::I64Vec3::wrapping_div": {
      "namespace": "glam::I64Vec3",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::I64Vec3::wrapping_mul": {
      "namespace": "glam::I64Vec3",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::I64Vec3::wrapping_sub": {
      "namespace": "glam::I64Vec3",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::I64Vec3::wrapping_sub_unsigned": {
      "namespace": "glam::I64Vec3",
      "identifier": "wrapping_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_sub_unsigned(rhs.x), self.y.wrapping_sub_unsigned(rhs.y), ..]`."
    },
    "glam::I64Vec4::abs": {
      "namespace": "glam::I64Vec4",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::I64Vec4::add": {
      "namespace": "glam::I64Vec4",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::add-1": {
      "namespace": "glam::I64Vec4",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::add-2": {
      "namespace": "glam::I64Vec4",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          }
        },
        {
          "kind": {
            "primitive": "i64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::as_dvec4": {
      "namespace": "glam::I64Vec4",
      "identifier": "as_dvec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::I64Vec4::as_i16vec4": {
      "namespace": "glam::I64Vec4",
      "identifier": "as_i16vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i16`."
    },
    "glam::I64Vec4::as_i8vec4": {
      "namespace": "glam::I64Vec4",
      "identifier": "as_i8vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i8`."
    },
    "glam::I64Vec4::as_ivec4": {
      "namespace": "glam::I64Vec4",
      "identifier": "as_ivec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::I64Vec4::as_u16vec4": {
      "namespace": "glam::I64Vec4",
      "identifier": "as_u16vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u16`."
    },
    "glam::I64Vec4::as_u64vec4": {
      "namespace": "glam::I64Vec4",
      "identifier": "as_u64vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::I64Vec4::as_u8vec4": {
      "namespace": "glam::I64Vec4",
      "identifier": "as_u8vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u8`."
    },
    "glam::I64Vec4::as_uvec4": {
      "namespace": "glam::I64Vec4",
      "identifier": "as_uvec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::I64Vec4::as_vec4": {
      "namespace": "glam::I64Vec4",
      "identifier": "as_vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::I64Vec4::assert_receiver_is_total_eq": {
      "namespace": "glam::I64Vec4",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::I64Vec4::clamp": {
      "namespace": "glam::I64Vec4",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`i64::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::I64Vec4::clone": {
      "namespace": "glam::I64Vec4",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::cmpeq": {
      "namespace": "glam::I64Vec4",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec4::cmpge": {
      "namespace": "glam::I64Vec4",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec4::cmpgt": {
      "namespace": "glam::I64Vec4",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec4::cmple": {
      "namespace": "glam::I64Vec4",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec4::cmplt": {
      "namespace": "glam::I64Vec4",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec4::cmpne": {
      "namespace": "glam::I64Vec4",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec4::distance_squared": {
      "namespace": "glam::I64Vec4",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::I64Vec4::div": {
      "namespace": "glam::I64Vec4",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::div-1": {
      "namespace": "glam::I64Vec4",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::div-2": {
      "namespace": "glam::I64Vec4",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          }
        },
        {
          "kind": {
            "primitive": "i64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::div_euclid": {
      "namespace": "glam::I64Vec4",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow."
    },
    "glam::I64Vec4::dot": {
      "namespace": "glam::I64Vec4",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::I64Vec4::dot_into_vec": {
      "namespace": "glam::I64Vec4",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::I64Vec4::element_product": {
      "namespace": "glam::I64Vec4",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::I64Vec4::element_sum": {
      "namespace": "glam::I64Vec4",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::I64Vec4::eq": {
      "namespace": "glam::I64Vec4",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::I64Vec4::from_array": {
      "namespace": "glam::I64Vec4",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "i64"
              },
              4
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::I64Vec4::is_negative_bitmask": {
      "namespace": "glam::I64Vec4",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 4 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::I64Vec4::length_squared": {
      "namespace": "glam::I64Vec4",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::I64Vec4::max": {
      "namespace": "glam::I64Vec4",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::I64Vec4::max_element": {
      "namespace": "glam::I64Vec4",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::I64Vec4::min": {
      "namespace": "glam::I64Vec4",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::I64Vec4::min_element": {
      "namespace": "glam::I64Vec4",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::I64Vec4::mul": {
      "namespace": "glam::I64Vec4",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::mul-1": {
      "namespace": "glam::I64Vec4",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::mul-2": {
      "namespace": "glam::I64Vec4",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          }
        },
        {
          "kind": {
            "primitive": "i64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::neg": {
      "namespace": "glam::I64Vec4",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::new": {
      "namespace": "glam::I64Vec4",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "z"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::I64Vec4::rem": {
      "namespace": "glam::I64Vec4",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::rem-1": {
      "namespace": "glam::I64Vec4",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::rem-2": {
      "namespace": "glam::I64Vec4",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          }
        },
        {
          "kind": {
            "primitive": "i64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::rem_euclid": {
      "namespace": "glam::I64Vec4",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow.\n [Euclidean division]: i64::rem_euclid"
    },
    "glam::I64Vec4::saturating_add": {
      "namespace": "glam::I64Vec4",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::I64Vec4::saturating_add_unsigned": {
      "namespace": "glam::I64Vec4",
      "identifier": "saturating_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " In other words this computes `[self.x.saturating_add_unsigned(rhs.x), self.y.saturating_add_unsigned(rhs.y), ..]`."
    },
    "glam::I64Vec4::saturating_div": {
      "namespace": "glam::I64Vec4",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::I64Vec4::saturating_mul": {
      "namespace": "glam::I64Vec4",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::I64Vec4::saturating_sub": {
      "namespace": "glam::I64Vec4",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::I64Vec4::saturating_sub_unsigned": {
      "namespace": "glam::I64Vec4",
      "identifier": "saturating_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.saturating_sub_unsigned(rhs.x), self.y.saturating_sub_unsigned(rhs.y), ..]`."
    },
    "glam::I64Vec4::select": {
      "namespace": "glam::I64Vec4",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec4"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::I64Vec4::signum": {
      "namespace": "glam::I64Vec4",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n  - `0` if the number is zero\n  - `1` if the number is positive\n  - `-1` if the number is negative"
    },
    "glam::I64Vec4::splat": {
      "namespace": "glam::I64Vec4",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::I64Vec4::sub": {
      "namespace": "glam::I64Vec4",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::sub-1": {
      "namespace": "glam::I64Vec4",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::sub-2": {
      "namespace": "glam::I64Vec4",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          }
        },
        {
          "kind": {
            "primitive": "i64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::to_array": {
      "namespace": "glam::I64Vec4",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "i64"
            },
            4
          ]
        }
      },
      "documentation": " `[x, y, z, w]`"
    },
    "glam::I64Vec4::truncate": {
      "namespace": "glam::I64Vec4",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Creates a 3D vector from the `x`, `y` and `z` elements of `self`, discarding `w`.\n Truncation to [`I64Vec3`] may also be performed by using [`self.xyz()`][crate::swizzles::Vec4Swizzles::xyz()]."
    },
    "glam::I64Vec4::with_w": {
      "namespace": "glam::I64Vec4",
      "identifier": "with_w",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `w`."
    },
    "glam::I64Vec4::with_x": {
      "namespace": "glam::I64Vec4",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `x`."
    },
    "glam::I64Vec4::with_y": {
      "namespace": "glam::I64Vec4",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `y`."
    },
    "glam::I64Vec4::with_z": {
      "namespace": "glam::I64Vec4",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `z`."
    },
    "glam::I64Vec4::wrapping_add": {
      "namespace": "glam::I64Vec4",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::I64Vec4::wrapping_add_unsigned": {
      "namespace": "glam::I64Vec4",
      "identifier": "wrapping_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_add_unsigned(rhs.x), self.y.wrapping_add_unsigned(rhs.y), ..]`."
    },
    "glam::I64Vec4::wrapping_div": {
      "namespace": "glam::I64Vec4",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::I64Vec4::wrapping_mul": {
      "namespace": "glam::I64Vec4",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::I64Vec4::wrapping_sub": {
      "namespace": "glam::I64Vec4",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::I64Vec4::wrapping_sub_unsigned": {
      "namespace": "glam::I64Vec4",
      "identifier": "wrapping_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_sub_unsigned(rhs.x), self.y.wrapping_sub_unsigned(rhs.y), ..]`."
    },
    "glam::I8Vec2::abs": {
      "namespace": "glam::I8Vec2",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::I8Vec2::add": {
      "namespace": "glam::I8Vec2",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      }
    },
    "glam::I8Vec2::add-1": {
      "namespace": "glam::I8Vec2",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      }
    },
    "glam::I8Vec2::add-2": {
      "namespace": "glam::I8Vec2",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          }
        },
        {
          "kind": {
            "primitive": "i8"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      }
    },
    "glam::I8Vec2::as_dvec2": {
      "namespace": "glam::I8Vec2",
      "identifier": "as_dvec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::I8Vec2::as_i16vec2": {
      "namespace": "glam::I8Vec2",
      "identifier": "as_i16vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i16`."
    },
    "glam::I8Vec2::as_i64vec2": {
      "namespace": "glam::I8Vec2",
      "identifier": "as_i64vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::I8Vec2::as_ivec2": {
      "namespace": "glam::I8Vec2",
      "identifier": "as_ivec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::I8Vec2::as_u16vec2": {
      "namespace": "glam::I8Vec2",
      "identifier": "as_u16vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u16`."
    },
    "glam::I8Vec2::as_u64vec2": {
      "namespace": "glam::I8Vec2",
      "identifier": "as_u64vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::I8Vec2::as_u8vec2": {
      "namespace": "glam::I8Vec2",
      "identifier": "as_u8vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u8`."
    },
    "glam::I8Vec2::as_uvec2": {
      "namespace": "glam::I8Vec2",
      "identifier": "as_uvec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::I8Vec2::as_vec2": {
      "namespace": "glam::I8Vec2",
      "identifier": "as_vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::I8Vec2::assert_receiver_is_total_eq": {
      "namespace": "glam::I8Vec2",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::I8Vec2::clamp": {
      "namespace": "glam::I8Vec2",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`i8::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::I8Vec2::clone": {
      "namespace": "glam::I8Vec2",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      }
    },
    "glam::I8Vec2::cmpeq": {
      "namespace": "glam::I8Vec2",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::I8Vec2::cmpge": {
      "namespace": "glam::I8Vec2",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::I8Vec2::cmpgt": {
      "namespace": "glam::I8Vec2",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::I8Vec2::cmple": {
      "namespace": "glam::I8Vec2",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::I8Vec2::cmplt": {
      "namespace": "glam::I8Vec2",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::I8Vec2::cmpne": {
      "namespace": "glam::I8Vec2",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::I8Vec2::distance_squared": {
      "namespace": "glam::I8Vec2",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i8"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::I8Vec2::div": {
      "namespace": "glam::I8Vec2",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      }
    },
    "glam::I8Vec2::div-1": {
      "namespace": "glam::I8Vec2",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      }
    },
    "glam::I8Vec2::div-2": {
      "namespace": "glam::I8Vec2",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          }
        },
        {
          "kind": {
            "primitive": "i8"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      }
    },
    "glam::I8Vec2::div_euclid": {
      "namespace": "glam::I8Vec2",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow."
    },
    "glam::I8Vec2::dot": {
      "namespace": "glam::I8Vec2",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i8"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::I8Vec2::dot_into_vec": {
      "namespace": "glam::I8Vec2",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::I8Vec2::element_product": {
      "namespace": "glam::I8Vec2",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i8"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::I8Vec2::element_sum": {
      "namespace": "glam::I8Vec2",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i8"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::I8Vec2::eq": {
      "namespace": "glam::I8Vec2",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I8Vec2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::I8Vec2::extend": {
      "namespace": "glam::I8Vec2",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i8"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` and the given `z` value."
    },
    "glam::I8Vec2::from_array": {
      "namespace": "glam::I8Vec2",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "i8"
              },
              2
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::I8Vec2::is_negative_bitmask": {
      "namespace": "glam::I8Vec2",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 2 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::I8Vec2::length_squared": {
      "namespace": "glam::I8Vec2",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i8"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::I8Vec2::max": {
      "namespace": "glam::I8Vec2",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::I8Vec2::max_element": {
      "namespace": "glam::I8Vec2",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i8"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::I8Vec2::min": {
      "namespace": "glam::I8Vec2",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::I8Vec2::min_element": {
      "namespace": "glam::I8Vec2",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i8"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::I8Vec2::mul": {
      "namespace": "glam::I8Vec2",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      }
    },
    "glam::I8Vec2::mul-1": {
      "namespace": "glam::I8Vec2",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      }
    },
    "glam::I8Vec2::mul-2": {
      "namespace": "glam::I8Vec2",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          }
        },
        {
          "kind": {
            "primitive": "i8"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      }
    },
    "glam::I8Vec2::neg": {
      "namespace": "glam::I8Vec2",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      }
    },
    "glam::I8Vec2::new": {
      "namespace": "glam::I8Vec2",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "i8"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "i8"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::I8Vec2::perp": {
      "namespace": "glam::I8Vec2",
      "identifier": "perp",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Returns a vector that is equal to `self` rotated by 90 degrees."
    },
    "glam::I8Vec2::perp_dot": {
      "namespace": "glam::I8Vec2",
      "identifier": "perp_dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i8"
        }
      },
      "documentation": " The perpendicular dot product of `self` and `rhs`.\n Also known as the wedge product, 2D cross product, and determinant."
    },
    "glam::I8Vec2::rem": {
      "namespace": "glam::I8Vec2",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      }
    },
    "glam::I8Vec2::rem-1": {
      "namespace": "glam::I8Vec2",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      }
    },
    "glam::I8Vec2::rem-2": {
      "namespace": "glam::I8Vec2",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          }
        },
        {
          "kind": {
            "primitive": "i8"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      }
    },
    "glam::I8Vec2::rem_euclid": {
      "namespace": "glam::I8Vec2",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow.\n [Euclidean division]: i8::rem_euclid"
    },
    "glam::I8Vec2::rotate": {
      "namespace": "glam::I8Vec2",
      "identifier": "rotate",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Returns `rhs` rotated by the angle of `self`. If `self` is normalized,\n then this just rotation. This is what you usually want. Otherwise,\n it will be like a rotation with a multiplication by `self`'s length."
    },
    "glam::I8Vec2::saturating_add": {
      "namespace": "glam::I8Vec2",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::I8Vec2::saturating_add_unsigned": {
      "namespace": "glam::I8Vec2",
      "identifier": "saturating_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " In other words this computes `[self.x.saturating_add_unsigned(rhs.x), self.y.saturating_add_unsigned(rhs.y), ..]`."
    },
    "glam::I8Vec2::saturating_div": {
      "namespace": "glam::I8Vec2",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::I8Vec2::saturating_mul": {
      "namespace": "glam::I8Vec2",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::I8Vec2::saturating_sub": {
      "namespace": "glam::I8Vec2",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::I8Vec2::saturating_sub_unsigned": {
      "namespace": "glam::I8Vec2",
      "identifier": "saturating_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.saturating_sub_unsigned(rhs.x), self.y.saturating_sub_unsigned(rhs.y), ..]`."
    },
    "glam::I8Vec2::select": {
      "namespace": "glam::I8Vec2",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec2"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::I8Vec2::signum": {
      "namespace": "glam::I8Vec2",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n  - `0` if the number is zero\n  - `1` if the number is positive\n  - `-1` if the number is negative"
    },
    "glam::I8Vec2::splat": {
      "namespace": "glam::I8Vec2",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "i8"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::I8Vec2::sub": {
      "namespace": "glam::I8Vec2",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      }
    },
    "glam::I8Vec2::sub-1": {
      "namespace": "glam::I8Vec2",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      }
    },
    "glam::I8Vec2::sub-2": {
      "namespace": "glam::I8Vec2",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          }
        },
        {
          "kind": {
            "primitive": "i8"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      }
    },
    "glam::I8Vec2::to_array": {
      "namespace": "glam::I8Vec2",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "i8"
            },
            2
          ]
        }
      },
      "documentation": " `[x, y]`"
    },
    "glam::I8Vec2::with_x": {
      "namespace": "glam::I8Vec2",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i8"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `x`."
    },
    "glam::I8Vec2::with_y": {
      "namespace": "glam::I8Vec2",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i8"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `y`."
    },
    "glam::I8Vec2::wrapping_add": {
      "namespace": "glam::I8Vec2",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::I8Vec2::wrapping_add_unsigned": {
      "namespace": "glam::I8Vec2",
      "identifier": "wrapping_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_add_unsigned(rhs.x), self.y.wrapping_add_unsigned(rhs.y), ..]`."
    },
    "glam::I8Vec2::wrapping_div": {
      "namespace": "glam::I8Vec2",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::I8Vec2::wrapping_mul": {
      "namespace": "glam::I8Vec2",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::I8Vec2::wrapping_sub": {
      "namespace": "glam::I8Vec2",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::I8Vec2::wrapping_sub_unsigned": {
      "namespace": "glam::I8Vec2",
      "identifier": "wrapping_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_sub_unsigned(rhs.x), self.y.wrapping_sub_unsigned(rhs.y), ..]`."
    },
    "glam::I8Vec3::abs": {
      "namespace": "glam::I8Vec3",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::I8Vec3::add": {
      "namespace": "glam::I8Vec3",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      }
    },
    "glam::I8Vec3::add-1": {
      "namespace": "glam::I8Vec3",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      }
    },
    "glam::I8Vec3::add-2": {
      "namespace": "glam::I8Vec3",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          }
        },
        {
          "kind": {
            "primitive": "i8"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      }
    },
    "glam::I8Vec3::as_dvec3": {
      "namespace": "glam::I8Vec3",
      "identifier": "as_dvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::I8Vec3::as_i16vec3": {
      "namespace": "glam::I8Vec3",
      "identifier": "as_i16vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i16`."
    },
    "glam::I8Vec3::as_i64vec3": {
      "namespace": "glam::I8Vec3",
      "identifier": "as_i64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::I8Vec3::as_ivec3": {
      "namespace": "glam::I8Vec3",
      "identifier": "as_ivec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::I8Vec3::as_u16vec3": {
      "namespace": "glam::I8Vec3",
      "identifier": "as_u16vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u16`."
    },
    "glam::I8Vec3::as_u64vec3": {
      "namespace": "glam::I8Vec3",
      "identifier": "as_u64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::I8Vec3::as_u8vec3": {
      "namespace": "glam::I8Vec3",
      "identifier": "as_u8vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u8`."
    },
    "glam::I8Vec3::as_uvec3": {
      "namespace": "glam::I8Vec3",
      "identifier": "as_uvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::I8Vec3::as_vec3": {
      "namespace": "glam::I8Vec3",
      "identifier": "as_vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::I8Vec3::as_vec3a": {
      "namespace": "glam::I8Vec3",
      "identifier": "as_vec3a",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::I8Vec3::assert_receiver_is_total_eq": {
      "namespace": "glam::I8Vec3",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::I8Vec3::clamp": {
      "namespace": "glam::I8Vec3",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`i8::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::I8Vec3::clone": {
      "namespace": "glam::I8Vec3",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      }
    },
    "glam::I8Vec3::cmpeq": {
      "namespace": "glam::I8Vec3",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::I8Vec3::cmpge": {
      "namespace": "glam::I8Vec3",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::I8Vec3::cmpgt": {
      "namespace": "glam::I8Vec3",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::I8Vec3::cmple": {
      "namespace": "glam::I8Vec3",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::I8Vec3::cmplt": {
      "namespace": "glam::I8Vec3",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::I8Vec3::cmpne": {
      "namespace": "glam::I8Vec3",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::I8Vec3::cross": {
      "namespace": "glam::I8Vec3",
      "identifier": "cross",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Computes the cross product of `self` and `rhs`."
    },
    "glam::I8Vec3::distance_squared": {
      "namespace": "glam::I8Vec3",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i8"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::I8Vec3::div": {
      "namespace": "glam::I8Vec3",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      }
    },
    "glam::I8Vec3::div-1": {
      "namespace": "glam::I8Vec3",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      }
    },
    "glam::I8Vec3::div-2": {
      "namespace": "glam::I8Vec3",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          }
        },
        {
          "kind": {
            "primitive": "i8"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      }
    },
    "glam::I8Vec3::div_euclid": {
      "namespace": "glam::I8Vec3",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow."
    },
    "glam::I8Vec3::dot": {
      "namespace": "glam::I8Vec3",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i8"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::I8Vec3::dot_into_vec": {
      "namespace": "glam::I8Vec3",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::I8Vec3::element_product": {
      "namespace": "glam::I8Vec3",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i8"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::I8Vec3::element_sum": {
      "namespace": "glam::I8Vec3",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i8"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::I8Vec3::eq": {
      "namespace": "glam::I8Vec3",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I8Vec3"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::I8Vec3::extend": {
      "namespace": "glam::I8Vec3",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i8"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` and the given `w` value."
    },
    "glam::I8Vec3::from_array": {
      "namespace": "glam::I8Vec3",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "i8"
              },
              3
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::I8Vec3::is_negative_bitmask": {
      "namespace": "glam::I8Vec3",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 3 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::I8Vec3::length_squared": {
      "namespace": "glam::I8Vec3",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i8"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::I8Vec3::max": {
      "namespace": "glam::I8Vec3",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::I8Vec3::max_element": {
      "namespace": "glam::I8Vec3",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i8"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::I8Vec3::min": {
      "namespace": "glam::I8Vec3",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::I8Vec3::min_element": {
      "namespace": "glam::I8Vec3",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i8"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::I8Vec3::mul": {
      "namespace": "glam::I8Vec3",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      }
    },
    "glam::I8Vec3::mul-1": {
      "namespace": "glam::I8Vec3",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      }
    },
    "glam::I8Vec3::mul-2": {
      "namespace": "glam::I8Vec3",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          }
        },
        {
          "kind": {
            "primitive": "i8"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      }
    },
    "glam::I8Vec3::neg": {
      "namespace": "glam::I8Vec3",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      }
    },
    "glam::I8Vec3::new": {
      "namespace": "glam::I8Vec3",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "i8"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "i8"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "i8"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::I8Vec3::rem": {
      "namespace": "glam::I8Vec3",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      }
    },
    "glam::I8Vec3::rem-1": {
      "namespace": "glam::I8Vec3",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      }
    },
    "glam::I8Vec3::rem-2": {
      "namespace": "glam::I8Vec3",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          }
        },
        {
          "kind": {
            "primitive": "i8"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      }
    },
    "glam::I8Vec3::rem_euclid": {
      "namespace": "glam::I8Vec3",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow.\n [Euclidean division]: i8::rem_euclid"
    },
    "glam::I8Vec3::saturating_add": {
      "namespace": "glam::I8Vec3",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::I8Vec3::saturating_add_unsigned": {
      "namespace": "glam::I8Vec3",
      "identifier": "saturating_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " In other words this computes `[self.x.saturating_add_unsigned(rhs.x), self.y.saturating_add_unsigned(rhs.y), ..]`."
    },
    "glam::I8Vec3::saturating_div": {
      "namespace": "glam::I8Vec3",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::I8Vec3::saturating_mul": {
      "namespace": "glam::I8Vec3",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::I8Vec3::saturating_sub": {
      "namespace": "glam::I8Vec3",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::I8Vec3::saturating_sub_unsigned": {
      "namespace": "glam::I8Vec3",
      "identifier": "saturating_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.saturating_sub_unsigned(rhs.x), self.y.saturating_sub_unsigned(rhs.y), ..]`."
    },
    "glam::I8Vec3::select": {
      "namespace": "glam::I8Vec3",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec3"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::I8Vec3::signum": {
      "namespace": "glam::I8Vec3",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n  - `0` if the number is zero\n  - `1` if the number is positive\n  - `-1` if the number is negative"
    },
    "glam::I8Vec3::splat": {
      "namespace": "glam::I8Vec3",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "i8"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::I8Vec3::sub": {
      "namespace": "glam::I8Vec3",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      }
    },
    "glam::I8Vec3::sub-1": {
      "namespace": "glam::I8Vec3",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      }
    },
    "glam::I8Vec3::sub-2": {
      "namespace": "glam::I8Vec3",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          }
        },
        {
          "kind": {
            "primitive": "i8"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      }
    },
    "glam::I8Vec3::to_array": {
      "namespace": "glam::I8Vec3",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "i8"
            },
            3
          ]
        }
      },
      "documentation": " `[x, y, z]`"
    },
    "glam::I8Vec3::truncate": {
      "namespace": "glam::I8Vec3",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Creates a 2D vector from the `x` and `y` elements of `self`, discarding `z`.\n Truncation may also be performed by using [`self.xy()`][crate::swizzles::Vec3Swizzles::xy()]."
    },
    "glam::I8Vec3::with_x": {
      "namespace": "glam::I8Vec3",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i8"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `x`."
    },
    "glam::I8Vec3::with_y": {
      "namespace": "glam::I8Vec3",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i8"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `y`."
    },
    "glam::I8Vec3::with_z": {
      "namespace": "glam::I8Vec3",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i8"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `z`."
    },
    "glam::I8Vec3::wrapping_add": {
      "namespace": "glam::I8Vec3",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::I8Vec3::wrapping_add_unsigned": {
      "namespace": "glam::I8Vec3",
      "identifier": "wrapping_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_add_unsigned(rhs.x), self.y.wrapping_add_unsigned(rhs.y), ..]`."
    },
    "glam::I8Vec3::wrapping_div": {
      "namespace": "glam::I8Vec3",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::I8Vec3::wrapping_mul": {
      "namespace": "glam::I8Vec3",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::I8Vec3::wrapping_sub": {
      "namespace": "glam::I8Vec3",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::I8Vec3::wrapping_sub_unsigned": {
      "namespace": "glam::I8Vec3",
      "identifier": "wrapping_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_sub_unsigned(rhs.x), self.y.wrapping_sub_unsigned(rhs.y), ..]`."
    },
    "glam::I8Vec4::abs": {
      "namespace": "glam::I8Vec4",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::I8Vec4::add": {
      "namespace": "glam::I8Vec4",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      }
    },
    "glam::I8Vec4::add-1": {
      "namespace": "glam::I8Vec4",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      }
    },
    "glam::I8Vec4::add-2": {
      "namespace": "glam::I8Vec4",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          }
        },
        {
          "kind": {
            "primitive": "i8"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      }
    },
    "glam::I8Vec4::as_dvec4": {
      "namespace": "glam::I8Vec4",
      "identifier": "as_dvec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::I8Vec4::as_i16vec4": {
      "namespace": "glam::I8Vec4",
      "identifier": "as_i16vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i16`."
    },
    "glam::I8Vec4::as_i64vec4": {
      "namespace": "glam::I8Vec4",
      "identifier": "as_i64vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::I8Vec4::as_ivec4": {
      "namespace": "glam::I8Vec4",
      "identifier": "as_ivec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::I8Vec4::as_u16vec4": {
      "namespace": "glam::I8Vec4",
      "identifier": "as_u16vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u16`."
    },
    "glam::I8Vec4::as_u64vec4": {
      "namespace": "glam::I8Vec4",
      "identifier": "as_u64vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::I8Vec4::as_u8vec4": {
      "namespace": "glam::I8Vec4",
      "identifier": "as_u8vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u8`."
    },
    "glam::I8Vec4::as_uvec4": {
      "namespace": "glam::I8Vec4",
      "identifier": "as_uvec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::I8Vec4::as_vec4": {
      "namespace": "glam::I8Vec4",
      "identifier": "as_vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::I8Vec4::assert_receiver_is_total_eq": {
      "namespace": "glam::I8Vec4",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::I8Vec4::clamp": {
      "namespace": "glam::I8Vec4",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`i8::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::I8Vec4::clone": {
      "namespace": "glam::I8Vec4",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      }
    },
    "glam::I8Vec4::cmpeq": {
      "namespace": "glam::I8Vec4",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::I8Vec4::cmpge": {
      "namespace": "glam::I8Vec4",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::I8Vec4::cmpgt": {
      "namespace": "glam::I8Vec4",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::I8Vec4::cmple": {
      "namespace": "glam::I8Vec4",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::I8Vec4::cmplt": {
      "namespace": "glam::I8Vec4",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::I8Vec4::cmpne": {
      "namespace": "glam::I8Vec4",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::I8Vec4::distance_squared": {
      "namespace": "glam::I8Vec4",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i8"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::I8Vec4::div": {
      "namespace": "glam::I8Vec4",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      }
    },
    "glam::I8Vec4::div-1": {
      "namespace": "glam::I8Vec4",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      }
    },
    "glam::I8Vec4::div-2": {
      "namespace": "glam::I8Vec4",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          }
        },
        {
          "kind": {
            "primitive": "i8"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      }
    },
    "glam::I8Vec4::div_euclid": {
      "namespace": "glam::I8Vec4",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow."
    },
    "glam::I8Vec4::dot": {
      "namespace": "glam::I8Vec4",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i8"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::I8Vec4::dot_into_vec": {
      "namespace": "glam::I8Vec4",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::I8Vec4::element_product": {
      "namespace": "glam::I8Vec4",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i8"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::I8Vec4::element_sum": {
      "namespace": "glam::I8Vec4",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i8"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::I8Vec4::eq": {
      "namespace": "glam::I8Vec4",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I8Vec4"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::I8Vec4::from_array": {
      "namespace": "glam::I8Vec4",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "i8"
              },
              4
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::I8Vec4::is_negative_bitmask": {
      "namespace": "glam::I8Vec4",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 4 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::I8Vec4::length_squared": {
      "namespace": "glam::I8Vec4",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i8"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::I8Vec4::max": {
      "namespace": "glam::I8Vec4",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::I8Vec4::max_element": {
      "namespace": "glam::I8Vec4",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i8"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::I8Vec4::min": {
      "namespace": "glam::I8Vec4",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::I8Vec4::min_element": {
      "namespace": "glam::I8Vec4",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i8"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::I8Vec4::mul": {
      "namespace": "glam::I8Vec4",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      }
    },
    "glam::I8Vec4::mul-1": {
      "namespace": "glam::I8Vec4",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      }
    },
    "glam::I8Vec4::mul-2": {
      "namespace": "glam::I8Vec4",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          }
        },
        {
          "kind": {
            "primitive": "i8"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      }
    },
    "glam::I8Vec4::neg": {
      "namespace": "glam::I8Vec4",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      }
    },
    "glam::I8Vec4::new": {
      "namespace": "glam::I8Vec4",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "i8"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "i8"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "i8"
          },
          "name": "z"
        },
        {
          "kind": {
            "primitive": "i8"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::I8Vec4::rem": {
      "namespace": "glam::I8Vec4",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      }
    },
    "glam::I8Vec4::rem-1": {
      "namespace": "glam::I8Vec4",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      }
    },
    "glam::I8Vec4::rem-2": {
      "namespace": "glam::I8Vec4",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          }
        },
        {
          "kind": {
            "primitive": "i8"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      }
    },
    "glam::I8Vec4::rem_euclid": {
      "namespace": "glam::I8Vec4",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow.\n [Euclidean division]: i8::rem_euclid"
    },
    "glam::I8Vec4::saturating_add": {
      "namespace": "glam::I8Vec4",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::I8Vec4::saturating_add_unsigned": {
      "namespace": "glam::I8Vec4",
      "identifier": "saturating_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " In other words this computes `[self.x.saturating_add_unsigned(rhs.x), self.y.saturating_add_unsigned(rhs.y), ..]`."
    },
    "glam::I8Vec4::saturating_div": {
      "namespace": "glam::I8Vec4",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::I8Vec4::saturating_mul": {
      "namespace": "glam::I8Vec4",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::I8Vec4::saturating_sub": {
      "namespace": "glam::I8Vec4",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::I8Vec4::saturating_sub_unsigned": {
      "namespace": "glam::I8Vec4",
      "identifier": "saturating_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.saturating_sub_unsigned(rhs.x), self.y.saturating_sub_unsigned(rhs.y), ..]`."
    },
    "glam::I8Vec4::select": {
      "namespace": "glam::I8Vec4",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec4"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::I8Vec4::signum": {
      "namespace": "glam::I8Vec4",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n  - `0` if the number is zero\n  - `1` if the number is positive\n  - `-1` if the number is negative"
    },
    "glam::I8Vec4::splat": {
      "namespace": "glam::I8Vec4",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "i8"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::I8Vec4::sub": {
      "namespace": "glam::I8Vec4",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      }
    },
    "glam::I8Vec4::sub-1": {
      "namespace": "glam::I8Vec4",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      }
    },
    "glam::I8Vec4::sub-2": {
      "namespace": "glam::I8Vec4",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          }
        },
        {
          "kind": {
            "primitive": "i8"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      }
    },
    "glam::I8Vec4::to_array": {
      "namespace": "glam::I8Vec4",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "i8"
            },
            4
          ]
        }
      },
      "documentation": " `[x, y, z, w]`"
    },
    "glam::I8Vec4::truncate": {
      "namespace": "glam::I8Vec4",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Creates a 3D vector from the `x`, `y` and `z` elements of `self`, discarding `w`.\n Truncation to [`I8Vec3`] may also be performed by using [`self.xyz()`][crate::swizzles::Vec4Swizzles::xyz()]."
    },
    "glam::I8Vec4::with_w": {
      "namespace": "glam::I8Vec4",
      "identifier": "with_w",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i8"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `w`."
    },
    "glam::I8Vec4::with_x": {
      "namespace": "glam::I8Vec4",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i8"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `x`."
    },
    "glam::I8Vec4::with_y": {
      "namespace": "glam::I8Vec4",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i8"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `y`."
    },
    "glam::I8Vec4::with_z": {
      "namespace": "glam::I8Vec4",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i8"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `z`."
    },
    "glam::I8Vec4::wrapping_add": {
      "namespace": "glam::I8Vec4",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::I8Vec4::wrapping_add_unsigned": {
      "namespace": "glam::I8Vec4",
      "identifier": "wrapping_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_add_unsigned(rhs.x), self.y.wrapping_add_unsigned(rhs.y), ..]`."
    },
    "glam::I8Vec4::wrapping_div": {
      "namespace": "glam::I8Vec4",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::I8Vec4::wrapping_mul": {
      "namespace": "glam::I8Vec4",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::I8Vec4::wrapping_sub": {
      "namespace": "glam::I8Vec4",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::I8Vec4::wrapping_sub_unsigned": {
      "namespace": "glam::I8Vec4",
      "identifier": "wrapping_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_sub_unsigned(rhs.x), self.y.wrapping_sub_unsigned(rhs.y), ..]`."
    },
    "glam::IVec2::abs": {
      "namespace": "glam::IVec2",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::IVec2::add": {
      "namespace": "glam::IVec2",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::add-1": {
      "namespace": "glam::IVec2",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          }
        },
        {
          "kind": {
            "val": "glam::IVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::add-2": {
      "namespace": "glam::IVec2",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          }
        },
        {
          "kind": {
            "primitive": "i32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::as_dvec2": {
      "namespace": "glam::IVec2",
      "identifier": "as_dvec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::IVec2::as_i16vec2": {
      "namespace": "glam::IVec2",
      "identifier": "as_i16vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i16`."
    },
    "glam::IVec2::as_i64vec2": {
      "namespace": "glam::IVec2",
      "identifier": "as_i64vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::IVec2::as_i8vec2": {
      "namespace": "glam::IVec2",
      "identifier": "as_i8vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i8`."
    },
    "glam::IVec2::as_u16vec2": {
      "namespace": "glam::IVec2",
      "identifier": "as_u16vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u16`."
    },
    "glam::IVec2::as_u64vec2": {
      "namespace": "glam::IVec2",
      "identifier": "as_u64vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::IVec2::as_u8vec2": {
      "namespace": "glam::IVec2",
      "identifier": "as_u8vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u8`."
    },
    "glam::IVec2::as_uvec2": {
      "namespace": "glam::IVec2",
      "identifier": "as_uvec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::IVec2::as_vec2": {
      "namespace": "glam::IVec2",
      "identifier": "as_vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::IVec2::assert_receiver_is_total_eq": {
      "namespace": "glam::IVec2",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::IVec2::clamp": {
      "namespace": "glam::IVec2",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`i32::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::IVec2::clone": {
      "namespace": "glam::IVec2",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::cmpeq": {
      "namespace": "glam::IVec2",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::IVec2::cmpge": {
      "namespace": "glam::IVec2",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::IVec2::cmpgt": {
      "namespace": "glam::IVec2",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::IVec2::cmple": {
      "namespace": "glam::IVec2",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::IVec2::cmplt": {
      "namespace": "glam::IVec2",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::IVec2::cmpne": {
      "namespace": "glam::IVec2",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::IVec2::distance_squared": {
      "namespace": "glam::IVec2",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::IVec2::div": {
      "namespace": "glam::IVec2",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::div-1": {
      "namespace": "glam::IVec2",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          }
        },
        {
          "kind": {
            "val": "glam::IVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::div-2": {
      "namespace": "glam::IVec2",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          }
        },
        {
          "kind": {
            "primitive": "i32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::div_euclid": {
      "namespace": "glam::IVec2",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow."
    },
    "glam::IVec2::dot": {
      "namespace": "glam::IVec2",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::IVec2::dot_into_vec": {
      "namespace": "glam::IVec2",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::IVec2::element_product": {
      "namespace": "glam::IVec2",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::IVec2::element_sum": {
      "namespace": "glam::IVec2",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::IVec2::eq": {
      "namespace": "glam::IVec2",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::IVec2::extend": {
      "namespace": "glam::IVec2",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` and the given `z` value."
    },
    "glam::IVec2::from_array": {
      "namespace": "glam::IVec2",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "i32"
              },
              2
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::IVec2::is_negative_bitmask": {
      "namespace": "glam::IVec2",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 2 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::IVec2::length_squared": {
      "namespace": "glam::IVec2",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::IVec2::max": {
      "namespace": "glam::IVec2",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::IVec2::max_element": {
      "namespace": "glam::IVec2",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::IVec2::min": {
      "namespace": "glam::IVec2",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::IVec2::min_element": {
      "namespace": "glam::IVec2",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::IVec2::mul": {
      "namespace": "glam::IVec2",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::mul-1": {
      "namespace": "glam::IVec2",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          }
        },
        {
          "kind": {
            "val": "glam::IVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::mul-2": {
      "namespace": "glam::IVec2",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          }
        },
        {
          "kind": {
            "primitive": "i32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::neg": {
      "namespace": "glam::IVec2",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::new": {
      "namespace": "glam::IVec2",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::IVec2::perp": {
      "namespace": "glam::IVec2",
      "identifier": "perp",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector that is equal to `self` rotated by 90 degrees."
    },
    "glam::IVec2::perp_dot": {
      "namespace": "glam::IVec2",
      "identifier": "perp_dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " The perpendicular dot product of `self` and `rhs`.\n Also known as the wedge product, 2D cross product, and determinant."
    },
    "glam::IVec2::rem": {
      "namespace": "glam::IVec2",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::rem-1": {
      "namespace": "glam::IVec2",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          }
        },
        {
          "kind": {
            "val": "glam::IVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::rem-2": {
      "namespace": "glam::IVec2",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          }
        },
        {
          "kind": {
            "primitive": "i32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::rem_euclid": {
      "namespace": "glam::IVec2",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow.\n [Euclidean division]: i32::rem_euclid"
    },
    "glam::IVec2::rotate": {
      "namespace": "glam::IVec2",
      "identifier": "rotate",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns `rhs` rotated by the angle of `self`. If `self` is normalized,\n then this just rotation. This is what you usually want. Otherwise,\n it will be like a rotation with a multiplication by `self`'s length."
    },
    "glam::IVec2::saturating_add": {
      "namespace": "glam::IVec2",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::IVec2::saturating_add_unsigned": {
      "namespace": "glam::IVec2",
      "identifier": "saturating_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " In other words this computes `[self.x.saturating_add_unsigned(rhs.x), self.y.saturating_add_unsigned(rhs.y), ..]`."
    },
    "glam::IVec2::saturating_div": {
      "namespace": "glam::IVec2",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::IVec2::saturating_mul": {
      "namespace": "glam::IVec2",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::IVec2::saturating_sub": {
      "namespace": "glam::IVec2",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::IVec2::saturating_sub_unsigned": {
      "namespace": "glam::IVec2",
      "identifier": "saturating_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.saturating_sub_unsigned(rhs.x), self.y.saturating_sub_unsigned(rhs.y), ..]`."
    },
    "glam::IVec2::select": {
      "namespace": "glam::IVec2",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec2"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::IVec2::signum": {
      "namespace": "glam::IVec2",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n  - `0` if the number is zero\n  - `1` if the number is positive\n  - `-1` if the number is negative"
    },
    "glam::IVec2::splat": {
      "namespace": "glam::IVec2",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::IVec2::sub": {
      "namespace": "glam::IVec2",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::sub-1": {
      "namespace": "glam::IVec2",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          }
        },
        {
          "kind": {
            "val": "glam::IVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::sub-2": {
      "namespace": "glam::IVec2",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          }
        },
        {
          "kind": {
            "primitive": "i32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::to_array": {
      "namespace": "glam::IVec2",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "i32"
            },
            2
          ]
        }
      },
      "documentation": " `[x, y]`"
    },
    "glam::IVec2::with_x": {
      "namespace": "glam::IVec2",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `x`."
    },
    "glam::IVec2::with_y": {
      "namespace": "glam::IVec2",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `y`."
    },
    "glam::IVec2::wrapping_add": {
      "namespace": "glam::IVec2",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::IVec2::wrapping_add_unsigned": {
      "namespace": "glam::IVec2",
      "identifier": "wrapping_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_add_unsigned(rhs.x), self.y.wrapping_add_unsigned(rhs.y), ..]`."
    },
    "glam::IVec2::wrapping_div": {
      "namespace": "glam::IVec2",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::IVec2::wrapping_mul": {
      "namespace": "glam::IVec2",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::IVec2::wrapping_sub": {
      "namespace": "glam::IVec2",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::IVec2::wrapping_sub_unsigned": {
      "namespace": "glam::IVec2",
      "identifier": "wrapping_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_sub_unsigned(rhs.x), self.y.wrapping_sub_unsigned(rhs.y), ..]`."
    },
    "glam::IVec3::abs": {
      "namespace": "glam::IVec3",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::IVec3::add": {
      "namespace": "glam::IVec3",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::add-1": {
      "namespace": "glam::IVec3",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          }
        },
        {
          "kind": {
            "val": "glam::IVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::add-2": {
      "namespace": "glam::IVec3",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          }
        },
        {
          "kind": {
            "primitive": "i32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::as_dvec3": {
      "namespace": "glam::IVec3",
      "identifier": "as_dvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::IVec3::as_i16vec3": {
      "namespace": "glam::IVec3",
      "identifier": "as_i16vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i16`."
    },
    "glam::IVec3::as_i64vec3": {
      "namespace": "glam::IVec3",
      "identifier": "as_i64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::IVec3::as_i8vec3": {
      "namespace": "glam::IVec3",
      "identifier": "as_i8vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i8`."
    },
    "glam::IVec3::as_u16vec3": {
      "namespace": "glam::IVec3",
      "identifier": "as_u16vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u16`."
    },
    "glam::IVec3::as_u64vec3": {
      "namespace": "glam::IVec3",
      "identifier": "as_u64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::IVec3::as_u8vec3": {
      "namespace": "glam::IVec3",
      "identifier": "as_u8vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u8`."
    },
    "glam::IVec3::as_uvec3": {
      "namespace": "glam::IVec3",
      "identifier": "as_uvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::IVec3::as_vec3": {
      "namespace": "glam::IVec3",
      "identifier": "as_vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::IVec3::as_vec3a": {
      "namespace": "glam::IVec3",
      "identifier": "as_vec3a",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::IVec3::assert_receiver_is_total_eq": {
      "namespace": "glam::IVec3",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::IVec3::clamp": {
      "namespace": "glam::IVec3",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`i32::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::IVec3::clone": {
      "namespace": "glam::IVec3",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::cmpeq": {
      "namespace": "glam::IVec3",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::IVec3::cmpge": {
      "namespace": "glam::IVec3",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::IVec3::cmpgt": {
      "namespace": "glam::IVec3",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::IVec3::cmple": {
      "namespace": "glam::IVec3",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::IVec3::cmplt": {
      "namespace": "glam::IVec3",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::IVec3::cmpne": {
      "namespace": "glam::IVec3",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::IVec3::cross": {
      "namespace": "glam::IVec3",
      "identifier": "cross",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Computes the cross product of `self` and `rhs`."
    },
    "glam::IVec3::distance_squared": {
      "namespace": "glam::IVec3",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::IVec3::div": {
      "namespace": "glam::IVec3",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::div-1": {
      "namespace": "glam::IVec3",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          }
        },
        {
          "kind": {
            "val": "glam::IVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::div-2": {
      "namespace": "glam::IVec3",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          }
        },
        {
          "kind": {
            "primitive": "i32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::div_euclid": {
      "namespace": "glam::IVec3",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow."
    },
    "glam::IVec3::dot": {
      "namespace": "glam::IVec3",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::IVec3::dot_into_vec": {
      "namespace": "glam::IVec3",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::IVec3::element_product": {
      "namespace": "glam::IVec3",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::IVec3::element_sum": {
      "namespace": "glam::IVec3",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::IVec3::eq": {
      "namespace": "glam::IVec3",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::IVec3::extend": {
      "namespace": "glam::IVec3",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` and the given `w` value."
    },
    "glam::IVec3::from_array": {
      "namespace": "glam::IVec3",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "i32"
              },
              3
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::IVec3::is_negative_bitmask": {
      "namespace": "glam::IVec3",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 3 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::IVec3::length_squared": {
      "namespace": "glam::IVec3",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::IVec3::max": {
      "namespace": "glam::IVec3",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::IVec3::max_element": {
      "namespace": "glam::IVec3",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::IVec3::min": {
      "namespace": "glam::IVec3",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::IVec3::min_element": {
      "namespace": "glam::IVec3",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::IVec3::mul": {
      "namespace": "glam::IVec3",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::mul-1": {
      "namespace": "glam::IVec3",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          }
        },
        {
          "kind": {
            "val": "glam::IVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::mul-2": {
      "namespace": "glam::IVec3",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          }
        },
        {
          "kind": {
            "primitive": "i32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::neg": {
      "namespace": "glam::IVec3",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::new": {
      "namespace": "glam::IVec3",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::IVec3::rem": {
      "namespace": "glam::IVec3",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::rem-1": {
      "namespace": "glam::IVec3",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          }
        },
        {
          "kind": {
            "val": "glam::IVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::rem-2": {
      "namespace": "glam::IVec3",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          }
        },
        {
          "kind": {
            "primitive": "i32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::rem_euclid": {
      "namespace": "glam::IVec3",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow.\n [Euclidean division]: i32::rem_euclid"
    },
    "glam::IVec3::saturating_add": {
      "namespace": "glam::IVec3",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::IVec3::saturating_add_unsigned": {
      "namespace": "glam::IVec3",
      "identifier": "saturating_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " In other words this computes `[self.x.saturating_add_unsigned(rhs.x), self.y.saturating_add_unsigned(rhs.y), ..]`."
    },
    "glam::IVec3::saturating_div": {
      "namespace": "glam::IVec3",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::IVec3::saturating_mul": {
      "namespace": "glam::IVec3",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::IVec3::saturating_sub": {
      "namespace": "glam::IVec3",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::IVec3::saturating_sub_unsigned": {
      "namespace": "glam::IVec3",
      "identifier": "saturating_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.saturating_sub_unsigned(rhs.x), self.y.saturating_sub_unsigned(rhs.y), ..]`."
    },
    "glam::IVec3::select": {
      "namespace": "glam::IVec3",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec3"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::IVec3::signum": {
      "namespace": "glam::IVec3",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n  - `0` if the number is zero\n  - `1` if the number is positive\n  - `-1` if the number is negative"
    },
    "glam::IVec3::splat": {
      "namespace": "glam::IVec3",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::IVec3::sub": {
      "namespace": "glam::IVec3",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::sub-1": {
      "namespace": "glam::IVec3",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          }
        },
        {
          "kind": {
            "val": "glam::IVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::sub-2": {
      "namespace": "glam::IVec3",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          }
        },
        {
          "kind": {
            "primitive": "i32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::to_array": {
      "namespace": "glam::IVec3",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "i32"
            },
            3
          ]
        }
      },
      "documentation": " `[x, y, z]`"
    },
    "glam::IVec3::truncate": {
      "namespace": "glam::IVec3",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Creates a 2D vector from the `x` and `y` elements of `self`, discarding `z`.\n Truncation may also be performed by using [`self.xy()`][crate::swizzles::Vec3Swizzles::xy()]."
    },
    "glam::IVec3::with_x": {
      "namespace": "glam::IVec3",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `x`."
    },
    "glam::IVec3::with_y": {
      "namespace": "glam::IVec3",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `y`."
    },
    "glam::IVec3::with_z": {
      "namespace": "glam::IVec3",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `z`."
    },
    "glam::IVec3::wrapping_add": {
      "namespace": "glam::IVec3",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::IVec3::wrapping_add_unsigned": {
      "namespace": "glam::IVec3",
      "identifier": "wrapping_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_add_unsigned(rhs.x), self.y.wrapping_add_unsigned(rhs.y), ..]`."
    },
    "glam::IVec3::wrapping_div": {
      "namespace": "glam::IVec3",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::IVec3::wrapping_mul": {
      "namespace": "glam::IVec3",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::IVec3::wrapping_sub": {
      "namespace": "glam::IVec3",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::IVec3::wrapping_sub_unsigned": {
      "namespace": "glam::IVec3",
      "identifier": "wrapping_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_sub_unsigned(rhs.x), self.y.wrapping_sub_unsigned(rhs.y), ..]`."
    },
    "glam::IVec4::abs": {
      "namespace": "glam::IVec4",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::IVec4::add": {
      "namespace": "glam::IVec4",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::add-1": {
      "namespace": "glam::IVec4",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          }
        },
        {
          "kind": {
            "val": "glam::IVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::add-2": {
      "namespace": "glam::IVec4",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          }
        },
        {
          "kind": {
            "primitive": "i32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::as_dvec4": {
      "namespace": "glam::IVec4",
      "identifier": "as_dvec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::IVec4::as_i16vec4": {
      "namespace": "glam::IVec4",
      "identifier": "as_i16vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i16`."
    },
    "glam::IVec4::as_i64vec4": {
      "namespace": "glam::IVec4",
      "identifier": "as_i64vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::IVec4::as_i8vec4": {
      "namespace": "glam::IVec4",
      "identifier": "as_i8vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i8`."
    },
    "glam::IVec4::as_u16vec4": {
      "namespace": "glam::IVec4",
      "identifier": "as_u16vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u16`."
    },
    "glam::IVec4::as_u64vec4": {
      "namespace": "glam::IVec4",
      "identifier": "as_u64vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::IVec4::as_u8vec4": {
      "namespace": "glam::IVec4",
      "identifier": "as_u8vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u8`."
    },
    "glam::IVec4::as_uvec4": {
      "namespace": "glam::IVec4",
      "identifier": "as_uvec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::IVec4::as_vec4": {
      "namespace": "glam::IVec4",
      "identifier": "as_vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::IVec4::assert_receiver_is_total_eq": {
      "namespace": "glam::IVec4",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::IVec4::clamp": {
      "namespace": "glam::IVec4",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`i32::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::IVec4::clone": {
      "namespace": "glam::IVec4",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::cmpeq": {
      "namespace": "glam::IVec4",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::IVec4::cmpge": {
      "namespace": "glam::IVec4",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::IVec4::cmpgt": {
      "namespace": "glam::IVec4",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::IVec4::cmple": {
      "namespace": "glam::IVec4",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::IVec4::cmplt": {
      "namespace": "glam::IVec4",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::IVec4::cmpne": {
      "namespace": "glam::IVec4",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::IVec4::distance_squared": {
      "namespace": "glam::IVec4",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::IVec4::div": {
      "namespace": "glam::IVec4",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::div-1": {
      "namespace": "glam::IVec4",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          }
        },
        {
          "kind": {
            "val": "glam::IVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::div-2": {
      "namespace": "glam::IVec4",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          }
        },
        {
          "kind": {
            "primitive": "i32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::div_euclid": {
      "namespace": "glam::IVec4",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow."
    },
    "glam::IVec4::dot": {
      "namespace": "glam::IVec4",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::IVec4::dot_into_vec": {
      "namespace": "glam::IVec4",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::IVec4::element_product": {
      "namespace": "glam::IVec4",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::IVec4::element_sum": {
      "namespace": "glam::IVec4",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::IVec4::eq": {
      "namespace": "glam::IVec4",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::IVec4::from_array": {
      "namespace": "glam::IVec4",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "i32"
              },
              4
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::IVec4::is_negative_bitmask": {
      "namespace": "glam::IVec4",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 4 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::IVec4::length_squared": {
      "namespace": "glam::IVec4",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::IVec4::max": {
      "namespace": "glam::IVec4",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::IVec4::max_element": {
      "namespace": "glam::IVec4",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::IVec4::min": {
      "namespace": "glam::IVec4",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::IVec4::min_element": {
      "namespace": "glam::IVec4",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::IVec4::mul": {
      "namespace": "glam::IVec4",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::mul-1": {
      "namespace": "glam::IVec4",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          }
        },
        {
          "kind": {
            "val": "glam::IVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::mul-2": {
      "namespace": "glam::IVec4",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          }
        },
        {
          "kind": {
            "primitive": "i32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::neg": {
      "namespace": "glam::IVec4",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::new": {
      "namespace": "glam::IVec4",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "z"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::IVec4::rem": {
      "namespace": "glam::IVec4",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::rem-1": {
      "namespace": "glam::IVec4",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          }
        },
        {
          "kind": {
            "val": "glam::IVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::rem-2": {
      "namespace": "glam::IVec4",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          }
        },
        {
          "kind": {
            "primitive": "i32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::rem_euclid": {
      "namespace": "glam::IVec4",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow.\n [Euclidean division]: i32::rem_euclid"
    },
    "glam::IVec4::saturating_add": {
      "namespace": "glam::IVec4",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::IVec4::saturating_add_unsigned": {
      "namespace": "glam::IVec4",
      "identifier": "saturating_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " In other words this computes `[self.x.saturating_add_unsigned(rhs.x), self.y.saturating_add_unsigned(rhs.y), ..]`."
    },
    "glam::IVec4::saturating_div": {
      "namespace": "glam::IVec4",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::IVec4::saturating_mul": {
      "namespace": "glam::IVec4",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::IVec4::saturating_sub": {
      "namespace": "glam::IVec4",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::IVec4::saturating_sub_unsigned": {
      "namespace": "glam::IVec4",
      "identifier": "saturating_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.saturating_sub_unsigned(rhs.x), self.y.saturating_sub_unsigned(rhs.y), ..]`."
    },
    "glam::IVec4::select": {
      "namespace": "glam::IVec4",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec4"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::IVec4::signum": {
      "namespace": "glam::IVec4",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n  - `0` if the number is zero\n  - `1` if the number is positive\n  - `-1` if the number is negative"
    },
    "glam::IVec4::splat": {
      "namespace": "glam::IVec4",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::IVec4::sub": {
      "namespace": "glam::IVec4",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::sub-1": {
      "namespace": "glam::IVec4",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          }
        },
        {
          "kind": {
            "val": "glam::IVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::sub-2": {
      "namespace": "glam::IVec4",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          }
        },
        {
          "kind": {
            "primitive": "i32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::to_array": {
      "namespace": "glam::IVec4",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "i32"
            },
            4
          ]
        }
      },
      "documentation": " `[x, y, z, w]`"
    },
    "glam::IVec4::truncate": {
      "namespace": "glam::IVec4",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Creates a 3D vector from the `x`, `y` and `z` elements of `self`, discarding `w`.\n Truncation to [`IVec3`] may also be performed by using [`self.xyz()`][crate::swizzles::Vec4Swizzles::xyz()]."
    },
    "glam::IVec4::with_w": {
      "namespace": "glam::IVec4",
      "identifier": "with_w",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `w`."
    },
    "glam::IVec4::with_x": {
      "namespace": "glam::IVec4",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `x`."
    },
    "glam::IVec4::with_y": {
      "namespace": "glam::IVec4",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `y`."
    },
    "glam::IVec4::with_z": {
      "namespace": "glam::IVec4",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `z`."
    },
    "glam::IVec4::wrapping_add": {
      "namespace": "glam::IVec4",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::IVec4::wrapping_add_unsigned": {
      "namespace": "glam::IVec4",
      "identifier": "wrapping_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_add_unsigned(rhs.x), self.y.wrapping_add_unsigned(rhs.y), ..]`."
    },
    "glam::IVec4::wrapping_div": {
      "namespace": "glam::IVec4",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::IVec4::wrapping_mul": {
      "namespace": "glam::IVec4",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::IVec4::wrapping_sub": {
      "namespace": "glam::IVec4",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::IVec4::wrapping_sub_unsigned": {
      "namespace": "glam::IVec4",
      "identifier": "wrapping_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_sub_unsigned(rhs.x), self.y.wrapping_sub_unsigned(rhs.y), ..]`."
    },
    "glam::Mat2::abs": {
      "namespace": "glam::Mat2",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Takes the absolute value of each element in `self`"
    },
    "glam::Mat2::abs_diff_eq": {
      "namespace": "glam::Mat2",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Mat2"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs`\n is less than or equal to `max_abs_diff`.\n This can be used to compare if two matrices contain similar elements. It works best\n when comparing with a known value. The `max_abs_diff` that should be used used\n depends on the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::Mat2::add": {
      "namespace": "glam::Mat2",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Mat2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      }
    },
    "glam::Mat2::add_mat2": {
      "namespace": "glam::Mat2",
      "identifier": "add_mat2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Adds two 2x2 matrices."
    },
    "glam::Mat2::as_dmat2": {
      "namespace": "glam::Mat2",
      "identifier": "as_dmat2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      }
    },
    "glam::Mat2::clone": {
      "namespace": "glam::Mat2",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      }
    },
    "glam::Mat2::col": {
      "namespace": "glam::Mat2",
      "identifier": "col",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns the matrix column for the given `index`.\n # Panics\n Panics if `index` is greater than 1."
    },
    "glam::Mat2::determinant": {
      "namespace": "glam::Mat2",
      "identifier": "determinant",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the determinant of `self`."
    },
    "glam::Mat2::div": {
      "namespace": "glam::Mat2",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      }
    },
    "glam::Mat2::div_scalar": {
      "namespace": "glam::Mat2",
      "identifier": "div_scalar",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Divides a 2x2 matrix by a scalar."
    },
    "glam::Mat2::eq": {
      "namespace": "glam::Mat2",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::Mat2::from_angle": {
      "namespace": "glam::Mat2",
      "identifier": "from_angle",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Creates a 2x2 matrix containing a rotation of `angle` (in radians)."
    },
    "glam::Mat2::from_cols": {
      "namespace": "glam::Mat2",
      "identifier": "from_cols",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "x_axis"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "y_axis"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Creates a 2x2 matrix from two column vectors."
    },
    "glam::Mat2::from_diagonal": {
      "namespace": "glam::Mat2",
      "identifier": "from_diagonal",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "diagonal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Creates a 2x2 matrix with its diagonal set to `diagonal` and all other entries set to 0."
    },
    "glam::Mat2::from_mat3": {
      "namespace": "glam::Mat2",
      "identifier": "from_mat3",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Creates a 2x2 matrix from a 3x3 matrix, discarding the 2nd row and column."
    },
    "glam::Mat2::from_mat3_minor": {
      "namespace": "glam::Mat2",
      "identifier": "from_mat3_minor",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3"
          },
          "name": "m"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "i"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "j"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Creates a 2x2 matrix from the minor of the given 3x3 matrix, discarding the `i`th column\n and `j`th row.\n # Panics\n Panics if `i` or `j` is greater than 2."
    },
    "glam::Mat2::from_mat3a": {
      "namespace": "glam::Mat2",
      "identifier": "from_mat3a",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3A"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Creates a 2x2 matrix from a 3x3 matrix, discarding the 2nd row and column."
    },
    "glam::Mat2::from_mat3a_minor": {
      "namespace": "glam::Mat2",
      "identifier": "from_mat3a_minor",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3A"
          },
          "name": "m"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "i"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "j"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Creates a 2x2 matrix from the minor of the given 3x3 matrix, discarding the `i`th column\n and `j`th row.\n # Panics\n Panics if `i` or `j` is greater than 2."
    },
    "glam::Mat2::from_scale_angle": {
      "namespace": "glam::Mat2",
      "identifier": "from_scale_angle",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "scale"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Creates a 2x2 matrix containing the combining non-uniform `scale` and rotation of\n `angle` (in radians)."
    },
    "glam::Mat2::inverse": {
      "namespace": "glam::Mat2",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Returns the inverse of `self`.\n If the matrix is not invertible the returned matrix will be invalid.\n # Panics\n Will panic if the determinant of `self` is zero when `glam_assert` is enabled."
    },
    "glam::Mat2::is_finite": {
      "namespace": "glam::Mat2",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.\n If any element is either `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::Mat2::is_nan": {
      "namespace": "glam::Mat2",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::Mat2::mul": {
      "namespace": "glam::Mat2",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Mat2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      }
    },
    "glam::Mat2::mul-1": {
      "namespace": "glam::Mat2",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat2"
          }
        },
        {
          "kind": {
            "val": "glam::Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Mat2::mul-2": {
      "namespace": "glam::Mat2",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat2"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      }
    },
    "glam::Mat2::mul_mat2": {
      "namespace": "glam::Mat2",
      "identifier": "mul_mat2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Multiplies two 2x2 matrices."
    },
    "glam::Mat2::mul_scalar": {
      "namespace": "glam::Mat2",
      "identifier": "mul_scalar",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Multiplies a 2x2 matrix by a scalar."
    },
    "glam::Mat2::mul_vec2": {
      "namespace": "glam::Mat2",
      "identifier": "mul_vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Transforms a 2D vector."
    },
    "glam::Mat2::neg": {
      "namespace": "glam::Mat2",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      }
    },
    "glam::Mat2::row": {
      "namespace": "glam::Mat2",
      "identifier": "row",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns the matrix row for the given `index`.\n # Panics\n Panics if `index` is greater than 1."
    },
    "glam::Mat2::sub": {
      "namespace": "glam::Mat2",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Mat2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      }
    },
    "glam::Mat2::sub_mat2": {
      "namespace": "glam::Mat2",
      "identifier": "sub_mat2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Subtracts two 2x2 matrices."
    },
    "glam::Mat2::to_cols_array": {
      "namespace": "glam::Mat2",
      "identifier": "to_cols_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f32"
            },
            4
          ]
        }
      },
      "documentation": " Creates a `[f32; 4]` array storing data in column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::Mat2::to_cols_array_2d": {
      "namespace": "glam::Mat2",
      "identifier": "to_cols_array_2d",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "array": [
                {
                  "primitive": "f32"
                },
                2
              ]
            },
            2
          ]
        }
      },
      "documentation": " Creates a `[[f32; 2]; 2]` 2D array storing data in column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::Mat2::transpose": {
      "namespace": "glam::Mat2",
      "identifier": "transpose",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Returns the transpose of `self`."
    },
    "glam::Mat3::abs": {
      "namespace": "glam::Mat3",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Takes the absolute value of each element in `self`"
    },
    "glam::Mat3::abs_diff_eq": {
      "namespace": "glam::Mat3",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Mat3"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs`\n is less than or equal to `max_abs_diff`.\n This can be used to compare if two matrices contain similar elements. It works best\n when comparing with a known value. The `max_abs_diff` that should be used used\n depends on the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::Mat3::add": {
      "namespace": "glam::Mat3",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Mat3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      }
    },
    "glam::Mat3::add_mat3": {
      "namespace": "glam::Mat3",
      "identifier": "add_mat3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Adds two 3x3 matrices."
    },
    "glam::Mat3::as_dmat3": {
      "namespace": "glam::Mat3",
      "identifier": "as_dmat3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      }
    },
    "glam::Mat3::clone": {
      "namespace": "glam::Mat3",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      }
    },
    "glam::Mat3::col": {
      "namespace": "glam::Mat3",
      "identifier": "col",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns the matrix column for the given `index`.\n # Panics\n Panics if `index` is greater than 2."
    },
    "glam::Mat3::determinant": {
      "namespace": "glam::Mat3",
      "identifier": "determinant",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the determinant of `self`."
    },
    "glam::Mat3::div": {
      "namespace": "glam::Mat3",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      }
    },
    "glam::Mat3::div_scalar": {
      "namespace": "glam::Mat3",
      "identifier": "div_scalar",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Divides a 3x3 matrix by a scalar."
    },
    "glam::Mat3::eq": {
      "namespace": "glam::Mat3",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::Mat3::from_angle": {
      "namespace": "glam::Mat3",
      "identifier": "from_angle",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 2D rotation `angle` (in\n radians).\n The resulting matrix can be used to transform 2D points and vectors. See\n [`Self::transform_point2()`] and [`Self::transform_vector2()`]."
    },
    "glam::Mat3::from_axis_angle": {
      "namespace": "glam::Mat3",
      "identifier": "from_axis_angle",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "axis"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Creates a 3D rotation matrix from a normalized rotation `axis` and `angle` (in\n radians).\n # Panics\n Will panic if `axis` is not normalized when `glam_assert` is enabled."
    },
    "glam::Mat3::from_cols": {
      "namespace": "glam::Mat3",
      "identifier": "from_cols",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "x_axis"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "y_axis"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "z_axis"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Creates a 3x3 matrix from three column vectors."
    },
    "glam::Mat3::from_diagonal": {
      "namespace": "glam::Mat3",
      "identifier": "from_diagonal",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "diagonal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Creates a 3x3 matrix with its diagonal set to `diagonal` and all other entries set to 0."
    },
    "glam::Mat3::from_euler": {
      "namespace": "glam::Mat3",
      "identifier": "from_euler",
      "arguments": [
        {
          "kind": {
            "val": "glam::EulerRot"
          },
          "name": "order"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "a"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "b"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "c"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Creates a 3D rotation matrix from the given euler rotation sequence and the angles (in\n radians)."
    },
    "glam::Mat3::from_mat2": {
      "namespace": "glam::Mat3",
      "identifier": "from_mat2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat2"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 2x2 matrix.\n The resulting matrix can be used to transform 2D points and vectors. See\n [`Self::transform_point2()`] and [`Self::transform_vector2()`]."
    },
    "glam::Mat3::from_mat4": {
      "namespace": "glam::Mat3",
      "identifier": "from_mat4",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat4"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th row and column."
    },
    "glam::Mat3::from_mat4_minor": {
      "namespace": "glam::Mat3",
      "identifier": "from_mat4_minor",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat4"
          },
          "name": "m"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "i"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "j"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Creates a 3x3 matrix from the minor of the given 4x4 matrix, discarding the `i`th column\n and `j`th row.\n # Panics\n Panics if `i` or `j` is greater than 3."
    },
    "glam::Mat3::from_quat": {
      "namespace": "glam::Mat3",
      "identifier": "from_quat",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Creates a 3D rotation matrix from the given quaternion.\n # Panics\n Will panic if `rotation` is not normalized when `glam_assert` is enabled."
    },
    "glam::Mat3::from_rotation_x": {
      "namespace": "glam::Mat3",
      "identifier": "from_rotation_x",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Creates a 3D rotation matrix from `angle` (in radians) around the x axis."
    },
    "glam::Mat3::from_rotation_y": {
      "namespace": "glam::Mat3",
      "identifier": "from_rotation_y",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Creates a 3D rotation matrix from `angle` (in radians) around the y axis."
    },
    "glam::Mat3::from_rotation_z": {
      "namespace": "glam::Mat3",
      "identifier": "from_rotation_z",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Creates a 3D rotation matrix from `angle` (in radians) around the z axis."
    },
    "glam::Mat3::from_scale": {
      "namespace": "glam::Mat3",
      "identifier": "from_scale",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "scale"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given non-uniform 2D `scale`.\n The resulting matrix can be used to transform 2D points and vectors. See\n [`Self::transform_point2()`] and [`Self::transform_vector2()`].\n # Panics\n Will panic if all elements of `scale` are zero when `glam_assert` is enabled."
    },
    "glam::Mat3::from_scale_angle_translation": {
      "namespace": "glam::Mat3",
      "identifier": "from_scale_angle_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "scale"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 2D `scale`, rotation `angle` (in\n radians) and `translation`.\n The resulting matrix can be used to transform 2D points and vectors. See\n [`Self::transform_point2()`] and [`Self::transform_vector2()`]."
    },
    "glam::Mat3::from_translation": {
      "namespace": "glam::Mat3",
      "identifier": "from_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 2D `translation`.\n The resulting matrix can be used to transform 2D points and vectors. See\n [`Self::transform_point2()`] and [`Self::transform_vector2()`]."
    },
    "glam::Mat3::inverse": {
      "namespace": "glam::Mat3",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Returns the inverse of `self`.\n If the matrix is not invertible the returned matrix will be invalid.\n # Panics\n Will panic if the determinant of `self` is zero when `glam_assert` is enabled."
    },
    "glam::Mat3::is_finite": {
      "namespace": "glam::Mat3",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.\n If any element is either `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::Mat3::is_nan": {
      "namespace": "glam::Mat3",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::Mat3::mul": {
      "namespace": "glam::Mat3",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Affine2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      }
    },
    "glam::Mat3::mul-1": {
      "namespace": "glam::Mat3",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3"
          }
        },
        {
          "kind": {
            "val": "glam::Mat3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      }
    },
    "glam::Mat3::mul-2": {
      "namespace": "glam::Mat3",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Mat3::mul-3": {
      "namespace": "glam::Mat3",
      "identifier": "mul-3",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Mat3::mul-4": {
      "namespace": "glam::Mat3",
      "identifier": "mul-4",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      }
    },
    "glam::Mat3::mul_mat3": {
      "namespace": "glam::Mat3",
      "identifier": "mul_mat3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Multiplies two 3x3 matrices."
    },
    "glam::Mat3::mul_scalar": {
      "namespace": "glam::Mat3",
      "identifier": "mul_scalar",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Multiplies a 3x3 matrix by a scalar."
    },
    "glam::Mat3::mul_vec3": {
      "namespace": "glam::Mat3",
      "identifier": "mul_vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Transforms a 3D vector."
    },
    "glam::Mat3::mul_vec3a": {
      "namespace": "glam::Mat3",
      "identifier": "mul_vec3a",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Transforms a [`Vec3A`]."
    },
    "glam::Mat3::neg": {
      "namespace": "glam::Mat3",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      }
    },
    "glam::Mat3::row": {
      "namespace": "glam::Mat3",
      "identifier": "row",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns the matrix row for the given `index`.\n # Panics\n Panics if `index` is greater than 2."
    },
    "glam::Mat3::sub": {
      "namespace": "glam::Mat3",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Mat3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      }
    },
    "glam::Mat3::sub_mat3": {
      "namespace": "glam::Mat3",
      "identifier": "sub_mat3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Subtracts two 3x3 matrices."
    },
    "glam::Mat3::to_cols_array": {
      "namespace": "glam::Mat3",
      "identifier": "to_cols_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f32"
            },
            9
          ]
        }
      },
      "documentation": " Creates a `[f32; 9]` array storing data in column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::Mat3::to_cols_array_2d": {
      "namespace": "glam::Mat3",
      "identifier": "to_cols_array_2d",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "array": [
                {
                  "primitive": "f32"
                },
                3
              ]
            },
            3
          ]
        }
      },
      "documentation": " Creates a `[[f32; 3]; 3]` 3D array storing data in column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::Mat3::to_euler": {
      "namespace": "glam::Mat3",
      "identifier": "to_euler",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::EulerRot"
          },
          "name": "order"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": [
            {
              "primitive": "f32"
            },
            {
              "primitive": "f32"
            },
            {
              "primitive": "f32"
            }
          ]
        }
      },
      "documentation": " Extract Euler angles with the given Euler rotation order.\n Note if the input matrix contains scales, shears, or other non-rotation transformations then\n the resulting Euler angles will be ill-defined.\n # Panics\n Will panic if any input matrix column is not normalized when `glam_assert` is enabled."
    },
    "glam::Mat3::transform_point2": {
      "namespace": "glam::Mat3",
      "identifier": "transform_point2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Transforms the given 2D vector as a point.\n This is the equivalent of multiplying `rhs` as a 3D vector where `z` is `1`.\n This method assumes that `self` contains a valid affine transform.\n # Panics\n Will panic if the 2nd row of `self` is not `(0, 0, 1)` when `glam_assert` is enabled."
    },
    "glam::Mat3::transform_vector2": {
      "namespace": "glam::Mat3",
      "identifier": "transform_vector2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Rotates the given 2D vector.\n This is the equivalent of multiplying `rhs` as a 3D vector where `z` is `0`.\n This method assumes that `self` contains a valid affine transform.\n # Panics\n Will panic if the 2nd row of `self` is not `(0, 0, 1)` when `glam_assert` is enabled."
    },
    "glam::Mat3::transpose": {
      "namespace": "glam::Mat3",
      "identifier": "transpose",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Returns the transpose of `self`."
    },
    "glam::Mat3A::abs": {
      "namespace": "glam::Mat3A",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Takes the absolute value of each element in `self`"
    },
    "glam::Mat3A::abs_diff_eq": {
      "namespace": "glam::Mat3A",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Mat3A"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs`\n is less than or equal to `max_abs_diff`.\n This can be used to compare if two matrices contain similar elements. It works best\n when comparing with a known value. The `max_abs_diff` that should be used used\n depends on the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::Mat3A::add": {
      "namespace": "glam::Mat3A",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Mat3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      }
    },
    "glam::Mat3A::add_mat3": {
      "namespace": "glam::Mat3A",
      "identifier": "add_mat3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Adds two 3x3 matrices."
    },
    "glam::Mat3A::as_dmat3": {
      "namespace": "glam::Mat3A",
      "identifier": "as_dmat3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      }
    },
    "glam::Mat3A::clone": {
      "namespace": "glam::Mat3A",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      }
    },
    "glam::Mat3A::col": {
      "namespace": "glam::Mat3A",
      "identifier": "col",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns the matrix column for the given `index`.\n # Panics\n Panics if `index` is greater than 2."
    },
    "glam::Mat3A::determinant": {
      "namespace": "glam::Mat3A",
      "identifier": "determinant",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the determinant of `self`."
    },
    "glam::Mat3A::div": {
      "namespace": "glam::Mat3A",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      }
    },
    "glam::Mat3A::div_scalar": {
      "namespace": "glam::Mat3A",
      "identifier": "div_scalar",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Divides a 3x3 matrix by a scalar."
    },
    "glam::Mat3A::eq": {
      "namespace": "glam::Mat3A",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::Mat3A::from_angle": {
      "namespace": "glam::Mat3A",
      "identifier": "from_angle",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 2D rotation `angle` (in\n radians).\n The resulting matrix can be used to transform 2D points and vectors. See\n [`Self::transform_point2()`] and [`Self::transform_vector2()`]."
    },
    "glam::Mat3A::from_axis_angle": {
      "namespace": "glam::Mat3A",
      "identifier": "from_axis_angle",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "axis"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Creates a 3D rotation matrix from a normalized rotation `axis` and `angle` (in\n radians).\n # Panics\n Will panic if `axis` is not normalized when `glam_assert` is enabled."
    },
    "glam::Mat3A::from_cols": {
      "namespace": "glam::Mat3A",
      "identifier": "from_cols",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "x_axis"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "y_axis"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "z_axis"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Creates a 3x3 matrix from three column vectors."
    },
    "glam::Mat3A::from_diagonal": {
      "namespace": "glam::Mat3A",
      "identifier": "from_diagonal",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "diagonal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Creates a 3x3 matrix with its diagonal set to `diagonal` and all other entries set to 0."
    },
    "glam::Mat3A::from_euler": {
      "namespace": "glam::Mat3A",
      "identifier": "from_euler",
      "arguments": [
        {
          "kind": {
            "val": "glam::EulerRot"
          },
          "name": "order"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "a"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "b"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "c"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Creates a 3D rotation matrix from the given euler rotation sequence and the angles (in\n radians)."
    },
    "glam::Mat3A::from_mat2": {
      "namespace": "glam::Mat3A",
      "identifier": "from_mat2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat2"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 2x2 matrix.\n The resulting matrix can be used to transform 2D points and vectors. See\n [`Self::transform_point2()`] and [`Self::transform_vector2()`]."
    },
    "glam::Mat3A::from_mat4": {
      "namespace": "glam::Mat3A",
      "identifier": "from_mat4",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat4"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th row and column."
    },
    "glam::Mat3A::from_mat4_minor": {
      "namespace": "glam::Mat3A",
      "identifier": "from_mat4_minor",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat4"
          },
          "name": "m"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "i"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "j"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Creates a 3x3 matrix from the minor of the given 4x4 matrix, discarding the `i`th column\n and `j`th row.\n # Panics\n Panics if `i` or `j` is greater than 3."
    },
    "glam::Mat3A::from_quat": {
      "namespace": "glam::Mat3A",
      "identifier": "from_quat",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Creates a 3D rotation matrix from the given quaternion.\n # Panics\n Will panic if `rotation` is not normalized when `glam_assert` is enabled."
    },
    "glam::Mat3A::from_rotation_x": {
      "namespace": "glam::Mat3A",
      "identifier": "from_rotation_x",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Creates a 3D rotation matrix from `angle` (in radians) around the x axis."
    },
    "glam::Mat3A::from_rotation_y": {
      "namespace": "glam::Mat3A",
      "identifier": "from_rotation_y",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Creates a 3D rotation matrix from `angle` (in radians) around the y axis."
    },
    "glam::Mat3A::from_rotation_z": {
      "namespace": "glam::Mat3A",
      "identifier": "from_rotation_z",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Creates a 3D rotation matrix from `angle` (in radians) around the z axis."
    },
    "glam::Mat3A::from_scale": {
      "namespace": "glam::Mat3A",
      "identifier": "from_scale",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "scale"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given non-uniform 2D `scale`.\n The resulting matrix can be used to transform 2D points and vectors. See\n [`Self::transform_point2()`] and [`Self::transform_vector2()`].\n # Panics\n Will panic if all elements of `scale` are zero when `glam_assert` is enabled."
    },
    "glam::Mat3A::from_scale_angle_translation": {
      "namespace": "glam::Mat3A",
      "identifier": "from_scale_angle_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "scale"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 2D `scale`, rotation `angle` (in\n radians) and `translation`.\n The resulting matrix can be used to transform 2D points and vectors. See\n [`Self::transform_point2()`] and [`Self::transform_vector2()`]."
    },
    "glam::Mat3A::from_translation": {
      "namespace": "glam::Mat3A",
      "identifier": "from_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 2D `translation`.\n The resulting matrix can be used to transform 2D points and vectors. See\n [`Self::transform_point2()`] and [`Self::transform_vector2()`]."
    },
    "glam::Mat3A::inverse": {
      "namespace": "glam::Mat3A",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Returns the inverse of `self`.\n If the matrix is not invertible the returned matrix will be invalid.\n # Panics\n Will panic if the determinant of `self` is zero when `glam_assert` is enabled."
    },
    "glam::Mat3A::is_finite": {
      "namespace": "glam::Mat3A",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.\n If any element is either `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::Mat3A::is_nan": {
      "namespace": "glam::Mat3A",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::Mat3A::mul": {
      "namespace": "glam::Mat3A",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Affine2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      }
    },
    "glam::Mat3A::mul-1": {
      "namespace": "glam::Mat3A",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3A"
          }
        },
        {
          "kind": {
            "val": "glam::Mat3A"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      }
    },
    "glam::Mat3A::mul-2": {
      "namespace": "glam::Mat3A",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3A"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Mat3A::mul-3": {
      "namespace": "glam::Mat3A",
      "identifier": "mul-3",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3A"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Mat3A::mul-4": {
      "namespace": "glam::Mat3A",
      "identifier": "mul-4",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3A"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      }
    },
    "glam::Mat3A::mul_mat3": {
      "namespace": "glam::Mat3A",
      "identifier": "mul_mat3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Multiplies two 3x3 matrices."
    },
    "glam::Mat3A::mul_scalar": {
      "namespace": "glam::Mat3A",
      "identifier": "mul_scalar",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Multiplies a 3x3 matrix by a scalar."
    },
    "glam::Mat3A::mul_vec3": {
      "namespace": "glam::Mat3A",
      "identifier": "mul_vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Transforms a 3D vector."
    },
    "glam::Mat3A::mul_vec3a": {
      "namespace": "glam::Mat3A",
      "identifier": "mul_vec3a",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Transforms a [`Vec3A`]."
    },
    "glam::Mat3A::neg": {
      "namespace": "glam::Mat3A",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      }
    },
    "glam::Mat3A::row": {
      "namespace": "glam::Mat3A",
      "identifier": "row",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns the matrix row for the given `index`.\n # Panics\n Panics if `index` is greater than 2."
    },
    "glam::Mat3A::sub": {
      "namespace": "glam::Mat3A",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Mat3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      }
    },
    "glam::Mat3A::sub_mat3": {
      "namespace": "glam::Mat3A",
      "identifier": "sub_mat3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Subtracts two 3x3 matrices."
    },
    "glam::Mat3A::to_cols_array": {
      "namespace": "glam::Mat3A",
      "identifier": "to_cols_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f32"
            },
            9
          ]
        }
      },
      "documentation": " Creates a `[f32; 9]` array storing data in column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::Mat3A::to_cols_array_2d": {
      "namespace": "glam::Mat3A",
      "identifier": "to_cols_array_2d",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "array": [
                {
                  "primitive": "f32"
                },
                3
              ]
            },
            3
          ]
        }
      },
      "documentation": " Creates a `[[f32; 3]; 3]` 3D array storing data in column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::Mat3A::to_euler": {
      "namespace": "glam::Mat3A",
      "identifier": "to_euler",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::EulerRot"
          },
          "name": "order"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": [
            {
              "primitive": "f32"
            },
            {
              "primitive": "f32"
            },
            {
              "primitive": "f32"
            }
          ]
        }
      },
      "documentation": " Extract Euler angles with the given Euler rotation order.\n Note if the input matrix contains scales, shears, or other non-rotation transformations then\n the resulting Euler angles will be ill-defined.\n # Panics\n Will panic if any input matrix column is not normalized when `glam_assert` is enabled."
    },
    "glam::Mat3A::transform_point2": {
      "namespace": "glam::Mat3A",
      "identifier": "transform_point2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Transforms the given 2D vector as a point.\n This is the equivalent of multiplying `rhs` as a 3D vector where `z` is `1`.\n This method assumes that `self` contains a valid affine transform.\n # Panics\n Will panic if the 2nd row of `self` is not `(0, 0, 1)` when `glam_assert` is enabled."
    },
    "glam::Mat3A::transform_vector2": {
      "namespace": "glam::Mat3A",
      "identifier": "transform_vector2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Rotates the given 2D vector.\n This is the equivalent of multiplying `rhs` as a 3D vector where `z` is `0`.\n This method assumes that `self` contains a valid affine transform.\n # Panics\n Will panic if the 2nd row of `self` is not `(0, 0, 1)` when `glam_assert` is enabled."
    },
    "glam::Mat3A::transpose": {
      "namespace": "glam::Mat3A",
      "identifier": "transpose",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Returns the transpose of `self`."
    },
    "glam::Mat4::abs": {
      "namespace": "glam::Mat4",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Takes the absolute value of each element in `self`"
    },
    "glam::Mat4::abs_diff_eq": {
      "namespace": "glam::Mat4",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Mat4"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs`\n is less than or equal to `max_abs_diff`.\n This can be used to compare if two matrices contain similar elements. It works best\n when comparing with a known value. The `max_abs_diff` that should be used used\n depends on the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::Mat4::add": {
      "namespace": "glam::Mat4",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Mat4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      }
    },
    "glam::Mat4::add_mat4": {
      "namespace": "glam::Mat4",
      "identifier": "add_mat4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Adds two 4x4 matrices."
    },
    "glam::Mat4::as_dmat4": {
      "namespace": "glam::Mat4",
      "identifier": "as_dmat4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      }
    },
    "glam::Mat4::clone": {
      "namespace": "glam::Mat4",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      }
    },
    "glam::Mat4::col": {
      "namespace": "glam::Mat4",
      "identifier": "col",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns the matrix column for the given `index`.\n # Panics\n Panics if `index` is greater than 3."
    },
    "glam::Mat4::determinant": {
      "namespace": "glam::Mat4",
      "identifier": "determinant",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the determinant of `self`."
    },
    "glam::Mat4::div": {
      "namespace": "glam::Mat4",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      }
    },
    "glam::Mat4::div_scalar": {
      "namespace": "glam::Mat4",
      "identifier": "div_scalar",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Divides a 4x4 matrix by a scalar."
    },
    "glam::Mat4::eq": {
      "namespace": "glam::Mat4",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::Mat4::from_axis_angle": {
      "namespace": "glam::Mat4",
      "identifier": "from_axis_angle",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "axis"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates an affine transformation matrix containing a 3D rotation around a normalized\n rotation `axis` of `angle` (in radians).\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`].\n # Panics\n Will panic if `axis` is not normalized when `glam_assert` is enabled."
    },
    "glam::Mat4::from_cols": {
      "namespace": "glam::Mat4",
      "identifier": "from_cols",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "x_axis"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "y_axis"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "z_axis"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "w_axis"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates a 4x4 matrix from four column vectors."
    },
    "glam::Mat4::from_diagonal": {
      "namespace": "glam::Mat4",
      "identifier": "from_diagonal",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "diagonal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates a 4x4 matrix with its diagonal set to `diagonal` and all other entries set to 0."
    },
    "glam::Mat4::from_euler": {
      "namespace": "glam::Mat4",
      "identifier": "from_euler",
      "arguments": [
        {
          "kind": {
            "val": "glam::EulerRot"
          },
          "name": "order"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "a"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "b"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "c"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates a affine transformation matrix containing a rotation from the given euler\n rotation sequence and angles (in radians).\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`]."
    },
    "glam::Mat4::from_mat3": {
      "namespace": "glam::Mat4",
      "identifier": "from_mat3",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 3x3 linear transformation\n matrix.\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`]."
    },
    "glam::Mat4::from_mat3a": {
      "namespace": "glam::Mat4",
      "identifier": "from_mat3a",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3A"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 3x3 linear transformation\n matrix.\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`]."
    },
    "glam::Mat4::from_quat": {
      "namespace": "glam::Mat4",
      "identifier": "from_quat",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given `rotation` quaternion.\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`].\n # Panics\n Will panic if `rotation` is not normalized when `glam_assert` is enabled."
    },
    "glam::Mat4::from_rotation_translation": {
      "namespace": "glam::Mat4",
      "identifier": "from_rotation_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 3D `translation`.\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`].\n # Panics\n Will panic if `rotation` is not normalized when `glam_assert` is enabled."
    },
    "glam::Mat4::from_rotation_x": {
      "namespace": "glam::Mat4",
      "identifier": "from_rotation_x",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates an affine transformation matrix containing a 3D rotation around the x axis of\n `angle` (in radians).\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`]."
    },
    "glam::Mat4::from_rotation_y": {
      "namespace": "glam::Mat4",
      "identifier": "from_rotation_y",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates an affine transformation matrix containing a 3D rotation around the y axis of\n `angle` (in radians).\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`]."
    },
    "glam::Mat4::from_rotation_z": {
      "namespace": "glam::Mat4",
      "identifier": "from_rotation_z",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates an affine transformation matrix containing a 3D rotation around the z axis of\n `angle` (in radians).\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`]."
    },
    "glam::Mat4::from_scale": {
      "namespace": "glam::Mat4",
      "identifier": "from_scale",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "scale"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates an affine transformation matrix containing the given 3D non-uniform `scale`.\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`].\n # Panics\n Will panic if all elements of `scale` are zero when `glam_assert` is enabled."
    },
    "glam::Mat4::from_scale_rotation_translation": {
      "namespace": "glam::Mat4",
      "identifier": "from_scale_rotation_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "scale"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 3D `scale`, `rotation` and\n `translation`.\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`].\n # Panics\n Will panic if `rotation` is not normalized when `glam_assert` is enabled."
    },
    "glam::Mat4::from_translation": {
      "namespace": "glam::Mat4",
      "identifier": "from_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 3D `translation`.\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`]."
    },
    "glam::Mat4::inverse": {
      "namespace": "glam::Mat4",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Returns the inverse of `self`.\n If the matrix is not invertible the returned matrix will be invalid.\n # Panics\n Will panic if the determinant of `self` is zero when `glam_assert` is enabled."
    },
    "glam::Mat4::is_finite": {
      "namespace": "glam::Mat4",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.\n If any element is either `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::Mat4::is_nan": {
      "namespace": "glam::Mat4",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::Mat4::look_at_lh": {
      "namespace": "glam::Mat4",
      "identifier": "look_at_lh",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "center"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates a left-handed view matrix using a camera position, an up direction, and a focal\n point.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=forward`.\n # Panics\n Will panic if `up` is not normalized when `glam_assert` is enabled."
    },
    "glam::Mat4::look_at_rh": {
      "namespace": "glam::Mat4",
      "identifier": "look_at_rh",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "center"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates a right-handed view matrix using a camera position, an up direction, and a focal\n point.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=back`.\n # Panics\n Will panic if `up` is not normalized when `glam_assert` is enabled."
    },
    "glam::Mat4::look_to_lh": {
      "namespace": "glam::Mat4",
      "identifier": "look_to_lh",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "dir"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates a left-handed view matrix using a camera position, an up direction, and a facing\n direction.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=forward`."
    },
    "glam::Mat4::look_to_rh": {
      "namespace": "glam::Mat4",
      "identifier": "look_to_rh",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "dir"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates a right-handed view matrix using a camera position, an up direction, and a facing\n direction.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=back`."
    },
    "glam::Mat4::mul": {
      "namespace": "glam::Mat4",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Affine3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      }
    },
    "glam::Mat4::mul-1": {
      "namespace": "glam::Mat4",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat4"
          }
        },
        {
          "kind": {
            "val": "glam::Mat4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      }
    },
    "glam::Mat4::mul-2": {
      "namespace": "glam::Mat4",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat4"
          }
        },
        {
          "kind": {
            "val": "glam::Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Mat4::mul-3": {
      "namespace": "glam::Mat4",
      "identifier": "mul-3",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat4"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      }
    },
    "glam::Mat4::mul_mat4": {
      "namespace": "glam::Mat4",
      "identifier": "mul_mat4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Multiplies two 4x4 matrices."
    },
    "glam::Mat4::mul_scalar": {
      "namespace": "glam::Mat4",
      "identifier": "mul_scalar",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Multiplies a 4x4 matrix by a scalar."
    },
    "glam::Mat4::mul_vec4": {
      "namespace": "glam::Mat4",
      "identifier": "mul_vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Transforms a 4D vector."
    },
    "glam::Mat4::neg": {
      "namespace": "glam::Mat4",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      }
    },
    "glam::Mat4::orthographic_lh": {
      "namespace": "glam::Mat4",
      "identifier": "orthographic_lh",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "left"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "right"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "bottom"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "top"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "near"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "far"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates a left-handed orthographic projection matrix with `[0,1]` depth range.\n Useful to map a left-handed coordinate system to the normalized device coordinates that WebGPU/Direct3D/Metal expect."
    },
    "glam::Mat4::orthographic_rh": {
      "namespace": "glam::Mat4",
      "identifier": "orthographic_rh",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "left"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "right"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "bottom"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "top"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "near"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "far"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates a right-handed orthographic projection matrix with `[0,1]` depth range.\n Useful to map a right-handed coordinate system to the normalized device coordinates that WebGPU/Direct3D/Metal expect."
    },
    "glam::Mat4::orthographic_rh_gl": {
      "namespace": "glam::Mat4",
      "identifier": "orthographic_rh_gl",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "left"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "right"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "bottom"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "top"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "near"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "far"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates a right-handed orthographic projection matrix with `[-1,1]` depth\n range.  This is the same as the OpenGL `glOrtho` function in OpenGL.\n See\n <https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glOrtho.xml>\n Useful to map a right-handed coordinate system to the normalized device coordinates that OpenGL expects."
    },
    "glam::Mat4::perspective_infinite_lh": {
      "namespace": "glam::Mat4",
      "identifier": "perspective_infinite_lh",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "fov_y_radians"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "aspect_ratio"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z_near"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates an infinite left-handed perspective projection matrix with `[0,1]` depth range.\n Like `perspective_lh`, but with an infinite value for `z_far`.\n The result is that points near `z_near` are mapped to depth `0`, and as they move towards infinity the depth approaches `1`.\n # Panics\n Will panic if `z_near` or `z_far` are less than or equal to zero when `glam_assert` is\n enabled."
    },
    "glam::Mat4::perspective_infinite_reverse_lh": {
      "namespace": "glam::Mat4",
      "identifier": "perspective_infinite_reverse_lh",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "fov_y_radians"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "aspect_ratio"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z_near"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates an infinite reverse left-handed perspective projection matrix with `[0,1]` depth range.\n Similar to `perspective_infinite_lh`, but maps `Z = z_near` to a depth of `1` and `Z = infinity` to a depth of `0`.\n # Panics\n Will panic if `z_near` is less than or equal to zero when `glam_assert` is enabled."
    },
    "glam::Mat4::perspective_infinite_reverse_rh": {
      "namespace": "glam::Mat4",
      "identifier": "perspective_infinite_reverse_rh",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "fov_y_radians"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "aspect_ratio"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z_near"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates an infinite reverse right-handed perspective projection matrix with `[0,1]` depth range.\n Similar to `perspective_infinite_rh`, but maps `Z = z_near` to a depth of `1` and `Z = infinity` to a depth of `0`.\n # Panics\n Will panic if `z_near` is less than or equal to zero when `glam_assert` is enabled."
    },
    "glam::Mat4::perspective_infinite_rh": {
      "namespace": "glam::Mat4",
      "identifier": "perspective_infinite_rh",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "fov_y_radians"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "aspect_ratio"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z_near"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates an infinite right-handed perspective projection matrix with `[0,1]` depth range.\n Like `perspective_rh`, but with an infinite value for `z_far`.\n The result is that points near `z_near` are mapped to depth `0`, and as they move towards infinity the depth approaches `1`.\n # Panics\n Will panic if `z_near` or `z_far` are less than or equal to zero when `glam_assert` is\n enabled."
    },
    "glam::Mat4::perspective_lh": {
      "namespace": "glam::Mat4",
      "identifier": "perspective_lh",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "fov_y_radians"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "aspect_ratio"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z_near"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z_far"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates a left-handed perspective projection matrix with `[0,1]` depth range.\n Useful to map the standard left-handed coordinate system into what WebGPU/Metal/Direct3D expect.\n # Panics\n Will panic if `z_near` or `z_far` are less than or equal to zero when `glam_assert` is\n enabled."
    },
    "glam::Mat4::perspective_rh": {
      "namespace": "glam::Mat4",
      "identifier": "perspective_rh",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "fov_y_radians"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "aspect_ratio"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z_near"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z_far"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates a right-handed perspective projection matrix with `[0,1]` depth range.\n Useful to map the standard right-handed coordinate system into what WebGPU/Metal/Direct3D expect.\n # Panics\n Will panic if `z_near` or `z_far` are less than or equal to zero when `glam_assert` is\n enabled."
    },
    "glam::Mat4::perspective_rh_gl": {
      "namespace": "glam::Mat4",
      "identifier": "perspective_rh_gl",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "fov_y_radians"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "aspect_ratio"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z_near"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z_far"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates a right-handed perspective projection matrix with `[-1,1]` depth range.\n Useful to map the standard right-handed coordinate system into what OpenGL expects.\n This is the same as the OpenGL `gluPerspective` function.\n See <https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluPerspective.xml>"
    },
    "glam::Mat4::project_point3": {
      "namespace": "glam::Mat4",
      "identifier": "project_point3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Transforms the given 3D vector as a point, applying perspective correction.\n This is the equivalent of multiplying the 3D vector as a 4D vector where `w` is `1.0`.\n The perspective divide is performed meaning the resulting 3D vector is divided by `w`.\n This method assumes that `self` contains a projective transform."
    },
    "glam::Mat4::project_point3a": {
      "namespace": "glam::Mat4",
      "identifier": "project_point3a",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Transforms the given [`Vec3A`] as a 3D point, applying perspective correction.\n This is the equivalent of multiplying the [`Vec3A`] as a 4D vector where `w` is `1.0`.\n The perspective divide is performed meaning the resulting 3D vector is divided by `w`.\n This method assumes that `self` contains a projective transform."
    },
    "glam::Mat4::row": {
      "namespace": "glam::Mat4",
      "identifier": "row",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns the matrix row for the given `index`.\n # Panics\n Panics if `index` is greater than 3."
    },
    "glam::Mat4::sub": {
      "namespace": "glam::Mat4",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Mat4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      }
    },
    "glam::Mat4::sub_mat4": {
      "namespace": "glam::Mat4",
      "identifier": "sub_mat4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Subtracts two 4x4 matrices."
    },
    "glam::Mat4::to_cols_array": {
      "namespace": "glam::Mat4",
      "identifier": "to_cols_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f32"
            },
            16
          ]
        }
      },
      "documentation": " Creates a `[f32; 16]` array storing data in column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::Mat4::to_cols_array_2d": {
      "namespace": "glam::Mat4",
      "identifier": "to_cols_array_2d",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "array": [
                {
                  "primitive": "f32"
                },
                4
              ]
            },
            4
          ]
        }
      },
      "documentation": " Creates a `[[f32; 4]; 4]` 4D array storing data in column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::Mat4::to_euler": {
      "namespace": "glam::Mat4",
      "identifier": "to_euler",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::EulerRot"
          },
          "name": "order"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": [
            {
              "primitive": "f32"
            },
            {
              "primitive": "f32"
            },
            {
              "primitive": "f32"
            }
          ]
        }
      },
      "documentation": " Extract Euler angles with the given Euler rotation order.\n Note if the upper 3x3 matrix contain scales, shears, or other non-rotation transformations\n then the resulting Euler angles will be ill-defined.\n # Panics\n Will panic if any column of the upper 3x3 rotation matrix is not normalized when\n `glam_assert` is enabled."
    },
    "glam::Mat4::transform_point3": {
      "namespace": "glam::Mat4",
      "identifier": "transform_point3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Transforms the given 3D vector as a point.\n This is the equivalent of multiplying the 3D vector as a 4D vector where `w` is\n `1.0`.\n This method assumes that `self` contains a valid affine transform. It does not perform\n a perspective divide, if `self` contains a perspective transform, or if you are unsure,\n the [`Self::project_point3()`] method should be used instead.\n # Panics\n Will panic if the 3rd row of `self` is not `(0, 0, 0, 1)` when `glam_assert` is enabled."
    },
    "glam::Mat4::transform_point3a": {
      "namespace": "glam::Mat4",
      "identifier": "transform_point3a",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Transforms the given [`Vec3A`] as 3D point.\n This is the equivalent of multiplying the [`Vec3A`] as a 4D vector where `w` is `1.0`."
    },
    "glam::Mat4::transform_vector3": {
      "namespace": "glam::Mat4",
      "identifier": "transform_vector3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Transforms the give 3D vector as a direction.\n This is the equivalent of multiplying the 3D vector as a 4D vector where `w` is\n `0.0`.\n This method assumes that `self` contains a valid affine transform.\n # Panics\n Will panic if the 3rd row of `self` is not `(0, 0, 0, 1)` when `glam_assert` is enabled."
    },
    "glam::Mat4::transform_vector3a": {
      "namespace": "glam::Mat4",
      "identifier": "transform_vector3a",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Transforms the give [`Vec3A`] as 3D vector.\n This is the equivalent of multiplying the [`Vec3A`] as a 4D vector where `w` is `0.0`."
    },
    "glam::Mat4::transpose": {
      "namespace": "glam::Mat4",
      "identifier": "transpose",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Returns the transpose of `self`."
    },
    "glam::Quat::abs_diff_eq": {
      "namespace": "glam::Quat",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs`\n is less than or equal to `max_abs_diff`.\n This can be used to compare if two quaternions contain similar elements. It works\n best when comparing with a known value. The `max_abs_diff` that should be used used\n depends on the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::Quat::add": {
      "namespace": "glam::Quat",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Adds two quaternions.\n The sum is not guaranteed to be normalized.\n Note that addition is not the same as combining the rotations represented by the\n two quaternions! That corresponds to multiplication."
    },
    "glam::Quat::angle_between": {
      "namespace": "glam::Quat",
      "identifier": "angle_between",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the angle (in radians) for the minimal rotation\n for transforming this quaternion into another.\n Both quaternions must be normalized.\n # Panics\n Will panic if `self` or `rhs` are not normalized when `glam_assert` is enabled."
    },
    "glam::Quat::as_dquat": {
      "namespace": "glam::Quat",
      "identifier": "as_dquat",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      }
    },
    "glam::Quat::clone": {
      "namespace": "glam::Quat",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      }
    },
    "glam::Quat::conjugate": {
      "namespace": "glam::Quat",
      "identifier": "conjugate",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Returns the quaternion conjugate of `self`. For a unit quaternion the\n conjugate is also the inverse."
    },
    "glam::Quat::div": {
      "namespace": "glam::Quat",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Divides a quaternion by a scalar value.\n The quotient is not guaranteed to be normalized."
    },
    "glam::Quat::dot": {
      "namespace": "glam::Quat",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`. The dot product is\n equal to the cosine of the angle between two quaternion rotations."
    },
    "glam::Quat::eq": {
      "namespace": "glam::Quat",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Quat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Quat"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::Quat::from_affine3": {
      "namespace": "glam::Quat",
      "identifier": "from_affine3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine3A"
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Creates a quaternion from a 3x3 rotation matrix inside a 3D affine transform.\n Note if the input affine matrix contain scales, shears, or other non-rotation\n transformations then the resulting quaternion will be ill-defined.\n # Panics\n Will panic if any input affine matrix column is not normalized when `glam_assert` is\n enabled."
    },
    "glam::Quat::from_array": {
      "namespace": "glam::Quat",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "f32"
              },
              4
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Creates a rotation quaternion from an array.\n # Preconditions\n This function does not check if the input is normalized, it is up to the user to\n provide normalized input or to normalized the resulting quaternion."
    },
    "glam::Quat::from_axis_angle": {
      "namespace": "glam::Quat",
      "identifier": "from_axis_angle",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "axis"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Create a quaternion for a normalized rotation `axis` and `angle` (in radians).\n The axis must be a unit vector.\n # Panics\n Will panic if `axis` is not normalized when `glam_assert` is enabled."
    },
    "glam::Quat::from_euler": {
      "namespace": "glam::Quat",
      "identifier": "from_euler",
      "arguments": [
        {
          "kind": {
            "val": "glam::EulerRot"
          },
          "name": "euler"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "a"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "b"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "c"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Creates a quaternion from the given Euler rotation sequence and the angles (in radians)."
    },
    "glam::Quat::from_mat3": {
      "namespace": "glam::Quat",
      "identifier": "from_mat3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "mat"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Creates a quaternion from a 3x3 rotation matrix.\n Note if the input matrix contain scales, shears, or other non-rotation transformations then\n the resulting quaternion will be ill-defined.\n # Panics\n Will panic if any input matrix column is not normalized when `glam_assert` is enabled."
    },
    "glam::Quat::from_mat3a": {
      "namespace": "glam::Quat",
      "identifier": "from_mat3a",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "mat"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Creates a quaternion from a 3x3 SIMD aligned rotation matrix.\n Note if the input matrix contain scales, shears, or other non-rotation transformations then\n the resulting quaternion will be ill-defined.\n # Panics\n Will panic if any input matrix column is not normalized when `glam_assert` is enabled."
    },
    "glam::Quat::from_mat4": {
      "namespace": "glam::Quat",
      "identifier": "from_mat4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "mat"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Creates a quaternion from the upper 3x3 rotation matrix inside a homogeneous 4x4 matrix.\n Note if the upper 3x3 matrix contain scales, shears, or other non-rotation transformations\n then the resulting quaternion will be ill-defined.\n # Panics\n Will panic if any column of the upper 3x3 rotation matrix is not normalized when\n `glam_assert` is enabled."
    },
    "glam::Quat::from_rotation_arc": {
      "namespace": "glam::Quat",
      "identifier": "from_rotation_arc",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "from"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "to"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Gets the minimal rotation for transforming `from` to `to`.  The rotation is in the\n plane spanned by the two vectors.  Will rotate at most 180 degrees.\n The inputs must be unit vectors.\n `from_rotation_arc(from, to) * from ≈ to`.\n For near-singular cases (from≈to and from≈-to) the current implementation\n is only accurate to about 0.001 (for `f32`).\n # Panics\n Will panic if `from` or `to` are not normalized when `glam_assert` is enabled."
    },
    "glam::Quat::from_rotation_arc_2d": {
      "namespace": "glam::Quat",
      "identifier": "from_rotation_arc_2d",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "from"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "to"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Gets the minimal rotation for transforming `from` to `to`.  The resulting rotation is\n around the z axis. Will rotate at most 180 degrees.\n The inputs must be unit vectors.\n `from_rotation_arc_2d(from, to) * from ≈ to`.\n For near-singular cases (from≈to and from≈-to) the current implementation\n is only accurate to about 0.001 (for `f32`).\n # Panics\n Will panic if `from` or `to` are not normalized when `glam_assert` is enabled."
    },
    "glam::Quat::from_rotation_arc_colinear": {
      "namespace": "glam::Quat",
      "identifier": "from_rotation_arc_colinear",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "from"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "to"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Gets the minimal rotation for transforming `from` to either `to` or `-to`.  This means\n that the resulting quaternion will rotate `from` so that it is colinear with `to`.\n The rotation is in the plane spanned by the two vectors.  Will rotate at most 90\n degrees.\n The inputs must be unit vectors.\n `to.dot(from_rotation_arc_colinear(from, to) * from).abs() ≈ 1`.\n # Panics\n Will panic if `from` or `to` are not normalized when `glam_assert` is enabled."
    },
    "glam::Quat::from_rotation_x": {
      "namespace": "glam::Quat",
      "identifier": "from_rotation_x",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Creates a quaternion from the `angle` (in radians) around the x axis."
    },
    "glam::Quat::from_rotation_y": {
      "namespace": "glam::Quat",
      "identifier": "from_rotation_y",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Creates a quaternion from the `angle` (in radians) around the y axis."
    },
    "glam::Quat::from_rotation_z": {
      "namespace": "glam::Quat",
      "identifier": "from_rotation_z",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Creates a quaternion from the `angle` (in radians) around the z axis."
    },
    "glam::Quat::from_scaled_axis": {
      "namespace": "glam::Quat",
      "identifier": "from_scaled_axis",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Create a quaternion that rotates `v.length()` radians around `v.normalize()`.\n `from_scaled_axis(Vec3::ZERO)` results in the identity quaternion."
    },
    "glam::Quat::from_vec4": {
      "namespace": "glam::Quat",
      "identifier": "from_vec4",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Creates a new rotation quaternion from a 4D vector.\n # Preconditions\n This function does not check if the input is normalized, it is up to the user to\n provide normalized input or to normalized the resulting quaternion."
    },
    "glam::Quat::from_xyzw": {
      "namespace": "glam::Quat",
      "identifier": "from_xyzw",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Creates a new rotation quaternion.\n This should generally not be called manually unless you know what you are doing.\n Use one of the other constructors instead such as `identity` or `from_axis_angle`.\n `from_xyzw` is mostly used by unit tests and `serde` deserialization.\n # Preconditions\n This function does not check if the input is normalized, it is up to the user to\n provide normalized input or to normalized the resulting quaternion."
    },
    "glam::Quat::inverse": {
      "namespace": "glam::Quat",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Returns the inverse of a normalized quaternion.\n Typically quaternion inverse returns the conjugate of a normalized quaternion.\n Because `self` is assumed to already be unit length this method *does not* normalize\n before returning the conjugate.\n # Panics\n Will panic if `self` is not normalized when `glam_assert` is enabled."
    },
    "glam::Quat::is_finite": {
      "namespace": "glam::Quat",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.\n If any element is either `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::Quat::is_nan": {
      "namespace": "glam::Quat",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NAN`."
    },
    "glam::Quat::is_near_identity": {
      "namespace": "glam::Quat",
      "identifier": "is_near_identity",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::Quat::is_normalized": {
      "namespace": "glam::Quat",
      "identifier": "is_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns whether `self` of length `1.0` or not.\n Uses a precision threshold of `1e-6`."
    },
    "glam::Quat::length": {
      "namespace": "glam::Quat",
      "identifier": "length",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the length of `self`."
    },
    "glam::Quat::length_recip": {
      "namespace": "glam::Quat",
      "identifier": "length_recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes `1.0 / length()`.\n For valid results, `self` must _not_ be of length zero."
    },
    "glam::Quat::length_squared": {
      "namespace": "glam::Quat",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the squared length of `self`.\n This is generally faster than `length()` as it avoids a square\n root operation."
    },
    "glam::Quat::lerp": {
      "namespace": "glam::Quat",
      "identifier": "lerp",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "end"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Performs a linear interpolation between `self` and `rhs` based on\n the value `s`.\n When `s` is `0.0`, the result will be equal to `self`.  When `s`\n is `1.0`, the result will be equal to `rhs`.\n # Panics\n Will panic if `self` or `end` are not normalized when `glam_assert` is enabled."
    },
    "glam::Quat::mul": {
      "namespace": "glam::Quat",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Multiplies two quaternions. If they each represent a rotation, the result will\n represent the combined rotation.\n Note that due to floating point rounding the result may not be perfectly\n normalized.\n # Panics\n Will panic if `self` or `rhs` are not normalized when `glam_assert` is enabled."
    },
    "glam::Quat::mul-1": {
      "namespace": "glam::Quat",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Quat::mul-2": {
      "namespace": "glam::Quat",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Quat::mul-3": {
      "namespace": "glam::Quat",
      "identifier": "mul-3",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      }
    },
    "glam::Quat::mul_quat": {
      "namespace": "glam::Quat",
      "identifier": "mul_quat",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Multiplies two quaternions. If they each represent a rotation, the result will\n represent the combined rotation.\n Note that due to floating point rounding the result may not be perfectly normalized.\n # Panics\n Will panic if `self` or `rhs` are not normalized when `glam_assert` is enabled."
    },
    "glam::Quat::mul_vec3": {
      "namespace": "glam::Quat",
      "identifier": "mul_vec3",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Multiplies a quaternion and a 3D vector, returning the rotated vector.\n # Panics\n Will panic if `self` is not normalized when `glam_assert` is enabled."
    },
    "glam::Quat::mul_vec3a": {
      "namespace": "glam::Quat",
      "identifier": "mul_vec3a",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Multiplies a quaternion and a 3D vector, returning the rotated vector."
    },
    "glam::Quat::neg": {
      "namespace": "glam::Quat",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      }
    },
    "glam::Quat::normalize": {
      "namespace": "glam::Quat",
      "identifier": "normalize",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0.\n For valid results, `self` must _not_ be of length zero.\n Panics\n Will panic if `self` is zero length when `glam_assert` is enabled."
    },
    "glam::Quat::rotate_towards": {
      "namespace": "glam::Quat",
      "identifier": "rotate_towards",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Quat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max_angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Rotates towards `rhs` up to `max_angle` (in radians).\n When `max_angle` is `0.0`, the result will be equal to `self`. When `max_angle` is equal to\n `self.angle_between(rhs)`, the result will be equal to `rhs`. If `max_angle` is negative,\n rotates towards the exact opposite of `rhs`. Will not go past the target.\n Both quaternions must be normalized.\n # Panics\n Will panic if `self` or `rhs` are not normalized when `glam_assert` is enabled."
    },
    "glam::Quat::slerp": {
      "namespace": "glam::Quat",
      "identifier": "slerp",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "end"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Performs a spherical linear interpolation between `self` and `end`\n based on the value `s`.\n When `s` is `0.0`, the result will be equal to `self`.  When `s`\n is `1.0`, the result will be equal to `end`.\n # Panics\n Will panic if `self` or `end` are not normalized when `glam_assert` is enabled."
    },
    "glam::Quat::sub": {
      "namespace": "glam::Quat",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Subtracts the `rhs` quaternion from `self`.\n The difference is not guaranteed to be normalized."
    },
    "glam::Quat::to_array": {
      "namespace": "glam::Quat",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f32"
            },
            4
          ]
        }
      },
      "documentation": " `[x, y, z, w]`"
    },
    "glam::Quat::to_euler": {
      "namespace": "glam::Quat",
      "identifier": "to_euler",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::EulerRot"
          },
          "name": "order"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": [
            {
              "primitive": "f32"
            },
            {
              "primitive": "f32"
            },
            {
              "primitive": "f32"
            }
          ]
        }
      },
      "documentation": " Returns the rotation angles for the given euler rotation sequence."
    },
    "glam::Quat::to_scaled_axis": {
      "namespace": "glam::Quat",
      "identifier": "to_scaled_axis",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns the rotation axis scaled by the rotation in radians."
    },
    "glam::Quat::xyz": {
      "namespace": "glam::Quat",
      "identifier": "xyz",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns the vector part of the quaternion."
    },
    "glam::U16Vec2::add": {
      "namespace": "glam::U16Vec2",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      }
    },
    "glam::U16Vec2::add-1": {
      "namespace": "glam::U16Vec2",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      }
    },
    "glam::U16Vec2::add-2": {
      "namespace": "glam::U16Vec2",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          }
        },
        {
          "kind": {
            "primitive": "u16"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      }
    },
    "glam::U16Vec2::as_dvec2": {
      "namespace": "glam::U16Vec2",
      "identifier": "as_dvec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::U16Vec2::as_i16vec2": {
      "namespace": "glam::U16Vec2",
      "identifier": "as_i16vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i16`."
    },
    "glam::U16Vec2::as_i64vec2": {
      "namespace": "glam::U16Vec2",
      "identifier": "as_i64vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::U16Vec2::as_i8vec2": {
      "namespace": "glam::U16Vec2",
      "identifier": "as_i8vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i8`."
    },
    "glam::U16Vec2::as_ivec2": {
      "namespace": "glam::U16Vec2",
      "identifier": "as_ivec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::U16Vec2::as_u64vec2": {
      "namespace": "glam::U16Vec2",
      "identifier": "as_u64vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::U16Vec2::as_u8vec2": {
      "namespace": "glam::U16Vec2",
      "identifier": "as_u8vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u8`."
    },
    "glam::U16Vec2::as_uvec2": {
      "namespace": "glam::U16Vec2",
      "identifier": "as_uvec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::U16Vec2::as_vec2": {
      "namespace": "glam::U16Vec2",
      "identifier": "as_vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::U16Vec2::assert_receiver_is_total_eq": {
      "namespace": "glam::U16Vec2",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::U16Vec2::clamp": {
      "namespace": "glam::U16Vec2",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`u16::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::U16Vec2::clone": {
      "namespace": "glam::U16Vec2",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      }
    },
    "glam::U16Vec2::cmpeq": {
      "namespace": "glam::U16Vec2",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::U16Vec2::cmpge": {
      "namespace": "glam::U16Vec2",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::U16Vec2::cmpgt": {
      "namespace": "glam::U16Vec2",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::U16Vec2::cmple": {
      "namespace": "glam::U16Vec2",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::U16Vec2::cmplt": {
      "namespace": "glam::U16Vec2",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::U16Vec2::cmpne": {
      "namespace": "glam::U16Vec2",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::U16Vec2::div": {
      "namespace": "glam::U16Vec2",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      }
    },
    "glam::U16Vec2::div-1": {
      "namespace": "glam::U16Vec2",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      }
    },
    "glam::U16Vec2::div-2": {
      "namespace": "glam::U16Vec2",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          }
        },
        {
          "kind": {
            "primitive": "u16"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      }
    },
    "glam::U16Vec2::dot": {
      "namespace": "glam::U16Vec2",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u16"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::U16Vec2::dot_into_vec": {
      "namespace": "glam::U16Vec2",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::U16Vec2::element_product": {
      "namespace": "glam::U16Vec2",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u16"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::U16Vec2::element_sum": {
      "namespace": "glam::U16Vec2",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u16"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::U16Vec2::eq": {
      "namespace": "glam::U16Vec2",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U16Vec2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::U16Vec2::extend": {
      "namespace": "glam::U16Vec2",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u16"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` and the given `z` value."
    },
    "glam::U16Vec2::from_array": {
      "namespace": "glam::U16Vec2",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "u16"
              },
              2
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::U16Vec2::length_squared": {
      "namespace": "glam::U16Vec2",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u16"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::U16Vec2::max": {
      "namespace": "glam::U16Vec2",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::U16Vec2::max_element": {
      "namespace": "glam::U16Vec2",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u16"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::U16Vec2::min": {
      "namespace": "glam::U16Vec2",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::U16Vec2::min_element": {
      "namespace": "glam::U16Vec2",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u16"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::U16Vec2::mul": {
      "namespace": "glam::U16Vec2",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      }
    },
    "glam::U16Vec2::mul-1": {
      "namespace": "glam::U16Vec2",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      }
    },
    "glam::U16Vec2::mul-2": {
      "namespace": "glam::U16Vec2",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          }
        },
        {
          "kind": {
            "primitive": "u16"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      }
    },
    "glam::U16Vec2::new": {
      "namespace": "glam::U16Vec2",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u16"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "u16"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::U16Vec2::rem": {
      "namespace": "glam::U16Vec2",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      }
    },
    "glam::U16Vec2::rem-1": {
      "namespace": "glam::U16Vec2",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      }
    },
    "glam::U16Vec2::rem-2": {
      "namespace": "glam::U16Vec2",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          }
        },
        {
          "kind": {
            "primitive": "u16"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      }
    },
    "glam::U16Vec2::saturating_add": {
      "namespace": "glam::U16Vec2",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::U16Vec2::saturating_add_signed": {
      "namespace": "glam::U16Vec2",
      "identifier": "saturating_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.saturating_add_signed(rhs.x), self.y.saturating_add_signed(rhs.y), ..]`."
    },
    "glam::U16Vec2::saturating_div": {
      "namespace": "glam::U16Vec2",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::U16Vec2::saturating_mul": {
      "namespace": "glam::U16Vec2",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::U16Vec2::saturating_sub": {
      "namespace": "glam::U16Vec2",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::U16Vec2::select": {
      "namespace": "glam::U16Vec2",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec2"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::U16Vec2::splat": {
      "namespace": "glam::U16Vec2",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "u16"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::U16Vec2::sub": {
      "namespace": "glam::U16Vec2",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      }
    },
    "glam::U16Vec2::sub-1": {
      "namespace": "glam::U16Vec2",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      }
    },
    "glam::U16Vec2::sub-2": {
      "namespace": "glam::U16Vec2",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          }
        },
        {
          "kind": {
            "primitive": "u16"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      }
    },
    "glam::U16Vec2::to_array": {
      "namespace": "glam::U16Vec2",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "u16"
            },
            2
          ]
        }
      },
      "documentation": " `[x, y]`"
    },
    "glam::U16Vec2::with_x": {
      "namespace": "glam::U16Vec2",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u16"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `x`."
    },
    "glam::U16Vec2::with_y": {
      "namespace": "glam::U16Vec2",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u16"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `y`."
    },
    "glam::U16Vec2::wrapping_add": {
      "namespace": "glam::U16Vec2",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::U16Vec2::wrapping_add_signed": {
      "namespace": "glam::U16Vec2",
      "identifier": "wrapping_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.wrapping_add_signed(rhs.x), self.y.wrapping_add_signed(rhs.y), ..]`."
    },
    "glam::U16Vec2::wrapping_div": {
      "namespace": "glam::U16Vec2",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::U16Vec2::wrapping_mul": {
      "namespace": "glam::U16Vec2",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::U16Vec2::wrapping_sub": {
      "namespace": "glam::U16Vec2",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::U16Vec3::add": {
      "namespace": "glam::U16Vec3",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      }
    },
    "glam::U16Vec3::add-1": {
      "namespace": "glam::U16Vec3",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      }
    },
    "glam::U16Vec3::add-2": {
      "namespace": "glam::U16Vec3",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          }
        },
        {
          "kind": {
            "primitive": "u16"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      }
    },
    "glam::U16Vec3::as_dvec3": {
      "namespace": "glam::U16Vec3",
      "identifier": "as_dvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::U16Vec3::as_i16vec3": {
      "namespace": "glam::U16Vec3",
      "identifier": "as_i16vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i16`."
    },
    "glam::U16Vec3::as_i64vec3": {
      "namespace": "glam::U16Vec3",
      "identifier": "as_i64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::U16Vec3::as_i8vec3": {
      "namespace": "glam::U16Vec3",
      "identifier": "as_i8vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i8`."
    },
    "glam::U16Vec3::as_ivec3": {
      "namespace": "glam::U16Vec3",
      "identifier": "as_ivec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::U16Vec3::as_u64vec3": {
      "namespace": "glam::U16Vec3",
      "identifier": "as_u64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::U16Vec3::as_u8vec3": {
      "namespace": "glam::U16Vec3",
      "identifier": "as_u8vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u8`."
    },
    "glam::U16Vec3::as_uvec3": {
      "namespace": "glam::U16Vec3",
      "identifier": "as_uvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::U16Vec3::as_vec3": {
      "namespace": "glam::U16Vec3",
      "identifier": "as_vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::U16Vec3::as_vec3a": {
      "namespace": "glam::U16Vec3",
      "identifier": "as_vec3a",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::U16Vec3::assert_receiver_is_total_eq": {
      "namespace": "glam::U16Vec3",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::U16Vec3::clamp": {
      "namespace": "glam::U16Vec3",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`u16::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::U16Vec3::clone": {
      "namespace": "glam::U16Vec3",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      }
    },
    "glam::U16Vec3::cmpeq": {
      "namespace": "glam::U16Vec3",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::U16Vec3::cmpge": {
      "namespace": "glam::U16Vec3",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::U16Vec3::cmpgt": {
      "namespace": "glam::U16Vec3",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::U16Vec3::cmple": {
      "namespace": "glam::U16Vec3",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::U16Vec3::cmplt": {
      "namespace": "glam::U16Vec3",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::U16Vec3::cmpne": {
      "namespace": "glam::U16Vec3",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::U16Vec3::cross": {
      "namespace": "glam::U16Vec3",
      "identifier": "cross",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Computes the cross product of `self` and `rhs`."
    },
    "glam::U16Vec3::div": {
      "namespace": "glam::U16Vec3",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      }
    },
    "glam::U16Vec3::div-1": {
      "namespace": "glam::U16Vec3",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      }
    },
    "glam::U16Vec3::div-2": {
      "namespace": "glam::U16Vec3",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          }
        },
        {
          "kind": {
            "primitive": "u16"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      }
    },
    "glam::U16Vec3::dot": {
      "namespace": "glam::U16Vec3",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u16"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::U16Vec3::dot_into_vec": {
      "namespace": "glam::U16Vec3",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::U16Vec3::element_product": {
      "namespace": "glam::U16Vec3",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u16"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::U16Vec3::element_sum": {
      "namespace": "glam::U16Vec3",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u16"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::U16Vec3::eq": {
      "namespace": "glam::U16Vec3",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U16Vec3"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::U16Vec3::extend": {
      "namespace": "glam::U16Vec3",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u16"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` and the given `w` value."
    },
    "glam::U16Vec3::from_array": {
      "namespace": "glam::U16Vec3",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "u16"
              },
              3
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::U16Vec3::length_squared": {
      "namespace": "glam::U16Vec3",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u16"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::U16Vec3::max": {
      "namespace": "glam::U16Vec3",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::U16Vec3::max_element": {
      "namespace": "glam::U16Vec3",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u16"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::U16Vec3::min": {
      "namespace": "glam::U16Vec3",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::U16Vec3::min_element": {
      "namespace": "glam::U16Vec3",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u16"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::U16Vec3::mul": {
      "namespace": "glam::U16Vec3",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      }
    },
    "glam::U16Vec3::mul-1": {
      "namespace": "glam::U16Vec3",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      }
    },
    "glam::U16Vec3::mul-2": {
      "namespace": "glam::U16Vec3",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          }
        },
        {
          "kind": {
            "primitive": "u16"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      }
    },
    "glam::U16Vec3::new": {
      "namespace": "glam::U16Vec3",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u16"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "u16"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "u16"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::U16Vec3::rem": {
      "namespace": "glam::U16Vec3",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      }
    },
    "glam::U16Vec3::rem-1": {
      "namespace": "glam::U16Vec3",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      }
    },
    "glam::U16Vec3::rem-2": {
      "namespace": "glam::U16Vec3",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          }
        },
        {
          "kind": {
            "primitive": "u16"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      }
    },
    "glam::U16Vec3::saturating_add": {
      "namespace": "glam::U16Vec3",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::U16Vec3::saturating_add_signed": {
      "namespace": "glam::U16Vec3",
      "identifier": "saturating_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.saturating_add_signed(rhs.x), self.y.saturating_add_signed(rhs.y), ..]`."
    },
    "glam::U16Vec3::saturating_div": {
      "namespace": "glam::U16Vec3",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::U16Vec3::saturating_mul": {
      "namespace": "glam::U16Vec3",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::U16Vec3::saturating_sub": {
      "namespace": "glam::U16Vec3",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::U16Vec3::select": {
      "namespace": "glam::U16Vec3",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec3"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::U16Vec3::splat": {
      "namespace": "glam::U16Vec3",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "u16"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::U16Vec3::sub": {
      "namespace": "glam::U16Vec3",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      }
    },
    "glam::U16Vec3::sub-1": {
      "namespace": "glam::U16Vec3",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      }
    },
    "glam::U16Vec3::sub-2": {
      "namespace": "glam::U16Vec3",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          }
        },
        {
          "kind": {
            "primitive": "u16"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      }
    },
    "glam::U16Vec3::to_array": {
      "namespace": "glam::U16Vec3",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "u16"
            },
            3
          ]
        }
      },
      "documentation": " `[x, y, z]`"
    },
    "glam::U16Vec3::truncate": {
      "namespace": "glam::U16Vec3",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      },
      "documentation": " Creates a 2D vector from the `x` and `y` elements of `self`, discarding `z`.\n Truncation may also be performed by using [`self.xy()`][crate::swizzles::Vec3Swizzles::xy()]."
    },
    "glam::U16Vec3::with_x": {
      "namespace": "glam::U16Vec3",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u16"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `x`."
    },
    "glam::U16Vec3::with_y": {
      "namespace": "glam::U16Vec3",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u16"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `y`."
    },
    "glam::U16Vec3::with_z": {
      "namespace": "glam::U16Vec3",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u16"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `z`."
    },
    "glam::U16Vec3::wrapping_add": {
      "namespace": "glam::U16Vec3",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::U16Vec3::wrapping_add_signed": {
      "namespace": "glam::U16Vec3",
      "identifier": "wrapping_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.wrapping_add_signed(rhs.x), self.y.wrapping_add_signed(rhs.y), ..]`."
    },
    "glam::U16Vec3::wrapping_div": {
      "namespace": "glam::U16Vec3",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::U16Vec3::wrapping_mul": {
      "namespace": "glam::U16Vec3",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::U16Vec3::wrapping_sub": {
      "namespace": "glam::U16Vec3",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::U16Vec4::add": {
      "namespace": "glam::U16Vec4",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      }
    },
    "glam::U16Vec4::add-1": {
      "namespace": "glam::U16Vec4",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      }
    },
    "glam::U16Vec4::add-2": {
      "namespace": "glam::U16Vec4",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          }
        },
        {
          "kind": {
            "primitive": "u16"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      }
    },
    "glam::U16Vec4::as_dvec4": {
      "namespace": "glam::U16Vec4",
      "identifier": "as_dvec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::U16Vec4::as_i16vec4": {
      "namespace": "glam::U16Vec4",
      "identifier": "as_i16vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i16`."
    },
    "glam::U16Vec4::as_i64vec4": {
      "namespace": "glam::U16Vec4",
      "identifier": "as_i64vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::U16Vec4::as_i8vec4": {
      "namespace": "glam::U16Vec4",
      "identifier": "as_i8vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i8`."
    },
    "glam::U16Vec4::as_ivec4": {
      "namespace": "glam::U16Vec4",
      "identifier": "as_ivec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::U16Vec4::as_u64vec4": {
      "namespace": "glam::U16Vec4",
      "identifier": "as_u64vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::U16Vec4::as_u8vec4": {
      "namespace": "glam::U16Vec4",
      "identifier": "as_u8vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u8`."
    },
    "glam::U16Vec4::as_uvec4": {
      "namespace": "glam::U16Vec4",
      "identifier": "as_uvec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::U16Vec4::as_vec4": {
      "namespace": "glam::U16Vec4",
      "identifier": "as_vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::U16Vec4::assert_receiver_is_total_eq": {
      "namespace": "glam::U16Vec4",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::U16Vec4::clamp": {
      "namespace": "glam::U16Vec4",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`u16::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::U16Vec4::clone": {
      "namespace": "glam::U16Vec4",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      }
    },
    "glam::U16Vec4::cmpeq": {
      "namespace": "glam::U16Vec4",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::U16Vec4::cmpge": {
      "namespace": "glam::U16Vec4",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::U16Vec4::cmpgt": {
      "namespace": "glam::U16Vec4",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::U16Vec4::cmple": {
      "namespace": "glam::U16Vec4",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::U16Vec4::cmplt": {
      "namespace": "glam::U16Vec4",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::U16Vec4::cmpne": {
      "namespace": "glam::U16Vec4",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::U16Vec4::div": {
      "namespace": "glam::U16Vec4",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      }
    },
    "glam::U16Vec4::div-1": {
      "namespace": "glam::U16Vec4",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      }
    },
    "glam::U16Vec4::div-2": {
      "namespace": "glam::U16Vec4",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          }
        },
        {
          "kind": {
            "primitive": "u16"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      }
    },
    "glam::U16Vec4::dot": {
      "namespace": "glam::U16Vec4",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u16"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::U16Vec4::dot_into_vec": {
      "namespace": "glam::U16Vec4",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::U16Vec4::element_product": {
      "namespace": "glam::U16Vec4",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u16"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::U16Vec4::element_sum": {
      "namespace": "glam::U16Vec4",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u16"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::U16Vec4::eq": {
      "namespace": "glam::U16Vec4",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U16Vec4"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::U16Vec4::from_array": {
      "namespace": "glam::U16Vec4",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "u16"
              },
              4
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::U16Vec4::length_squared": {
      "namespace": "glam::U16Vec4",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u16"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::U16Vec4::max": {
      "namespace": "glam::U16Vec4",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::U16Vec4::max_element": {
      "namespace": "glam::U16Vec4",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u16"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::U16Vec4::min": {
      "namespace": "glam::U16Vec4",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::U16Vec4::min_element": {
      "namespace": "glam::U16Vec4",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u16"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::U16Vec4::mul": {
      "namespace": "glam::U16Vec4",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      }
    },
    "glam::U16Vec4::mul-1": {
      "namespace": "glam::U16Vec4",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      }
    },
    "glam::U16Vec4::mul-2": {
      "namespace": "glam::U16Vec4",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          }
        },
        {
          "kind": {
            "primitive": "u16"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      }
    },
    "glam::U16Vec4::new": {
      "namespace": "glam::U16Vec4",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u16"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "u16"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "u16"
          },
          "name": "z"
        },
        {
          "kind": {
            "primitive": "u16"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::U16Vec4::rem": {
      "namespace": "glam::U16Vec4",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      }
    },
    "glam::U16Vec4::rem-1": {
      "namespace": "glam::U16Vec4",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      }
    },
    "glam::U16Vec4::rem-2": {
      "namespace": "glam::U16Vec4",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          }
        },
        {
          "kind": {
            "primitive": "u16"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      }
    },
    "glam::U16Vec4::saturating_add": {
      "namespace": "glam::U16Vec4",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::U16Vec4::saturating_add_signed": {
      "namespace": "glam::U16Vec4",
      "identifier": "saturating_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.saturating_add_signed(rhs.x), self.y.saturating_add_signed(rhs.y), ..]`."
    },
    "glam::U16Vec4::saturating_div": {
      "namespace": "glam::U16Vec4",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::U16Vec4::saturating_mul": {
      "namespace": "glam::U16Vec4",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::U16Vec4::saturating_sub": {
      "namespace": "glam::U16Vec4",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::U16Vec4::select": {
      "namespace": "glam::U16Vec4",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec4"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::U16Vec4::splat": {
      "namespace": "glam::U16Vec4",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "u16"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::U16Vec4::sub": {
      "namespace": "glam::U16Vec4",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      }
    },
    "glam::U16Vec4::sub-1": {
      "namespace": "glam::U16Vec4",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      }
    },
    "glam::U16Vec4::sub-2": {
      "namespace": "glam::U16Vec4",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          }
        },
        {
          "kind": {
            "primitive": "u16"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      }
    },
    "glam::U16Vec4::to_array": {
      "namespace": "glam::U16Vec4",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "u16"
            },
            4
          ]
        }
      },
      "documentation": " `[x, y, z, w]`"
    },
    "glam::U16Vec4::truncate": {
      "namespace": "glam::U16Vec4",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Creates a 3D vector from the `x`, `y` and `z` elements of `self`, discarding `w`.\n Truncation to [`U16Vec3`] may also be performed by using [`self.xyz()`][crate::swizzles::Vec4Swizzles::xyz()]."
    },
    "glam::U16Vec4::with_w": {
      "namespace": "glam::U16Vec4",
      "identifier": "with_w",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u16"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `w`."
    },
    "glam::U16Vec4::with_x": {
      "namespace": "glam::U16Vec4",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u16"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `x`."
    },
    "glam::U16Vec4::with_y": {
      "namespace": "glam::U16Vec4",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u16"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `y`."
    },
    "glam::U16Vec4::with_z": {
      "namespace": "glam::U16Vec4",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u16"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `z`."
    },
    "glam::U16Vec4::wrapping_add": {
      "namespace": "glam::U16Vec4",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::U16Vec4::wrapping_add_signed": {
      "namespace": "glam::U16Vec4",
      "identifier": "wrapping_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.wrapping_add_signed(rhs.x), self.y.wrapping_add_signed(rhs.y), ..]`."
    },
    "glam::U16Vec4::wrapping_div": {
      "namespace": "glam::U16Vec4",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::U16Vec4::wrapping_mul": {
      "namespace": "glam::U16Vec4",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::U16Vec4::wrapping_sub": {
      "namespace": "glam::U16Vec4",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U16Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::U64Vec2::add": {
      "namespace": "glam::U64Vec2",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::add-1": {
      "namespace": "glam::U64Vec2",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::add-2": {
      "namespace": "glam::U64Vec2",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          }
        },
        {
          "kind": {
            "primitive": "u64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::as_dvec2": {
      "namespace": "glam::U64Vec2",
      "identifier": "as_dvec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::U64Vec2::as_i16vec2": {
      "namespace": "glam::U64Vec2",
      "identifier": "as_i16vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i16`."
    },
    "glam::U64Vec2::as_i64vec2": {
      "namespace": "glam::U64Vec2",
      "identifier": "as_i64vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::U64Vec2::as_i8vec2": {
      "namespace": "glam::U64Vec2",
      "identifier": "as_i8vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i8`."
    },
    "glam::U64Vec2::as_ivec2": {
      "namespace": "glam::U64Vec2",
      "identifier": "as_ivec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::U64Vec2::as_u16vec2": {
      "namespace": "glam::U64Vec2",
      "identifier": "as_u16vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u16`."
    },
    "glam::U64Vec2::as_u8vec2": {
      "namespace": "glam::U64Vec2",
      "identifier": "as_u8vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u8`."
    },
    "glam::U64Vec2::as_uvec2": {
      "namespace": "glam::U64Vec2",
      "identifier": "as_uvec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::U64Vec2::as_vec2": {
      "namespace": "glam::U64Vec2",
      "identifier": "as_vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::U64Vec2::assert_receiver_is_total_eq": {
      "namespace": "glam::U64Vec2",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::U64Vec2::clamp": {
      "namespace": "glam::U64Vec2",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`u64::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::U64Vec2::clone": {
      "namespace": "glam::U64Vec2",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::cmpeq": {
      "namespace": "glam::U64Vec2",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec2::cmpge": {
      "namespace": "glam::U64Vec2",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec2::cmpgt": {
      "namespace": "glam::U64Vec2",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec2::cmple": {
      "namespace": "glam::U64Vec2",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec2::cmplt": {
      "namespace": "glam::U64Vec2",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec2::cmpne": {
      "namespace": "glam::U64Vec2",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec2::div": {
      "namespace": "glam::U64Vec2",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::div-1": {
      "namespace": "glam::U64Vec2",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::div-2": {
      "namespace": "glam::U64Vec2",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          }
        },
        {
          "kind": {
            "primitive": "u64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::dot": {
      "namespace": "glam::U64Vec2",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::U64Vec2::dot_into_vec": {
      "namespace": "glam::U64Vec2",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::U64Vec2::element_product": {
      "namespace": "glam::U64Vec2",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::U64Vec2::element_sum": {
      "namespace": "glam::U64Vec2",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::U64Vec2::eq": {
      "namespace": "glam::U64Vec2",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::U64Vec2::extend": {
      "namespace": "glam::U64Vec2",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` and the given `z` value."
    },
    "glam::U64Vec2::from_array": {
      "namespace": "glam::U64Vec2",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "u64"
              },
              2
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::U64Vec2::length_squared": {
      "namespace": "glam::U64Vec2",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::U64Vec2::max": {
      "namespace": "glam::U64Vec2",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::U64Vec2::max_element": {
      "namespace": "glam::U64Vec2",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::U64Vec2::min": {
      "namespace": "glam::U64Vec2",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::U64Vec2::min_element": {
      "namespace": "glam::U64Vec2",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::U64Vec2::mul": {
      "namespace": "glam::U64Vec2",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::mul-1": {
      "namespace": "glam::U64Vec2",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::mul-2": {
      "namespace": "glam::U64Vec2",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          }
        },
        {
          "kind": {
            "primitive": "u64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::new": {
      "namespace": "glam::U64Vec2",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::U64Vec2::rem": {
      "namespace": "glam::U64Vec2",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::rem-1": {
      "namespace": "glam::U64Vec2",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::rem-2": {
      "namespace": "glam::U64Vec2",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          }
        },
        {
          "kind": {
            "primitive": "u64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::saturating_add": {
      "namespace": "glam::U64Vec2",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::U64Vec2::saturating_add_signed": {
      "namespace": "glam::U64Vec2",
      "identifier": "saturating_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.saturating_add_signed(rhs.x), self.y.saturating_add_signed(rhs.y), ..]`."
    },
    "glam::U64Vec2::saturating_div": {
      "namespace": "glam::U64Vec2",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::U64Vec2::saturating_mul": {
      "namespace": "glam::U64Vec2",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::U64Vec2::saturating_sub": {
      "namespace": "glam::U64Vec2",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::U64Vec2::select": {
      "namespace": "glam::U64Vec2",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec2"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::U64Vec2::splat": {
      "namespace": "glam::U64Vec2",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::U64Vec2::sub": {
      "namespace": "glam::U64Vec2",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::sub-1": {
      "namespace": "glam::U64Vec2",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::sub-2": {
      "namespace": "glam::U64Vec2",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          }
        },
        {
          "kind": {
            "primitive": "u64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::to_array": {
      "namespace": "glam::U64Vec2",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "u64"
            },
            2
          ]
        }
      },
      "documentation": " `[x, y]`"
    },
    "glam::U64Vec2::with_x": {
      "namespace": "glam::U64Vec2",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `x`."
    },
    "glam::U64Vec2::with_y": {
      "namespace": "glam::U64Vec2",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `y`."
    },
    "glam::U64Vec2::wrapping_add": {
      "namespace": "glam::U64Vec2",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::U64Vec2::wrapping_add_signed": {
      "namespace": "glam::U64Vec2",
      "identifier": "wrapping_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.wrapping_add_signed(rhs.x), self.y.wrapping_add_signed(rhs.y), ..]`."
    },
    "glam::U64Vec2::wrapping_div": {
      "namespace": "glam::U64Vec2",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::U64Vec2::wrapping_mul": {
      "namespace": "glam::U64Vec2",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::U64Vec2::wrapping_sub": {
      "namespace": "glam::U64Vec2",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::U64Vec3::add": {
      "namespace": "glam::U64Vec3",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::add-1": {
      "namespace": "glam::U64Vec3",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::add-2": {
      "namespace": "glam::U64Vec3",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          }
        },
        {
          "kind": {
            "primitive": "u64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::as_dvec3": {
      "namespace": "glam::U64Vec3",
      "identifier": "as_dvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::U64Vec3::as_i16vec3": {
      "namespace": "glam::U64Vec3",
      "identifier": "as_i16vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i16`."
    },
    "glam::U64Vec3::as_i64vec3": {
      "namespace": "glam::U64Vec3",
      "identifier": "as_i64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::U64Vec3::as_i8vec3": {
      "namespace": "glam::U64Vec3",
      "identifier": "as_i8vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i8`."
    },
    "glam::U64Vec3::as_ivec3": {
      "namespace": "glam::U64Vec3",
      "identifier": "as_ivec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::U64Vec3::as_u16vec3": {
      "namespace": "glam::U64Vec3",
      "identifier": "as_u16vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u16`."
    },
    "glam::U64Vec3::as_u8vec3": {
      "namespace": "glam::U64Vec3",
      "identifier": "as_u8vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u8`."
    },
    "glam::U64Vec3::as_uvec3": {
      "namespace": "glam::U64Vec3",
      "identifier": "as_uvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::U64Vec3::as_vec3": {
      "namespace": "glam::U64Vec3",
      "identifier": "as_vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::U64Vec3::as_vec3a": {
      "namespace": "glam::U64Vec3",
      "identifier": "as_vec3a",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::U64Vec3::assert_receiver_is_total_eq": {
      "namespace": "glam::U64Vec3",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::U64Vec3::clamp": {
      "namespace": "glam::U64Vec3",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`u64::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::U64Vec3::clone": {
      "namespace": "glam::U64Vec3",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::cmpeq": {
      "namespace": "glam::U64Vec3",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec3::cmpge": {
      "namespace": "glam::U64Vec3",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec3::cmpgt": {
      "namespace": "glam::U64Vec3",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec3::cmple": {
      "namespace": "glam::U64Vec3",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec3::cmplt": {
      "namespace": "glam::U64Vec3",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec3::cmpne": {
      "namespace": "glam::U64Vec3",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec3::cross": {
      "namespace": "glam::U64Vec3",
      "identifier": "cross",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Computes the cross product of `self` and `rhs`."
    },
    "glam::U64Vec3::div": {
      "namespace": "glam::U64Vec3",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::div-1": {
      "namespace": "glam::U64Vec3",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::div-2": {
      "namespace": "glam::U64Vec3",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          }
        },
        {
          "kind": {
            "primitive": "u64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::dot": {
      "namespace": "glam::U64Vec3",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::U64Vec3::dot_into_vec": {
      "namespace": "glam::U64Vec3",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::U64Vec3::element_product": {
      "namespace": "glam::U64Vec3",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::U64Vec3::element_sum": {
      "namespace": "glam::U64Vec3",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::U64Vec3::eq": {
      "namespace": "glam::U64Vec3",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::U64Vec3::extend": {
      "namespace": "glam::U64Vec3",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` and the given `w` value."
    },
    "glam::U64Vec3::from_array": {
      "namespace": "glam::U64Vec3",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "u64"
              },
              3
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::U64Vec3::length_squared": {
      "namespace": "glam::U64Vec3",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::U64Vec3::max": {
      "namespace": "glam::U64Vec3",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::U64Vec3::max_element": {
      "namespace": "glam::U64Vec3",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::U64Vec3::min": {
      "namespace": "glam::U64Vec3",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::U64Vec3::min_element": {
      "namespace": "glam::U64Vec3",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::U64Vec3::mul": {
      "namespace": "glam::U64Vec3",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::mul-1": {
      "namespace": "glam::U64Vec3",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::mul-2": {
      "namespace": "glam::U64Vec3",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          }
        },
        {
          "kind": {
            "primitive": "u64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::new": {
      "namespace": "glam::U64Vec3",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::U64Vec3::rem": {
      "namespace": "glam::U64Vec3",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::rem-1": {
      "namespace": "glam::U64Vec3",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::rem-2": {
      "namespace": "glam::U64Vec3",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          }
        },
        {
          "kind": {
            "primitive": "u64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::saturating_add": {
      "namespace": "glam::U64Vec3",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::U64Vec3::saturating_add_signed": {
      "namespace": "glam::U64Vec3",
      "identifier": "saturating_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.saturating_add_signed(rhs.x), self.y.saturating_add_signed(rhs.y), ..]`."
    },
    "glam::U64Vec3::saturating_div": {
      "namespace": "glam::U64Vec3",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::U64Vec3::saturating_mul": {
      "namespace": "glam::U64Vec3",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::U64Vec3::saturating_sub": {
      "namespace": "glam::U64Vec3",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::U64Vec3::select": {
      "namespace": "glam::U64Vec3",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec3"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::U64Vec3::splat": {
      "namespace": "glam::U64Vec3",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::U64Vec3::sub": {
      "namespace": "glam::U64Vec3",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::sub-1": {
      "namespace": "glam::U64Vec3",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::sub-2": {
      "namespace": "glam::U64Vec3",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          }
        },
        {
          "kind": {
            "primitive": "u64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::to_array": {
      "namespace": "glam::U64Vec3",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "u64"
            },
            3
          ]
        }
      },
      "documentation": " `[x, y, z]`"
    },
    "glam::U64Vec3::truncate": {
      "namespace": "glam::U64Vec3",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Creates a 2D vector from the `x` and `y` elements of `self`, discarding `z`.\n Truncation may also be performed by using [`self.xy()`][crate::swizzles::Vec3Swizzles::xy()]."
    },
    "glam::U64Vec3::with_x": {
      "namespace": "glam::U64Vec3",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `x`."
    },
    "glam::U64Vec3::with_y": {
      "namespace": "glam::U64Vec3",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `y`."
    },
    "glam::U64Vec3::with_z": {
      "namespace": "glam::U64Vec3",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `z`."
    },
    "glam::U64Vec3::wrapping_add": {
      "namespace": "glam::U64Vec3",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::U64Vec3::wrapping_add_signed": {
      "namespace": "glam::U64Vec3",
      "identifier": "wrapping_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.wrapping_add_signed(rhs.x), self.y.wrapping_add_signed(rhs.y), ..]`."
    },
    "glam::U64Vec3::wrapping_div": {
      "namespace": "glam::U64Vec3",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::U64Vec3::wrapping_mul": {
      "namespace": "glam::U64Vec3",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::U64Vec3::wrapping_sub": {
      "namespace": "glam::U64Vec3",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::U64Vec4::add": {
      "namespace": "glam::U64Vec4",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::add-1": {
      "namespace": "glam::U64Vec4",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::add-2": {
      "namespace": "glam::U64Vec4",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          }
        },
        {
          "kind": {
            "primitive": "u64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::as_dvec4": {
      "namespace": "glam::U64Vec4",
      "identifier": "as_dvec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::U64Vec4::as_i16vec4": {
      "namespace": "glam::U64Vec4",
      "identifier": "as_i16vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i16`."
    },
    "glam::U64Vec4::as_i64vec4": {
      "namespace": "glam::U64Vec4",
      "identifier": "as_i64vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::U64Vec4::as_i8vec4": {
      "namespace": "glam::U64Vec4",
      "identifier": "as_i8vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i8`."
    },
    "glam::U64Vec4::as_ivec4": {
      "namespace": "glam::U64Vec4",
      "identifier": "as_ivec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::U64Vec4::as_u16vec4": {
      "namespace": "glam::U64Vec4",
      "identifier": "as_u16vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u16`."
    },
    "glam::U64Vec4::as_u8vec4": {
      "namespace": "glam::U64Vec4",
      "identifier": "as_u8vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u8`."
    },
    "glam::U64Vec4::as_uvec4": {
      "namespace": "glam::U64Vec4",
      "identifier": "as_uvec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::U64Vec4::as_vec4": {
      "namespace": "glam::U64Vec4",
      "identifier": "as_vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::U64Vec4::assert_receiver_is_total_eq": {
      "namespace": "glam::U64Vec4",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::U64Vec4::clamp": {
      "namespace": "glam::U64Vec4",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`u64::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::U64Vec4::clone": {
      "namespace": "glam::U64Vec4",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::cmpeq": {
      "namespace": "glam::U64Vec4",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec4::cmpge": {
      "namespace": "glam::U64Vec4",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec4::cmpgt": {
      "namespace": "glam::U64Vec4",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec4::cmple": {
      "namespace": "glam::U64Vec4",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec4::cmplt": {
      "namespace": "glam::U64Vec4",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec4::cmpne": {
      "namespace": "glam::U64Vec4",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec4::div": {
      "namespace": "glam::U64Vec4",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::div-1": {
      "namespace": "glam::U64Vec4",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::div-2": {
      "namespace": "glam::U64Vec4",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          }
        },
        {
          "kind": {
            "primitive": "u64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::dot": {
      "namespace": "glam::U64Vec4",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::U64Vec4::dot_into_vec": {
      "namespace": "glam::U64Vec4",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::U64Vec4::element_product": {
      "namespace": "glam::U64Vec4",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::U64Vec4::element_sum": {
      "namespace": "glam::U64Vec4",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::U64Vec4::eq": {
      "namespace": "glam::U64Vec4",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::U64Vec4::from_array": {
      "namespace": "glam::U64Vec4",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "u64"
              },
              4
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::U64Vec4::length_squared": {
      "namespace": "glam::U64Vec4",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::U64Vec4::max": {
      "namespace": "glam::U64Vec4",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::U64Vec4::max_element": {
      "namespace": "glam::U64Vec4",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::U64Vec4::min": {
      "namespace": "glam::U64Vec4",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::U64Vec4::min_element": {
      "namespace": "glam::U64Vec4",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::U64Vec4::mul": {
      "namespace": "glam::U64Vec4",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::mul-1": {
      "namespace": "glam::U64Vec4",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::mul-2": {
      "namespace": "glam::U64Vec4",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          }
        },
        {
          "kind": {
            "primitive": "u64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::new": {
      "namespace": "glam::U64Vec4",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "z"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::U64Vec4::rem": {
      "namespace": "glam::U64Vec4",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::rem-1": {
      "namespace": "glam::U64Vec4",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::rem-2": {
      "namespace": "glam::U64Vec4",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          }
        },
        {
          "kind": {
            "primitive": "u64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::saturating_add": {
      "namespace": "glam::U64Vec4",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::U64Vec4::saturating_add_signed": {
      "namespace": "glam::U64Vec4",
      "identifier": "saturating_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.saturating_add_signed(rhs.x), self.y.saturating_add_signed(rhs.y), ..]`."
    },
    "glam::U64Vec4::saturating_div": {
      "namespace": "glam::U64Vec4",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::U64Vec4::saturating_mul": {
      "namespace": "glam::U64Vec4",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::U64Vec4::saturating_sub": {
      "namespace": "glam::U64Vec4",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::U64Vec4::select": {
      "namespace": "glam::U64Vec4",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec4"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::U64Vec4::splat": {
      "namespace": "glam::U64Vec4",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::U64Vec4::sub": {
      "namespace": "glam::U64Vec4",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::sub-1": {
      "namespace": "glam::U64Vec4",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::sub-2": {
      "namespace": "glam::U64Vec4",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          }
        },
        {
          "kind": {
            "primitive": "u64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::to_array": {
      "namespace": "glam::U64Vec4",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "u64"
            },
            4
          ]
        }
      },
      "documentation": " `[x, y, z, w]`"
    },
    "glam::U64Vec4::truncate": {
      "namespace": "glam::U64Vec4",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Creates a 3D vector from the `x`, `y` and `z` elements of `self`, discarding `w`.\n Truncation to [`U64Vec3`] may also be performed by using [`self.xyz()`][crate::swizzles::Vec4Swizzles::xyz()]."
    },
    "glam::U64Vec4::with_w": {
      "namespace": "glam::U64Vec4",
      "identifier": "with_w",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `w`."
    },
    "glam::U64Vec4::with_x": {
      "namespace": "glam::U64Vec4",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `x`."
    },
    "glam::U64Vec4::with_y": {
      "namespace": "glam::U64Vec4",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `y`."
    },
    "glam::U64Vec4::with_z": {
      "namespace": "glam::U64Vec4",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `z`."
    },
    "glam::U64Vec4::wrapping_add": {
      "namespace": "glam::U64Vec4",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::U64Vec4::wrapping_add_signed": {
      "namespace": "glam::U64Vec4",
      "identifier": "wrapping_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.wrapping_add_signed(rhs.x), self.y.wrapping_add_signed(rhs.y), ..]`."
    },
    "glam::U64Vec4::wrapping_div": {
      "namespace": "glam::U64Vec4",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::U64Vec4::wrapping_mul": {
      "namespace": "glam::U64Vec4",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::U64Vec4::wrapping_sub": {
      "namespace": "glam::U64Vec4",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::U8Vec2::add": {
      "namespace": "glam::U8Vec2",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      }
    },
    "glam::U8Vec2::add-1": {
      "namespace": "glam::U8Vec2",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      }
    },
    "glam::U8Vec2::add-2": {
      "namespace": "glam::U8Vec2",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          }
        },
        {
          "kind": {
            "primitive": "u8"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      }
    },
    "glam::U8Vec2::as_dvec2": {
      "namespace": "glam::U8Vec2",
      "identifier": "as_dvec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::U8Vec2::as_i16vec2": {
      "namespace": "glam::U8Vec2",
      "identifier": "as_i16vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i16`."
    },
    "glam::U8Vec2::as_i64vec2": {
      "namespace": "glam::U8Vec2",
      "identifier": "as_i64vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::U8Vec2::as_i8vec2": {
      "namespace": "glam::U8Vec2",
      "identifier": "as_i8vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i8`."
    },
    "glam::U8Vec2::as_ivec2": {
      "namespace": "glam::U8Vec2",
      "identifier": "as_ivec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::U8Vec2::as_u16vec2": {
      "namespace": "glam::U8Vec2",
      "identifier": "as_u16vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u16`."
    },
    "glam::U8Vec2::as_u64vec2": {
      "namespace": "glam::U8Vec2",
      "identifier": "as_u64vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::U8Vec2::as_uvec2": {
      "namespace": "glam::U8Vec2",
      "identifier": "as_uvec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::U8Vec2::as_vec2": {
      "namespace": "glam::U8Vec2",
      "identifier": "as_vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::U8Vec2::assert_receiver_is_total_eq": {
      "namespace": "glam::U8Vec2",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::U8Vec2::clamp": {
      "namespace": "glam::U8Vec2",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`u8::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::U8Vec2::clone": {
      "namespace": "glam::U8Vec2",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      }
    },
    "glam::U8Vec2::cmpeq": {
      "namespace": "glam::U8Vec2",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::U8Vec2::cmpge": {
      "namespace": "glam::U8Vec2",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::U8Vec2::cmpgt": {
      "namespace": "glam::U8Vec2",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::U8Vec2::cmple": {
      "namespace": "glam::U8Vec2",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::U8Vec2::cmplt": {
      "namespace": "glam::U8Vec2",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::U8Vec2::cmpne": {
      "namespace": "glam::U8Vec2",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::U8Vec2::div": {
      "namespace": "glam::U8Vec2",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      }
    },
    "glam::U8Vec2::div-1": {
      "namespace": "glam::U8Vec2",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      }
    },
    "glam::U8Vec2::div-2": {
      "namespace": "glam::U8Vec2",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          }
        },
        {
          "kind": {
            "primitive": "u8"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      }
    },
    "glam::U8Vec2::dot": {
      "namespace": "glam::U8Vec2",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u8"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::U8Vec2::dot_into_vec": {
      "namespace": "glam::U8Vec2",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::U8Vec2::element_product": {
      "namespace": "glam::U8Vec2",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u8"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::U8Vec2::element_sum": {
      "namespace": "glam::U8Vec2",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u8"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::U8Vec2::eq": {
      "namespace": "glam::U8Vec2",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U8Vec2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::U8Vec2::extend": {
      "namespace": "glam::U8Vec2",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u8"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` and the given `z` value."
    },
    "glam::U8Vec2::from_array": {
      "namespace": "glam::U8Vec2",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "u8"
              },
              2
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::U8Vec2::length_squared": {
      "namespace": "glam::U8Vec2",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u8"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::U8Vec2::max": {
      "namespace": "glam::U8Vec2",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::U8Vec2::max_element": {
      "namespace": "glam::U8Vec2",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u8"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::U8Vec2::min": {
      "namespace": "glam::U8Vec2",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::U8Vec2::min_element": {
      "namespace": "glam::U8Vec2",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u8"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::U8Vec2::mul": {
      "namespace": "glam::U8Vec2",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      }
    },
    "glam::U8Vec2::mul-1": {
      "namespace": "glam::U8Vec2",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      }
    },
    "glam::U8Vec2::mul-2": {
      "namespace": "glam::U8Vec2",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          }
        },
        {
          "kind": {
            "primitive": "u8"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      }
    },
    "glam::U8Vec2::new": {
      "namespace": "glam::U8Vec2",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u8"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "u8"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::U8Vec2::rem": {
      "namespace": "glam::U8Vec2",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      }
    },
    "glam::U8Vec2::rem-1": {
      "namespace": "glam::U8Vec2",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      }
    },
    "glam::U8Vec2::rem-2": {
      "namespace": "glam::U8Vec2",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          }
        },
        {
          "kind": {
            "primitive": "u8"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      }
    },
    "glam::U8Vec2::saturating_add": {
      "namespace": "glam::U8Vec2",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::U8Vec2::saturating_add_signed": {
      "namespace": "glam::U8Vec2",
      "identifier": "saturating_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.saturating_add_signed(rhs.x), self.y.saturating_add_signed(rhs.y), ..]`."
    },
    "glam::U8Vec2::saturating_div": {
      "namespace": "glam::U8Vec2",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::U8Vec2::saturating_mul": {
      "namespace": "glam::U8Vec2",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::U8Vec2::saturating_sub": {
      "namespace": "glam::U8Vec2",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::U8Vec2::select": {
      "namespace": "glam::U8Vec2",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec2"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::U8Vec2::splat": {
      "namespace": "glam::U8Vec2",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "u8"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::U8Vec2::sub": {
      "namespace": "glam::U8Vec2",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      }
    },
    "glam::U8Vec2::sub-1": {
      "namespace": "glam::U8Vec2",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      }
    },
    "glam::U8Vec2::sub-2": {
      "namespace": "glam::U8Vec2",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          }
        },
        {
          "kind": {
            "primitive": "u8"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      }
    },
    "glam::U8Vec2::to_array": {
      "namespace": "glam::U8Vec2",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "u8"
            },
            2
          ]
        }
      },
      "documentation": " `[x, y]`"
    },
    "glam::U8Vec2::with_x": {
      "namespace": "glam::U8Vec2",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u8"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `x`."
    },
    "glam::U8Vec2::with_y": {
      "namespace": "glam::U8Vec2",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u8"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `y`."
    },
    "glam::U8Vec2::wrapping_add": {
      "namespace": "glam::U8Vec2",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::U8Vec2::wrapping_add_signed": {
      "namespace": "glam::U8Vec2",
      "identifier": "wrapping_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.wrapping_add_signed(rhs.x), self.y.wrapping_add_signed(rhs.y), ..]`."
    },
    "glam::U8Vec2::wrapping_div": {
      "namespace": "glam::U8Vec2",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::U8Vec2::wrapping_mul": {
      "namespace": "glam::U8Vec2",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::U8Vec2::wrapping_sub": {
      "namespace": "glam::U8Vec2",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::U8Vec3::add": {
      "namespace": "glam::U8Vec3",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      }
    },
    "glam::U8Vec3::add-1": {
      "namespace": "glam::U8Vec3",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      }
    },
    "glam::U8Vec3::add-2": {
      "namespace": "glam::U8Vec3",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          }
        },
        {
          "kind": {
            "primitive": "u8"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      }
    },
    "glam::U8Vec3::as_dvec3": {
      "namespace": "glam::U8Vec3",
      "identifier": "as_dvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::U8Vec3::as_i16vec3": {
      "namespace": "glam::U8Vec3",
      "identifier": "as_i16vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i16`."
    },
    "glam::U8Vec3::as_i64vec3": {
      "namespace": "glam::U8Vec3",
      "identifier": "as_i64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::U8Vec3::as_i8vec3": {
      "namespace": "glam::U8Vec3",
      "identifier": "as_i8vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i8`."
    },
    "glam::U8Vec3::as_ivec3": {
      "namespace": "glam::U8Vec3",
      "identifier": "as_ivec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::U8Vec3::as_u16vec3": {
      "namespace": "glam::U8Vec3",
      "identifier": "as_u16vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u16`."
    },
    "glam::U8Vec3::as_u64vec3": {
      "namespace": "glam::U8Vec3",
      "identifier": "as_u64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::U8Vec3::as_uvec3": {
      "namespace": "glam::U8Vec3",
      "identifier": "as_uvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::U8Vec3::as_vec3": {
      "namespace": "glam::U8Vec3",
      "identifier": "as_vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::U8Vec3::as_vec3a": {
      "namespace": "glam::U8Vec3",
      "identifier": "as_vec3a",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::U8Vec3::assert_receiver_is_total_eq": {
      "namespace": "glam::U8Vec3",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::U8Vec3::clamp": {
      "namespace": "glam::U8Vec3",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`u8::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::U8Vec3::clone": {
      "namespace": "glam::U8Vec3",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      }
    },
    "glam::U8Vec3::cmpeq": {
      "namespace": "glam::U8Vec3",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::U8Vec3::cmpge": {
      "namespace": "glam::U8Vec3",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::U8Vec3::cmpgt": {
      "namespace": "glam::U8Vec3",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::U8Vec3::cmple": {
      "namespace": "glam::U8Vec3",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::U8Vec3::cmplt": {
      "namespace": "glam::U8Vec3",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::U8Vec3::cmpne": {
      "namespace": "glam::U8Vec3",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::U8Vec3::cross": {
      "namespace": "glam::U8Vec3",
      "identifier": "cross",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Computes the cross product of `self` and `rhs`."
    },
    "glam::U8Vec3::div": {
      "namespace": "glam::U8Vec3",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      }
    },
    "glam::U8Vec3::div-1": {
      "namespace": "glam::U8Vec3",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      }
    },
    "glam::U8Vec3::div-2": {
      "namespace": "glam::U8Vec3",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          }
        },
        {
          "kind": {
            "primitive": "u8"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      }
    },
    "glam::U8Vec3::dot": {
      "namespace": "glam::U8Vec3",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u8"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::U8Vec3::dot_into_vec": {
      "namespace": "glam::U8Vec3",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::U8Vec3::element_product": {
      "namespace": "glam::U8Vec3",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u8"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::U8Vec3::element_sum": {
      "namespace": "glam::U8Vec3",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u8"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::U8Vec3::eq": {
      "namespace": "glam::U8Vec3",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U8Vec3"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::U8Vec3::extend": {
      "namespace": "glam::U8Vec3",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u8"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` and the given `w` value."
    },
    "glam::U8Vec3::from_array": {
      "namespace": "glam::U8Vec3",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "u8"
              },
              3
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::U8Vec3::length_squared": {
      "namespace": "glam::U8Vec3",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u8"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::U8Vec3::max": {
      "namespace": "glam::U8Vec3",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::U8Vec3::max_element": {
      "namespace": "glam::U8Vec3",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u8"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::U8Vec3::min": {
      "namespace": "glam::U8Vec3",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::U8Vec3::min_element": {
      "namespace": "glam::U8Vec3",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u8"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::U8Vec3::mul": {
      "namespace": "glam::U8Vec3",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      }
    },
    "glam::U8Vec3::mul-1": {
      "namespace": "glam::U8Vec3",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      }
    },
    "glam::U8Vec3::mul-2": {
      "namespace": "glam::U8Vec3",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          }
        },
        {
          "kind": {
            "primitive": "u8"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      }
    },
    "glam::U8Vec3::new": {
      "namespace": "glam::U8Vec3",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u8"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "u8"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "u8"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::U8Vec3::rem": {
      "namespace": "glam::U8Vec3",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      }
    },
    "glam::U8Vec3::rem-1": {
      "namespace": "glam::U8Vec3",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      }
    },
    "glam::U8Vec3::rem-2": {
      "namespace": "glam::U8Vec3",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          }
        },
        {
          "kind": {
            "primitive": "u8"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      }
    },
    "glam::U8Vec3::saturating_add": {
      "namespace": "glam::U8Vec3",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::U8Vec3::saturating_add_signed": {
      "namespace": "glam::U8Vec3",
      "identifier": "saturating_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.saturating_add_signed(rhs.x), self.y.saturating_add_signed(rhs.y), ..]`."
    },
    "glam::U8Vec3::saturating_div": {
      "namespace": "glam::U8Vec3",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::U8Vec3::saturating_mul": {
      "namespace": "glam::U8Vec3",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::U8Vec3::saturating_sub": {
      "namespace": "glam::U8Vec3",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::U8Vec3::select": {
      "namespace": "glam::U8Vec3",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec3"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::U8Vec3::splat": {
      "namespace": "glam::U8Vec3",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "u8"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::U8Vec3::sub": {
      "namespace": "glam::U8Vec3",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      }
    },
    "glam::U8Vec3::sub-1": {
      "namespace": "glam::U8Vec3",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      }
    },
    "glam::U8Vec3::sub-2": {
      "namespace": "glam::U8Vec3",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          }
        },
        {
          "kind": {
            "primitive": "u8"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      }
    },
    "glam::U8Vec3::to_array": {
      "namespace": "glam::U8Vec3",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "u8"
            },
            3
          ]
        }
      },
      "documentation": " `[x, y, z]`"
    },
    "glam::U8Vec3::truncate": {
      "namespace": "glam::U8Vec3",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      },
      "documentation": " Creates a 2D vector from the `x` and `y` elements of `self`, discarding `z`.\n Truncation may also be performed by using [`self.xy()`][crate::swizzles::Vec3Swizzles::xy()]."
    },
    "glam::U8Vec3::with_x": {
      "namespace": "glam::U8Vec3",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u8"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `x`."
    },
    "glam::U8Vec3::with_y": {
      "namespace": "glam::U8Vec3",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u8"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `y`."
    },
    "glam::U8Vec3::with_z": {
      "namespace": "glam::U8Vec3",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u8"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `z`."
    },
    "glam::U8Vec3::wrapping_add": {
      "namespace": "glam::U8Vec3",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::U8Vec3::wrapping_add_signed": {
      "namespace": "glam::U8Vec3",
      "identifier": "wrapping_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.wrapping_add_signed(rhs.x), self.y.wrapping_add_signed(rhs.y), ..]`."
    },
    "glam::U8Vec3::wrapping_div": {
      "namespace": "glam::U8Vec3",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::U8Vec3::wrapping_mul": {
      "namespace": "glam::U8Vec3",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::U8Vec3::wrapping_sub": {
      "namespace": "glam::U8Vec3",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::U8Vec4::add": {
      "namespace": "glam::U8Vec4",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      }
    },
    "glam::U8Vec4::add-1": {
      "namespace": "glam::U8Vec4",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      }
    },
    "glam::U8Vec4::add-2": {
      "namespace": "glam::U8Vec4",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          }
        },
        {
          "kind": {
            "primitive": "u8"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      }
    },
    "glam::U8Vec4::as_dvec4": {
      "namespace": "glam::U8Vec4",
      "identifier": "as_dvec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::U8Vec4::as_i16vec4": {
      "namespace": "glam::U8Vec4",
      "identifier": "as_i16vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i16`."
    },
    "glam::U8Vec4::as_i64vec4": {
      "namespace": "glam::U8Vec4",
      "identifier": "as_i64vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::U8Vec4::as_i8vec4": {
      "namespace": "glam::U8Vec4",
      "identifier": "as_i8vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i8`."
    },
    "glam::U8Vec4::as_ivec4": {
      "namespace": "glam::U8Vec4",
      "identifier": "as_ivec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::U8Vec4::as_u16vec4": {
      "namespace": "glam::U8Vec4",
      "identifier": "as_u16vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u16`."
    },
    "glam::U8Vec4::as_u64vec4": {
      "namespace": "glam::U8Vec4",
      "identifier": "as_u64vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::U8Vec4::as_uvec4": {
      "namespace": "glam::U8Vec4",
      "identifier": "as_uvec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::U8Vec4::as_vec4": {
      "namespace": "glam::U8Vec4",
      "identifier": "as_vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::U8Vec4::assert_receiver_is_total_eq": {
      "namespace": "glam::U8Vec4",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::U8Vec4::clamp": {
      "namespace": "glam::U8Vec4",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`u8::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::U8Vec4::clone": {
      "namespace": "glam::U8Vec4",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      }
    },
    "glam::U8Vec4::cmpeq": {
      "namespace": "glam::U8Vec4",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::U8Vec4::cmpge": {
      "namespace": "glam::U8Vec4",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::U8Vec4::cmpgt": {
      "namespace": "glam::U8Vec4",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::U8Vec4::cmple": {
      "namespace": "glam::U8Vec4",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::U8Vec4::cmplt": {
      "namespace": "glam::U8Vec4",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::U8Vec4::cmpne": {
      "namespace": "glam::U8Vec4",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::U8Vec4::div": {
      "namespace": "glam::U8Vec4",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      }
    },
    "glam::U8Vec4::div-1": {
      "namespace": "glam::U8Vec4",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      }
    },
    "glam::U8Vec4::div-2": {
      "namespace": "glam::U8Vec4",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          }
        },
        {
          "kind": {
            "primitive": "u8"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      }
    },
    "glam::U8Vec4::dot": {
      "namespace": "glam::U8Vec4",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u8"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::U8Vec4::dot_into_vec": {
      "namespace": "glam::U8Vec4",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::U8Vec4::element_product": {
      "namespace": "glam::U8Vec4",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u8"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::U8Vec4::element_sum": {
      "namespace": "glam::U8Vec4",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u8"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::U8Vec4::eq": {
      "namespace": "glam::U8Vec4",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U8Vec4"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::U8Vec4::from_array": {
      "namespace": "glam::U8Vec4",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "u8"
              },
              4
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::U8Vec4::length_squared": {
      "namespace": "glam::U8Vec4",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u8"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::U8Vec4::max": {
      "namespace": "glam::U8Vec4",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::U8Vec4::max_element": {
      "namespace": "glam::U8Vec4",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u8"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::U8Vec4::min": {
      "namespace": "glam::U8Vec4",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::U8Vec4::min_element": {
      "namespace": "glam::U8Vec4",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u8"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::U8Vec4::mul": {
      "namespace": "glam::U8Vec4",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      }
    },
    "glam::U8Vec4::mul-1": {
      "namespace": "glam::U8Vec4",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      }
    },
    "glam::U8Vec4::mul-2": {
      "namespace": "glam::U8Vec4",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          }
        },
        {
          "kind": {
            "primitive": "u8"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      }
    },
    "glam::U8Vec4::new": {
      "namespace": "glam::U8Vec4",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u8"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "u8"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "u8"
          },
          "name": "z"
        },
        {
          "kind": {
            "primitive": "u8"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::U8Vec4::rem": {
      "namespace": "glam::U8Vec4",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      }
    },
    "glam::U8Vec4::rem-1": {
      "namespace": "glam::U8Vec4",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      }
    },
    "glam::U8Vec4::rem-2": {
      "namespace": "glam::U8Vec4",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          }
        },
        {
          "kind": {
            "primitive": "u8"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      }
    },
    "glam::U8Vec4::saturating_add": {
      "namespace": "glam::U8Vec4",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::U8Vec4::saturating_add_signed": {
      "namespace": "glam::U8Vec4",
      "identifier": "saturating_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.saturating_add_signed(rhs.x), self.y.saturating_add_signed(rhs.y), ..]`."
    },
    "glam::U8Vec4::saturating_div": {
      "namespace": "glam::U8Vec4",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::U8Vec4::saturating_mul": {
      "namespace": "glam::U8Vec4",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::U8Vec4::saturating_sub": {
      "namespace": "glam::U8Vec4",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::U8Vec4::select": {
      "namespace": "glam::U8Vec4",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec4"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::U8Vec4::splat": {
      "namespace": "glam::U8Vec4",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "u8"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::U8Vec4::sub": {
      "namespace": "glam::U8Vec4",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      }
    },
    "glam::U8Vec4::sub-1": {
      "namespace": "glam::U8Vec4",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      }
    },
    "glam::U8Vec4::sub-2": {
      "namespace": "glam::U8Vec4",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          }
        },
        {
          "kind": {
            "primitive": "u8"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      }
    },
    "glam::U8Vec4::to_array": {
      "namespace": "glam::U8Vec4",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "u8"
            },
            4
          ]
        }
      },
      "documentation": " `[x, y, z, w]`"
    },
    "glam::U8Vec4::truncate": {
      "namespace": "glam::U8Vec4",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Creates a 3D vector from the `x`, `y` and `z` elements of `self`, discarding `w`.\n Truncation to [`U8Vec3`] may also be performed by using [`self.xyz()`][crate::swizzles::Vec4Swizzles::xyz()]."
    },
    "glam::U8Vec4::with_w": {
      "namespace": "glam::U8Vec4",
      "identifier": "with_w",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u8"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `w`."
    },
    "glam::U8Vec4::with_x": {
      "namespace": "glam::U8Vec4",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u8"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `x`."
    },
    "glam::U8Vec4::with_y": {
      "namespace": "glam::U8Vec4",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u8"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `y`."
    },
    "glam::U8Vec4::with_z": {
      "namespace": "glam::U8Vec4",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u8"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `z`."
    },
    "glam::U8Vec4::wrapping_add": {
      "namespace": "glam::U8Vec4",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::U8Vec4::wrapping_add_signed": {
      "namespace": "glam::U8Vec4",
      "identifier": "wrapping_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.wrapping_add_signed(rhs.x), self.y.wrapping_add_signed(rhs.y), ..]`."
    },
    "glam::U8Vec4::wrapping_div": {
      "namespace": "glam::U8Vec4",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::U8Vec4::wrapping_mul": {
      "namespace": "glam::U8Vec4",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::U8Vec4::wrapping_sub": {
      "namespace": "glam::U8Vec4",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U8Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::UVec2::add": {
      "namespace": "glam::UVec2",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::add-1": {
      "namespace": "glam::UVec2",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          }
        },
        {
          "kind": {
            "val": "glam::UVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::add-2": {
      "namespace": "glam::UVec2",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          }
        },
        {
          "kind": {
            "primitive": "u32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::as_dvec2": {
      "namespace": "glam::UVec2",
      "identifier": "as_dvec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::UVec2::as_i16vec2": {
      "namespace": "glam::UVec2",
      "identifier": "as_i16vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i16`."
    },
    "glam::UVec2::as_i64vec2": {
      "namespace": "glam::UVec2",
      "identifier": "as_i64vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::UVec2::as_i8vec2": {
      "namespace": "glam::UVec2",
      "identifier": "as_i8vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i8`."
    },
    "glam::UVec2::as_ivec2": {
      "namespace": "glam::UVec2",
      "identifier": "as_ivec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::UVec2::as_u16vec2": {
      "namespace": "glam::UVec2",
      "identifier": "as_u16vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u16`."
    },
    "glam::UVec2::as_u64vec2": {
      "namespace": "glam::UVec2",
      "identifier": "as_u64vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::UVec2::as_u8vec2": {
      "namespace": "glam::UVec2",
      "identifier": "as_u8vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u8`."
    },
    "glam::UVec2::as_vec2": {
      "namespace": "glam::UVec2",
      "identifier": "as_vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::UVec2::assert_receiver_is_total_eq": {
      "namespace": "glam::UVec2",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::UVec2::clamp": {
      "namespace": "glam::UVec2",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`u32::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::UVec2::clone": {
      "namespace": "glam::UVec2",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::cmpeq": {
      "namespace": "glam::UVec2",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::UVec2::cmpge": {
      "namespace": "glam::UVec2",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::UVec2::cmpgt": {
      "namespace": "glam::UVec2",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::UVec2::cmple": {
      "namespace": "glam::UVec2",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::UVec2::cmplt": {
      "namespace": "glam::UVec2",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::UVec2::cmpne": {
      "namespace": "glam::UVec2",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::UVec2::div": {
      "namespace": "glam::UVec2",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::div-1": {
      "namespace": "glam::UVec2",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          }
        },
        {
          "kind": {
            "val": "glam::UVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::div-2": {
      "namespace": "glam::UVec2",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          }
        },
        {
          "kind": {
            "primitive": "u32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::dot": {
      "namespace": "glam::UVec2",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::UVec2::dot_into_vec": {
      "namespace": "glam::UVec2",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::UVec2::element_product": {
      "namespace": "glam::UVec2",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::UVec2::element_sum": {
      "namespace": "glam::UVec2",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::UVec2::eq": {
      "namespace": "glam::UVec2",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::UVec2::extend": {
      "namespace": "glam::UVec2",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` and the given `z` value."
    },
    "glam::UVec2::from_array": {
      "namespace": "glam::UVec2",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "u32"
              },
              2
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::UVec2::length_squared": {
      "namespace": "glam::UVec2",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::UVec2::max": {
      "namespace": "glam::UVec2",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::UVec2::max_element": {
      "namespace": "glam::UVec2",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::UVec2::min": {
      "namespace": "glam::UVec2",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::UVec2::min_element": {
      "namespace": "glam::UVec2",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::UVec2::mul": {
      "namespace": "glam::UVec2",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::mul-1": {
      "namespace": "glam::UVec2",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          }
        },
        {
          "kind": {
            "val": "glam::UVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::mul-2": {
      "namespace": "glam::UVec2",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          }
        },
        {
          "kind": {
            "primitive": "u32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::new": {
      "namespace": "glam::UVec2",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::UVec2::rem": {
      "namespace": "glam::UVec2",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::rem-1": {
      "namespace": "glam::UVec2",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          }
        },
        {
          "kind": {
            "val": "glam::UVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::rem-2": {
      "namespace": "glam::UVec2",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          }
        },
        {
          "kind": {
            "primitive": "u32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::saturating_add": {
      "namespace": "glam::UVec2",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::UVec2::saturating_add_signed": {
      "namespace": "glam::UVec2",
      "identifier": "saturating_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.saturating_add_signed(rhs.x), self.y.saturating_add_signed(rhs.y), ..]`."
    },
    "glam::UVec2::saturating_div": {
      "namespace": "glam::UVec2",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::UVec2::saturating_mul": {
      "namespace": "glam::UVec2",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::UVec2::saturating_sub": {
      "namespace": "glam::UVec2",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::UVec2::select": {
      "namespace": "glam::UVec2",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec2"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::UVec2::splat": {
      "namespace": "glam::UVec2",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::UVec2::sub": {
      "namespace": "glam::UVec2",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::sub-1": {
      "namespace": "glam::UVec2",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          }
        },
        {
          "kind": {
            "val": "glam::UVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::sub-2": {
      "namespace": "glam::UVec2",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          }
        },
        {
          "kind": {
            "primitive": "u32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::to_array": {
      "namespace": "glam::UVec2",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "u32"
            },
            2
          ]
        }
      },
      "documentation": " `[x, y]`"
    },
    "glam::UVec2::with_x": {
      "namespace": "glam::UVec2",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `x`."
    },
    "glam::UVec2::with_y": {
      "namespace": "glam::UVec2",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `y`."
    },
    "glam::UVec2::wrapping_add": {
      "namespace": "glam::UVec2",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::UVec2::wrapping_add_signed": {
      "namespace": "glam::UVec2",
      "identifier": "wrapping_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.wrapping_add_signed(rhs.x), self.y.wrapping_add_signed(rhs.y), ..]`."
    },
    "glam::UVec2::wrapping_div": {
      "namespace": "glam::UVec2",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::UVec2::wrapping_mul": {
      "namespace": "glam::UVec2",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::UVec2::wrapping_sub": {
      "namespace": "glam::UVec2",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::UVec3::add": {
      "namespace": "glam::UVec3",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::add-1": {
      "namespace": "glam::UVec3",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          }
        },
        {
          "kind": {
            "val": "glam::UVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::add-2": {
      "namespace": "glam::UVec3",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          }
        },
        {
          "kind": {
            "primitive": "u32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::as_dvec3": {
      "namespace": "glam::UVec3",
      "identifier": "as_dvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::UVec3::as_i16vec3": {
      "namespace": "glam::UVec3",
      "identifier": "as_i16vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i16`."
    },
    "glam::UVec3::as_i64vec3": {
      "namespace": "glam::UVec3",
      "identifier": "as_i64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::UVec3::as_i8vec3": {
      "namespace": "glam::UVec3",
      "identifier": "as_i8vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i8`."
    },
    "glam::UVec3::as_ivec3": {
      "namespace": "glam::UVec3",
      "identifier": "as_ivec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::UVec3::as_u16vec3": {
      "namespace": "glam::UVec3",
      "identifier": "as_u16vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u16`."
    },
    "glam::UVec3::as_u64vec3": {
      "namespace": "glam::UVec3",
      "identifier": "as_u64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::UVec3::as_u8vec3": {
      "namespace": "glam::UVec3",
      "identifier": "as_u8vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u8`."
    },
    "glam::UVec3::as_vec3": {
      "namespace": "glam::UVec3",
      "identifier": "as_vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::UVec3::as_vec3a": {
      "namespace": "glam::UVec3",
      "identifier": "as_vec3a",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::UVec3::assert_receiver_is_total_eq": {
      "namespace": "glam::UVec3",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::UVec3::clamp": {
      "namespace": "glam::UVec3",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`u32::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::UVec3::clone": {
      "namespace": "glam::UVec3",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::cmpeq": {
      "namespace": "glam::UVec3",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::UVec3::cmpge": {
      "namespace": "glam::UVec3",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::UVec3::cmpgt": {
      "namespace": "glam::UVec3",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::UVec3::cmple": {
      "namespace": "glam::UVec3",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::UVec3::cmplt": {
      "namespace": "glam::UVec3",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::UVec3::cmpne": {
      "namespace": "glam::UVec3",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::UVec3::cross": {
      "namespace": "glam::UVec3",
      "identifier": "cross",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Computes the cross product of `self` and `rhs`."
    },
    "glam::UVec3::div": {
      "namespace": "glam::UVec3",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::div-1": {
      "namespace": "glam::UVec3",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          }
        },
        {
          "kind": {
            "val": "glam::UVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::div-2": {
      "namespace": "glam::UVec3",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          }
        },
        {
          "kind": {
            "primitive": "u32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::dot": {
      "namespace": "glam::UVec3",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::UVec3::dot_into_vec": {
      "namespace": "glam::UVec3",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::UVec3::element_product": {
      "namespace": "glam::UVec3",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::UVec3::element_sum": {
      "namespace": "glam::UVec3",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::UVec3::eq": {
      "namespace": "glam::UVec3",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::UVec3::extend": {
      "namespace": "glam::UVec3",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` and the given `w` value."
    },
    "glam::UVec3::from_array": {
      "namespace": "glam::UVec3",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "u32"
              },
              3
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::UVec3::length_squared": {
      "namespace": "glam::UVec3",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::UVec3::max": {
      "namespace": "glam::UVec3",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::UVec3::max_element": {
      "namespace": "glam::UVec3",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::UVec3::min": {
      "namespace": "glam::UVec3",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::UVec3::min_element": {
      "namespace": "glam::UVec3",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::UVec3::mul": {
      "namespace": "glam::UVec3",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::mul-1": {
      "namespace": "glam::UVec3",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          }
        },
        {
          "kind": {
            "val": "glam::UVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::mul-2": {
      "namespace": "glam::UVec3",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          }
        },
        {
          "kind": {
            "primitive": "u32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::new": {
      "namespace": "glam::UVec3",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::UVec3::rem": {
      "namespace": "glam::UVec3",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::rem-1": {
      "namespace": "glam::UVec3",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          }
        },
        {
          "kind": {
            "val": "glam::UVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::rem-2": {
      "namespace": "glam::UVec3",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          }
        },
        {
          "kind": {
            "primitive": "u32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::saturating_add": {
      "namespace": "glam::UVec3",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::UVec3::saturating_add_signed": {
      "namespace": "glam::UVec3",
      "identifier": "saturating_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.saturating_add_signed(rhs.x), self.y.saturating_add_signed(rhs.y), ..]`."
    },
    "glam::UVec3::saturating_div": {
      "namespace": "glam::UVec3",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::UVec3::saturating_mul": {
      "namespace": "glam::UVec3",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::UVec3::saturating_sub": {
      "namespace": "glam::UVec3",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::UVec3::select": {
      "namespace": "glam::UVec3",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec3"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::UVec3::splat": {
      "namespace": "glam::UVec3",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::UVec3::sub": {
      "namespace": "glam::UVec3",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::sub-1": {
      "namespace": "glam::UVec3",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          }
        },
        {
          "kind": {
            "val": "glam::UVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::sub-2": {
      "namespace": "glam::UVec3",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          }
        },
        {
          "kind": {
            "primitive": "u32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::to_array": {
      "namespace": "glam::UVec3",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "u32"
            },
            3
          ]
        }
      },
      "documentation": " `[x, y, z]`"
    },
    "glam::UVec3::truncate": {
      "namespace": "glam::UVec3",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Creates a 2D vector from the `x` and `y` elements of `self`, discarding `z`.\n Truncation may also be performed by using [`self.xy()`][crate::swizzles::Vec3Swizzles::xy()]."
    },
    "glam::UVec3::with_x": {
      "namespace": "glam::UVec3",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `x`."
    },
    "glam::UVec3::with_y": {
      "namespace": "glam::UVec3",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `y`."
    },
    "glam::UVec3::with_z": {
      "namespace": "glam::UVec3",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `z`."
    },
    "glam::UVec3::wrapping_add": {
      "namespace": "glam::UVec3",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::UVec3::wrapping_add_signed": {
      "namespace": "glam::UVec3",
      "identifier": "wrapping_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.wrapping_add_signed(rhs.x), self.y.wrapping_add_signed(rhs.y), ..]`."
    },
    "glam::UVec3::wrapping_div": {
      "namespace": "glam::UVec3",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::UVec3::wrapping_mul": {
      "namespace": "glam::UVec3",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::UVec3::wrapping_sub": {
      "namespace": "glam::UVec3",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::UVec4::add": {
      "namespace": "glam::UVec4",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::add-1": {
      "namespace": "glam::UVec4",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          }
        },
        {
          "kind": {
            "val": "glam::UVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::add-2": {
      "namespace": "glam::UVec4",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          }
        },
        {
          "kind": {
            "primitive": "u32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::as_dvec4": {
      "namespace": "glam::UVec4",
      "identifier": "as_dvec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::UVec4::as_i16vec4": {
      "namespace": "glam::UVec4",
      "identifier": "as_i16vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i16`."
    },
    "glam::UVec4::as_i64vec4": {
      "namespace": "glam::UVec4",
      "identifier": "as_i64vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::UVec4::as_i8vec4": {
      "namespace": "glam::UVec4",
      "identifier": "as_i8vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i8`."
    },
    "glam::UVec4::as_ivec4": {
      "namespace": "glam::UVec4",
      "identifier": "as_ivec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::UVec4::as_u16vec4": {
      "namespace": "glam::UVec4",
      "identifier": "as_u16vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u16`."
    },
    "glam::UVec4::as_u64vec4": {
      "namespace": "glam::UVec4",
      "identifier": "as_u64vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::UVec4::as_u8vec4": {
      "namespace": "glam::UVec4",
      "identifier": "as_u8vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u8`."
    },
    "glam::UVec4::as_vec4": {
      "namespace": "glam::UVec4",
      "identifier": "as_vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::UVec4::assert_receiver_is_total_eq": {
      "namespace": "glam::UVec4",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::UVec4::clamp": {
      "namespace": "glam::UVec4",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`u32::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::UVec4::clone": {
      "namespace": "glam::UVec4",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::cmpeq": {
      "namespace": "glam::UVec4",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::UVec4::cmpge": {
      "namespace": "glam::UVec4",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::UVec4::cmpgt": {
      "namespace": "glam::UVec4",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::UVec4::cmple": {
      "namespace": "glam::UVec4",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::UVec4::cmplt": {
      "namespace": "glam::UVec4",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::UVec4::cmpne": {
      "namespace": "glam::UVec4",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::UVec4::div": {
      "namespace": "glam::UVec4",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::div-1": {
      "namespace": "glam::UVec4",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          }
        },
        {
          "kind": {
            "val": "glam::UVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::div-2": {
      "namespace": "glam::UVec4",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          }
        },
        {
          "kind": {
            "primitive": "u32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::dot": {
      "namespace": "glam::UVec4",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::UVec4::dot_into_vec": {
      "namespace": "glam::UVec4",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::UVec4::element_product": {
      "namespace": "glam::UVec4",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::UVec4::element_sum": {
      "namespace": "glam::UVec4",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::UVec4::eq": {
      "namespace": "glam::UVec4",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::UVec4::from_array": {
      "namespace": "glam::UVec4",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "u32"
              },
              4
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::UVec4::length_squared": {
      "namespace": "glam::UVec4",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::UVec4::max": {
      "namespace": "glam::UVec4",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::UVec4::max_element": {
      "namespace": "glam::UVec4",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::UVec4::min": {
      "namespace": "glam::UVec4",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::UVec4::min_element": {
      "namespace": "glam::UVec4",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::UVec4::mul": {
      "namespace": "glam::UVec4",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::mul-1": {
      "namespace": "glam::UVec4",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          }
        },
        {
          "kind": {
            "val": "glam::UVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::mul-2": {
      "namespace": "glam::UVec4",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          }
        },
        {
          "kind": {
            "primitive": "u32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::new": {
      "namespace": "glam::UVec4",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "z"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::UVec4::rem": {
      "namespace": "glam::UVec4",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::rem-1": {
      "namespace": "glam::UVec4",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          }
        },
        {
          "kind": {
            "val": "glam::UVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::rem-2": {
      "namespace": "glam::UVec4",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          }
        },
        {
          "kind": {
            "primitive": "u32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::saturating_add": {
      "namespace": "glam::UVec4",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::UVec4::saturating_add_signed": {
      "namespace": "glam::UVec4",
      "identifier": "saturating_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.saturating_add_signed(rhs.x), self.y.saturating_add_signed(rhs.y), ..]`."
    },
    "glam::UVec4::saturating_div": {
      "namespace": "glam::UVec4",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::UVec4::saturating_mul": {
      "namespace": "glam::UVec4",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::UVec4::saturating_sub": {
      "namespace": "glam::UVec4",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::UVec4::select": {
      "namespace": "glam::UVec4",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec4"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::UVec4::splat": {
      "namespace": "glam::UVec4",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::UVec4::sub": {
      "namespace": "glam::UVec4",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::sub-1": {
      "namespace": "glam::UVec4",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          }
        },
        {
          "kind": {
            "val": "glam::UVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::sub-2": {
      "namespace": "glam::UVec4",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          }
        },
        {
          "kind": {
            "primitive": "u32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::to_array": {
      "namespace": "glam::UVec4",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "u32"
            },
            4
          ]
        }
      },
      "documentation": " `[x, y, z, w]`"
    },
    "glam::UVec4::truncate": {
      "namespace": "glam::UVec4",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Creates a 3D vector from the `x`, `y` and `z` elements of `self`, discarding `w`.\n Truncation to [`UVec3`] may also be performed by using [`self.xyz()`][crate::swizzles::Vec4Swizzles::xyz()]."
    },
    "glam::UVec4::with_w": {
      "namespace": "glam::UVec4",
      "identifier": "with_w",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `w`."
    },
    "glam::UVec4::with_x": {
      "namespace": "glam::UVec4",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `x`."
    },
    "glam::UVec4::with_y": {
      "namespace": "glam::UVec4",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `y`."
    },
    "glam::UVec4::with_z": {
      "namespace": "glam::UVec4",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `z`."
    },
    "glam::UVec4::wrapping_add": {
      "namespace": "glam::UVec4",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::UVec4::wrapping_add_signed": {
      "namespace": "glam::UVec4",
      "identifier": "wrapping_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.wrapping_add_signed(rhs.x), self.y.wrapping_add_signed(rhs.y), ..]`."
    },
    "glam::UVec4::wrapping_div": {
      "namespace": "glam::UVec4",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::UVec4::wrapping_mul": {
      "namespace": "glam::UVec4",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::UVec4::wrapping_sub": {
      "namespace": "glam::UVec4",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::Vec2::abs": {
      "namespace": "glam::Vec2",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::Vec2::abs_diff_eq": {
      "namespace": "glam::Vec2",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs` is\n less than or equal to `max_abs_diff`.\n This can be used to compare if two vectors contain similar elements. It works best when\n comparing with a known value. The `max_abs_diff` that should be used used depends on\n the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::Vec2::add": {
      "namespace": "glam::Vec2",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::add-1": {
      "namespace": "glam::Vec2",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::add-2": {
      "namespace": "glam::Vec2",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::angle_between": {
      "namespace": "glam::Vec2",
      "identifier": "angle_between",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      }
    },
    "glam::Vec2::angle_to": {
      "namespace": "glam::Vec2",
      "identifier": "angle_to",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the angle of rotation (in radians) from `self` to `rhs` in the range `[-π, +π]`.\n The inputs do not need to be unit vectors however they must be non-zero."
    },
    "glam::Vec2::as_dvec2": {
      "namespace": "glam::Vec2",
      "identifier": "as_dvec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::Vec2::as_i16vec2": {
      "namespace": "glam::Vec2",
      "identifier": "as_i16vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i16`."
    },
    "glam::Vec2::as_i64vec2": {
      "namespace": "glam::Vec2",
      "identifier": "as_i64vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::Vec2::as_i8vec2": {
      "namespace": "glam::Vec2",
      "identifier": "as_i8vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i8`."
    },
    "glam::Vec2::as_ivec2": {
      "namespace": "glam::Vec2",
      "identifier": "as_ivec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::Vec2::as_u16vec2": {
      "namespace": "glam::Vec2",
      "identifier": "as_u16vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u16`."
    },
    "glam::Vec2::as_u64vec2": {
      "namespace": "glam::Vec2",
      "identifier": "as_u64vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::Vec2::as_u8vec2": {
      "namespace": "glam::Vec2",
      "identifier": "as_u8vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u8`."
    },
    "glam::Vec2::as_uvec2": {
      "namespace": "glam::Vec2",
      "identifier": "as_uvec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::Vec2::ceil": {
      "namespace": "glam::Vec2",
      "identifier": "ceil",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector containing the smallest integer greater than or equal to a number for\n each element of `self`."
    },
    "glam::Vec2::clamp": {
      "namespace": "glam::Vec2",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`f32::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::Vec2::clamp_length": {
      "namespace": "glam::Vec2",
      "identifier": "clamp_length",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "min"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector with a length no less than `min` and no more than `max`.\n # Panics\n Will panic if `min` is greater than `max`, or if either `min` or `max` is negative, when `glam_assert` is enabled."
    },
    "glam::Vec2::clamp_length_max": {
      "namespace": "glam::Vec2",
      "identifier": "clamp_length_max",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector with a length no more than `max`.\n # Panics\n Will panic if `max` is negative when `glam_assert` is enabled."
    },
    "glam::Vec2::clamp_length_min": {
      "namespace": "glam::Vec2",
      "identifier": "clamp_length_min",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "min"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector with a length no less than `min`.\n # Panics\n Will panic if `min` is negative when `glam_assert` is enabled."
    },
    "glam::Vec2::clone": {
      "namespace": "glam::Vec2",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::cmpeq": {
      "namespace": "glam::Vec2",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::Vec2::cmpge": {
      "namespace": "glam::Vec2",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::Vec2::cmpgt": {
      "namespace": "glam::Vec2",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::Vec2::cmple": {
      "namespace": "glam::Vec2",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::Vec2::cmplt": {
      "namespace": "glam::Vec2",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::Vec2::cmpne": {
      "namespace": "glam::Vec2",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::Vec2::copysign": {
      "namespace": "glam::Vec2",
      "identifier": "copysign",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector with signs of `rhs` and the magnitudes of `self`."
    },
    "glam::Vec2::distance": {
      "namespace": "glam::Vec2",
      "identifier": "distance",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the Euclidean distance between two points in space."
    },
    "glam::Vec2::distance_squared": {
      "namespace": "glam::Vec2",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::Vec2::div": {
      "namespace": "glam::Vec2",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::div-1": {
      "namespace": "glam::Vec2",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::div-2": {
      "namespace": "glam::Vec2",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::div_euclid": {
      "namespace": "glam::Vec2",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`."
    },
    "glam::Vec2::dot": {
      "namespace": "glam::Vec2",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::Vec2::dot_into_vec": {
      "namespace": "glam::Vec2",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::Vec2::element_product": {
      "namespace": "glam::Vec2",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::Vec2::element_sum": {
      "namespace": "glam::Vec2",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::Vec2::eq": {
      "namespace": "glam::Vec2",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::Vec2::exp": {
      "namespace": "glam::Vec2",
      "identifier": "exp",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector containing `e^self` (the exponential function) for each element of\n `self`."
    },
    "glam::Vec2::extend": {
      "namespace": "glam::Vec2",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` and the given `z` value."
    },
    "glam::Vec2::floor": {
      "namespace": "glam::Vec2",
      "identifier": "floor",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector containing the largest integer less than or equal to a number for each\n element of `self`."
    },
    "glam::Vec2::fract": {
      "namespace": "glam::Vec2",
      "identifier": "fract",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector containing the fractional part of the vector as `self - self.trunc()`.\n Note that this differs from the GLSL implementation of `fract` which returns\n `self - self.floor()`.\n Note that this is fast but not precise for large numbers."
    },
    "glam::Vec2::fract_gl": {
      "namespace": "glam::Vec2",
      "identifier": "fract_gl",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector containing the fractional part of the vector as `self - self.floor()`.\n Note that this differs from the Rust implementation of `fract` which returns\n `self - self.trunc()`.\n Note that this is fast but not precise for large numbers."
    },
    "glam::Vec2::from_angle": {
      "namespace": "glam::Vec2",
      "identifier": "from_angle",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Creates a 2D vector containing `[angle.cos(), angle.sin()]`. This can be used in\n conjunction with the [`rotate()`][Self::rotate()] method, e.g.\n `Vec2::from_angle(PI).rotate(Vec2::Y)` will create the vector `[-1, 0]`\n and rotate [`Vec2::Y`] around it returning `-Vec2::Y`."
    },
    "glam::Vec2::from_array": {
      "namespace": "glam::Vec2",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "f32"
              },
              2
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::Vec2::is_finite": {
      "namespace": "glam::Vec2",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.  If any element is either\n `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::Vec2::is_finite_mask": {
      "namespace": "glam::Vec2",
      "identifier": "is_finite_mask",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Performs `is_finite` on each element of self, returning a vector mask of the results.\n In other words, this computes `[x.is_finite(), y.is_finite(), ...]`."
    },
    "glam::Vec2::is_nan": {
      "namespace": "glam::Vec2",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::Vec2::is_nan_mask": {
      "namespace": "glam::Vec2",
      "identifier": "is_nan_mask",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Performs `is_nan` on each element of self, returning a vector mask of the results.\n In other words, this computes `[x.is_nan(), y.is_nan(), ...]`."
    },
    "glam::Vec2::is_negative_bitmask": {
      "namespace": "glam::Vec2",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 2 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::Vec2::is_normalized": {
      "namespace": "glam::Vec2",
      "identifier": "is_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns whether `self` is length `1.0` or not.\n Uses a precision threshold of approximately `1e-4`."
    },
    "glam::Vec2::length": {
      "namespace": "glam::Vec2",
      "identifier": "length",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the length of `self`."
    },
    "glam::Vec2::length_recip": {
      "namespace": "glam::Vec2",
      "identifier": "length_recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes `1.0 / length()`.\n For valid results, `self` must _not_ be of length zero."
    },
    "glam::Vec2::length_squared": {
      "namespace": "glam::Vec2",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the squared length of `self`.\n This is faster than `length()` as it avoids a square root operation."
    },
    "glam::Vec2::lerp": {
      "namespace": "glam::Vec2",
      "identifier": "lerp",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Performs a linear interpolation between `self` and `rhs` based on the value `s`.\n When `s` is `0.0`, the result will be equal to `self`.  When `s` is `1.0`, the result\n will be equal to `rhs`. When `s` is outside of range `[0, 1]`, the result is linearly\n extrapolated."
    },
    "glam::Vec2::max": {
      "namespace": "glam::Vec2",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::Vec2::max_element": {
      "namespace": "glam::Vec2",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::Vec2::midpoint": {
      "namespace": "glam::Vec2",
      "identifier": "midpoint",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Calculates the midpoint between `self` and `rhs`.\n The midpoint is the average of, or halfway point between, two vectors.\n `a.midpoint(b)` should yield the same result as `a.lerp(b, 0.5)`\n while being slightly cheaper to compute."
    },
    "glam::Vec2::min": {
      "namespace": "glam::Vec2",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::Vec2::min_element": {
      "namespace": "glam::Vec2",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::Vec2::move_towards": {
      "namespace": "glam::Vec2",
      "identifier": "move_towards",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "d"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Moves towards `rhs` based on the value `d`.\n When `d` is `0.0`, the result will be equal to `self`. When `d` is equal to\n `self.distance(rhs)`, the result will be equal to `rhs`. Will not go past `rhs`."
    },
    "glam::Vec2::mul": {
      "namespace": "glam::Vec2",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::mul-1": {
      "namespace": "glam::Vec2",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::mul-2": {
      "namespace": "glam::Vec2",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::mul_add": {
      "namespace": "glam::Vec2",
      "identifier": "mul_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "a"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "b"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Fused multiply-add. Computes `(self * a) + b` element-wise with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.\n Using `mul_add` *may* be more performant than an unfused multiply-add if the target\n architecture has a dedicated fma CPU instruction. However, this is not always true,\n and will be heavily dependant on designing algorithms with specific target hardware in\n mind."
    },
    "glam::Vec2::neg": {
      "namespace": "glam::Vec2",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::new": {
      "namespace": "glam::Vec2",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::Vec2::normalize": {
      "namespace": "glam::Vec2",
      "identifier": "normalize",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0.\n For valid results, `self` must be finite and _not_ of length zero, nor very close to zero.\n See also [`Self::try_normalize()`] and [`Self::normalize_or_zero()`].\n Panics\n Will panic if the resulting normalized vector is not finite when `glam_assert` is enabled."
    },
    "glam::Vec2::normalize_or": {
      "namespace": "glam::Vec2",
      "identifier": "normalize_or",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "fallback"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0 if possible, else returns a\n fallback value.\n In particular, if the input is zero (or very close to zero), or non-finite,\n the result of this operation will be the fallback value.\n See also [`Self::try_normalize()`]."
    },
    "glam::Vec2::normalize_or_zero": {
      "namespace": "glam::Vec2",
      "identifier": "normalize_or_zero",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0 if possible, else returns zero.\n In particular, if the input is zero (or very close to zero), or non-finite,\n the result of this operation will be zero.\n See also [`Self::try_normalize()`]."
    },
    "glam::Vec2::perp": {
      "namespace": "glam::Vec2",
      "identifier": "perp",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector that is equal to `self` rotated by 90 degrees."
    },
    "glam::Vec2::perp_dot": {
      "namespace": "glam::Vec2",
      "identifier": "perp_dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " The perpendicular dot product of `self` and `rhs`.\n Also known as the wedge product, 2D cross product, and determinant."
    },
    "glam::Vec2::powf": {
      "namespace": "glam::Vec2",
      "identifier": "powf",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "n"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector containing each element of `self` raised to the power of `n`."
    },
    "glam::Vec2::project_onto": {
      "namespace": "glam::Vec2",
      "identifier": "project_onto",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns the vector projection of `self` onto `rhs`.\n `rhs` must be of non-zero length.\n # Panics\n Will panic if `rhs` is zero length when `glam_assert` is enabled."
    },
    "glam::Vec2::project_onto_normalized": {
      "namespace": "glam::Vec2",
      "identifier": "project_onto_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns the vector projection of `self` onto `rhs`.\n `rhs` must be normalized.\n # Panics\n Will panic if `rhs` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec2::recip": {
      "namespace": "glam::Vec2",
      "identifier": "recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector containing the reciprocal `1.0/n` of each element of `self`."
    },
    "glam::Vec2::reflect": {
      "namespace": "glam::Vec2",
      "identifier": "reflect",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "normal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns the reflection vector for a given incident vector `self` and surface normal\n `normal`.\n `normal` must be normalized.\n # Panics\n Will panic if `normal` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec2::refract": {
      "namespace": "glam::Vec2",
      "identifier": "refract",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "normal"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "eta"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns the refraction direction for a given incident vector `self`, surface normal\n `normal` and ratio of indices of refraction, `eta`. When total internal reflection occurs,\n a zero vector will be returned.\n `self` and `normal` must be normalized.\n # Panics\n Will panic if `self` or `normal` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec2::reject_from": {
      "namespace": "glam::Vec2",
      "identifier": "reject_from",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns the vector rejection of `self` from `rhs`.\n The vector rejection is the vector perpendicular to the projection of `self` onto\n `rhs`, in rhs words the result of `self - self.project_onto(rhs)`.\n `rhs` must be of non-zero length.\n # Panics\n Will panic if `rhs` has a length of zero when `glam_assert` is enabled."
    },
    "glam::Vec2::reject_from_normalized": {
      "namespace": "glam::Vec2",
      "identifier": "reject_from_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns the vector rejection of `self` from `rhs`.\n The vector rejection is the vector perpendicular to the projection of `self` onto\n `rhs`, in rhs words the result of `self - self.project_onto(rhs)`.\n `rhs` must be normalized.\n # Panics\n Will panic if `rhs` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec2::rem": {
      "namespace": "glam::Vec2",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::rem-1": {
      "namespace": "glam::Vec2",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::rem-2": {
      "namespace": "glam::Vec2",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::rem_euclid": {
      "namespace": "glam::Vec2",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n [Euclidean division]: f32::rem_euclid"
    },
    "glam::Vec2::rotate": {
      "namespace": "glam::Vec2",
      "identifier": "rotate",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns `rhs` rotated by the angle of `self`. If `self` is normalized,\n then this just rotation. This is what you usually want. Otherwise,\n it will be like a rotation with a multiplication by `self`'s length."
    },
    "glam::Vec2::rotate_towards": {
      "namespace": "glam::Vec2",
      "identifier": "rotate_towards",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max_angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Rotates towards `rhs` up to `max_angle` (in radians).\n When `max_angle` is `0.0`, the result will be equal to `self`. When `max_angle` is equal to\n `self.angle_between(rhs)`, the result will be equal to `rhs`. If `max_angle` is negative,\n rotates towards the exact opposite of `rhs`. Will not go past the target."
    },
    "glam::Vec2::round": {
      "namespace": "glam::Vec2",
      "identifier": "round",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector containing the nearest integer to a number for each element of `self`.\n Round half-way cases away from 0.0."
    },
    "glam::Vec2::select": {
      "namespace": "glam::Vec2",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec2"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::Vec2::signum": {
      "namespace": "glam::Vec2",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n - `1.0` if the number is positive, `+0.0` or `INFINITY`\n - `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`\n - `NAN` if the number is `NAN`"
    },
    "glam::Vec2::splat": {
      "namespace": "glam::Vec2",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::Vec2::sub": {
      "namespace": "glam::Vec2",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::sub-1": {
      "namespace": "glam::Vec2",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::sub-2": {
      "namespace": "glam::Vec2",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::to_angle": {
      "namespace": "glam::Vec2",
      "identifier": "to_angle",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the angle (in radians) of this vector in the range `[-π, +π]`.\n The input does not need to be a unit vector however it must be non-zero."
    },
    "glam::Vec2::to_array": {
      "namespace": "glam::Vec2",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f32"
            },
            2
          ]
        }
      },
      "documentation": " `[x, y]`"
    },
    "glam::Vec2::trunc": {
      "namespace": "glam::Vec2",
      "identifier": "trunc",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector containing the integer part each element of `self`. This means numbers are\n always truncated towards zero."
    },
    "glam::Vec2::with_x": {
      "namespace": "glam::Vec2",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `x`."
    },
    "glam::Vec2::with_y": {
      "namespace": "glam::Vec2",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `y`."
    },
    "glam::Vec3::abs": {
      "namespace": "glam::Vec3",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::Vec3::abs_diff_eq": {
      "namespace": "glam::Vec3",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs` is\n less than or equal to `max_abs_diff`.\n This can be used to compare if two vectors contain similar elements. It works best when\n comparing with a known value. The `max_abs_diff` that should be used used depends on\n the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::Vec3::add": {
      "namespace": "glam::Vec3",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::add-1": {
      "namespace": "glam::Vec3",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::add-2": {
      "namespace": "glam::Vec3",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::angle_between": {
      "namespace": "glam::Vec3",
      "identifier": "angle_between",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the angle (in radians) between two vectors in the range `[0, +π]`.\n The inputs do not need to be unit vectors however they must be non-zero."
    },
    "glam::Vec3::any_orthogonal_vector": {
      "namespace": "glam::Vec3",
      "identifier": "any_orthogonal_vector",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns some vector that is orthogonal to the given one.\n The input vector must be finite and non-zero.\n The output vector is not necessarily unit length. For that use\n [`Self::any_orthonormal_vector()`] instead."
    },
    "glam::Vec3::any_orthonormal_vector": {
      "namespace": "glam::Vec3",
      "identifier": "any_orthonormal_vector",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns any unit vector that is orthogonal to the given one.\n The input vector must be unit length.\n # Panics\n Will panic if `self` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec3::as_dvec3": {
      "namespace": "glam::Vec3",
      "identifier": "as_dvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::Vec3::as_i16vec3": {
      "namespace": "glam::Vec3",
      "identifier": "as_i16vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i16`."
    },
    "glam::Vec3::as_i64vec3": {
      "namespace": "glam::Vec3",
      "identifier": "as_i64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::Vec3::as_i8vec3": {
      "namespace": "glam::Vec3",
      "identifier": "as_i8vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i8`."
    },
    "glam::Vec3::as_ivec3": {
      "namespace": "glam::Vec3",
      "identifier": "as_ivec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::Vec3::as_u16vec3": {
      "namespace": "glam::Vec3",
      "identifier": "as_u16vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u16`."
    },
    "glam::Vec3::as_u64vec3": {
      "namespace": "glam::Vec3",
      "identifier": "as_u64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::Vec3::as_u8vec3": {
      "namespace": "glam::Vec3",
      "identifier": "as_u8vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u8`."
    },
    "glam::Vec3::as_uvec3": {
      "namespace": "glam::Vec3",
      "identifier": "as_uvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::Vec3::ceil": {
      "namespace": "glam::Vec3",
      "identifier": "ceil",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector containing the smallest integer greater than or equal to a number for\n each element of `self`."
    },
    "glam::Vec3::clamp": {
      "namespace": "glam::Vec3",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`f32::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::Vec3::clamp_length": {
      "namespace": "glam::Vec3",
      "identifier": "clamp_length",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "min"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector with a length no less than `min` and no more than `max`.\n # Panics\n Will panic if `min` is greater than `max`, or if either `min` or `max` is negative, when `glam_assert` is enabled."
    },
    "glam::Vec3::clamp_length_max": {
      "namespace": "glam::Vec3",
      "identifier": "clamp_length_max",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector with a length no more than `max`.\n # Panics\n Will panic if `max` is negative when `glam_assert` is enabled."
    },
    "glam::Vec3::clamp_length_min": {
      "namespace": "glam::Vec3",
      "identifier": "clamp_length_min",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "min"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector with a length no less than `min`.\n # Panics\n Will panic if `min` is negative when `glam_assert` is enabled."
    },
    "glam::Vec3::clone": {
      "namespace": "glam::Vec3",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::cmpeq": {
      "namespace": "glam::Vec3",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::Vec3::cmpge": {
      "namespace": "glam::Vec3",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::Vec3::cmpgt": {
      "namespace": "glam::Vec3",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::Vec3::cmple": {
      "namespace": "glam::Vec3",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::Vec3::cmplt": {
      "namespace": "glam::Vec3",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::Vec3::cmpne": {
      "namespace": "glam::Vec3",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::Vec3::copysign": {
      "namespace": "glam::Vec3",
      "identifier": "copysign",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector with signs of `rhs` and the magnitudes of `self`."
    },
    "glam::Vec3::cross": {
      "namespace": "glam::Vec3",
      "identifier": "cross",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Computes the cross product of `self` and `rhs`."
    },
    "glam::Vec3::distance": {
      "namespace": "glam::Vec3",
      "identifier": "distance",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the Euclidean distance between two points in space."
    },
    "glam::Vec3::distance_squared": {
      "namespace": "glam::Vec3",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::Vec3::div": {
      "namespace": "glam::Vec3",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::div-1": {
      "namespace": "glam::Vec3",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::div-2": {
      "namespace": "glam::Vec3",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::div_euclid": {
      "namespace": "glam::Vec3",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`."
    },
    "glam::Vec3::dot": {
      "namespace": "glam::Vec3",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::Vec3::dot_into_vec": {
      "namespace": "glam::Vec3",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::Vec3::element_product": {
      "namespace": "glam::Vec3",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::Vec3::element_sum": {
      "namespace": "glam::Vec3",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::Vec3::eq": {
      "namespace": "glam::Vec3",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::Vec3::exp": {
      "namespace": "glam::Vec3",
      "identifier": "exp",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector containing `e^self` (the exponential function) for each element of\n `self`."
    },
    "glam::Vec3::extend": {
      "namespace": "glam::Vec3",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` and the given `w` value."
    },
    "glam::Vec3::floor": {
      "namespace": "glam::Vec3",
      "identifier": "floor",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector containing the largest integer less than or equal to a number for each\n element of `self`."
    },
    "glam::Vec3::fract": {
      "namespace": "glam::Vec3",
      "identifier": "fract",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector containing the fractional part of the vector as `self - self.trunc()`.\n Note that this differs from the GLSL implementation of `fract` which returns\n `self - self.floor()`.\n Note that this is fast but not precise for large numbers."
    },
    "glam::Vec3::fract_gl": {
      "namespace": "glam::Vec3",
      "identifier": "fract_gl",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector containing the fractional part of the vector as `self - self.floor()`.\n Note that this differs from the Rust implementation of `fract` which returns\n `self - self.trunc()`.\n Note that this is fast but not precise for large numbers."
    },
    "glam::Vec3::from_array": {
      "namespace": "glam::Vec3",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "f32"
              },
              3
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::Vec3::is_finite": {
      "namespace": "glam::Vec3",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.  If any element is either\n `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::Vec3::is_finite_mask": {
      "namespace": "glam::Vec3",
      "identifier": "is_finite_mask",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Performs `is_finite` on each element of self, returning a vector mask of the results.\n In other words, this computes `[x.is_finite(), y.is_finite(), ...]`."
    },
    "glam::Vec3::is_nan": {
      "namespace": "glam::Vec3",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::Vec3::is_nan_mask": {
      "namespace": "glam::Vec3",
      "identifier": "is_nan_mask",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Performs `is_nan` on each element of self, returning a vector mask of the results.\n In other words, this computes `[x.is_nan(), y.is_nan(), ...]`."
    },
    "glam::Vec3::is_negative_bitmask": {
      "namespace": "glam::Vec3",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 3 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::Vec3::is_normalized": {
      "namespace": "glam::Vec3",
      "identifier": "is_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns whether `self` is length `1.0` or not.\n Uses a precision threshold of approximately `1e-4`."
    },
    "glam::Vec3::length": {
      "namespace": "glam::Vec3",
      "identifier": "length",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the length of `self`."
    },
    "glam::Vec3::length_recip": {
      "namespace": "glam::Vec3",
      "identifier": "length_recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes `1.0 / length()`.\n For valid results, `self` must _not_ be of length zero."
    },
    "glam::Vec3::length_squared": {
      "namespace": "glam::Vec3",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the squared length of `self`.\n This is faster than `length()` as it avoids a square root operation."
    },
    "glam::Vec3::lerp": {
      "namespace": "glam::Vec3",
      "identifier": "lerp",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Performs a linear interpolation between `self` and `rhs` based on the value `s`.\n When `s` is `0.0`, the result will be equal to `self`.  When `s` is `1.0`, the result\n will be equal to `rhs`. When `s` is outside of range `[0, 1]`, the result is linearly\n extrapolated."
    },
    "glam::Vec3::max": {
      "namespace": "glam::Vec3",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::Vec3::max_element": {
      "namespace": "glam::Vec3",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::Vec3::midpoint": {
      "namespace": "glam::Vec3",
      "identifier": "midpoint",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Calculates the midpoint between `self` and `rhs`.\n The midpoint is the average of, or halfway point between, two vectors.\n `a.midpoint(b)` should yield the same result as `a.lerp(b, 0.5)`\n while being slightly cheaper to compute."
    },
    "glam::Vec3::min": {
      "namespace": "glam::Vec3",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::Vec3::min_element": {
      "namespace": "glam::Vec3",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::Vec3::move_towards": {
      "namespace": "glam::Vec3",
      "identifier": "move_towards",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "d"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Moves towards `rhs` based on the value `d`.\n When `d` is `0.0`, the result will be equal to `self`. When `d` is equal to\n `self.distance(rhs)`, the result will be equal to `rhs`. Will not go past `rhs`."
    },
    "glam::Vec3::mul": {
      "namespace": "glam::Vec3",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::mul-1": {
      "namespace": "glam::Vec3",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::mul-2": {
      "namespace": "glam::Vec3",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::mul_add": {
      "namespace": "glam::Vec3",
      "identifier": "mul_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "a"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "b"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Fused multiply-add. Computes `(self * a) + b` element-wise with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.\n Using `mul_add` *may* be more performant than an unfused multiply-add if the target\n architecture has a dedicated fma CPU instruction. However, this is not always true,\n and will be heavily dependant on designing algorithms with specific target hardware in\n mind."
    },
    "glam::Vec3::neg": {
      "namespace": "glam::Vec3",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::new": {
      "namespace": "glam::Vec3",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::Vec3::normalize": {
      "namespace": "glam::Vec3",
      "identifier": "normalize",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0.\n For valid results, `self` must be finite and _not_ of length zero, nor very close to zero.\n See also [`Self::try_normalize()`] and [`Self::normalize_or_zero()`].\n Panics\n Will panic if the resulting normalized vector is not finite when `glam_assert` is enabled."
    },
    "glam::Vec3::normalize_or": {
      "namespace": "glam::Vec3",
      "identifier": "normalize_or",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "fallback"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0 if possible, else returns a\n fallback value.\n In particular, if the input is zero (or very close to zero), or non-finite,\n the result of this operation will be the fallback value.\n See also [`Self::try_normalize()`]."
    },
    "glam::Vec3::normalize_or_zero": {
      "namespace": "glam::Vec3",
      "identifier": "normalize_or_zero",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0 if possible, else returns zero.\n In particular, if the input is zero (or very close to zero), or non-finite,\n the result of this operation will be zero.\n See also [`Self::try_normalize()`]."
    },
    "glam::Vec3::powf": {
      "namespace": "glam::Vec3",
      "identifier": "powf",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "n"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector containing each element of `self` raised to the power of `n`."
    },
    "glam::Vec3::project_onto": {
      "namespace": "glam::Vec3",
      "identifier": "project_onto",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns the vector projection of `self` onto `rhs`.\n `rhs` must be of non-zero length.\n # Panics\n Will panic if `rhs` is zero length when `glam_assert` is enabled."
    },
    "glam::Vec3::project_onto_normalized": {
      "namespace": "glam::Vec3",
      "identifier": "project_onto_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns the vector projection of `self` onto `rhs`.\n `rhs` must be normalized.\n # Panics\n Will panic if `rhs` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec3::recip": {
      "namespace": "glam::Vec3",
      "identifier": "recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector containing the reciprocal `1.0/n` of each element of `self`."
    },
    "glam::Vec3::reflect": {
      "namespace": "glam::Vec3",
      "identifier": "reflect",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "normal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns the reflection vector for a given incident vector `self` and surface normal\n `normal`.\n `normal` must be normalized.\n # Panics\n Will panic if `normal` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec3::refract": {
      "namespace": "glam::Vec3",
      "identifier": "refract",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "normal"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "eta"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns the refraction direction for a given incident vector `self`, surface normal\n `normal` and ratio of indices of refraction, `eta`. When total internal reflection occurs,\n a zero vector will be returned.\n `self` and `normal` must be normalized.\n # Panics\n Will panic if `self` or `normal` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec3::reject_from": {
      "namespace": "glam::Vec3",
      "identifier": "reject_from",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns the vector rejection of `self` from `rhs`.\n The vector rejection is the vector perpendicular to the projection of `self` onto\n `rhs`, in rhs words the result of `self - self.project_onto(rhs)`.\n `rhs` must be of non-zero length.\n # Panics\n Will panic if `rhs` has a length of zero when `glam_assert` is enabled."
    },
    "glam::Vec3::reject_from_normalized": {
      "namespace": "glam::Vec3",
      "identifier": "reject_from_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns the vector rejection of `self` from `rhs`.\n The vector rejection is the vector perpendicular to the projection of `self` onto\n `rhs`, in rhs words the result of `self - self.project_onto(rhs)`.\n `rhs` must be normalized.\n # Panics\n Will panic if `rhs` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec3::rem": {
      "namespace": "glam::Vec3",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::rem-1": {
      "namespace": "glam::Vec3",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::rem-2": {
      "namespace": "glam::Vec3",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::rem_euclid": {
      "namespace": "glam::Vec3",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n [Euclidean division]: f32::rem_euclid"
    },
    "glam::Vec3::round": {
      "namespace": "glam::Vec3",
      "identifier": "round",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector containing the nearest integer to a number for each element of `self`.\n Round half-way cases away from 0.0."
    },
    "glam::Vec3::select": {
      "namespace": "glam::Vec3",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec3"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::Vec3::signum": {
      "namespace": "glam::Vec3",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n - `1.0` if the number is positive, `+0.0` or `INFINITY`\n - `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`\n - `NAN` if the number is `NAN`"
    },
    "glam::Vec3::splat": {
      "namespace": "glam::Vec3",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::Vec3::sub": {
      "namespace": "glam::Vec3",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::sub-1": {
      "namespace": "glam::Vec3",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::sub-2": {
      "namespace": "glam::Vec3",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::to_array": {
      "namespace": "glam::Vec3",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f32"
            },
            3
          ]
        }
      },
      "documentation": " `[x, y, z]`"
    },
    "glam::Vec3::trunc": {
      "namespace": "glam::Vec3",
      "identifier": "trunc",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector containing the integer part each element of `self`. This means numbers are\n always truncated towards zero."
    },
    "glam::Vec3::truncate": {
      "namespace": "glam::Vec3",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Creates a 2D vector from the `x` and `y` elements of `self`, discarding `z`.\n Truncation may also be performed by using [`self.xy()`][crate::swizzles::Vec3Swizzles::xy()]."
    },
    "glam::Vec3::with_x": {
      "namespace": "glam::Vec3",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `x`."
    },
    "glam::Vec3::with_y": {
      "namespace": "glam::Vec3",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `y`."
    },
    "glam::Vec3::with_z": {
      "namespace": "glam::Vec3",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `z`."
    },
    "glam::Vec3A::abs": {
      "namespace": "glam::Vec3A",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::Vec3A::abs_diff_eq": {
      "namespace": "glam::Vec3A",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs` is\n less than or equal to `max_abs_diff`.\n This can be used to compare if two vectors contain similar elements. It works best when\n comparing with a known value. The `max_abs_diff` that should be used used depends on\n the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::Vec3A::add": {
      "namespace": "glam::Vec3A",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::add-1": {
      "namespace": "glam::Vec3A",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::add-2": {
      "namespace": "glam::Vec3A",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::angle_between": {
      "namespace": "glam::Vec3A",
      "identifier": "angle_between",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the angle (in radians) between two vectors in the range `[0, +π]`.\n The inputs do not need to be unit vectors however they must be non-zero."
    },
    "glam::Vec3A::any_orthogonal_vector": {
      "namespace": "glam::Vec3A",
      "identifier": "any_orthogonal_vector",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns some vector that is orthogonal to the given one.\n The input vector must be finite and non-zero.\n The output vector is not necessarily unit length. For that use\n [`Self::any_orthonormal_vector()`] instead."
    },
    "glam::Vec3A::any_orthonormal_vector": {
      "namespace": "glam::Vec3A",
      "identifier": "any_orthonormal_vector",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns any unit vector that is orthogonal to the given one.\n The input vector must be unit length.\n # Panics\n Will panic if `self` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec3A::as_dvec3": {
      "namespace": "glam::Vec3A",
      "identifier": "as_dvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::Vec3A::as_i16vec3": {
      "namespace": "glam::Vec3A",
      "identifier": "as_i16vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i16`."
    },
    "glam::Vec3A::as_i64vec3": {
      "namespace": "glam::Vec3A",
      "identifier": "as_i64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::Vec3A::as_i8vec3": {
      "namespace": "glam::Vec3A",
      "identifier": "as_i8vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i8`."
    },
    "glam::Vec3A::as_ivec3": {
      "namespace": "glam::Vec3A",
      "identifier": "as_ivec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::Vec3A::as_u16vec3": {
      "namespace": "glam::Vec3A",
      "identifier": "as_u16vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u16`."
    },
    "glam::Vec3A::as_u64vec3": {
      "namespace": "glam::Vec3A",
      "identifier": "as_u64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::Vec3A::as_u8vec3": {
      "namespace": "glam::Vec3A",
      "identifier": "as_u8vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u8`."
    },
    "glam::Vec3A::as_uvec3": {
      "namespace": "glam::Vec3A",
      "identifier": "as_uvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::Vec3A::ceil": {
      "namespace": "glam::Vec3A",
      "identifier": "ceil",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector containing the smallest integer greater than or equal to a number for\n each element of `self`."
    },
    "glam::Vec3A::clamp": {
      "namespace": "glam::Vec3A",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`f32::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::Vec3A::clamp_length": {
      "namespace": "glam::Vec3A",
      "identifier": "clamp_length",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "min"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector with a length no less than `min` and no more than `max`.\n # Panics\n Will panic if `min` is greater than `max`, or if either `min` or `max` is negative, when `glam_assert` is enabled."
    },
    "glam::Vec3A::clamp_length_max": {
      "namespace": "glam::Vec3A",
      "identifier": "clamp_length_max",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector with a length no more than `max`.\n # Panics\n Will panic if `max` is negative when `glam_assert` is enabled."
    },
    "glam::Vec3A::clamp_length_min": {
      "namespace": "glam::Vec3A",
      "identifier": "clamp_length_min",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "min"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector with a length no less than `min`.\n # Panics\n Will panic if `min` is negative when `glam_assert` is enabled."
    },
    "glam::Vec3A::clone": {
      "namespace": "glam::Vec3A",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::cmpeq": {
      "namespace": "glam::Vec3A",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3A"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::Vec3A::cmpge": {
      "namespace": "glam::Vec3A",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3A"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::Vec3A::cmpgt": {
      "namespace": "glam::Vec3A",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3A"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::Vec3A::cmple": {
      "namespace": "glam::Vec3A",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3A"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::Vec3A::cmplt": {
      "namespace": "glam::Vec3A",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3A"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::Vec3A::cmpne": {
      "namespace": "glam::Vec3A",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3A"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::Vec3A::copysign": {
      "namespace": "glam::Vec3A",
      "identifier": "copysign",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector with signs of `rhs` and the magnitudes of `self`."
    },
    "glam::Vec3A::cross": {
      "namespace": "glam::Vec3A",
      "identifier": "cross",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Computes the cross product of `self` and `rhs`."
    },
    "glam::Vec3A::distance": {
      "namespace": "glam::Vec3A",
      "identifier": "distance",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the Euclidean distance between two points in space."
    },
    "glam::Vec3A::distance_squared": {
      "namespace": "glam::Vec3A",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::Vec3A::div": {
      "namespace": "glam::Vec3A",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::div-1": {
      "namespace": "glam::Vec3A",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::div-2": {
      "namespace": "glam::Vec3A",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::div_euclid": {
      "namespace": "glam::Vec3A",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`."
    },
    "glam::Vec3A::dot": {
      "namespace": "glam::Vec3A",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::Vec3A::dot_into_vec": {
      "namespace": "glam::Vec3A",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::Vec3A::element_product": {
      "namespace": "glam::Vec3A",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::Vec3A::element_sum": {
      "namespace": "glam::Vec3A",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::Vec3A::eq": {
      "namespace": "glam::Vec3A",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::Vec3A::exp": {
      "namespace": "glam::Vec3A",
      "identifier": "exp",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector containing `e^self` (the exponential function) for each element of\n `self`."
    },
    "glam::Vec3A::extend": {
      "namespace": "glam::Vec3A",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` and the given `w` value."
    },
    "glam::Vec3A::floor": {
      "namespace": "glam::Vec3A",
      "identifier": "floor",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector containing the largest integer less than or equal to a number for each\n element of `self`."
    },
    "glam::Vec3A::fract": {
      "namespace": "glam::Vec3A",
      "identifier": "fract",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector containing the fractional part of the vector as `self - self.trunc()`.\n Note that this differs from the GLSL implementation of `fract` which returns\n `self - self.floor()`.\n Note that this is fast but not precise for large numbers."
    },
    "glam::Vec3A::fract_gl": {
      "namespace": "glam::Vec3A",
      "identifier": "fract_gl",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector containing the fractional part of the vector as `self - self.floor()`.\n Note that this differs from the Rust implementation of `fract` which returns\n `self - self.trunc()`.\n Note that this is fast but not precise for large numbers."
    },
    "glam::Vec3A::from_array": {
      "namespace": "glam::Vec3A",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "f32"
              },
              3
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::Vec3A::from_vec4": {
      "namespace": "glam::Vec3A",
      "identifier": "from_vec4",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Creates a [`Vec3A`] from the `x`, `y` and `z` elements of `self` discarding `w`.\n On architectures where SIMD is supported such as SSE2 on `x86_64` this conversion is a noop."
    },
    "glam::Vec3A::is_finite": {
      "namespace": "glam::Vec3A",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.  If any element is either\n `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::Vec3A::is_finite_mask": {
      "namespace": "glam::Vec3A",
      "identifier": "is_finite_mask",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3A"
        }
      },
      "documentation": " Performs `is_finite` on each element of self, returning a vector mask of the results.\n In other words, this computes `[x.is_finite(), y.is_finite(), ...]`."
    },
    "glam::Vec3A::is_nan": {
      "namespace": "glam::Vec3A",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::Vec3A::is_nan_mask": {
      "namespace": "glam::Vec3A",
      "identifier": "is_nan_mask",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3A"
        }
      },
      "documentation": " Performs `is_nan` on each element of self, returning a vector mask of the results.\n In other words, this computes `[x.is_nan(), y.is_nan(), ...]`."
    },
    "glam::Vec3A::is_negative_bitmask": {
      "namespace": "glam::Vec3A",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 3 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::Vec3A::is_normalized": {
      "namespace": "glam::Vec3A",
      "identifier": "is_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns whether `self` is length `1.0` or not.\n Uses a precision threshold of approximately `1e-4`."
    },
    "glam::Vec3A::length": {
      "namespace": "glam::Vec3A",
      "identifier": "length",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the length of `self`."
    },
    "glam::Vec3A::length_recip": {
      "namespace": "glam::Vec3A",
      "identifier": "length_recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes `1.0 / length()`.\n For valid results, `self` must _not_ be of length zero."
    },
    "glam::Vec3A::length_squared": {
      "namespace": "glam::Vec3A",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the squared length of `self`.\n This is faster than `length()` as it avoids a square root operation."
    },
    "glam::Vec3A::lerp": {
      "namespace": "glam::Vec3A",
      "identifier": "lerp",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Performs a linear interpolation between `self` and `rhs` based on the value `s`.\n When `s` is `0.0`, the result will be equal to `self`.  When `s` is `1.0`, the result\n will be equal to `rhs`. When `s` is outside of range `[0, 1]`, the result is linearly\n extrapolated."
    },
    "glam::Vec3A::max": {
      "namespace": "glam::Vec3A",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::Vec3A::max_element": {
      "namespace": "glam::Vec3A",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::Vec3A::midpoint": {
      "namespace": "glam::Vec3A",
      "identifier": "midpoint",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Calculates the midpoint between `self` and `rhs`.\n The midpoint is the average of, or halfway point between, two vectors.\n `a.midpoint(b)` should yield the same result as `a.lerp(b, 0.5)`\n while being slightly cheaper to compute."
    },
    "glam::Vec3A::min": {
      "namespace": "glam::Vec3A",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::Vec3A::min_element": {
      "namespace": "glam::Vec3A",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::Vec3A::move_towards": {
      "namespace": "glam::Vec3A",
      "identifier": "move_towards",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "d"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Moves towards `rhs` based on the value `d`.\n When `d` is `0.0`, the result will be equal to `self`. When `d` is equal to\n `self.distance(rhs)`, the result will be equal to `rhs`. Will not go past `rhs`."
    },
    "glam::Vec3A::mul": {
      "namespace": "glam::Vec3A",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::mul-1": {
      "namespace": "glam::Vec3A",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::mul-2": {
      "namespace": "glam::Vec3A",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::mul_add": {
      "namespace": "glam::Vec3A",
      "identifier": "mul_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "a"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "b"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Fused multiply-add. Computes `(self * a) + b` element-wise with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.\n Using `mul_add` *may* be more performant than an unfused multiply-add if the target\n architecture has a dedicated fma CPU instruction. However, this is not always true,\n and will be heavily dependant on designing algorithms with specific target hardware in\n mind."
    },
    "glam::Vec3A::neg": {
      "namespace": "glam::Vec3A",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::new": {
      "namespace": "glam::Vec3A",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::Vec3A::normalize": {
      "namespace": "glam::Vec3A",
      "identifier": "normalize",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0.\n For valid results, `self` must be finite and _not_ of length zero, nor very close to zero.\n See also [`Self::try_normalize()`] and [`Self::normalize_or_zero()`].\n Panics\n Will panic if the resulting normalized vector is not finite when `glam_assert` is enabled."
    },
    "glam::Vec3A::normalize_or": {
      "namespace": "glam::Vec3A",
      "identifier": "normalize_or",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "fallback"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0 if possible, else returns a\n fallback value.\n In particular, if the input is zero (or very close to zero), or non-finite,\n the result of this operation will be the fallback value.\n See also [`Self::try_normalize()`]."
    },
    "glam::Vec3A::normalize_or_zero": {
      "namespace": "glam::Vec3A",
      "identifier": "normalize_or_zero",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0 if possible, else returns zero.\n In particular, if the input is zero (or very close to zero), or non-finite,\n the result of this operation will be zero.\n See also [`Self::try_normalize()`]."
    },
    "glam::Vec3A::powf": {
      "namespace": "glam::Vec3A",
      "identifier": "powf",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "n"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector containing each element of `self` raised to the power of `n`."
    },
    "glam::Vec3A::project_onto": {
      "namespace": "glam::Vec3A",
      "identifier": "project_onto",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns the vector projection of `self` onto `rhs`.\n `rhs` must be of non-zero length.\n # Panics\n Will panic if `rhs` is zero length when `glam_assert` is enabled."
    },
    "glam::Vec3A::project_onto_normalized": {
      "namespace": "glam::Vec3A",
      "identifier": "project_onto_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns the vector projection of `self` onto `rhs`.\n `rhs` must be normalized.\n # Panics\n Will panic if `rhs` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec3A::recip": {
      "namespace": "glam::Vec3A",
      "identifier": "recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector containing the reciprocal `1.0/n` of each element of `self`."
    },
    "glam::Vec3A::reflect": {
      "namespace": "glam::Vec3A",
      "identifier": "reflect",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "normal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns the reflection vector for a given incident vector `self` and surface normal\n `normal`.\n `normal` must be normalized.\n # Panics\n Will panic if `normal` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec3A::refract": {
      "namespace": "glam::Vec3A",
      "identifier": "refract",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "normal"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "eta"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns the refraction direction for a given incident vector `self`, surface normal\n `normal` and ratio of indices of refraction, `eta`. When total internal reflection occurs,\n a zero vector will be returned.\n `self` and `normal` must be normalized.\n # Panics\n Will panic if `self` or `normal` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec3A::reject_from": {
      "namespace": "glam::Vec3A",
      "identifier": "reject_from",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns the vector rejection of `self` from `rhs`.\n The vector rejection is the vector perpendicular to the projection of `self` onto\n `rhs`, in rhs words the result of `self - self.project_onto(rhs)`.\n `rhs` must be of non-zero length.\n # Panics\n Will panic if `rhs` has a length of zero when `glam_assert` is enabled."
    },
    "glam::Vec3A::reject_from_normalized": {
      "namespace": "glam::Vec3A",
      "identifier": "reject_from_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns the vector rejection of `self` from `rhs`.\n The vector rejection is the vector perpendicular to the projection of `self` onto\n `rhs`, in rhs words the result of `self - self.project_onto(rhs)`.\n `rhs` must be normalized.\n # Panics\n Will panic if `rhs` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec3A::rem": {
      "namespace": "glam::Vec3A",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::rem-1": {
      "namespace": "glam::Vec3A",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::rem-2": {
      "namespace": "glam::Vec3A",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::rem_euclid": {
      "namespace": "glam::Vec3A",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n [Euclidean division]: f32::rem_euclid"
    },
    "glam::Vec3A::round": {
      "namespace": "glam::Vec3A",
      "identifier": "round",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector containing the nearest integer to a number for each element of `self`.\n Round half-way cases away from 0.0."
    },
    "glam::Vec3A::select": {
      "namespace": "glam::Vec3A",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec3A"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::Vec3A::signum": {
      "namespace": "glam::Vec3A",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n - `1.0` if the number is positive, `+0.0` or `INFINITY`\n - `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`\n - `NAN` if the number is `NAN`"
    },
    "glam::Vec3A::splat": {
      "namespace": "glam::Vec3A",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::Vec3A::sub": {
      "namespace": "glam::Vec3A",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::sub-1": {
      "namespace": "glam::Vec3A",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::sub-2": {
      "namespace": "glam::Vec3A",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::to_array": {
      "namespace": "glam::Vec3A",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f32"
            },
            3
          ]
        }
      },
      "documentation": " `[x, y, z]`"
    },
    "glam::Vec3A::trunc": {
      "namespace": "glam::Vec3A",
      "identifier": "trunc",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector containing the integer part each element of `self`. This means numbers are\n always truncated towards zero."
    },
    "glam::Vec3A::truncate": {
      "namespace": "glam::Vec3A",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Creates a 2D vector from the `x` and `y` elements of `self`, discarding `z`.\n Truncation may also be performed by using [`self.xy()`][crate::swizzles::Vec3Swizzles::xy()]."
    },
    "glam::Vec3A::with_x": {
      "namespace": "glam::Vec3A",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `x`."
    },
    "glam::Vec3A::with_y": {
      "namespace": "glam::Vec3A",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `y`."
    },
    "glam::Vec3A::with_z": {
      "namespace": "glam::Vec3A",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `z`."
    },
    "glam::Vec4::abs": {
      "namespace": "glam::Vec4",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::Vec4::abs_diff_eq": {
      "namespace": "glam::Vec4",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs` is\n less than or equal to `max_abs_diff`.\n This can be used to compare if two vectors contain similar elements. It works best when\n comparing with a known value. The `max_abs_diff` that should be used used depends on\n the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::Vec4::add": {
      "namespace": "glam::Vec4",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::add-1": {
      "namespace": "glam::Vec4",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::add-2": {
      "namespace": "glam::Vec4",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::as_dvec4": {
      "namespace": "glam::Vec4",
      "identifier": "as_dvec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::Vec4::as_i16vec4": {
      "namespace": "glam::Vec4",
      "identifier": "as_i16vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I16Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i16`."
    },
    "glam::Vec4::as_i64vec4": {
      "namespace": "glam::Vec4",
      "identifier": "as_i64vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::Vec4::as_i8vec4": {
      "namespace": "glam::Vec4",
      "identifier": "as_i8vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I8Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i8`."
    },
    "glam::Vec4::as_ivec4": {
      "namespace": "glam::Vec4",
      "identifier": "as_ivec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::Vec4::as_u16vec4": {
      "namespace": "glam::Vec4",
      "identifier": "as_u16vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U16Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u16`."
    },
    "glam::Vec4::as_u64vec4": {
      "namespace": "glam::Vec4",
      "identifier": "as_u64vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::Vec4::as_u8vec4": {
      "namespace": "glam::Vec4",
      "identifier": "as_u8vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U8Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u8`."
    },
    "glam::Vec4::as_uvec4": {
      "namespace": "glam::Vec4",
      "identifier": "as_uvec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::Vec4::ceil": {
      "namespace": "glam::Vec4",
      "identifier": "ceil",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector containing the smallest integer greater than or equal to a number for\n each element of `self`."
    },
    "glam::Vec4::clamp": {
      "namespace": "glam::Vec4",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`f32::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::Vec4::clamp_length": {
      "namespace": "glam::Vec4",
      "identifier": "clamp_length",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "min"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector with a length no less than `min` and no more than `max`.\n # Panics\n Will panic if `min` is greater than `max`, or if either `min` or `max` is negative, when `glam_assert` is enabled."
    },
    "glam::Vec4::clamp_length_max": {
      "namespace": "glam::Vec4",
      "identifier": "clamp_length_max",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector with a length no more than `max`.\n # Panics\n Will panic if `max` is negative when `glam_assert` is enabled."
    },
    "glam::Vec4::clamp_length_min": {
      "namespace": "glam::Vec4",
      "identifier": "clamp_length_min",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "min"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector with a length no less than `min`.\n # Panics\n Will panic if `min` is negative when `glam_assert` is enabled."
    },
    "glam::Vec4::clone": {
      "namespace": "glam::Vec4",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::cmpeq": {
      "namespace": "glam::Vec4",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4A"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::Vec4::cmpge": {
      "namespace": "glam::Vec4",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4A"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::Vec4::cmpgt": {
      "namespace": "glam::Vec4",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4A"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::Vec4::cmple": {
      "namespace": "glam::Vec4",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4A"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::Vec4::cmplt": {
      "namespace": "glam::Vec4",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4A"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::Vec4::cmpne": {
      "namespace": "glam::Vec4",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4A"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::Vec4::copysign": {
      "namespace": "glam::Vec4",
      "identifier": "copysign",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector with signs of `rhs` and the magnitudes of `self`."
    },
    "glam::Vec4::distance": {
      "namespace": "glam::Vec4",
      "identifier": "distance",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the Euclidean distance between two points in space."
    },
    "glam::Vec4::distance_squared": {
      "namespace": "glam::Vec4",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::Vec4::div": {
      "namespace": "glam::Vec4",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::div-1": {
      "namespace": "glam::Vec4",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::div-2": {
      "namespace": "glam::Vec4",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::div_euclid": {
      "namespace": "glam::Vec4",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`."
    },
    "glam::Vec4::dot": {
      "namespace": "glam::Vec4",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::Vec4::dot_into_vec": {
      "namespace": "glam::Vec4",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::Vec4::element_product": {
      "namespace": "glam::Vec4",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::Vec4::element_sum": {
      "namespace": "glam::Vec4",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::Vec4::eq": {
      "namespace": "glam::Vec4",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::Vec4::exp": {
      "namespace": "glam::Vec4",
      "identifier": "exp",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector containing `e^self` (the exponential function) for each element of\n `self`."
    },
    "glam::Vec4::floor": {
      "namespace": "glam::Vec4",
      "identifier": "floor",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector containing the largest integer less than or equal to a number for each\n element of `self`."
    },
    "glam::Vec4::fract": {
      "namespace": "glam::Vec4",
      "identifier": "fract",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector containing the fractional part of the vector as `self - self.trunc()`.\n Note that this differs from the GLSL implementation of `fract` which returns\n `self - self.floor()`.\n Note that this is fast but not precise for large numbers."
    },
    "glam::Vec4::fract_gl": {
      "namespace": "glam::Vec4",
      "identifier": "fract_gl",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector containing the fractional part of the vector as `self - self.floor()`.\n Note that this differs from the Rust implementation of `fract` which returns\n `self - self.trunc()`.\n Note that this is fast but not precise for large numbers."
    },
    "glam::Vec4::from_array": {
      "namespace": "glam::Vec4",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "f32"
              },
              4
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::Vec4::is_finite": {
      "namespace": "glam::Vec4",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.  If any element is either\n `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::Vec4::is_finite_mask": {
      "namespace": "glam::Vec4",
      "identifier": "is_finite_mask",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4A"
        }
      },
      "documentation": " Performs `is_finite` on each element of self, returning a vector mask of the results.\n In other words, this computes `[x.is_finite(), y.is_finite(), ...]`."
    },
    "glam::Vec4::is_nan": {
      "namespace": "glam::Vec4",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::Vec4::is_nan_mask": {
      "namespace": "glam::Vec4",
      "identifier": "is_nan_mask",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4A"
        }
      },
      "documentation": " Performs `is_nan` on each element of self, returning a vector mask of the results.\n In other words, this computes `[x.is_nan(), y.is_nan(), ...]`."
    },
    "glam::Vec4::is_negative_bitmask": {
      "namespace": "glam::Vec4",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 4 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::Vec4::is_normalized": {
      "namespace": "glam::Vec4",
      "identifier": "is_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns whether `self` is length `1.0` or not.\n Uses a precision threshold of approximately `1e-4`."
    },
    "glam::Vec4::length": {
      "namespace": "glam::Vec4",
      "identifier": "length",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the length of `self`."
    },
    "glam::Vec4::length_recip": {
      "namespace": "glam::Vec4",
      "identifier": "length_recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes `1.0 / length()`.\n For valid results, `self` must _not_ be of length zero."
    },
    "glam::Vec4::length_squared": {
      "namespace": "glam::Vec4",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the squared length of `self`.\n This is faster than `length()` as it avoids a square root operation."
    },
    "glam::Vec4::lerp": {
      "namespace": "glam::Vec4",
      "identifier": "lerp",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Performs a linear interpolation between `self` and `rhs` based on the value `s`.\n When `s` is `0.0`, the result will be equal to `self`.  When `s` is `1.0`, the result\n will be equal to `rhs`. When `s` is outside of range `[0, 1]`, the result is linearly\n extrapolated."
    },
    "glam::Vec4::max": {
      "namespace": "glam::Vec4",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::Vec4::max_element": {
      "namespace": "glam::Vec4",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::Vec4::midpoint": {
      "namespace": "glam::Vec4",
      "identifier": "midpoint",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Calculates the midpoint between `self` and `rhs`.\n The midpoint is the average of, or halfway point between, two vectors.\n `a.midpoint(b)` should yield the same result as `a.lerp(b, 0.5)`\n while being slightly cheaper to compute."
    },
    "glam::Vec4::min": {
      "namespace": "glam::Vec4",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::Vec4::min_element": {
      "namespace": "glam::Vec4",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::Vec4::move_towards": {
      "namespace": "glam::Vec4",
      "identifier": "move_towards",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "d"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Moves towards `rhs` based on the value `d`.\n When `d` is `0.0`, the result will be equal to `self`. When `d` is equal to\n `self.distance(rhs)`, the result will be equal to `rhs`. Will not go past `rhs`."
    },
    "glam::Vec4::mul": {
      "namespace": "glam::Vec4",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::mul-1": {
      "namespace": "glam::Vec4",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::mul-2": {
      "namespace": "glam::Vec4",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::mul_add": {
      "namespace": "glam::Vec4",
      "identifier": "mul_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "a"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "b"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Fused multiply-add. Computes `(self * a) + b` element-wise with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.\n Using `mul_add` *may* be more performant than an unfused multiply-add if the target\n architecture has a dedicated fma CPU instruction. However, this is not always true,\n and will be heavily dependant on designing algorithms with specific target hardware in\n mind."
    },
    "glam::Vec4::neg": {
      "namespace": "glam::Vec4",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::new": {
      "namespace": "glam::Vec4",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::Vec4::normalize": {
      "namespace": "glam::Vec4",
      "identifier": "normalize",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0.\n For valid results, `self` must be finite and _not_ of length zero, nor very close to zero.\n See also [`Self::try_normalize()`] and [`Self::normalize_or_zero()`].\n Panics\n Will panic if the resulting normalized vector is not finite when `glam_assert` is enabled."
    },
    "glam::Vec4::normalize_or": {
      "namespace": "glam::Vec4",
      "identifier": "normalize_or",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "fallback"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0 if possible, else returns a\n fallback value.\n In particular, if the input is zero (or very close to zero), or non-finite,\n the result of this operation will be the fallback value.\n See also [`Self::try_normalize()`]."
    },
    "glam::Vec4::normalize_or_zero": {
      "namespace": "glam::Vec4",
      "identifier": "normalize_or_zero",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0 if possible, else returns zero.\n In particular, if the input is zero (or very close to zero), or non-finite,\n the result of this operation will be zero.\n See also [`Self::try_normalize()`]."
    },
    "glam::Vec4::powf": {
      "namespace": "glam::Vec4",
      "identifier": "powf",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "n"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector containing each element of `self` raised to the power of `n`."
    },
    "glam::Vec4::project_onto": {
      "namespace": "glam::Vec4",
      "identifier": "project_onto",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns the vector projection of `self` onto `rhs`.\n `rhs` must be of non-zero length.\n # Panics\n Will panic if `rhs` is zero length when `glam_assert` is enabled."
    },
    "glam::Vec4::project_onto_normalized": {
      "namespace": "glam::Vec4",
      "identifier": "project_onto_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns the vector projection of `self` onto `rhs`.\n `rhs` must be normalized.\n # Panics\n Will panic if `rhs` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec4::recip": {
      "namespace": "glam::Vec4",
      "identifier": "recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector containing the reciprocal `1.0/n` of each element of `self`."
    },
    "glam::Vec4::reflect": {
      "namespace": "glam::Vec4",
      "identifier": "reflect",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "normal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns the reflection vector for a given incident vector `self` and surface normal\n `normal`.\n `normal` must be normalized.\n # Panics\n Will panic if `normal` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec4::refract": {
      "namespace": "glam::Vec4",
      "identifier": "refract",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "normal"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "eta"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns the refraction direction for a given incident vector `self`, surface normal\n `normal` and ratio of indices of refraction, `eta`. When total internal reflection occurs,\n a zero vector will be returned.\n `self` and `normal` must be normalized.\n # Panics\n Will panic if `self` or `normal` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec4::reject_from": {
      "namespace": "glam::Vec4",
      "identifier": "reject_from",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns the vector rejection of `self` from `rhs`.\n The vector rejection is the vector perpendicular to the projection of `self` onto\n `rhs`, in rhs words the result of `self - self.project_onto(rhs)`.\n `rhs` must be of non-zero length.\n # Panics\n Will panic if `rhs` has a length of zero when `glam_assert` is enabled."
    },
    "glam::Vec4::reject_from_normalized": {
      "namespace": "glam::Vec4",
      "identifier": "reject_from_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns the vector rejection of `self` from `rhs`.\n The vector rejection is the vector perpendicular to the projection of `self` onto\n `rhs`, in rhs words the result of `self - self.project_onto(rhs)`.\n `rhs` must be normalized.\n # Panics\n Will panic if `rhs` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec4::rem": {
      "namespace": "glam::Vec4",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::rem-1": {
      "namespace": "glam::Vec4",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::rem-2": {
      "namespace": "glam::Vec4",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::rem_euclid": {
      "namespace": "glam::Vec4",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n [Euclidean division]: f32::rem_euclid"
    },
    "glam::Vec4::round": {
      "namespace": "glam::Vec4",
      "identifier": "round",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector containing the nearest integer to a number for each element of `self`.\n Round half-way cases away from 0.0."
    },
    "glam::Vec4::select": {
      "namespace": "glam::Vec4",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec4A"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::Vec4::signum": {
      "namespace": "glam::Vec4",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n - `1.0` if the number is positive, `+0.0` or `INFINITY`\n - `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`\n - `NAN` if the number is `NAN`"
    },
    "glam::Vec4::splat": {
      "namespace": "glam::Vec4",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::Vec4::sub": {
      "namespace": "glam::Vec4",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::sub-1": {
      "namespace": "glam::Vec4",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::sub-2": {
      "namespace": "glam::Vec4",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::to_array": {
      "namespace": "glam::Vec4",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f32"
            },
            4
          ]
        }
      },
      "documentation": " `[x, y, z, w]`"
    },
    "glam::Vec4::trunc": {
      "namespace": "glam::Vec4",
      "identifier": "trunc",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector containing the integer part each element of `self`. This means numbers are\n always truncated towards zero."
    },
    "glam::Vec4::truncate": {
      "namespace": "glam::Vec4",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Creates a 3D vector from the `x`, `y` and `z` elements of `self`, discarding `w`.\n Truncation to [`Vec3`] may also be performed by using [`self.xyz()`][crate::swizzles::Vec4Swizzles::xyz()].\n To truncate to [`Vec3A`] use [`Vec3A::from()`]."
    },
    "glam::Vec4::with_w": {
      "namespace": "glam::Vec4",
      "identifier": "with_w",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `w`."
    },
    "glam::Vec4::with_x": {
      "namespace": "glam::Vec4",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `x`."
    },
    "glam::Vec4::with_y": {
      "namespace": "glam::Vec4",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `y`."
    },
    "glam::Vec4::with_z": {
      "namespace": "glam::Vec4",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `z`."
    },
    "smol_str::SmolStr::clone": {
      "namespace": "smol_str::SmolStr",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "smol_str::SmolStr"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "smol_str::SmolStr"
        }
      }
    },
    "smol_str::SmolStr::eq": {
      "namespace": "smol_str::SmolStr",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "smol_str::SmolStr"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "smol_str::SmolStr"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "smol_str::SmolStr::is_empty": {
      "namespace": "smol_str::SmolStr",
      "identifier": "is_empty",
      "arguments": [
        {
          "kind": {
            "ref": "smol_str::SmolStr"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "smol_str::SmolStr::is_heap_allocated": {
      "namespace": "smol_str::SmolStr",
      "identifier": "is_heap_allocated",
      "arguments": [
        {
          "kind": {
            "ref": "smol_str::SmolStr"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "smol_str::SmolStr::len": {
      "namespace": "smol_str::SmolStr",
      "identifier": "len",
      "arguments": [
        {
          "kind": {
            "ref": "smol_str::SmolStr"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "usize"
        }
      }
    },
    "smol_str::SmolStr::to_string": {
      "namespace": "smol_str::SmolStr",
      "identifier": "to_string",
      "arguments": [
        {
          "kind": {
            "ref": "smol_str::SmolStr"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "string"
        }
      }
    },
    "uuid::Uuid::as_u128": {
      "namespace": "uuid::Uuid",
      "identifier": "as_u128",
      "arguments": [
        {
          "kind": {
            "ref": "uuid::Uuid"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u128"
        }
      },
      "documentation": " Returns a 128bit value containing the value.\n The bytes in the UUID will be packed directly into a `u128`.\n # Examples\n ```\n # use uuid::Uuid;\n # fn main() -> Result<(), uuid::Error> {\n let uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\n assert_eq!(\n     uuid.as_u128(),\n     0xa1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8,\n );\n # Ok(())\n # }\n ```"
    },
    "uuid::Uuid::as_u64_pair": {
      "namespace": "uuid::Uuid",
      "identifier": "as_u64_pair",
      "arguments": [
        {
          "kind": {
            "ref": "uuid::Uuid"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": [
            {
              "primitive": "u64"
            },
            {
              "primitive": "u64"
            }
          ]
        }
      },
      "documentation": " Returns two 64bit values containing the value.\n The bytes in the UUID will be split into two `u64`.\n The first u64 represents the 64 most significant bits,\n the second one represents the 64 least significant.\n # Examples\n ```\n # use uuid::Uuid;\n # fn main() -> Result<(), uuid::Error> {\n let uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\n assert_eq!(\n     uuid.as_u64_pair(),\n     (0xa1a2a3a4b1b2c1c2, 0xd1d2d3d4d5d6d7d8),\n );\n # Ok(())\n # }\n ```"
    },
    "uuid::Uuid::assert_receiver_is_total_eq": {
      "namespace": "uuid::Uuid",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "uuid::Uuid"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "uuid::Uuid::clone": {
      "namespace": "uuid::Uuid",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "uuid::Uuid"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "uuid::Uuid"
        }
      }
    },
    "uuid::Uuid::encode_buffer": {
      "namespace": "uuid::Uuid",
      "identifier": "encode_buffer",
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "u8"
            },
            45
          ]
        }
      },
      "documentation": " A buffer that can be used for `encode_...` calls, that is\n guaranteed to be long enough for any of the format adapters.\n # Examples\n ```\n # use uuid::Uuid;\n let uuid = Uuid::nil();\n assert_eq!(\n     uuid.simple().encode_lower(&mut Uuid::encode_buffer()),\n     \"00000000000000000000000000000000\"\n );\n assert_eq!(\n     uuid.hyphenated()\n         .encode_lower(&mut Uuid::encode_buffer()),\n     \"00000000-0000-0000-0000-000000000000\"\n );\n assert_eq!(\n     uuid.urn().encode_lower(&mut Uuid::encode_buffer()),\n     \"urn:uuid:00000000-0000-0000-0000-000000000000\"\n );\n ```"
    },
    "uuid::Uuid::eq": {
      "namespace": "uuid::Uuid",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "uuid::Uuid"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "uuid::Uuid"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "uuid::Uuid::from_bytes": {
      "namespace": "uuid::Uuid",
      "identifier": "from_bytes",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "u8"
              },
              16
            ]
          },
          "name": "bytes"
        }
      ],
      "return_type": {
        "kind": {
          "val": "uuid::Uuid"
        }
      },
      "documentation": " Creates a UUID using the supplied bytes.\n # Examples\n Basic usage:\n ```\n # fn main() -> Result<(), uuid::Error> {\n # use uuid::Uuid;\n let bytes = [\n     0xa1, 0xa2, 0xa3, 0xa4,\n     0xb1, 0xb2,\n     0xc1, 0xc2,\n     0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n ];\n let uuid = Uuid::from_bytes(bytes);\n assert_eq!(\n     uuid.hyphenated().to_string(),\n     \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\"\n );\n # Ok(())\n # }\n ```"
    },
    "uuid::Uuid::from_bytes_le": {
      "namespace": "uuid::Uuid",
      "identifier": "from_bytes_le",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "u8"
              },
              16
            ]
          },
          "name": "b"
        }
      ],
      "return_type": {
        "kind": {
          "val": "uuid::Uuid"
        }
      },
      "documentation": " Creates a UUID using the supplied bytes in little endian order.\n The individual fields encoded in the buffer will be flipped.\n # Examples\n Basic usage:\n ```\n # fn main() -> Result<(), uuid::Error> {\n # use uuid::Uuid;\n let bytes = [\n     0xa1, 0xa2, 0xa3, 0xa4,\n     0xb1, 0xb2,\n     0xc1, 0xc2,\n     0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n ];\n let uuid = Uuid::from_bytes_le(bytes);\n assert_eq!(\n     \"a4a3a2a1-b2b1-c2c1-d1d2-d3d4d5d6d7d8\",\n     uuid.hyphenated().to_string(),\n );\n # Ok(())\n # }\n ```"
    },
    "uuid::Uuid::from_u128": {
      "namespace": "uuid::Uuid",
      "identifier": "from_u128",
      "arguments": [
        {
          "kind": {
            "primitive": "u128"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "uuid::Uuid"
        }
      },
      "documentation": " Creates a UUID from a 128bit value.\n # Examples\n Basic usage:\n ```\n # use uuid::Uuid;\n let v = 0xa1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8u128;\n let uuid = Uuid::from_u128(v);\n assert_eq!(\n     \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n     uuid.hyphenated().to_string(),\n );\n ```"
    },
    "uuid::Uuid::from_u128_le": {
      "namespace": "uuid::Uuid",
      "identifier": "from_u128_le",
      "arguments": [
        {
          "kind": {
            "primitive": "u128"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "uuid::Uuid"
        }
      },
      "documentation": " Creates a UUID from a 128bit value in little-endian order.\n The entire value will be flipped to convert into big-endian order.\n This is based on the endianness of the UUID, rather than the target\n environment so bytes will be flipped on both big and little endian\n machines.\n # Examples\n Basic usage:\n ```\n # use uuid::Uuid;\n let v = 0xa1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8u128;\n let uuid = Uuid::from_u128_le(v);\n assert_eq!(\n     \"d8d7d6d5-d4d3-d2d1-c2c1-b2b1a4a3a2a1\",\n     uuid.hyphenated().to_string(),\n );\n ```"
    },
    "uuid::Uuid::from_u64_pair": {
      "namespace": "uuid::Uuid",
      "identifier": "from_u64_pair",
      "arguments": [
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "high_bits"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "low_bits"
        }
      ],
      "return_type": {
        "kind": {
          "val": "uuid::Uuid"
        }
      },
      "documentation": " Creates a UUID from two 64bit values.\n # Examples\n Basic usage:\n ```\n # use uuid::Uuid;\n let hi = 0xa1a2a3a4b1b2c1c2u64;\n let lo = 0xd1d2d3d4d5d6d7d8u64;\n let uuid = Uuid::from_u64_pair(hi, lo);\n assert_eq!(\n     \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n     uuid.hyphenated().to_string(),\n );\n ```"
    },
    "uuid::Uuid::get_node_id": {
      "namespace": "uuid::Uuid",
      "identifier": "get_node_id",
      "arguments": [
        {
          "kind": {
            "ref": "uuid::Uuid"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "option": {
            "array": [
              {
                "primitive": "u8"
              },
              6
            ]
          }
        }
      },
      "documentation": " If the UUID is the correct version (v1, or v6) this will return the\n node value as a 6-byte array. For other versions this will return `None`."
    },
    "uuid::Uuid::get_version_num": {
      "namespace": "uuid::Uuid",
      "identifier": "get_version_num",
      "arguments": [
        {
          "kind": {
            "ref": "uuid::Uuid"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "usize"
        }
      },
      "documentation": " Returns the version number of the UUID.\n This represents the algorithm used to generate the value.\n This method is the future-proof alternative to [`Uuid::get_version`].\n # Examples\n Basic usage:\n ```\n # use uuid::Uuid;\n # fn main() -> Result<(), uuid::Error> {\n let my_uuid = Uuid::parse_str(\"02f09a3f-1624-3b1d-8409-44eff7708208\")?;\n assert_eq!(3, my_uuid.get_version_num());\n # Ok(())\n # }\n ```\n # References\n * [Version Field in RFC 9562](https://www.ietf.org/rfc/rfc9562.html#section-4.2)"
    },
    "uuid::Uuid::into_bytes": {
      "namespace": "uuid::Uuid",
      "identifier": "into_bytes",
      "arguments": [
        {
          "kind": {
            "val": "uuid::Uuid"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "u8"
            },
            16
          ]
        }
      },
      "documentation": " Consumes self and returns the underlying byte value of the UUID.\n # Examples\n ```\n # use uuid::Uuid;\n let bytes = [\n     0xa1, 0xa2, 0xa3, 0xa4,\n     0xb1, 0xb2,\n     0xc1, 0xc2,\n     0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n ];\n let uuid = Uuid::from_bytes(bytes);\n assert_eq!(bytes, uuid.into_bytes());\n ```"
    },
    "uuid::Uuid::is_max": {
      "namespace": "uuid::Uuid",
      "identifier": "is_max",
      "arguments": [
        {
          "kind": {
            "ref": "uuid::Uuid"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Tests if the UUID is max (all ones)."
    },
    "uuid::Uuid::is_nil": {
      "namespace": "uuid::Uuid",
      "identifier": "is_nil",
      "arguments": [
        {
          "kind": {
            "ref": "uuid::Uuid"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Tests if the UUID is nil (all zeros)."
    },
    "uuid::Uuid::max": {
      "namespace": "uuid::Uuid",
      "identifier": "max",
      "return_type": {
        "kind": {
          "val": "uuid::Uuid"
        }
      },
      "documentation": " The 'max UUID' (all ones).\n The max UUID is a special form of UUID that is specified to have all\n 128 bits set to one.\n # References\n * [Max UUID in RFC 9562](https://www.ietf.org/rfc/rfc9562.html#section-5.10)\n # Examples\n Basic usage:\n ```\n # use uuid::Uuid;\n let uuid = Uuid::max();\n assert_eq!(\n     \"ffffffff-ffff-ffff-ffff-ffffffffffff\",\n     uuid.hyphenated().to_string(),\n );\n ```"
    },
    "uuid::Uuid::new_v4": {
      "namespace": "uuid::Uuid",
      "identifier": "new_v4",
      "return_type": {
        "kind": {
          "val": "uuid::Uuid"
        }
      },
      "documentation": " Creates a random UUID.\n This uses the [`getrandom`] crate to utilise the operating system's RNG\n as the source of random numbers. If you'd like to use a custom\n generator, don't use this method: generate random bytes using your\n custom generator and pass them to the\n [`uuid::Builder::from_random_bytes`][from_random_bytes] function\n instead.\n Note that usage of this method requires the `v4` feature of this crate\n to be enabled.\n # Examples\n Basic usage:\n ```\n # use uuid::{Uuid, Version};\n let uuid = Uuid::new_v4();\n assert_eq!(Some(Version::Random), uuid.get_version());\n ```\n # References\n * [UUID Version 4 in RFC 9562](https://www.ietf.org/rfc/rfc9562.html#section-5.4)\n [`getrandom`]: https://crates.io/crates/getrandom\n [from_random_bytes]: struct.Builder.html#method.from_random_bytes"
    },
    "uuid::Uuid::nil": {
      "namespace": "uuid::Uuid",
      "identifier": "nil",
      "return_type": {
        "kind": {
          "val": "uuid::Uuid"
        }
      },
      "documentation": " The 'nil UUID' (all zeros).\n The nil UUID is a special form of UUID that is specified to have all\n 128 bits set to zero.\n # References\n * [Nil UUID in RFC 9562](https://www.ietf.org/rfc/rfc9562.html#section-5.9)\n # Examples\n Basic usage:\n ```\n # use uuid::Uuid;\n let uuid = Uuid::nil();\n assert_eq!(\n     \"00000000-0000-0000-0000-000000000000\",\n     uuid.hyphenated().to_string(),\n );\n ```"
    },
    "uuid::Uuid::to_bytes_le": {
      "namespace": "uuid::Uuid",
      "identifier": "to_bytes_le",
      "arguments": [
        {
          "kind": {
            "ref": "uuid::Uuid"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "u8"
            },
            16
          ]
        }
      },
      "documentation": " Returns the bytes of the UUID in little-endian order.\n The bytes will be flipped to convert into little-endian order. This is\n based on the endianness of the UUID, rather than the target environment\n so bytes will be flipped on both big and little endian machines.\n # Examples\n ```\n use uuid::Uuid;\n # fn main() -> Result<(), uuid::Error> {\n let uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\n assert_eq!(\n     uuid.to_bytes_le(),\n     ([\n         0xa4, 0xa3, 0xa2, 0xa1, 0xb2, 0xb1, 0xc2, 0xc1, 0xd1, 0xd2,\n         0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8\n     ])\n );\n # Ok(())\n # }\n ```"
    },
    "uuid::Uuid::to_u128_le": {
      "namespace": "uuid::Uuid",
      "identifier": "to_u128_le",
      "arguments": [
        {
          "kind": {
            "ref": "uuid::Uuid"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u128"
        }
      },
      "documentation": " Returns a 128bit little-endian value containing the value.\n The bytes in the `u128` will be flipped to convert into big-endian\n order. This is based on the endianness of the UUID, rather than the\n target environment so bytes will be flipped on both big and little\n endian machines.\n Note that this will produce a different result than\n [`Uuid::to_fields_le`], because the entire UUID is reversed, rather\n than reversing the individual fields in-place.\n # Examples\n ```\n # use uuid::Uuid;\n # fn main() -> Result<(), uuid::Error> {\n let uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\n assert_eq!(\n     uuid.to_u128_le(),\n     0xd8d7d6d5d4d3d2d1c2c1b2b1a4a3a2a1,\n );\n # Ok(())\n # }\n ```"
    }
  },
  "primitives": {
    "DynamicFunction": {
      "kind": "dynamicFunction",
      "documentation": "A callable dynamic function"
    },
    "DynamicFunctionMut": {
      "kind": "dynamicFunctionMut",
      "documentation": "A stateful and callable dynamic function"
    },
    "FunctionCallContext": {
      "kind": "functionCallContext",
      "documentation": "Function call context, if accepted by a function, means the function can access the world in arbitrary ways."
    },
    "OsString": {
      "kind": "osString",
      "documentation": "A heap allocated OS string"
    },
    "PathBuf": {
      "kind": "pathBuf",
      "documentation": "A heap allocated file path"
    },
    "ReflectReference": {
      "kind": "reflectReference",
      "documentation": "A reference to a reflectable type"
    },
    "String": {
      "kind": "string",
      "documentation": "A heap allocated string"
    },
    "bool": {
      "kind": "bool",
      "documentation": "A boolean value"
    },
    "char": {
      "kind": "char",
      "documentation": "An 8-bit character"
    },
    "f32": {
      "kind": "f32",
      "documentation": "A 32-bit floating point number"
    },
    "f64": {
      "kind": "f64",
      "documentation": "A 64-bit floating point number"
    },
    "i128": {
      "kind": "i128",
      "documentation": "A signed 128-bit integer"
    },
    "i16": {
      "kind": "i16",
      "documentation": "A signed 16-bit integer"
    },
    "i32": {
      "kind": "i32",
      "documentation": "A signed 32-bit integer"
    },
    "i64": {
      "kind": "i64",
      "documentation": "A signed 64-bit integer"
    },
    "i8": {
      "kind": "i8",
      "documentation": "A signed 8-bit integer"
    },
    "isize": {
      "kind": "isize",
      "documentation": "A signed pointer-sized integer"
    },
    "str": {
      "kind": "str",
      "documentation": "A string slice"
    },
    "u128": {
      "kind": "u128",
      "documentation": "An unsigned 128-bit integer"
    },
    "u16": {
      "kind": "u16",
      "documentation": "An unsigned 16-bit integer"
    },
    "u32": {
      "kind": "u32",
      "documentation": "An unsigned 32-bit integer"
    },
    "u64": {
      "kind": "u64",
      "documentation": "An unsigned 64-bit integer"
    },
    "u8": {
      "kind": "u8",
      "documentation": "An unsigned 8-bit integer"
    },
    "usize": {
      "kind": "usize",
      "documentation": "An unsigned pointer-sized integer"
    }
  },
  "description": "Core BMS framework bindings"
}