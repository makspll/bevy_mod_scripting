on:
  push:
    branches:
      - "**"
    paths-ignore:
      - 'crates/bevy_api_gen/**'
      - 'crates/macro_tests/**'
      - '.github/workflows/release-plz.yml'
      - '.github/workflows/bevy_api_gen.yml'
      - '.github/workflows/macro_tests.yml'
      - 'docs/**'


name: Check and Lint - bevy_mod_scripting


env:

  REGISTRY: ghcr.io
  IMAGE_NAME: bevy-mod-scripting
  
concurrency:
  # Use github.run_id on main branch
  # Use github.event.pull_request.number on pull requests, so it's unique per pull request
  # Use github.ref on other branches, so it's unique per branch
  group: ${{ github.workflow }}-${{ github.ref == 'refs/heads/main' && github.run_id || github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:

  build-ci-image:
    runs-on: ubuntu-latest
    # if: github.ref == 'refs/heads/main' || github.ref == 'staging'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          file: ./crates/xtask/Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  generate-job-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Generate matrix
        id: generate-matrix
        run: |
          cargo xtask ci-matrix > matrix.json
          cat matrix.json
          echo "Convert to single line JSON"
          jq -c . matrix.json > matrix-one-line.json
          echo "matrix=$(cat matrix-one-line.json)" >> $GITHUB_OUTPUT

  check:  
    permissions:
      pull-requests: write
    name: Check - ${{ matrix.run_args.name }}
    runs-on: ${{ matrix.run_args.os }}
    needs: generate-job-matrix
    strategy:
      matrix:
       run_args: ${{fromJson(needs.generate-job-matrix.outputs.matrix)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install alsa and udev
        if: runner.os == 'linux'
        run: |
          sudo apt-get update; sudo apt-get install --no-install-recommends libasound2-dev libudev-dev
          sudo rm -rf /usr/share/dotnet; sudo rm -rf /opt/ghc; sudo rm -rf "/usr/local/share/boost"; sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.7.3
      - name: Setup
        run: |
          cargo xtask init
      - name: Check
        run: |
          ${{ matrix.run_args.command }}