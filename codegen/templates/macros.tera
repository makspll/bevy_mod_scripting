{% macro vector_index(num_type) %}
#[lua(metamethod="Index")]
fn index(self, idx: usize) -> LuaIdentityProxy<{{ num_type }}> {
    _self[idx - 1]
}
{% endmacro vector_index %}

{% macro vector_newindex(num_type) %}
#[lua(metamethod="NewIndex")]
fn index(&mut self, idx: usize, val: {{ num_type }}) -> () {
    _self[idx - 1] = val
}
{% endmacro vector_newindex %}

{% macro matrix_index(col_type, mat_type, bms_core_path) %}
#[lua(metamethod="Index", with_context, no_proxy)]
fn index(_self: Self, idx: usize, lua: &tealr::mlu::mlua::Lua) -> Result<tealr::mlu::mlua::Value, tealr::mlu::mlua::Error> {
    let mut curr_ref = _self.0;

    let path = match idx {
        1 => "x_axis",
        2 => "y_axis",
        3 => "z_axis",
        4 => "w_axis",
        _ => "unknown_axis"
    };

    let parsed_path = ::bevy::reflect::ParsedPath::parse_static(path).expect("invariant");
    curr_ref.index_path(bevy_mod_scripting_core::bindings::ReflectionPathElem::new_reflection(parsed_path));
    crate::bindings::reference::LuaReflectReference(curr_ref).to_lua_proxy(lua)
}
{% endmacro matrix_index %}

{% macro debug_as_to_string() %}
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{:?}", _self)
}
{% endmacro debug_as_to_string %}

{% macro display_as_to_string() %}
#[lua(metamethod="ToString")]
fn index(&self) -> String {
    format!("{}", _self)
}
{% endmacro debug_as_to_string %}