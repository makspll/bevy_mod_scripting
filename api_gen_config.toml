imports = """
#[cfg(feature="lua")]
use {
	bevy_mod_scripting_lua_derive::impl_lua_newtype,
	bevy_mod_scripting_lua::{
		tealr::mlu::mlua::MetaMethod, 
		docs::LuaDocFragment
	},
	crate::lua::RegisterForeignLuaType,
};
use std::ops::*;
use crate::{script_ref::{ReflectedValue,ValueIndex},
	sub_reflect::ReflectPathElem,
	error::ReflectionError
};
use std::sync::Mutex;
use bevy_mod_scripting_core::prelude::*;
use bevy::prelude::App;
use bevy::reflect::Enum;
"""

other = """
#[cfg(feature="lua")]
crate::impl_tealr_generic!(pub(crate) struct T);
"""

lua_api_defaults = """
fn setup_script(
	&mut self,
	script_data: &ScriptData,
	ctx: &mut Self::ScriptContext,
) -> Result<(), ScriptError> {
	let ctx = ctx.get_mut().expect("Could not get context");
	let globals = ctx.globals();
	globals
		.set(
			"entity",
			crate::lua::bevy::LuaEntity::new(script_data.entity),
		)
		.map_err(ScriptError::new_other)?;
	globals
		.set::<_, crate::lua::bevy::LuaScriptData>("script", script_data.into())
		.map_err(ScriptError::new_other)?;

	Ok(())
}

fn setup_script_runtime(
	&mut self,
	world_ptr: bevy_mod_scripting_core::world::WorldPointer,
	_script_data: &ScriptData,
	ctx: &mut Self::ScriptContext,
) -> Result<(), ScriptError> {
	let ctx = ctx.get_mut().expect("Could not get context");
	let globals = ctx.globals();
	globals
		.set("world", crate::lua::bevy::LuaWorld::new(world_ptr))
		.map_err(ScriptError::new_other)
}
"""

primitives = ["usize","isize","f32","f64","u128","u64","u32","u16","u8","i128","i64","i32","i16","i8","String","bool"]


[[manual_lua_types]]
name="ReflectedValue"

[[manual_lua_types]]
name="crate::lua::bevy::LuaWorld"
proxy_name="world"
include_global_proxy=true
use_dummy_proxy=true

[[manual_lua_types]]
name="crate::lua::bevy::LuaScriptData"
proxy_name="script"
include_global_proxy=true
use_dummy_proxy=true

[[manual_lua_types]]
name="crate::lua::bevy::LuaEntity"
proxy_name="entity"
include_global_proxy=true
use_dummy_proxy=true
dont_process=true

[[manual_lua_types]]
name="crate::lua::bevy::LuaTypeRegistration"

[[manual_lua_types]]
name="crate::lua::std::LuaVec<T>"


## BEVY_UI

[[types]]
type="AlignContent"
source="bevy_ui"

[[types]]
type="AlignItems"
source="bevy_ui"

[[types]]
type="AlignSelf"
source="bevy_ui"

[[types]]
type="Direction"
source="bevy_ui"

[[types]]
type="FlexDirection"
source="bevy_ui"

[[types]]
type="FlexWrap"
source="bevy_ui"

[[types]]
type="FocusPolicy"
source="bevy_ui"

[[types]]
type="Interaction"
source="bevy_ui"

[[types]]
type="JustifyContent"
source="bevy_ui"

[[types]]
type="Overflow"
source="bevy_ui"

[[types]]
type="PositionType"
source="bevy_ui"

[[types]]
type="Val"
source="bevy_ui"

[[types]]
type="CalculatedClip"
source="bevy_ui"

[[types]]
type="CalculatedSize"
source="bevy_ui"

[[types]]
type="Node"
source="bevy_ui"

[[types]]
type="Style"
source="bevy_ui"

[[types]]
type="UiImage"
source="bevy_ui"

[[types]]
type="Button"
source="bevy_ui"

[[types]]
type="ImageMode"
source="bevy_ui"

[[types]]
type="Display"
source="bevy_ui"


## BEVY_ANIMATION

[[types]]
type="AnimationPlayer"
source="bevy_animation"


## BEVY_CORE

[[types]]
type="Name"
source="bevy_core"


# ## BEVY_GLTF

[[types]]
type="GltfExtras"
source="bevy_gltf"


## BEVY_HIERARCHY

[[types]]
type="Children"
source="bevy_hierarchy"

[[types]]
type="Parent"
source="bevy_hierarchy"

## BEVY_TEXT

[[types]]
type="Text2dBounds"
source="bevy_text"

[[types]]
type="Text2dSize"
source="bevy_text"

[[types]]
type="Text"
source="bevy_text"

[[types]]
type="TextAlignment"
source="bevy_text"

[[types]]
type="TextSection"
source="bevy_text"

[[types]]
type="TextStyle"
source="bevy_text"

[[types]]
type="HorizontalAlign"
source="bevy_text"

[[types]]
type="VerticalAlign"
source="bevy_text"



## BEVY_TIME

[[types]]
type="Stopwatch"
source="bevy_time"

[[types]]
type="Timer"
source="bevy_time"


## BEVY_UTILS

# [[types]]
# type="Duration"
# source="bevy_utils"



# ## BEVY_REFLECT

# [[types]]
# type="DynamicArray"
# source="bevy_reflect"

# [[types]]
# type="DynamicList"
# source="bevy_reflect"

# [[types]]
# type="DynamicMap"
# source="bevy_reflect"

# [[types]]
# type="DynamicStruct"
# source="bevy_reflect"

# [[types]]
# type="DynamicTuple"
# source="bevy_reflect"

# [[types]]
# type="DynamicTupleStruct"
# source="bevy_reflect"






## BEVY_ECS 
[[types]]
type="Entity"
source="bevy_ecs"

## BEVY_TRANSFORM

[[types]]
type="Transform"
source="bevy_transform"

[[types]]
type="GlobalTransform"
source="bevy_transform"

## BEVY_PBR

[[types]]
type="AmbientLight"
source="bevy_pbr"

[[types]]
type="CubemapVisibleEntities"
source="bevy_pbr"

[[types]]
type="DirectionalLight"
source="bevy_pbr"

[[types]]
type="DirectionalLightShadowMap"
source="bevy_pbr"

[[types]]
type="NotShadowCaster"
source="bevy_pbr"

[[types]]
type="NotShadowReceiver"
source="bevy_pbr"

[[types]]
type="PointLight"
source="bevy_pbr"

[[types]]
type="PointLightShadowMap"
source="bevy_pbr"


[[types]]
type="AlphaMode"
source="bevy_pbr"

[[types]]
type="Wireframe"
source="bevy_pbr"

[[types]]
type="WireframeConfig"
source="bevy_pbr"

## BEVY_CORE_PIPELINE

[[types]]
type="Camera3dDepthLoadOp"
source="bevy_core_pipeline"


[[types]]
type="ClearColor"
source="bevy_core_pipeline"

[[types]]
type="ClearColorConfig"
source="bevy_core_pipeline"

[[types]]
type="Camera2d"
source="bevy_core_pipeline"

[[types]]
type="Camera3d"
source="bevy_core_pipeline"

## BEVY_SPRITE

[[types]]
type="Anchor"
source="bevy_sprite"

[[types]]
type="Mesh2dHandle"
source="bevy_sprite"

[[types]]
type="TextureAtlasSprite"
source="bevy_sprite"


[[types]]
type="Sprite"
source="bevy_sprite"



## BEVY_RENDER

[[types]]
type="RenderLayers"
source="bevy_render"

[[types]]
type="Visibility"
source="bevy_render"

[[types]]
type="VisibleEntities"
source="bevy_render"

[[types]]
type="ComputedVisibility"
source="bevy_render"

[[types]]
type="SkinnedMesh"
source="bevy_render"

[[types]]
type="ScalingMode"
source="bevy_render"

[[types]]
type="WindowOrigin"
source="bevy_render"

[[types]]
type="Color"
source="bevy_render"

[[types]]
type="Aabb"
source="bevy_render"

[[types]]
type="CubemapFrusta"
source="bevy_render"

[[types]]
type="Frustum"
source="bevy_render"

[[types]]
type="Msaa"
source="bevy_render"

[[types]]
type="Camera"
source="bevy_render"

[[types]]
type="RenderTarget"
source="bevy_render"

[[types]]
type="Viewport"
source="bevy_render"


[[types]]
type="Projection"
source="bevy_render"
traits=[
    {name="CameraProjection", import_path="bevy::render::camera::CameraProjection"}
]

[[types]]
type="OrthographicProjection"
source="bevy_render"
traits=[
    {name="CameraProjection", import_path="bevy::render::camera::CameraProjection"}
]

[[types]]
type="PerspectiveProjection"
source="bevy_render"
traits=[
    {name="CameraProjection", import_path="bevy::render::camera::CameraProjection"}
]

[[types]]
type="CameraRenderGraph"
source="bevy_render"


## BEVY_UTILS
# needs a reflect impl
# [[types]]
# type="Uuid"
# source="uuid"

## BEVY_ASSET

[[types]]
type="AssetPathId"
source="bevy_asset"

[[types]]
type="LabelId"
source="bevy_asset"

[[types]]
type="SourcePathId"
source="bevy_asset"

[[types]]
type="HandleId"
source="bevy_asset"

## BEVY_MATH
[[types]]
type="Vec2"
source="bevy_math"
lua_methods=[
    "(MetaMethod::Index) => |_,s,idx: usize| {Ok(s.inner()?[idx])}",
    "mut (MetaMethod::NewIndex) => |_,s,(idx,val): (usize,f32)| {s.val_mut(|s| Ok(s[idx] = val))?}"
]
import_path="glam::f32::Vec2"

[[types]]
type="Vec3"
source="bevy_math"
lua_methods=[
    "(MetaMethod::Index) => |_,s,idx: usize| {Ok(s.inner()?[idx])}",
    "mut (MetaMethod::NewIndex) => |_,s,(idx,val): (usize,f32)| {s.val_mut(|s| Ok(s[idx] = val))?}"
]
import_path="glam::f32::Vec3"

[[types]]
type="Vec3A"
source="bevy_math"
lua_methods=[
    "(MetaMethod::Index) => |_,s,idx: usize| {Ok(s.inner()?[idx])}",
    "mut (MetaMethod::NewIndex) => |_,s,(idx,val): (usize,f32)| {s.val_mut(|s| Ok(s[idx] = val))?}"
]
import_path="glam::f32::Vec3A"


[[types]]
type="Vec4"
source="bevy_math"
lua_methods=[
    "(MetaMethod::Index) => |_,s,idx: usize| {Ok(s.inner()?[idx])}",
    "mut (MetaMethod::NewIndex) => |_,s,(idx,val): (usize,f32)| {s.val_mut(|s| Ok(s[idx] = val))?}"
]
import_path="glam::f32::Vec4"

[[types]]
type="BVec2"
source="bevy_math"
import_path="glam::bool::BVec2"

[[types]]
type="BVec3"
source="bevy_math"
import_path="glam::bool::BVec3"

[[types]]
type="BVec4"
source="bevy_math"
import_path="glam::bool::BVec4"

[[types]]
type="BVec3A"
source="bevy_math"
import_path="glam::bool::BVec3A"

[[types]]
type="BVec4A"
source="bevy_math"
import_path="glam::bool::BVec4A"

[[types]]
type="DVec2"
source="bevy_math"
lua_methods=[
    "(MetaMethod::Index) => |_,s,idx: usize| {Ok(s.inner()?[idx])}",
    "mut (MetaMethod::NewIndex) => |_,s,(idx,val): (usize,f64)| {s.val_mut(|s| Ok(s[idx] = val))?}"
]
import_path="glam::f64::DVec2"

[[types]]
type="DVec3"
source="bevy_math"
lua_methods=[
    "(MetaMethod::Index) => |_,s,idx: usize| {Ok(s.inner()?[idx])}",
    "mut (MetaMethod::NewIndex) => |_,s,(idx,val): (usize,f64)| {s.val_mut(|s| Ok(s[idx] = val))?}"
]
import_path="glam::f64::DVec3"

[[types]]
type="DVec4"
source="bevy_math"
lua_methods=[
    "(MetaMethod::Index) => |_,s,idx: usize| {Ok(s.inner()?[idx])}",
    "mut (MetaMethod::NewIndex) => |_,s,(idx,val): (usize,f64)| {s.val_mut(|s| Ok(s[idx] = val))?}"
]
import_path="glam::f64::DVec4"

[[types]]
type="IVec2"
source="bevy_math"
lua_methods=[
    "(MetaMethod::Index) => |_,s,idx: usize| {Ok(s.inner()?[idx])}",
    "mut (MetaMethod::NewIndex) => |_,s,(idx,val): (usize,i32)| {s.val_mut(|s| Ok(s[idx] = val))?}"
]
import_path="glam::i32::IVec2"

[[types]]
type="IVec3"
source="bevy_math"
lua_methods=[
    "(MetaMethod::Index) => |_,s,idx: usize| {Ok(s.inner()?[idx])}",
    "mut (MetaMethod::NewIndex) => |_,s,(idx,val): (usize,i32)| {s.val_mut(|s| Ok(s[idx] = val))?}"
]
import_path="glam::i32::IVec3"

[[types]]
type="IVec4"
source="bevy_math"
lua_methods=[
    "(MetaMethod::Index) => |_,s,idx: usize| {Ok(s.inner()?[idx])}",
    "mut (MetaMethod::NewIndex) => |_,s,(idx,val): (usize,i32)| {s.val_mut(|s| Ok(s[idx] = val))?}"
]
import_path="glam::i32::IVec4"

[[types]]
type="UVec2"
source="bevy_math"
lua_methods=[
    "(MetaMethod::Index) => |_,s,idx: usize| {Ok(s.inner()?[idx])}",
    "mut (MetaMethod::NewIndex) => |_,s,(idx,val): (usize,u32)| {s.val_mut(|s| Ok(s[idx] = val))?}"
]
import_path="glam::u32::UVec2"

[[types]]
type="UVec3"
source="bevy_math"
lua_methods=[
    "(MetaMethod::Index) => |_,s,idx: usize| {Ok(s.inner()?[idx])}",
    "mut (MetaMethod::NewIndex) => |_,s,(idx,val): (usize,u32)| {s.val_mut(|s| Ok(s[idx] = val))?}"
]
import_path="glam::u32::UVec3"

[[types]]
type="UVec4"
source="bevy_math"
lua_methods=[
    "(MetaMethod::Index) => |_,s,idx: usize| {Ok(s.inner()?[idx])}",
    "mut (MetaMethod::NewIndex) => |_,s,(idx,val): (usize,u32)| {s.val_mut(|s| Ok(s[idx] = val))?}"
]
import_path="glam::u32::UVec4"

[[types]]
type="Mat3"
source="bevy_math"
lua_methods=[
"""    
	mut (MetaMethod::Index) => |_,s,idx : usize| {
		Ok(LuaVec3::new_ref(
				s.script_ref().sub_ref(ReflectPathElem::SubReflectionIndexed{
					label:"col", 
					index: idx,
					get: |idx,ref_| Err(ReflectionError::InsufficientProvenance{
						path: "".to_owned(), 
						msg: "Cannot get column of matrix with immutable reference".to_owned()
					}),
					get_mut: |idx, ref_| {
						if ref_.is::<Mat3>(){
							Ok(ref_.downcast_mut::<Mat3>()
								.unwrap()
								.col_mut(idx))
						} else {
							Err(ReflectionError::CannotDowncast{from: ref_.type_name().to_owned().into(), to:"Mat3".into()})
						}	
					}
				})
			)
		)
	}
"""
]
import_path="glam::f32::Mat3"

[[types]]
type="Mat2"
source="bevy_math"
lua_methods=[
"""    
	mut (MetaMethod::Index) => |_,s,idx : usize| {
		Ok(LuaVec2::new_ref(
				s.script_ref().sub_ref(ReflectPathElem::SubReflectionIndexed{
					label:"col", 
					index: idx,
					get: |idx,ref_| Err(ReflectionError::InsufficientProvenance{
						path: "".to_owned(), 
						msg: "Cannot get column of matrix with immutable reference".to_owned()
					}),
					get_mut: |idx, ref_| {
						if ref_.is::<Mat2>(){
							Ok(ref_.downcast_mut::<Mat2>()
								.unwrap()
								.col_mut(idx))
						} else {
							Err(ReflectionError::CannotDowncast{from: ref_.type_name().to_owned().into(), to:"Mat2".into()})
						}	
					}
				})
			)
		)
	}
"""
]
import_path="glam::f32::Mat2"


[[types]]
type="Mat3A"
source="bevy_math"
lua_methods=[
"""    
	mut (MetaMethod::Index) => |_,s,idx : usize| {
		Ok(LuaVec3A::new_ref(
				s.script_ref().sub_ref(ReflectPathElem::SubReflectionIndexed{
					label:"col", 
					index: idx,
					get: |idx,ref_| Err(ReflectionError::InsufficientProvenance{
						path: "".to_owned(), 
						msg: "Cannot get column of matrix with immutable reference".to_owned()
					}),
					get_mut: |idx, ref_| {
						if ref_.is::<Mat3A>(){
							Ok(ref_.downcast_mut::<Mat3A>()
								.unwrap()
								.col_mut(idx))
						} else {
							Err(ReflectionError::CannotDowncast{from: ref_.type_name().to_owned().into(), to:"Mat3A".into()})
						}	
					}
				})
			)
		)
	}
"""
]
import_path="glam::f32::Mat3A"

[[types]]
type="Mat4"
source="bevy_math"
lua_methods=[
"""    
	mut (MetaMethod::Index) => |_,s,idx : usize| {
		Ok(LuaVec4::new_ref(
				s.script_ref().sub_ref(ReflectPathElem::SubReflectionIndexed{
					label:"col", 
					index: idx,
					get: |idx,ref_| Err(ReflectionError::InsufficientProvenance{
						path: "".to_owned(), 
						msg: "Cannot get column of matrix with immutable reference".to_owned()
					}),
					get_mut: |idx, ref_| {
						if ref_.is::<Mat4>(){
							Ok(ref_.downcast_mut::<Mat4>()
								.unwrap()
								.col_mut(idx))
						} else {
							Err(ReflectionError::CannotDowncast{from: ref_.type_name().to_owned().into(), to:"Mat4".into()})
						}	
					}
				})
			)
		)
	}
"""
]
import_path="glam::f32::Mat4"


[[types]]
type="DMat2"
source="bevy_math"
lua_methods=[
"""    
	mut (MetaMethod::Index) => |_,s,idx : usize| {
		Ok(LuaDVec2::new_ref(
				s.script_ref().sub_ref(ReflectPathElem::SubReflectionIndexed{
					label:"col", 
					index: idx,
					get: |idx,ref_| Err(ReflectionError::InsufficientProvenance{
						path: "".to_owned(), 
						msg: "Cannot get column of matrix with immutable reference".to_owned()
					}),
					get_mut: |idx, ref_| {
						if ref_.is::<DMat2>(){
							Ok(ref_.downcast_mut::<DMat2>()
								.unwrap()
								.col_mut(idx))
						} else {
							Err(ReflectionError::CannotDowncast{from: ref_.type_name().to_owned().into(), to:"DMat2".into()})
						}	
					}
				})
			)
		)
	}
"""
]
import_path="glam::f64::DMat2"

[[types]]
type="DMat3"
source="bevy_math"
lua_methods=[
"""    
	mut (MetaMethod::Index) => |_,s,idx : usize| {
		Ok(LuaDVec3::new_ref(
				s.script_ref().sub_ref(ReflectPathElem::SubReflectionIndexed{
					label:"col", 
					index: idx,
					get: |idx,ref_| Err(ReflectionError::InsufficientProvenance{
						path: "".to_owned(), 
						msg: "Cannot get column of matrix with immutable reference".to_owned()
					}),
					get_mut: |idx, ref_| {
						if ref_.is::<DMat3>(){
							Ok(ref_.downcast_mut::<DMat3>()
								.unwrap()
								.col_mut(idx))
						} else {
							Err(ReflectionError::CannotDowncast{from: ref_.type_name().to_owned().into(), to:"DMat3".into()})
						}	
					}
				})
			)
		)
	}
"""
]
import_path="glam::f64::DMat3"

[[types]]
type="DMat4"
source="bevy_math"
lua_methods=[
"""    
	mut (MetaMethod::Index) => |_,s,idx : usize| {
		Ok(LuaDVec4::new_ref(
				s.script_ref().sub_ref(ReflectPathElem::SubReflectionIndexed{
					label:"col", 
					index: idx,
					get: |idx,ref_| Err(ReflectionError::InsufficientProvenance{
						path: "".to_owned(), 
						msg: "Cannot get column of matrix with immutable reference".to_owned()
					}),
					get_mut: |idx, ref_| {
						if ref_.is::<DMat4>(){
							Ok(ref_.downcast_mut::<DMat4>()
								.unwrap()
								.col_mut(idx))
						} else {
							Err(ReflectionError::CannotDowncast{from: ref_.type_name().to_owned().into(), to:"DMat4".into()})
						}	
					}
				})
			)
		)
	}
"""
]
import_path="glam::f64::DMat4"

[[types]]
type="Affine2"
source="bevy_math"
import_path="glam::f32::Affine2"

[[types]]
type="Affine3A"
source="bevy_math"
import_path="glam::f32::Affine3A"

[[types]]
type="DAffine2"
source="bevy_math"
import_path="glam::f64::DAffine2"

[[types]]
type="DAffine3"
source="bevy_math"
import_path="glam::f64::DAffine3"

[[types]]
type="Quat"
source="bevy_math"
import_path="glam::f32::Quat"

[[types]]
type="DQuat"
source="bevy_math"
import_path="glam::f64::DQuat"

[[types]]
type="EulerRot"
source="bevy_math"
import_path="glam::EulerRot"

[[types]]
type="Rect"
source="bevy_math"