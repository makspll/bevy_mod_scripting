{
  "version": "0.2.0",
  "globals": {},
  "types": {
    "()": {
      "identifier": "",
      "path": "()",
      "layout": null
    },
    "FunctionCallContext": {
      "identifier": "FunctionCallContext",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::bindings::function::script_function::FunctionCallContext",
      "documentation": " The caller context when calling a script function.\n Functions can choose to react to caller preferences such as converting 1-indexed numbers to 0-indexed numbers",
      "layout": null
    },
    "ReflectReference": {
      "identifier": "ReflectReference",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::bindings::reference::ReflectReference",
      "documentation": " An accessor to a `dyn PartialReflect` struct, stores a base ID of the type and a reflection path\n safe to build but to reflect on the value inside you need to ensure aliasing rules are upheld",
      "associated_functions": [
        "ReflectReference::clear",
        "ReflectReference::display_ref",
        "ReflectReference::display_value",
        "ReflectReference::functions",
        "ReflectReference::get",
        "ReflectReference::insert",
        "ReflectReference::iter",
        "ReflectReference::len",
        "ReflectReference::pop",
        "ReflectReference::push",
        "ReflectReference::remove",
        "ReflectReference::set"
      ],
      "layout": {
        "kind": "Struct",
        "name": "ReflectReference"
      }
    },
    "String": {
      "identifier": "String",
      "crate": "alloc",
      "path": "alloc::string::String",
      "layout": null
    },
    "[[f32; 2]; 2]": {
      "identifier": "",
      "path": "[[f32; 2]; 2]",
      "layout": null
    },
    "[[f32; 2]; 3]": {
      "identifier": "",
      "path": "[[f32; 2]; 3]",
      "layout": null
    },
    "[[f32; 3]; 3]": {
      "identifier": "",
      "path": "[[f32; 3]; 3]",
      "layout": null
    },
    "[[f32; 3]; 4]": {
      "identifier": "",
      "path": "[[f32; 3]; 4]",
      "layout": null
    },
    "[[f32; 4]; 4]": {
      "identifier": "",
      "path": "[[f32; 4]; 4]",
      "layout": null
    },
    "[[f64; 2]; 2]": {
      "identifier": "",
      "path": "[[f64; 2]; 2]",
      "layout": null
    },
    "[[f64; 2]; 3]": {
      "identifier": "",
      "path": "[[f64; 2]; 3]",
      "layout": null
    },
    "[[f64; 3]; 3]": {
      "identifier": "",
      "path": "[[f64; 3]; 3]",
      "layout": null
    },
    "[[f64; 3]; 4]": {
      "identifier": "",
      "path": "[[f64; 3]; 4]",
      "layout": null
    },
    "[[f64; 4]; 4]": {
      "identifier": "",
      "path": "[[f64; 4]; 4]",
      "layout": null
    },
    "[bool; 2]": {
      "identifier": "",
      "path": "[bool; 2]",
      "layout": null
    },
    "[bool; 3]": {
      "identifier": "",
      "path": "[bool; 3]",
      "layout": null
    },
    "[bool; 4]": {
      "identifier": "",
      "path": "[bool; 4]",
      "layout": null
    },
    "[f32; 12]": {
      "identifier": "",
      "path": "[f32; 12]",
      "layout": null
    },
    "[f32; 16]": {
      "identifier": "",
      "path": "[f32; 16]",
      "layout": null
    },
    "[f32; 2]": {
      "identifier": "",
      "path": "[f32; 2]",
      "layout": null
    },
    "[f32; 3]": {
      "identifier": "",
      "path": "[f32; 3]",
      "layout": null
    },
    "[f32; 4]": {
      "identifier": "",
      "path": "[f32; 4]",
      "layout": null
    },
    "[f32; 6]": {
      "identifier": "",
      "path": "[f32; 6]",
      "layout": null
    },
    "[f32; 9]": {
      "identifier": "",
      "path": "[f32; 9]",
      "layout": null
    },
    "[f64; 12]": {
      "identifier": "",
      "path": "[f64; 12]",
      "layout": null
    },
    "[f64; 16]": {
      "identifier": "",
      "path": "[f64; 16]",
      "layout": null
    },
    "[f64; 2]": {
      "identifier": "",
      "path": "[f64; 2]",
      "layout": null
    },
    "[f64; 3]": {
      "identifier": "",
      "path": "[f64; 3]",
      "layout": null
    },
    "[f64; 4]": {
      "identifier": "",
      "path": "[f64; 4]",
      "layout": null
    },
    "[f64; 6]": {
      "identifier": "",
      "path": "[f64; 6]",
      "layout": null
    },
    "[f64; 9]": {
      "identifier": "",
      "path": "[f64; 9]",
      "layout": null
    },
    "[glam::Vec2; 3]": {
      "identifier": "",
      "path": "[glam::Vec2; 3]",
      "layout": null
    },
    "[glam::Vec3; 3]": {
      "identifier": "",
      "path": "[glam::Vec3; 3]",
      "layout": null
    },
    "[glam::Vec3; 4]": {
      "identifier": "",
      "path": "[glam::Vec3; 4]",
      "layout": null
    },
    "[i32; 2]": {
      "identifier": "",
      "path": "[i32; 2]",
      "layout": null
    },
    "[i32; 3]": {
      "identifier": "",
      "path": "[i32; 3]",
      "layout": null
    },
    "[i32; 4]": {
      "identifier": "",
      "path": "[i32; 4]",
      "layout": null
    },
    "[i64; 2]": {
      "identifier": "",
      "path": "[i64; 2]",
      "layout": null
    },
    "[i64; 3]": {
      "identifier": "",
      "path": "[i64; 3]",
      "layout": null
    },
    "[i64; 4]": {
      "identifier": "",
      "path": "[i64; 4]",
      "layout": null
    },
    "[u32; 2]": {
      "identifier": "",
      "path": "[u32; 2]",
      "layout": null
    },
    "[u32; 3]": {
      "identifier": "",
      "path": "[u32; 3]",
      "layout": null
    },
    "[u32; 4]": {
      "identifier": "",
      "path": "[u32; 4]",
      "layout": null
    },
    "[u64; 2]": {
      "identifier": "",
      "path": "[u64; 2]",
      "layout": null
    },
    "[u64; 3]": {
      "identifier": "",
      "path": "[u64; 3]",
      "layout": null
    },
    "[u64; 4]": {
      "identifier": "",
      "path": "[u64; 4]",
      "layout": null
    },
    "[u8; 16]": {
      "identifier": "",
      "path": "[u8; 16]",
      "layout": null
    },
    "[u8; 45]": {
      "identifier": "",
      "path": "[u8; 45]",
      "layout": null
    },
    "[u8; 6]": {
      "identifier": "",
      "path": "[u8; 6]",
      "layout": null
    },
    "alloc::borrow::Cow<str>": {
      "identifier": "Cow",
      "crate": "alloc",
      "path": "alloc::borrow::Cow<str>",
      "layout": null
    },
    "alloc::sync::Arc<bevy_asset::handle::StrongHandle>": {
      "identifier": "Arc",
      "crate": "alloc",
      "path": "alloc::sync::Arc<bevy_asset::handle::StrongHandle>",
      "layout": null
    },
    "alloc::vec::Vec<bevy_mod_scripting_core::bindings::function::from::Val<bevy_ecs::entity::Entity>>": {
      "identifier": "Vec",
      "crate": "alloc",
      "path": "alloc::vec::Vec<bevy_mod_scripting_core::bindings::function::from::Val<bevy_ecs::entity::Entity>>",
      "generics": [
        {
          "type_id": "bevy_mod_scripting_core::bindings::function::from::Val<bevy_ecs::entity::Entity>",
          "name": "T"
        }
      ],
      "layout": null
    },
    "alloc::vec::Vec<bevy_mod_scripting_core::bindings::function::from::Val<bevy_mod_scripting_core::bindings::query::ScriptQueryResult>>": {
      "identifier": "Vec",
      "crate": "alloc",
      "path": "alloc::vec::Vec<bevy_mod_scripting_core::bindings::function::from::Val<bevy_mod_scripting_core::bindings::query::ScriptQueryResult>>",
      "generics": [
        {
          "type_id": "bevy_mod_scripting_core::bindings::function::from::Val<bevy_mod_scripting_core::bindings::query::ScriptQueryResult>",
          "name": "T"
        }
      ],
      "layout": null
    },
    "alloc::vec::Vec<bevy_mod_scripting_core::bindings::function::from::Val<bevy_mod_scripting_core::docgen::info::FunctionInfo>>": {
      "identifier": "Vec",
      "crate": "alloc",
      "path": "alloc::vec::Vec<bevy_mod_scripting_core::bindings::function::from::Val<bevy_mod_scripting_core::docgen::info::FunctionInfo>>",
      "generics": [
        {
          "type_id": "bevy_mod_scripting_core::bindings::function::from::Val<bevy_mod_scripting_core::docgen::info::FunctionInfo>",
          "name": "T"
        }
      ],
      "layout": null
    },
    "alloc::vec::Vec<bevy_mod_scripting_core::bindings::reference::ReflectReference>": {
      "identifier": "Vec",
      "crate": "alloc",
      "path": "alloc::vec::Vec<bevy_mod_scripting_core::bindings::reference::ReflectReference>",
      "generics": [
        {
          "type_id": "ReflectReference",
          "name": "T"
        }
      ],
      "layout": null
    },
    "alloc::vec::Vec<bevy_mod_scripting_core::docgen::info::FunctionArgInfo>": {
      "identifier": "Vec",
      "crate": "alloc",
      "path": "alloc::vec::Vec<bevy_mod_scripting_core::docgen::info::FunctionArgInfo>",
      "generics": [
        {
          "type_id": "bevy_mod_scripting_core::docgen::info::FunctionArgInfo",
          "name": "T"
        }
      ],
      "layout": null
    },
    "bevy_asset::assets::AssetIndex": {
      "identifier": "AssetIndex",
      "crate": "bevy_asset",
      "path": "bevy_asset::assets::AssetIndex",
      "documentation": " A generational runtime-only identifier for a specific [`Asset`] stored in [`Assets`]. This is optimized for efficient runtime\n usage and is not suitable for identifying assets across app runs.",
      "layout": {
        "kind": "Struct",
        "name": "AssetIndex",
        "fields": [
          {
            "name": "generation",
            "type": "u32"
          },
          {
            "name": "index",
            "type": "u32"
          }
        ]
      }
    },
    "bevy_asset::handle::Handle<()>": {
      "identifier": "Handle",
      "crate": "bevy_asset",
      "path": "bevy_asset::handle::Handle<()>",
      "generics": [
        {
          "type_id": "()",
          "name": "A"
        }
      ],
      "documentation": " A strong or weak handle to a specific [`Asset`]. If a [`Handle`] is [`Handle::Strong`], the [`Asset`] will be kept\n alive until the [`Handle`] is dropped. If a [`Handle`] is [`Handle::Weak`], it does not necessarily reference a live [`Asset`],\n nor will it keep assets alive.\n\n [`Handle`] can be cloned. If a [`Handle::Strong`] is cloned, the referenced [`Asset`] will not be freed until _all_ instances\n of the [`Handle`] are dropped.\n\n [`Handle::Strong`] also provides access to useful [`Asset`] metadata, such as the [`AssetPath`] (if it exists).",
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Strong",
          "fields": [
            {
              "type": "alloc::sync::Arc<bevy_asset::handle::StrongHandle>"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Weak",
          "fields": [
            {
              "type": "bevy_asset::id::AssetId<()>"
            }
          ]
        }
      ]
    },
    "bevy_asset::handle::Handle<bevy_asset::assets::LoadedUntypedAsset>": {
      "identifier": "Handle",
      "crate": "bevy_asset",
      "path": "bevy_asset::handle::Handle<bevy_asset::assets::LoadedUntypedAsset>",
      "generics": [
        {
          "type_id": "TypeId(0xaab38a889af3127605b1e6168583131a)",
          "name": "A"
        }
      ],
      "documentation": " A strong or weak handle to a specific [`Asset`]. If a [`Handle`] is [`Handle::Strong`], the [`Asset`] will be kept\n alive until the [`Handle`] is dropped. If a [`Handle`] is [`Handle::Weak`], it does not necessarily reference a live [`Asset`],\n nor will it keep assets alive.\n\n [`Handle`] can be cloned. If a [`Handle::Strong`] is cloned, the referenced [`Asset`] will not be freed until _all_ instances\n of the [`Handle`] are dropped.\n\n [`Handle::Strong`] also provides access to useful [`Asset`] metadata, such as the [`AssetPath`] (if it exists).",
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Strong",
          "fields": [
            {
              "type": "alloc::sync::Arc<bevy_asset::handle::StrongHandle>"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Weak",
          "fields": [
            {
              "type": "bevy_asset::id::AssetId<bevy_asset::assets::LoadedUntypedAsset>"
            }
          ]
        }
      ]
    },
    "bevy_asset::handle::Handle<bevy_asset::folder::LoadedFolder>": {
      "identifier": "Handle",
      "crate": "bevy_asset",
      "path": "bevy_asset::handle::Handle<bevy_asset::folder::LoadedFolder>",
      "generics": [
        {
          "type_id": "TypeId(0xbae6a1edf252d17a1d593e8aa22f9741)",
          "name": "A"
        }
      ],
      "documentation": " A strong or weak handle to a specific [`Asset`]. If a [`Handle`] is [`Handle::Strong`], the [`Asset`] will be kept\n alive until the [`Handle`] is dropped. If a [`Handle`] is [`Handle::Weak`], it does not necessarily reference a live [`Asset`],\n nor will it keep assets alive.\n\n [`Handle`] can be cloned. If a [`Handle::Strong`] is cloned, the referenced [`Asset`] will not be freed until _all_ instances\n of the [`Handle`] are dropped.\n\n [`Handle::Strong`] also provides access to useful [`Asset`] metadata, such as the [`AssetPath`] (if it exists).",
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Strong",
          "fields": [
            {
              "type": "alloc::sync::Arc<bevy_asset::handle::StrongHandle>"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Weak",
          "fields": [
            {
              "type": "bevy_asset::id::AssetId<bevy_asset::folder::LoadedFolder>"
            }
          ]
        }
      ]
    },
    "bevy_asset::id::AssetId<()>": {
      "identifier": "AssetId",
      "crate": "bevy_asset",
      "path": "bevy_asset::id::AssetId<()>",
      "generics": [
        {
          "type_id": "()",
          "name": "A"
        }
      ],
      "documentation": " A unique runtime-only identifier for an [`Asset`]. This is cheap to [`Copy`]/[`Clone`] and is not directly tied to the\n lifetime of the Asset. This means it _can_ point to an [`Asset`] that no longer exists.\n\n For an identifier tied to the lifetime of an asset, see [`Handle`](`crate::Handle`).\n\n For an \"untyped\" / \"generic-less\" id, see [`UntypedAssetId`].",
      "layout": [
        {
          "kind": "Struct",
          "name": "Index",
          "fields": [
            {
              "name": "index",
              "type": "bevy_asset::assets::AssetIndex"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "Uuid",
          "fields": [
            {
              "name": "uuid",
              "type": "uuid::Uuid"
            }
          ]
        }
      ]
    },
    "bevy_asset::id::AssetId<bevy_asset::assets::LoadedUntypedAsset>": {
      "identifier": "AssetId",
      "crate": "bevy_asset",
      "path": "bevy_asset::id::AssetId<bevy_asset::assets::LoadedUntypedAsset>",
      "generics": [
        {
          "type_id": "TypeId(0xaab38a889af3127605b1e6168583131a)",
          "name": "A"
        }
      ],
      "documentation": " A unique runtime-only identifier for an [`Asset`]. This is cheap to [`Copy`]/[`Clone`] and is not directly tied to the\n lifetime of the Asset. This means it _can_ point to an [`Asset`] that no longer exists.\n\n For an identifier tied to the lifetime of an asset, see [`Handle`](`crate::Handle`).\n\n For an \"untyped\" / \"generic-less\" id, see [`UntypedAssetId`].",
      "layout": [
        {
          "kind": "Struct",
          "name": "Index",
          "fields": [
            {
              "name": "index",
              "type": "bevy_asset::assets::AssetIndex"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "Uuid",
          "fields": [
            {
              "name": "uuid",
              "type": "uuid::Uuid"
            }
          ]
        }
      ]
    },
    "bevy_asset::id::AssetId<bevy_asset::folder::LoadedFolder>": {
      "identifier": "AssetId",
      "crate": "bevy_asset",
      "path": "bevy_asset::id::AssetId<bevy_asset::folder::LoadedFolder>",
      "generics": [
        {
          "type_id": "TypeId(0xbae6a1edf252d17a1d593e8aa22f9741)",
          "name": "A"
        }
      ],
      "documentation": " A unique runtime-only identifier for an [`Asset`]. This is cheap to [`Copy`]/[`Clone`] and is not directly tied to the\n lifetime of the Asset. This means it _can_ point to an [`Asset`] that no longer exists.\n\n For an identifier tied to the lifetime of an asset, see [`Handle`](`crate::Handle`).\n\n For an \"untyped\" / \"generic-less\" id, see [`UntypedAssetId`].",
      "layout": [
        {
          "kind": "Struct",
          "name": "Index",
          "fields": [
            {
              "name": "index",
              "type": "bevy_asset::assets::AssetIndex"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "Uuid",
          "fields": [
            {
              "name": "uuid",
              "type": "uuid::Uuid"
            }
          ]
        }
      ]
    },
    "bevy_asset::path::AssetPath": {
      "identifier": "AssetPath",
      "crate": "bevy_asset",
      "path": "bevy_asset::path::AssetPath",
      "documentation": " Represents a path to an asset in a \"virtual filesystem\".\n\n Asset paths consist of three main parts:\n * [`AssetPath::source`]: The name of the [`AssetSource`](crate::io::AssetSource) to load the asset from.\n     This is optional. If one is not set the default source will be used (which is the `assets` folder by default).\n * [`AssetPath::path`]: The \"virtual filesystem path\" pointing to an asset source file.\n * [`AssetPath::label`]: An optional \"named sub asset\". When assets are loaded, they are\n     allowed to load \"sub assets\" of any type, which are identified by a named \"label\".\n\n Asset paths are generally constructed (and visualized) as strings:\n\n ```no_run\n # use bevy_asset::{Asset, AssetServer, Handle};\n # use bevy_reflect::TypePath;\n #\n # #[derive(Asset, TypePath, Default)]\n # struct Mesh;\n #\n # #[derive(Asset, TypePath, Default)]\n # struct Scene;\n #\n # let asset_server: AssetServer = panic!();\n // This loads the `my_scene.scn` base asset from the default asset source.\n let scene: Handle<Scene> = asset_server.load(\"my_scene.scn\");\n\n // This loads the `PlayerMesh` labeled asset from the `my_scene.scn` base asset in the default asset source.\n let mesh: Handle<Mesh> = asset_server.load(\"my_scene.scn#PlayerMesh\");\n\n // This loads the `my_scene.scn` base asset from a custom 'remote' asset source.\n let scene: Handle<Scene> = asset_server.load(\"remote://my_scene.scn\");\n ```\n\n [`AssetPath`] implements [`From`] for `&'static str`, `&'static Path`, and `&'a String`,\n which allows us to optimize the static cases.\n This means that the common case of `asset_server.load(\"my_scene.scn\")` when it creates and\n clones internal owned [`AssetPaths`](AssetPath).\n This also means that you should use [`AssetPath::parse`] in cases where `&str` is the explicit type.",
      "layout": null
    },
    "bevy_core::name::Name": {
      "identifier": "Name",
      "crate": "bevy_core",
      "path": "bevy_core::name::Name",
      "documentation": " Component used to identify an entity. Stores a hash for faster comparisons.\n\n The hash is eagerly re-computed upon each update to the name.\n\n [`Name`] should not be treated as a globally unique identifier for entities,\n as multiple entities can have the same name.  [`Entity`] should be\n used instead as the default unique identifier.",
      "associated_functions": [
        "bevy_core::name::Name::clone",
        "bevy_core::name::Name::eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Name",
        "fields": [
          {
            "name": "hash",
            "type": "u64"
          },
          {
            "name": "name",
            "type": "alloc::borrow::Cow<str>"
          }
        ]
      }
    },
    "bevy_ecs::component::ComponentId": {
      "identifier": "ComponentId",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::component::ComponentId",
      "documentation": " A value which uniquely identifies the type of a [`Component`] or [`Resource`] within a\n [`World`].\n\n Each time a new `Component` type is registered within a `World` using\n e.g. [`World::register_component`] or [`World::register_component_with_descriptor`]\n or a Resource with e.g. [`World::init_resource`],\n a corresponding `ComponentId` is created to track it.\n\n While the distinction between `ComponentId` and [`TypeId`] may seem superficial, breaking them\n into two separate but related concepts allows components to exist outside of Rust's type system.\n Each Rust type registered as a `Component` will have a corresponding `ComponentId`, but additional\n `ComponentId`s may exist in a `World` to track components which cannot be\n represented as Rust types for scripting or other advanced use-cases.\n\n A `ComponentId` is tightly coupled to its parent `World`. Attempting to use a `ComponentId` from\n one `World` to access the metadata of a `Component` in a different `World` is undefined behavior\n and must not be attempted.\n\n Given a type `T` which implements [`Component`], the `ComponentId` for `T` can be retrieved\n from a `World` using [`World::component_id()`] or via [`Components::component_id()`]. Access\n to the `ComponentId` for a [`Resource`] is available via [`Components::resource_id()`].",
      "associated_functions": [
        "bevy_ecs::component::ComponentId::assert_receiver_is_total_eq",
        "bevy_ecs::component::ComponentId::clone",
        "bevy_ecs::component::ComponentId::eq",
        "bevy_ecs::component::ComponentId::index",
        "bevy_ecs::component::ComponentId::new"
      ],
      "layout": {
        "kind": "TupleStruct",
        "name": "ComponentId",
        "fields": [
          {
            "type": "usize"
          }
        ]
      }
    },
    "bevy_ecs::component::ComponentTicks": {
      "identifier": "ComponentTicks",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::component::ComponentTicks",
      "documentation": " Records when a component or resource was added and when it was last mutably dereferenced (or added).",
      "associated_functions": [
        "bevy_ecs::component::ComponentTicks::clone",
        "bevy_ecs::component::ComponentTicks::is_added",
        "bevy_ecs::component::ComponentTicks::is_changed",
        "bevy_ecs::component::ComponentTicks::new",
        "bevy_ecs::component::ComponentTicks::set_changed"
      ],
      "layout": {
        "kind": "Struct",
        "name": "ComponentTicks",
        "fields": [
          {
            "name": "added",
            "type": "bevy_ecs::component::Tick"
          },
          {
            "name": "changed",
            "type": "bevy_ecs::component::Tick"
          }
        ]
      }
    },
    "bevy_ecs::component::Tick": {
      "identifier": "Tick",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::component::Tick",
      "documentation": " A value that tracks when a system ran relative to other systems.\n This is used to power change detection.\n\n *Note* that a system that hasn't been run yet has a `Tick` of 0.",
      "associated_functions": [
        "bevy_ecs::component::Tick::assert_receiver_is_total_eq",
        "bevy_ecs::component::Tick::clone",
        "bevy_ecs::component::Tick::eq",
        "bevy_ecs::component::Tick::get",
        "bevy_ecs::component::Tick::is_newer_than",
        "bevy_ecs::component::Tick::new",
        "bevy_ecs::component::Tick::set"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Tick",
        "fields": [
          {
            "name": "tick",
            "type": "u32"
          }
        ]
      }
    },
    "bevy_ecs::entity::Entity": {
      "identifier": "Entity",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::entity::Entity",
      "documentation": " Lightweight identifier of an [entity](crate::entity).\n\n The identifier is implemented using a [generational index]: a combination of an index and a generation.\n This allows fast insertion after data removal in an array while minimizing loss of spatial locality.\n\n These identifiers are only valid on the [`World`] it's sourced from. Attempting to use an `Entity` to\n fetch entity components or metadata from a different world will either fail or return unexpected results.\n\n [generational index]: https://lucassardois.medium.com/generational-indices-guide-8e3c5f7fd594\n\n # Stability warning\n For all intents and purposes, `Entity` should be treated as an opaque identifier. The internal bit\n representation is liable to change from release to release as are the behaviors or performance\n characteristics of any of its trait implementations (i.e. `Ord`, `Hash`, etc.). This means that changes in\n `Entity`'s representation, though made readable through various functions on the type, are not considered\n breaking changes under [SemVer].\n\n In particular, directly serializing with `Serialize` and `Deserialize` make zero guarantee of long\n term wire format compatibility. Changes in behavior will cause serialized `Entity` values persisted\n to long term storage (i.e. disk, databases, etc.) will fail to deserialize upon being updated.\n\n # Usage\n\n This data type is returned by iterating a `Query` that has `Entity` as part of its query fetch type parameter ([learn more]).\n It can also be obtained by calling [`EntityCommands::id`] or [`EntityWorldMut::id`].\n\n ```\n # use bevy_ecs::prelude::*;\n # #[derive(Component)]\n # struct SomeComponent;\n fn setup(mut commands: Commands) {\n     // Calling `spawn` returns `EntityCommands`.\n     let entity = commands.spawn(SomeComponent).id();\n }\n\n fn exclusive_system(world: &mut World) {\n     // Calling `spawn` returns `EntityWorldMut`.\n     let entity = world.spawn(SomeComponent).id();\n }\n #\n # bevy_ecs::system::assert_is_system(setup);\n # bevy_ecs::system::assert_is_system(exclusive_system);\n ```\n\n It can be used to refer to a specific entity to apply [`EntityCommands`], or to call [`Query::get`] (or similar methods) to access its components.\n\n ```\n # use bevy_ecs::prelude::*;\n #\n # #[derive(Component)]\n # struct Expired;\n #\n fn dispose_expired_food(mut commands: Commands, query: Query<Entity, With<Expired>>) {\n     for food_entity in &query {\n         commands.entity(food_entity).despawn();\n     }\n }\n #\n # bevy_ecs::system::assert_is_system(dispose_expired_food);\n ```\n\n [learn more]: crate::system::Query#entity-id-access\n [`EntityCommands::id`]: crate::system::EntityCommands::id\n [`EntityWorldMut::id`]: crate::world::EntityWorldMut::id\n [`EntityCommands`]: crate::system::EntityCommands\n [`Query::get`]: crate::system::Query::get\n [`World`]: crate::world::World\n [SemVer]: https://semver.org/",
      "associated_functions": [
        "bevy_ecs::entity::Entity::clone",
        "bevy_ecs::entity::Entity::eq",
        "bevy_ecs::entity::Entity::from_bits",
        "bevy_ecs::entity::Entity::from_raw",
        "bevy_ecs::entity::Entity::generation",
        "bevy_ecs::entity::Entity::index",
        "bevy_ecs::entity::Entity::to_bits"
      ],
      "layout": null
    },
    "bevy_ecs::entity::hash::EntityHash": {
      "identifier": "EntityHash",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::entity::hash::EntityHash",
      "documentation": " A [`BuildHasher`] that results in a [`EntityHasher`].",
      "associated_functions": [
        "bevy_ecs::entity::hash::EntityHash::clone"
      ],
      "layout": {
        "kind": "Struct",
        "name": "EntityHash"
      }
    },
    "bevy_ecs::identifier::Identifier": {
      "identifier": "Identifier",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::identifier::Identifier",
      "documentation": " A unified identifier for all entity and similar IDs.\n\n Has the same size as a `u64` integer, but the layout is split between a 32-bit low\n segment, a 31-bit high segment, and the significant bit reserved as type flags to denote\n entity kinds.",
      "associated_functions": [
        "bevy_ecs::identifier::Identifier::clone",
        "bevy_ecs::identifier::Identifier::eq",
        "bevy_ecs::identifier::Identifier::from_bits",
        "bevy_ecs::identifier::Identifier::low",
        "bevy_ecs::identifier::Identifier::masked_high",
        "bevy_ecs::identifier::Identifier::to_bits"
      ],
      "layout": null
    },
    "bevy_ecs::removal_detection::RemovedComponentEntity": {
      "identifier": "RemovedComponentEntity",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::removal_detection::RemovedComponentEntity",
      "documentation": " Wrapper around [`Entity`] for [`RemovedComponents`].\n Internally, `RemovedComponents` uses these as an `Events<RemovedComponentEntity>`.",
      "associated_functions": [
        "bevy_ecs::removal_detection::RemovedComponentEntity::clone"
      ],
      "layout": {
        "kind": "TupleStruct",
        "name": "RemovedComponentEntity",
        "fields": [
          {
            "type": "bevy_ecs::entity::Entity"
          }
        ]
      }
    },
    "bevy_ecs::system::system_registry::SystemIdMarker": {
      "identifier": "SystemIdMarker",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::system::system_registry::SystemIdMarker",
      "documentation": " Marker [`Component`](bevy_ecs::component::Component) for identifying [`SystemId`] [`Entity`]s.",
      "layout": {
        "kind": "Struct",
        "name": "SystemIdMarker"
      }
    },
    "bevy_ecs::world::component_constants::OnAdd": {
      "identifier": "OnAdd",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::world::component_constants::OnAdd",
      "documentation": " Trigger emitted when a component is added to an entity. See [`crate::component::ComponentHooks::on_add`]\n for more information.",
      "layout": {
        "kind": "Struct",
        "name": "OnAdd"
      }
    },
    "bevy_ecs::world::component_constants::OnInsert": {
      "identifier": "OnInsert",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::world::component_constants::OnInsert",
      "documentation": " Trigger emitted when a component is inserted onto an entity. See [`crate::component::ComponentHooks::on_insert`]\n for more information.",
      "layout": {
        "kind": "Struct",
        "name": "OnInsert"
      }
    },
    "bevy_ecs::world::component_constants::OnRemove": {
      "identifier": "OnRemove",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::world::component_constants::OnRemove",
      "documentation": " Trigger emitted when a component is removed from an entity. See [`crate::component::ComponentHooks::on_remove`]\n for more information.",
      "layout": {
        "kind": "Struct",
        "name": "OnRemove"
      }
    },
    "bevy_ecs::world::component_constants::OnReplace": {
      "identifier": "OnReplace",
      "crate": "bevy_ecs",
      "path": "bevy_ecs::world::component_constants::OnReplace",
      "documentation": " Trigger emitted when a component is replaced on an entity. See [`crate::component::ComponentHooks::on_replace`]\n for more information.",
      "layout": {
        "kind": "Struct",
        "name": "OnReplace"
      }
    },
    "bevy_hierarchy::components::children::Children": {
      "identifier": "Children",
      "crate": "bevy_hierarchy",
      "path": "bevy_hierarchy::components::children::Children",
      "documentation": " Contains references to the child entities of this entity.\n\n Each child must contain a [`Parent`] component that points back to this entity.\n This component rarely needs to be created manually,\n consider using higher level utilities like [`BuildChildren::with_children`]\n which are safer and easier to use.\n\n See [`HierarchyQueryExt`] for hierarchy related methods on [`Query`].\n\n [`HierarchyQueryExt`]: crate::query_extension::HierarchyQueryExt\n [`Query`]: bevy_ecs::system::Query\n [`Parent`]: crate::components::parent::Parent\n [`BuildChildren::with_children`]: crate::child_builder::BuildChildren::with_children",
      "associated_functions": [
        "bevy_hierarchy::components::children::Children::swap"
      ],
      "layout": {
        "kind": "TupleStruct",
        "name": "Children",
        "fields": [
          {
            "type": "smallvec::SmallVec<[bevy_ecs::entity::Entity; 8]>"
          }
        ]
      }
    },
    "bevy_hierarchy::components::parent::Parent": {
      "identifier": "Parent",
      "crate": "bevy_hierarchy",
      "path": "bevy_hierarchy::components::parent::Parent",
      "documentation": " Holds a reference to the parent entity of this entity.\n This component should only be present on entities that actually have a parent entity.\n\n Parent entity must have this entity stored in its [`Children`] component.\n It is hard to set up parent/child relationships manually,\n consider using higher level utilities like [`BuildChildren::with_children`].\n\n See [`HierarchyQueryExt`] for hierarchy related methods on [`Query`].\n\n [`HierarchyQueryExt`]: crate::query_extension::HierarchyQueryExt\n [`Query`]: bevy_ecs::system::Query\n [`Children`]: super::children::Children\n [`BuildChildren::with_children`]: crate::child_builder::BuildChildren::with_children",
      "associated_functions": [
        "bevy_hierarchy::components::parent::Parent::assert_receiver_is_total_eq",
        "bevy_hierarchy::components::parent::Parent::eq",
        "bevy_hierarchy::components::parent::Parent::get"
      ],
      "layout": {
        "kind": "TupleStruct",
        "name": "Parent",
        "fields": [
          {
            "type": "bevy_ecs::entity::Entity"
          }
        ]
      }
    },
    "bevy_hierarchy::events::HierarchyEvent": {
      "identifier": "HierarchyEvent",
      "crate": "bevy_hierarchy",
      "path": "bevy_hierarchy::events::HierarchyEvent",
      "documentation": " An [`Event`] that is fired whenever there is a change in the world's hierarchy.\n\n [`Event`]: bevy_ecs::event::Event",
      "associated_functions": [
        "bevy_hierarchy::events::HierarchyEvent::assert_receiver_is_total_eq",
        "bevy_hierarchy::events::HierarchyEvent::clone",
        "bevy_hierarchy::events::HierarchyEvent::eq"
      ],
      "layout": [
        {
          "kind": "Struct",
          "name": "ChildAdded",
          "fields": [
            {
              "name": "child",
              "type": "bevy_ecs::entity::Entity"
            },
            {
              "name": "parent",
              "type": "bevy_ecs::entity::Entity"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "ChildRemoved",
          "fields": [
            {
              "name": "child",
              "type": "bevy_ecs::entity::Entity"
            },
            {
              "name": "parent",
              "type": "bevy_ecs::entity::Entity"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "ChildMoved",
          "fields": [
            {
              "name": "child",
              "type": "bevy_ecs::entity::Entity"
            },
            {
              "name": "previous_parent",
              "type": "bevy_ecs::entity::Entity"
            },
            {
              "name": "new_parent",
              "type": "bevy_ecs::entity::Entity"
            }
          ]
        }
      ]
    },
    "bevy_input::ButtonState": {
      "identifier": "ButtonState",
      "crate": "bevy_input",
      "path": "bevy_input::ButtonState",
      "documentation": " The current \"press\" state of an element",
      "associated_functions": [
        "bevy_input::ButtonState::assert_receiver_is_total_eq",
        "bevy_input::ButtonState::clone",
        "bevy_input::ButtonState::eq",
        "bevy_input::ButtonState::is_pressed"
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "Pressed"
        },
        {
          "kind": "Unit",
          "name": "Released"
        }
      ]
    },
    "bevy_input::axis::Axis<bevy_input::gamepad::GamepadInput>": {
      "identifier": "Axis",
      "crate": "bevy_input",
      "path": "bevy_input::axis::Axis<bevy_input::gamepad::GamepadInput>",
      "generics": [
        {
          "type_id": "bevy_input::gamepad::GamepadInput",
          "name": "T"
        }
      ],
      "documentation": " Stores the position data of the input devices of type `T`.\n\n The values are stored as `f32`s, using [`Axis::set`].\n Use [`Axis::get`] to retrieve the value clamped between [`Axis::MIN`] and [`Axis::MAX`]\n inclusive, or unclamped using [`Axis::get_unclamped`].",
      "layout": {
        "kind": "Struct",
        "name": "Axis",
        "fields": [
          {
            "name": "axis_data",
            "type": "bevy_utils::hashbrown::HashMap<bevy_input::gamepad::GamepadInput, f32, bevy_utils::hashbrown::hash_map::DefaultHashBuilder>"
          }
        ]
      }
    },
    "bevy_input::button_input::ButtonInput<bevy_input::gamepad::GamepadButton>": {
      "identifier": "ButtonInput",
      "crate": "bevy_input",
      "path": "bevy_input::button_input::ButtonInput<bevy_input::gamepad::GamepadButton>",
      "generics": [
        {
          "type_id": "bevy_input::gamepad::GamepadButton",
          "name": "T"
        }
      ],
      "documentation": " A \"press-able\" input of type `T`.\n\n ## Usage\n\n This type can be used as a resource to keep the current state of an input, by reacting to\n events from the input. For a given input value:\n\n * [`ButtonInput::pressed`] will return `true` between a press and a release event.\n * [`ButtonInput::just_pressed`] will return `true` for one frame after a press event.\n * [`ButtonInput::just_released`] will return `true` for one frame after a release event.\n\n ## Multiple systems\n\n In case multiple systems are checking for [`ButtonInput::just_pressed`] or [`ButtonInput::just_released`]\n but only one should react, for example when modifying a\n [`Resource`], you should consider clearing the input state, either by:\n\n * Using [`ButtonInput::clear_just_pressed`] or [`ButtonInput::clear_just_released`] instead.\n * Calling [`ButtonInput::clear`] or [`ButtonInput::reset`] immediately after the state change.\n\n ## Performance\n\n For all operations, the following conventions are used:\n - **n** is the number of stored inputs.\n - **m** is the number of input arguments passed to the method.\n - **\\***-suffix denotes an amortized cost.\n - **~**-suffix denotes an expected cost.\n\n See Rust's [std::collections doc on performance](https://doc.rust-lang.org/std/collections/index.html#performance) for more details on the conventions used here.\n\n | **[`ButtonInput`] operations**          | **Computational complexity** |\n |-----------------------------------|------------------------------------|\n | [`ButtonInput::any_just_pressed`]       | *O*(m)~                      |\n | [`ButtonInput::any_just_released`]      | *O*(m)~                      |\n | [`ButtonInput::any_pressed`]            | *O*(m)~                      |\n | [`ButtonInput::get_just_pressed`]       | *O*(n)                       |\n | [`ButtonInput::get_just_released`]      | *O*(n)                       |\n | [`ButtonInput::get_pressed`]            | *O*(n)                       |\n | [`ButtonInput::just_pressed`]           | *O*(1)~                      |\n | [`ButtonInput::just_released`]          | *O*(1)~                      |\n | [`ButtonInput::pressed`]                | *O*(1)~                      |\n | [`ButtonInput::press`]                  | *O*(1)~*                     |\n | [`ButtonInput::release`]                | *O*(1)~*                     |\n | [`ButtonInput::release_all`]            | *O*(n)~*                     |\n | [`ButtonInput::clear_just_pressed`]     | *O*(1)~                      |\n | [`ButtonInput::clear_just_released`]    | *O*(1)~                      |\n | [`ButtonInput::reset_all`]              | *O*(n)                       |\n | [`ButtonInput::clear`]                  | *O*(n)                       |\n\n ## Window focus\n\n `ButtonInput<KeyCode>` is tied to window focus. For example, if the user holds a button\n while the window loses focus, [`ButtonInput::just_released`] will be triggered. Similarly if the window\n regains focus, [`ButtonInput::just_pressed`] will be triggered.\n\n `ButtonInput<GamepadButton>` is independent of window focus.\n\n ## Examples\n\n Reading and checking against the current set of pressed buttons:\n ```no_run\n # use bevy_app::{App, NoopPluginGroup as DefaultPlugins, Update};\n # use bevy_ecs::{prelude::{IntoSystemConfigs, Res, Resource, resource_changed}, schedule::Condition};\n # use bevy_input::{ButtonInput, prelude::{KeyCode, MouseButton}};\n\n fn main() {\n     App::new()\n         .add_plugins(DefaultPlugins)\n         .add_systems(\n             Update,\n             print_mouse.run_if(resource_changed::<ButtonInput<MouseButton>>),\n         )\n         .add_systems(\n             Update,\n             print_keyboard.run_if(resource_changed::<ButtonInput<KeyCode>>),\n         )\n         .run();\n }\n\n fn print_mouse(mouse: Res<ButtonInput<MouseButton>>) {\n     println!(\"Mouse: {:?}\", mouse.get_pressed().collect::<Vec<_>>());\n }\n\n fn print_keyboard(keyboard: Res<ButtonInput<KeyCode>>) {\n     if keyboard.any_pressed([KeyCode::ControlLeft, KeyCode::ControlRight])\n         && keyboard.any_pressed([KeyCode::AltLeft, KeyCode::AltRight])\n         && keyboard.any_pressed([KeyCode::ShiftLeft, KeyCode::ShiftRight])\n         && keyboard.any_pressed([KeyCode::SuperLeft, KeyCode::SuperRight])\n         && keyboard.pressed(KeyCode::KeyL)\n     {\n         println!(\"On Windows this opens LinkedIn.\");\n     } else {\n         println!(\"keyboard: {:?}\", keyboard.get_pressed().collect::<Vec<_>>());\n     }\n }\n ```\n\n ## Note\n\n When adding this resource for a new input type, you should:\n\n * Call the [`ButtonInput::press`] method for each press event.\n * Call the [`ButtonInput::release`] method for each release event.\n * Call the [`ButtonInput::clear`] method at each frame start, before processing events.\n\n Note: Calling `clear` from a [`ResMut`] will trigger change detection.\n It may be preferable to use [`DetectChangesMut::bypass_change_detection`]\n to avoid causing the resource to always be marked as changed.\n\n [`ResMut`]: bevy_ecs::system::ResMut\n [`DetectChangesMut::bypass_change_detection`]: bevy_ecs::change_detection::DetectChangesMut::bypass_change_detection",
      "layout": {
        "kind": "Struct",
        "name": "ButtonInput",
        "fields": [
          {
            "name": "pressed",
            "type": "bevy_utils::hashbrown::HashSet<bevy_input::gamepad::GamepadButton, bevy_utils::hashbrown::hash_map::DefaultHashBuilder>"
          },
          {
            "name": "just_pressed",
            "type": "bevy_utils::hashbrown::HashSet<bevy_input::gamepad::GamepadButton, bevy_utils::hashbrown::hash_map::DefaultHashBuilder>"
          },
          {
            "name": "just_released",
            "type": "bevy_utils::hashbrown::HashSet<bevy_input::gamepad::GamepadButton, bevy_utils::hashbrown::hash_map::DefaultHashBuilder>"
          }
        ]
      }
    },
    "bevy_input::gamepad::AxisSettings": {
      "identifier": "AxisSettings",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::AxisSettings",
      "documentation": " Settings for a [`GamepadAxis`].\n\n It is used inside the [`GamepadSettings`] to define the sensitivity range and\n threshold for an axis.\n Values that are higher than `livezone_upperbound` will be rounded up to 1.0.\n Values that are lower than `livezone_lowerbound` will be rounded down to -1.0.\n Values that are in-between `deadzone_lowerbound` and `deadzone_upperbound` will be rounded\n to 0.0.\n Otherwise, values will not be rounded.\n\n The valid range is `[-1.0, 1.0]`.",
      "associated_functions": [
        "bevy_input::gamepad::AxisSettings::clamp",
        "bevy_input::gamepad::AxisSettings::clone",
        "bevy_input::gamepad::AxisSettings::deadzone_lowerbound",
        "bevy_input::gamepad::AxisSettings::deadzone_upperbound",
        "bevy_input::gamepad::AxisSettings::eq",
        "bevy_input::gamepad::AxisSettings::filter",
        "bevy_input::gamepad::AxisSettings::livezone_lowerbound",
        "bevy_input::gamepad::AxisSettings::livezone_upperbound",
        "bevy_input::gamepad::AxisSettings::set_deadzone_lowerbound",
        "bevy_input::gamepad::AxisSettings::set_deadzone_upperbound",
        "bevy_input::gamepad::AxisSettings::set_livezone_lowerbound",
        "bevy_input::gamepad::AxisSettings::set_livezone_upperbound",
        "bevy_input::gamepad::AxisSettings::set_threshold",
        "bevy_input::gamepad::AxisSettings::threshold"
      ],
      "layout": {
        "kind": "Struct",
        "name": "AxisSettings",
        "fields": [
          {
            "name": "livezone_upperbound",
            "type": "f32"
          },
          {
            "name": "deadzone_upperbound",
            "type": "f32"
          },
          {
            "name": "deadzone_lowerbound",
            "type": "f32"
          },
          {
            "name": "livezone_lowerbound",
            "type": "f32"
          },
          {
            "name": "threshold",
            "type": "f32"
          }
        ]
      }
    },
    "bevy_input::gamepad::ButtonAxisSettings": {
      "identifier": "ButtonAxisSettings",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::ButtonAxisSettings",
      "documentation": " Settings for a [`GamepadButton`].\n\n It is used inside the [`GamepadSettings`] to define the sensitivity range and\n threshold for a button axis.\n\n ## Logic\n\n - Values that are higher than or equal to `high` will be rounded to 1.0.\n - Values that are lower than or equal to `low` will be rounded to 0.0.\n - Otherwise, values will not be rounded.\n\n The valid range is from 0.0 to 1.0, inclusive.",
      "associated_functions": [
        "bevy_input::gamepad::ButtonAxisSettings::clone",
        "bevy_input::gamepad::ButtonAxisSettings::filter"
      ],
      "layout": {
        "kind": "Struct",
        "name": "ButtonAxisSettings",
        "fields": [
          {
            "name": "high",
            "type": "f32"
          },
          {
            "name": "low",
            "type": "f32"
          },
          {
            "name": "threshold",
            "type": "f32"
          }
        ]
      }
    },
    "bevy_input::gamepad::ButtonSettings": {
      "identifier": "ButtonSettings",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::ButtonSettings",
      "documentation": " Manages settings for gamepad buttons.\n\n It is used inside [`GamepadSettings`] to define the threshold for a [`GamepadButton`]\n to be considered pressed or released. A button is considered pressed if the `press_threshold`\n value is surpassed and released if the `release_threshold` value is undercut.\n\n Allowed values: `0.0 <= ``release_threshold`` <= ``press_threshold`` <= 1.0`",
      "associated_functions": [
        "bevy_input::gamepad::ButtonSettings::clone",
        "bevy_input::gamepad::ButtonSettings::eq",
        "bevy_input::gamepad::ButtonSettings::is_pressed",
        "bevy_input::gamepad::ButtonSettings::is_released",
        "bevy_input::gamepad::ButtonSettings::press_threshold",
        "bevy_input::gamepad::ButtonSettings::release_threshold",
        "bevy_input::gamepad::ButtonSettings::set_press_threshold",
        "bevy_input::gamepad::ButtonSettings::set_release_threshold"
      ],
      "layout": {
        "kind": "Struct",
        "name": "ButtonSettings",
        "fields": [
          {
            "name": "press_threshold",
            "type": "f32"
          },
          {
            "name": "release_threshold",
            "type": "f32"
          }
        ]
      }
    },
    "bevy_input::gamepad::Gamepad": {
      "identifier": "Gamepad",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::Gamepad",
      "documentation": " Stores a connected gamepad's metadata such as the name and its [`GamepadButton`] and [`GamepadAxis`].\n\n An entity with this component is spawned automatically after [`GamepadConnectionEvent`]\n and updated by [`gamepad_event_processing_system`].\n\n See also [`GamepadSettings`] for configuration.\n\n # Examples\n\n ```\n # use bevy_input::gamepad::{Gamepad, GamepadAxis, GamepadButton};\n # use bevy_ecs::system::Query;\n # use bevy_core::Name;\n #\n fn gamepad_usage_system(gamepads: Query<(&Name, &Gamepad)>) {\n     for (name, gamepad) in &gamepads {\n         println!(\"{name}\");\n\n         if gamepad.just_pressed(GamepadButton::North) {\n             println!(\"{} just pressed North\", name)\n         }\n\n         if let Some(left_stick_x) = gamepad.get(GamepadAxis::LeftStickX)  {\n             println!(\"left stick X: {}\", left_stick_x)\n         }\n     }\n }\n ```",
      "associated_functions": [
        "bevy_input::gamepad::Gamepad::dpad",
        "bevy_input::gamepad::Gamepad::just_pressed",
        "bevy_input::gamepad::Gamepad::just_released",
        "bevy_input::gamepad::Gamepad::left_stick",
        "bevy_input::gamepad::Gamepad::pressed",
        "bevy_input::gamepad::Gamepad::product_id",
        "bevy_input::gamepad::Gamepad::right_stick",
        "bevy_input::gamepad::Gamepad::vendor_id"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Gamepad",
        "fields": [
          {
            "name": "vendor_id",
            "type": "core::option::Option<u16>"
          },
          {
            "name": "product_id",
            "type": "core::option::Option<u16>"
          },
          {
            "name": "digital",
            "type": "bevy_input::button_input::ButtonInput<bevy_input::gamepad::GamepadButton>"
          },
          {
            "name": "analog",
            "type": "bevy_input::axis::Axis<bevy_input::gamepad::GamepadInput>"
          }
        ]
      }
    },
    "bevy_input::gamepad::GamepadAxis": {
      "identifier": "GamepadAxis",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::GamepadAxis",
      "documentation": " Represents gamepad input types that are mapped in the range [-1.0, 1.0]\n\n ## Usage\n\n This is used to determine which axis has changed its value when receiving a\n gamepad axis event. It is also used in the [`Gamepad`] component.",
      "associated_functions": [
        "bevy_input::gamepad::GamepadAxis::assert_receiver_is_total_eq",
        "bevy_input::gamepad::GamepadAxis::clone",
        "bevy_input::gamepad::GamepadAxis::eq"
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "LeftStickX"
        },
        {
          "kind": "Unit",
          "name": "LeftStickY"
        },
        {
          "kind": "Unit",
          "name": "LeftZ"
        },
        {
          "kind": "Unit",
          "name": "RightStickX"
        },
        {
          "kind": "Unit",
          "name": "RightStickY"
        },
        {
          "kind": "Unit",
          "name": "RightZ"
        },
        {
          "kind": "TupleStruct",
          "name": "Other",
          "fields": [
            {
              "type": "u8"
            }
          ]
        }
      ]
    },
    "bevy_input::gamepad::GamepadAxisChangedEvent": {
      "identifier": "GamepadAxisChangedEvent",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::GamepadAxisChangedEvent",
      "documentation": " [`GamepadAxis`] event triggered by an analog state change",
      "associated_functions": [
        "bevy_input::gamepad::GamepadAxisChangedEvent::clone",
        "bevy_input::gamepad::GamepadAxisChangedEvent::eq",
        "bevy_input::gamepad::GamepadAxisChangedEvent::new"
      ],
      "layout": {
        "kind": "Struct",
        "name": "GamepadAxisChangedEvent",
        "fields": [
          {
            "name": "entity",
            "type": "bevy_ecs::entity::Entity"
          },
          {
            "name": "axis",
            "type": "bevy_input::gamepad::GamepadAxis"
          },
          {
            "name": "value",
            "type": "f32"
          }
        ]
      }
    },
    "bevy_input::gamepad::GamepadButton": {
      "identifier": "GamepadButton",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::GamepadButton",
      "documentation": " Represents gamepad input types that are mapped in the range [0.0, 1.0].\n\n ## Usage\n\n This is used to determine which button has changed its value when receiving gamepad button events\n It is also used in the [`Gamepad`] component.",
      "associated_functions": [
        "bevy_input::gamepad::GamepadButton::assert_receiver_is_total_eq",
        "bevy_input::gamepad::GamepadButton::clone",
        "bevy_input::gamepad::GamepadButton::eq"
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "South"
        },
        {
          "kind": "Unit",
          "name": "East"
        },
        {
          "kind": "Unit",
          "name": "North"
        },
        {
          "kind": "Unit",
          "name": "West"
        },
        {
          "kind": "Unit",
          "name": "C"
        },
        {
          "kind": "Unit",
          "name": "Z"
        },
        {
          "kind": "Unit",
          "name": "LeftTrigger"
        },
        {
          "kind": "Unit",
          "name": "LeftTrigger2"
        },
        {
          "kind": "Unit",
          "name": "RightTrigger"
        },
        {
          "kind": "Unit",
          "name": "RightTrigger2"
        },
        {
          "kind": "Unit",
          "name": "Select"
        },
        {
          "kind": "Unit",
          "name": "Start"
        },
        {
          "kind": "Unit",
          "name": "Mode"
        },
        {
          "kind": "Unit",
          "name": "LeftThumb"
        },
        {
          "kind": "Unit",
          "name": "RightThumb"
        },
        {
          "kind": "Unit",
          "name": "DPadUp"
        },
        {
          "kind": "Unit",
          "name": "DPadDown"
        },
        {
          "kind": "Unit",
          "name": "DPadLeft"
        },
        {
          "kind": "Unit",
          "name": "DPadRight"
        },
        {
          "kind": "TupleStruct",
          "name": "Other",
          "fields": [
            {
              "type": "u8"
            }
          ]
        }
      ]
    },
    "bevy_input::gamepad::GamepadButtonChangedEvent": {
      "identifier": "GamepadButtonChangedEvent",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::GamepadButtonChangedEvent",
      "documentation": " [`GamepadButton`] event triggered by an analog state change",
      "associated_functions": [
        "bevy_input::gamepad::GamepadButtonChangedEvent::clone",
        "bevy_input::gamepad::GamepadButtonChangedEvent::eq",
        "bevy_input::gamepad::GamepadButtonChangedEvent::new"
      ],
      "layout": {
        "kind": "Struct",
        "name": "GamepadButtonChangedEvent",
        "fields": [
          {
            "name": "entity",
            "type": "bevy_ecs::entity::Entity"
          },
          {
            "name": "button",
            "type": "bevy_input::gamepad::GamepadButton"
          },
          {
            "name": "state",
            "type": "bevy_input::ButtonState"
          },
          {
            "name": "value",
            "type": "f32"
          }
        ]
      }
    },
    "bevy_input::gamepad::GamepadButtonStateChangedEvent": {
      "identifier": "GamepadButtonStateChangedEvent",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::GamepadButtonStateChangedEvent",
      "documentation": " [`GamepadButton`] event triggered by a digital state change",
      "associated_functions": [
        "bevy_input::gamepad::GamepadButtonStateChangedEvent::assert_receiver_is_total_eq",
        "bevy_input::gamepad::GamepadButtonStateChangedEvent::clone",
        "bevy_input::gamepad::GamepadButtonStateChangedEvent::eq",
        "bevy_input::gamepad::GamepadButtonStateChangedEvent::new"
      ],
      "layout": {
        "kind": "Struct",
        "name": "GamepadButtonStateChangedEvent",
        "fields": [
          {
            "name": "entity",
            "type": "bevy_ecs::entity::Entity"
          },
          {
            "name": "button",
            "type": "bevy_input::gamepad::GamepadButton"
          },
          {
            "name": "state",
            "type": "bevy_input::ButtonState"
          }
        ]
      }
    },
    "bevy_input::gamepad::GamepadConnection": {
      "identifier": "GamepadConnection",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::GamepadConnection",
      "documentation": " The connection status of a gamepad.",
      "associated_functions": [
        "bevy_input::gamepad::GamepadConnection::clone",
        "bevy_input::gamepad::GamepadConnection::eq"
      ],
      "layout": [
        {
          "kind": "Struct",
          "name": "Connected",
          "fields": [
            {
              "name": "name",
              "type": "String"
            },
            {
              "name": "vendor_id",
              "type": "core::option::Option<u16>"
            },
            {
              "name": "product_id",
              "type": "core::option::Option<u16>"
            }
          ]
        },
        {
          "kind": "Unit",
          "name": "Disconnected"
        }
      ]
    },
    "bevy_input::gamepad::GamepadConnectionEvent": {
      "identifier": "GamepadConnectionEvent",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::GamepadConnectionEvent",
      "documentation": " A Gamepad connection event. Created when a connection to a gamepad\n is established and when a gamepad is disconnected.",
      "associated_functions": [
        "bevy_input::gamepad::GamepadConnectionEvent::clone",
        "bevy_input::gamepad::GamepadConnectionEvent::connected",
        "bevy_input::gamepad::GamepadConnectionEvent::disconnected",
        "bevy_input::gamepad::GamepadConnectionEvent::eq",
        "bevy_input::gamepad::GamepadConnectionEvent::new"
      ],
      "layout": {
        "kind": "Struct",
        "name": "GamepadConnectionEvent",
        "fields": [
          {
            "name": "gamepad",
            "type": "bevy_ecs::entity::Entity"
          },
          {
            "name": "connection",
            "type": "bevy_input::gamepad::GamepadConnection"
          }
        ]
      }
    },
    "bevy_input::gamepad::GamepadEvent": {
      "identifier": "GamepadEvent",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::GamepadEvent",
      "documentation": " A gamepad event.\n\n This event type is used over the [`GamepadConnectionEvent`],\n [`GamepadButtonChangedEvent`] and [`GamepadAxisChangedEvent`] when\n the in-frame relative ordering of events is important.\n\n This event is produced by `bevy_input`",
      "associated_functions": [
        "bevy_input::gamepad::GamepadEvent::clone",
        "bevy_input::gamepad::GamepadEvent::eq"
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Connection",
          "fields": [
            {
              "type": "bevy_input::gamepad::GamepadConnectionEvent"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Button",
          "fields": [
            {
              "type": "bevy_input::gamepad::GamepadButtonChangedEvent"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Axis",
          "fields": [
            {
              "type": "bevy_input::gamepad::GamepadAxisChangedEvent"
            }
          ]
        }
      ]
    },
    "bevy_input::gamepad::GamepadInput": {
      "identifier": "GamepadInput",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::GamepadInput",
      "documentation": " Encapsulation over [`GamepadAxis`] and [`GamepadButton`]",
      "associated_functions": [
        "bevy_input::gamepad::GamepadInput::assert_receiver_is_total_eq",
        "bevy_input::gamepad::GamepadInput::clone",
        "bevy_input::gamepad::GamepadInput::eq"
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Axis",
          "fields": [
            {
              "type": "bevy_input::gamepad::GamepadAxis"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Button",
          "fields": [
            {
              "type": "bevy_input::gamepad::GamepadButton"
            }
          ]
        }
      ]
    },
    "bevy_input::gamepad::GamepadRumbleIntensity": {
      "identifier": "GamepadRumbleIntensity",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::GamepadRumbleIntensity",
      "documentation": " The intensity at which a gamepad's force-feedback motors may rumble.",
      "associated_functions": [
        "bevy_input::gamepad::GamepadRumbleIntensity::clone",
        "bevy_input::gamepad::GamepadRumbleIntensity::eq",
        "bevy_input::gamepad::GamepadRumbleIntensity::strong_motor",
        "bevy_input::gamepad::GamepadRumbleIntensity::weak_motor"
      ],
      "layout": {
        "kind": "Struct",
        "name": "GamepadRumbleIntensity",
        "fields": [
          {
            "name": "strong_motor",
            "type": "f32"
          },
          {
            "name": "weak_motor",
            "type": "f32"
          }
        ]
      }
    },
    "bevy_input::gamepad::GamepadRumbleRequest": {
      "identifier": "GamepadRumbleRequest",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::GamepadRumbleRequest",
      "documentation": " An event that controls force-feedback rumbling of a [`Gamepad`] [`entity`](Entity).\n\n # Notes\n\n Does nothing if the gamepad or platform does not support rumble.\n\n # Example\n\n ```\n # use bevy_input::gamepad::{Gamepad, GamepadRumbleRequest, GamepadRumbleIntensity};\n # use bevy_ecs::prelude::{EventWriter, Res, Query, Entity, With};\n # use bevy_utils::Duration;\n fn rumble_gamepad_system(\n     mut rumble_requests: EventWriter<GamepadRumbleRequest>,\n     gamepads: Query<Entity, With<Gamepad>>,\n ) {\n     for entity in gamepads.iter() {\n         rumble_requests.send(GamepadRumbleRequest::Add {\n             gamepad: entity,\n             intensity: GamepadRumbleIntensity::MAX,\n             duration: Duration::from_secs_f32(0.5),\n         });\n     }\n }\n ```",
      "associated_functions": [
        "bevy_input::gamepad::GamepadRumbleRequest::clone",
        "bevy_input::gamepad::GamepadRumbleRequest::gamepad"
      ],
      "layout": [
        {
          "kind": "Struct",
          "name": "Add",
          "fields": [
            {
              "name": "duration",
              "type": "bevy_utils::Duration"
            },
            {
              "name": "intensity",
              "type": "bevy_input::gamepad::GamepadRumbleIntensity"
            },
            {
              "name": "gamepad",
              "type": "bevy_ecs::entity::Entity"
            }
          ]
        },
        {
          "kind": "Struct",
          "name": "Stop",
          "fields": [
            {
              "name": "gamepad",
              "type": "bevy_ecs::entity::Entity"
            }
          ]
        }
      ]
    },
    "bevy_input::gamepad::GamepadSettings": {
      "identifier": "GamepadSettings",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::GamepadSettings",
      "documentation": " Gamepad settings component.\n\n ## Usage\n\n It is used to create a `bevy` component that stores the settings of [`GamepadButton`] and [`GamepadAxis`] in [`Gamepad`].\n If no user defined [`ButtonSettings`], [`AxisSettings`], or [`ButtonAxisSettings`]\n are defined, the default settings of each are used as a fallback accordingly.\n\n ## Note\n\n The [`GamepadSettings`] are used to determine when raw gamepad events\n should register. Events that don't meet the change thresholds defined in [`GamepadSettings`]\n will not register. To modify these settings, mutate the corresponding component.",
      "associated_functions": [
        "bevy_input::gamepad::GamepadSettings::clone"
      ],
      "layout": {
        "kind": "Struct",
        "name": "GamepadSettings",
        "fields": [
          {
            "name": "default_button_settings",
            "type": "bevy_input::gamepad::ButtonSettings"
          },
          {
            "name": "default_axis_settings",
            "type": "bevy_input::gamepad::AxisSettings"
          },
          {
            "name": "default_button_axis_settings",
            "type": "bevy_input::gamepad::ButtonAxisSettings"
          },
          {
            "name": "button_settings",
            "type": "bevy_utils::hashbrown::HashMap<bevy_input::gamepad::GamepadButton, bevy_input::gamepad::ButtonSettings, bevy_utils::hashbrown::hash_map::DefaultHashBuilder>"
          },
          {
            "name": "axis_settings",
            "type": "bevy_utils::hashbrown::HashMap<bevy_input::gamepad::GamepadAxis, bevy_input::gamepad::AxisSettings, bevy_utils::hashbrown::hash_map::DefaultHashBuilder>"
          },
          {
            "name": "button_axis_settings",
            "type": "bevy_utils::hashbrown::HashMap<bevy_input::gamepad::GamepadButton, bevy_input::gamepad::ButtonAxisSettings, bevy_utils::hashbrown::hash_map::DefaultHashBuilder>"
          }
        ]
      }
    },
    "bevy_input::gamepad::RawGamepadAxisChangedEvent": {
      "identifier": "RawGamepadAxisChangedEvent",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::RawGamepadAxisChangedEvent",
      "documentation": " [`GamepadAxis`] changed event unfiltered by [`GamepadSettings`]",
      "associated_functions": [
        "bevy_input::gamepad::RawGamepadAxisChangedEvent::clone",
        "bevy_input::gamepad::RawGamepadAxisChangedEvent::eq",
        "bevy_input::gamepad::RawGamepadAxisChangedEvent::new"
      ],
      "layout": {
        "kind": "Struct",
        "name": "RawGamepadAxisChangedEvent",
        "fields": [
          {
            "name": "gamepad",
            "type": "bevy_ecs::entity::Entity"
          },
          {
            "name": "axis",
            "type": "bevy_input::gamepad::GamepadAxis"
          },
          {
            "name": "value",
            "type": "f32"
          }
        ]
      }
    },
    "bevy_input::gamepad::RawGamepadButtonChangedEvent": {
      "identifier": "RawGamepadButtonChangedEvent",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::RawGamepadButtonChangedEvent",
      "documentation": " [`GamepadButton`] changed event unfiltered by [`GamepadSettings`]",
      "associated_functions": [
        "bevy_input::gamepad::RawGamepadButtonChangedEvent::clone",
        "bevy_input::gamepad::RawGamepadButtonChangedEvent::eq",
        "bevy_input::gamepad::RawGamepadButtonChangedEvent::new"
      ],
      "layout": {
        "kind": "Struct",
        "name": "RawGamepadButtonChangedEvent",
        "fields": [
          {
            "name": "gamepad",
            "type": "bevy_ecs::entity::Entity"
          },
          {
            "name": "button",
            "type": "bevy_input::gamepad::GamepadButton"
          },
          {
            "name": "value",
            "type": "f32"
          }
        ]
      }
    },
    "bevy_input::gamepad::RawGamepadEvent": {
      "identifier": "RawGamepadEvent",
      "crate": "bevy_input",
      "path": "bevy_input::gamepad::RawGamepadEvent",
      "documentation": " A raw gamepad event.\n\n This event type is used over the [`GamepadConnectionEvent`],\n [`RawGamepadButtonChangedEvent`] and [`RawGamepadAxisChangedEvent`] when\n the in-frame relative ordering of events is important.\n\n This event type is used by `bevy_input` to feed its components.",
      "associated_functions": [
        "bevy_input::gamepad::RawGamepadEvent::clone",
        "bevy_input::gamepad::RawGamepadEvent::eq"
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Connection",
          "fields": [
            {
              "type": "bevy_input::gamepad::GamepadConnectionEvent"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Button",
          "fields": [
            {
              "type": "bevy_input::gamepad::RawGamepadButtonChangedEvent"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Axis",
          "fields": [
            {
              "type": "bevy_input::gamepad::RawGamepadAxisChangedEvent"
            }
          ]
        }
      ]
    },
    "bevy_input::gestures::DoubleTapGesture": {
      "identifier": "DoubleTapGesture",
      "crate": "bevy_input",
      "path": "bevy_input::gestures::DoubleTapGesture",
      "documentation": " Double tap gesture.\n\n ## Platform-specific\n\n - Only available on **`macOS`** and **`iOS`**.\n - On **`iOS`**, must be enabled first",
      "associated_functions": [
        "bevy_input::gestures::DoubleTapGesture::clone",
        "bevy_input::gestures::DoubleTapGesture::eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "DoubleTapGesture"
      }
    },
    "bevy_input::gestures::PanGesture": {
      "identifier": "PanGesture",
      "crate": "bevy_input",
      "path": "bevy_input::gestures::PanGesture",
      "documentation": " Pan gesture.\n\n ## Platform-specific\n\n - On **`iOS`**, must be enabled first",
      "associated_functions": [
        "bevy_input::gestures::PanGesture::clone",
        "bevy_input::gestures::PanGesture::eq"
      ],
      "layout": {
        "kind": "TupleStruct",
        "name": "PanGesture",
        "fields": [
          {
            "type": "glam::Vec2"
          }
        ]
      }
    },
    "bevy_input::gestures::PinchGesture": {
      "identifier": "PinchGesture",
      "crate": "bevy_input",
      "path": "bevy_input::gestures::PinchGesture",
      "documentation": " Two-finger pinch gesture, often used for magnifications.\n\n Positive delta values indicate magnification (zooming in) and\n negative delta values indicate shrinking (zooming out).\n\n ## Platform-specific\n\n - Only available on **`macOS`** and **`iOS`**.\n - On **`iOS`**, must be enabled first",
      "associated_functions": [
        "bevy_input::gestures::PinchGesture::clone",
        "bevy_input::gestures::PinchGesture::eq"
      ],
      "layout": {
        "kind": "TupleStruct",
        "name": "PinchGesture",
        "fields": [
          {
            "type": "f32"
          }
        ]
      }
    },
    "bevy_input::gestures::RotationGesture": {
      "identifier": "RotationGesture",
      "crate": "bevy_input",
      "path": "bevy_input::gestures::RotationGesture",
      "documentation": " Two-finger rotation gesture.\n\n Positive delta values indicate rotation counterclockwise and\n negative delta values indicate rotation clockwise.\n\n ## Platform-specific\n\n - Only available on **`macOS`** and **`iOS`**.\n - On **`iOS`**, must be enabled first",
      "associated_functions": [
        "bevy_input::gestures::RotationGesture::clone",
        "bevy_input::gestures::RotationGesture::eq"
      ],
      "layout": {
        "kind": "TupleStruct",
        "name": "RotationGesture",
        "fields": [
          {
            "type": "f32"
          }
        ]
      }
    },
    "bevy_input::keyboard::Key": {
      "identifier": "Key",
      "crate": "bevy_input",
      "path": "bevy_input::keyboard::Key",
      "documentation": " The logical key code of a [`KeyboardInput`].\n\n ## Technical\n\n Its values map 1 to 1 to winit's Key.",
      "associated_functions": [
        "bevy_input::keyboard::Key::assert_receiver_is_total_eq",
        "bevy_input::keyboard::Key::clone",
        "bevy_input::keyboard::Key::eq"
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Character",
          "fields": [
            {
              "type": "smol_str::SmolStr"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Unidentified",
          "fields": [
            {
              "type": "bevy_input::keyboard::NativeKey"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Dead",
          "fields": [
            {
              "type": "core::option::Option<char>"
            }
          ]
        },
        {
          "kind": "Unit",
          "name": "Alt"
        },
        {
          "kind": "Unit",
          "name": "AltGraph"
        },
        {
          "kind": "Unit",
          "name": "CapsLock"
        },
        {
          "kind": "Unit",
          "name": "Control"
        },
        {
          "kind": "Unit",
          "name": "Fn"
        },
        {
          "kind": "Unit",
          "name": "FnLock"
        },
        {
          "kind": "Unit",
          "name": "NumLock"
        },
        {
          "kind": "Unit",
          "name": "ScrollLock"
        },
        {
          "kind": "Unit",
          "name": "Shift"
        },
        {
          "kind": "Unit",
          "name": "Symbol"
        },
        {
          "kind": "Unit",
          "name": "SymbolLock"
        },
        {
          "kind": "Unit",
          "name": "Meta"
        },
        {
          "kind": "Unit",
          "name": "Hyper"
        },
        {
          "kind": "Unit",
          "name": "Super"
        },
        {
          "kind": "Unit",
          "name": "Enter"
        },
        {
          "kind": "Unit",
          "name": "Tab"
        },
        {
          "kind": "Unit",
          "name": "Space"
        },
        {
          "kind": "Unit",
          "name": "ArrowDown"
        },
        {
          "kind": "Unit",
          "name": "ArrowLeft"
        },
        {
          "kind": "Unit",
          "name": "ArrowRight"
        },
        {
          "kind": "Unit",
          "name": "ArrowUp"
        },
        {
          "kind": "Unit",
          "name": "End"
        },
        {
          "kind": "Unit",
          "name": "Home"
        },
        {
          "kind": "Unit",
          "name": "PageDown"
        },
        {
          "kind": "Unit",
          "name": "PageUp"
        },
        {
          "kind": "Unit",
          "name": "Backspace"
        },
        {
          "kind": "Unit",
          "name": "Clear"
        },
        {
          "kind": "Unit",
          "name": "Copy"
        },
        {
          "kind": "Unit",
          "name": "CrSel"
        },
        {
          "kind": "Unit",
          "name": "Cut"
        },
        {
          "kind": "Unit",
          "name": "Delete"
        },
        {
          "kind": "Unit",
          "name": "EraseEof"
        },
        {
          "kind": "Unit",
          "name": "ExSel"
        },
        {
          "kind": "Unit",
          "name": "Insert"
        },
        {
          "kind": "Unit",
          "name": "Paste"
        },
        {
          "kind": "Unit",
          "name": "Redo"
        },
        {
          "kind": "Unit",
          "name": "Undo"
        },
        {
          "kind": "Unit",
          "name": "Accept"
        },
        {
          "kind": "Unit",
          "name": "Again"
        },
        {
          "kind": "Unit",
          "name": "Attn"
        },
        {
          "kind": "Unit",
          "name": "Cancel"
        },
        {
          "kind": "Unit",
          "name": "ContextMenu"
        },
        {
          "kind": "Unit",
          "name": "Escape"
        },
        {
          "kind": "Unit",
          "name": "Execute"
        },
        {
          "kind": "Unit",
          "name": "Find"
        },
        {
          "kind": "Unit",
          "name": "Help"
        },
        {
          "kind": "Unit",
          "name": "Pause"
        },
        {
          "kind": "Unit",
          "name": "Play"
        },
        {
          "kind": "Unit",
          "name": "Props"
        },
        {
          "kind": "Unit",
          "name": "Select"
        },
        {
          "kind": "Unit",
          "name": "ZoomIn"
        },
        {
          "kind": "Unit",
          "name": "ZoomOut"
        },
        {
          "kind": "Unit",
          "name": "BrightnessDown"
        },
        {
          "kind": "Unit",
          "name": "BrightnessUp"
        },
        {
          "kind": "Unit",
          "name": "Eject"
        },
        {
          "kind": "Unit",
          "name": "LogOff"
        },
        {
          "kind": "Unit",
          "name": "Power"
        },
        {
          "kind": "Unit",
          "name": "PowerOff"
        },
        {
          "kind": "Unit",
          "name": "PrintScreen"
        },
        {
          "kind": "Unit",
          "name": "Hibernate"
        },
        {
          "kind": "Unit",
          "name": "Standby"
        },
        {
          "kind": "Unit",
          "name": "WakeUp"
        },
        {
          "kind": "Unit",
          "name": "AllCandidates"
        },
        {
          "kind": "Unit",
          "name": "Alphanumeric"
        },
        {
          "kind": "Unit",
          "name": "CodeInput"
        },
        {
          "kind": "Unit",
          "name": "Compose"
        },
        {
          "kind": "Unit",
          "name": "Convert"
        },
        {
          "kind": "Unit",
          "name": "FinalMode"
        },
        {
          "kind": "Unit",
          "name": "GroupFirst"
        },
        {
          "kind": "Unit",
          "name": "GroupLast"
        },
        {
          "kind": "Unit",
          "name": "GroupNext"
        },
        {
          "kind": "Unit",
          "name": "GroupPrevious"
        },
        {
          "kind": "Unit",
          "name": "ModeChange"
        },
        {
          "kind": "Unit",
          "name": "NextCandidate"
        },
        {
          "kind": "Unit",
          "name": "NonConvert"
        },
        {
          "kind": "Unit",
          "name": "PreviousCandidate"
        },
        {
          "kind": "Unit",
          "name": "Process"
        },
        {
          "kind": "Unit",
          "name": "SingleCandidate"
        },
        {
          "kind": "Unit",
          "name": "HangulMode"
        },
        {
          "kind": "Unit",
          "name": "HanjaMode"
        },
        {
          "kind": "Unit",
          "name": "JunjaMode"
        },
        {
          "kind": "Unit",
          "name": "Eisu"
        },
        {
          "kind": "Unit",
          "name": "Hankaku"
        },
        {
          "kind": "Unit",
          "name": "Hiragana"
        },
        {
          "kind": "Unit",
          "name": "HiraganaKatakana"
        },
        {
          "kind": "Unit",
          "name": "KanaMode"
        },
        {
          "kind": "Unit",
          "name": "KanjiMode"
        },
        {
          "kind": "Unit",
          "name": "Katakana"
        },
        {
          "kind": "Unit",
          "name": "Romaji"
        },
        {
          "kind": "Unit",
          "name": "Zenkaku"
        },
        {
          "kind": "Unit",
          "name": "ZenkakuHankaku"
        },
        {
          "kind": "Unit",
          "name": "Soft1"
        },
        {
          "kind": "Unit",
          "name": "Soft2"
        },
        {
          "kind": "Unit",
          "name": "Soft3"
        },
        {
          "kind": "Unit",
          "name": "Soft4"
        },
        {
          "kind": "Unit",
          "name": "ChannelDown"
        },
        {
          "kind": "Unit",
          "name": "ChannelUp"
        },
        {
          "kind": "Unit",
          "name": "Close"
        },
        {
          "kind": "Unit",
          "name": "MailForward"
        },
        {
          "kind": "Unit",
          "name": "MailReply"
        },
        {
          "kind": "Unit",
          "name": "MailSend"
        },
        {
          "kind": "Unit",
          "name": "MediaClose"
        },
        {
          "kind": "Unit",
          "name": "MediaFastForward"
        },
        {
          "kind": "Unit",
          "name": "MediaPause"
        },
        {
          "kind": "Unit",
          "name": "MediaPlay"
        },
        {
          "kind": "Unit",
          "name": "MediaPlayPause"
        },
        {
          "kind": "Unit",
          "name": "MediaRecord"
        },
        {
          "kind": "Unit",
          "name": "MediaRewind"
        },
        {
          "kind": "Unit",
          "name": "MediaStop"
        },
        {
          "kind": "Unit",
          "name": "MediaTrackNext"
        },
        {
          "kind": "Unit",
          "name": "MediaTrackPrevious"
        },
        {
          "kind": "Unit",
          "name": "New"
        },
        {
          "kind": "Unit",
          "name": "Open"
        },
        {
          "kind": "Unit",
          "name": "Print"
        },
        {
          "kind": "Unit",
          "name": "Save"
        },
        {
          "kind": "Unit",
          "name": "SpellCheck"
        },
        {
          "kind": "Unit",
          "name": "Key11"
        },
        {
          "kind": "Unit",
          "name": "Key12"
        },
        {
          "kind": "Unit",
          "name": "AudioBalanceLeft"
        },
        {
          "kind": "Unit",
          "name": "AudioBalanceRight"
        },
        {
          "kind": "Unit",
          "name": "AudioBassBoostDown"
        },
        {
          "kind": "Unit",
          "name": "AudioBassBoostToggle"
        },
        {
          "kind": "Unit",
          "name": "AudioBassBoostUp"
        },
        {
          "kind": "Unit",
          "name": "AudioFaderFront"
        },
        {
          "kind": "Unit",
          "name": "AudioFaderRear"
        },
        {
          "kind": "Unit",
          "name": "AudioSurroundModeNext"
        },
        {
          "kind": "Unit",
          "name": "AudioTrebleDown"
        },
        {
          "kind": "Unit",
          "name": "AudioTrebleUp"
        },
        {
          "kind": "Unit",
          "name": "AudioVolumeDown"
        },
        {
          "kind": "Unit",
          "name": "AudioVolumeUp"
        },
        {
          "kind": "Unit",
          "name": "AudioVolumeMute"
        },
        {
          "kind": "Unit",
          "name": "MicrophoneToggle"
        },
        {
          "kind": "Unit",
          "name": "MicrophoneVolumeDown"
        },
        {
          "kind": "Unit",
          "name": "MicrophoneVolumeUp"
        },
        {
          "kind": "Unit",
          "name": "MicrophoneVolumeMute"
        },
        {
          "kind": "Unit",
          "name": "SpeechCorrectionList"
        },
        {
          "kind": "Unit",
          "name": "SpeechInputToggle"
        },
        {
          "kind": "Unit",
          "name": "LaunchApplication1"
        },
        {
          "kind": "Unit",
          "name": "LaunchApplication2"
        },
        {
          "kind": "Unit",
          "name": "LaunchCalendar"
        },
        {
          "kind": "Unit",
          "name": "LaunchContacts"
        },
        {
          "kind": "Unit",
          "name": "LaunchMail"
        },
        {
          "kind": "Unit",
          "name": "LaunchMediaPlayer"
        },
        {
          "kind": "Unit",
          "name": "LaunchMusicPlayer"
        },
        {
          "kind": "Unit",
          "name": "LaunchPhone"
        },
        {
          "kind": "Unit",
          "name": "LaunchScreenSaver"
        },
        {
          "kind": "Unit",
          "name": "LaunchSpreadsheet"
        },
        {
          "kind": "Unit",
          "name": "LaunchWebBrowser"
        },
        {
          "kind": "Unit",
          "name": "LaunchWebCam"
        },
        {
          "kind": "Unit",
          "name": "LaunchWordProcessor"
        },
        {
          "kind": "Unit",
          "name": "BrowserBack"
        },
        {
          "kind": "Unit",
          "name": "BrowserFavorites"
        },
        {
          "kind": "Unit",
          "name": "BrowserForward"
        },
        {
          "kind": "Unit",
          "name": "BrowserHome"
        },
        {
          "kind": "Unit",
          "name": "BrowserRefresh"
        },
        {
          "kind": "Unit",
          "name": "BrowserSearch"
        },
        {
          "kind": "Unit",
          "name": "BrowserStop"
        },
        {
          "kind": "Unit",
          "name": "AppSwitch"
        },
        {
          "kind": "Unit",
          "name": "Call"
        },
        {
          "kind": "Unit",
          "name": "Camera"
        },
        {
          "kind": "Unit",
          "name": "CameraFocus"
        },
        {
          "kind": "Unit",
          "name": "EndCall"
        },
        {
          "kind": "Unit",
          "name": "GoBack"
        },
        {
          "kind": "Unit",
          "name": "GoHome"
        },
        {
          "kind": "Unit",
          "name": "HeadsetHook"
        },
        {
          "kind": "Unit",
          "name": "LastNumberRedial"
        },
        {
          "kind": "Unit",
          "name": "Notification"
        },
        {
          "kind": "Unit",
          "name": "MannerMode"
        },
        {
          "kind": "Unit",
          "name": "VoiceDial"
        },
        {
          "kind": "Unit",
          "name": "TV"
        },
        {
          "kind": "Unit",
          "name": "TV3DMode"
        },
        {
          "kind": "Unit",
          "name": "TVAntennaCable"
        },
        {
          "kind": "Unit",
          "name": "TVAudioDescription"
        },
        {
          "kind": "Unit",
          "name": "TVAudioDescriptionMixDown"
        },
        {
          "kind": "Unit",
          "name": "TVAudioDescriptionMixUp"
        },
        {
          "kind": "Unit",
          "name": "TVContentsMenu"
        },
        {
          "kind": "Unit",
          "name": "TVDataService"
        },
        {
          "kind": "Unit",
          "name": "TVInput"
        },
        {
          "kind": "Unit",
          "name": "TVInputComponent1"
        },
        {
          "kind": "Unit",
          "name": "TVInputComponent2"
        },
        {
          "kind": "Unit",
          "name": "TVInputComposite1"
        },
        {
          "kind": "Unit",
          "name": "TVInputComposite2"
        },
        {
          "kind": "Unit",
          "name": "TVInputHDMI1"
        },
        {
          "kind": "Unit",
          "name": "TVInputHDMI2"
        },
        {
          "kind": "Unit",
          "name": "TVInputHDMI3"
        },
        {
          "kind": "Unit",
          "name": "TVInputHDMI4"
        },
        {
          "kind": "Unit",
          "name": "TVInputVGA1"
        },
        {
          "kind": "Unit",
          "name": "TVMediaContext"
        },
        {
          "kind": "Unit",
          "name": "TVNetwork"
        },
        {
          "kind": "Unit",
          "name": "TVNumberEntry"
        },
        {
          "kind": "Unit",
          "name": "TVPower"
        },
        {
          "kind": "Unit",
          "name": "TVRadioService"
        },
        {
          "kind": "Unit",
          "name": "TVSatellite"
        },
        {
          "kind": "Unit",
          "name": "TVSatelliteBS"
        },
        {
          "kind": "Unit",
          "name": "TVSatelliteCS"
        },
        {
          "kind": "Unit",
          "name": "TVSatelliteToggle"
        },
        {
          "kind": "Unit",
          "name": "TVTerrestrialAnalog"
        },
        {
          "kind": "Unit",
          "name": "TVTerrestrialDigital"
        },
        {
          "kind": "Unit",
          "name": "TVTimer"
        },
        {
          "kind": "Unit",
          "name": "AVRInput"
        },
        {
          "kind": "Unit",
          "name": "AVRPower"
        },
        {
          "kind": "Unit",
          "name": "ColorF0Red"
        },
        {
          "kind": "Unit",
          "name": "ColorF1Green"
        },
        {
          "kind": "Unit",
          "name": "ColorF2Yellow"
        },
        {
          "kind": "Unit",
          "name": "ColorF3Blue"
        },
        {
          "kind": "Unit",
          "name": "ColorF4Grey"
        },
        {
          "kind": "Unit",
          "name": "ColorF5Brown"
        },
        {
          "kind": "Unit",
          "name": "ClosedCaptionToggle"
        },
        {
          "kind": "Unit",
          "name": "Dimmer"
        },
        {
          "kind": "Unit",
          "name": "DisplaySwap"
        },
        {
          "kind": "Unit",
          "name": "DVR"
        },
        {
          "kind": "Unit",
          "name": "Exit"
        },
        {
          "kind": "Unit",
          "name": "FavoriteClear0"
        },
        {
          "kind": "Unit",
          "name": "FavoriteClear1"
        },
        {
          "kind": "Unit",
          "name": "FavoriteClear2"
        },
        {
          "kind": "Unit",
          "name": "FavoriteClear3"
        },
        {
          "kind": "Unit",
          "name": "FavoriteRecall0"
        },
        {
          "kind": "Unit",
          "name": "FavoriteRecall1"
        },
        {
          "kind": "Unit",
          "name": "FavoriteRecall2"
        },
        {
          "kind": "Unit",
          "name": "FavoriteRecall3"
        },
        {
          "kind": "Unit",
          "name": "FavoriteStore0"
        },
        {
          "kind": "Unit",
          "name": "FavoriteStore1"
        },
        {
          "kind": "Unit",
          "name": "FavoriteStore2"
        },
        {
          "kind": "Unit",
          "name": "FavoriteStore3"
        },
        {
          "kind": "Unit",
          "name": "Guide"
        },
        {
          "kind": "Unit",
          "name": "GuideNextDay"
        },
        {
          "kind": "Unit",
          "name": "GuidePreviousDay"
        },
        {
          "kind": "Unit",
          "name": "Info"
        },
        {
          "kind": "Unit",
          "name": "InstantReplay"
        },
        {
          "kind": "Unit",
          "name": "Link"
        },
        {
          "kind": "Unit",
          "name": "ListProgram"
        },
        {
          "kind": "Unit",
          "name": "LiveContent"
        },
        {
          "kind": "Unit",
          "name": "Lock"
        },
        {
          "kind": "Unit",
          "name": "MediaApps"
        },
        {
          "kind": "Unit",
          "name": "MediaAudioTrack"
        },
        {
          "kind": "Unit",
          "name": "MediaLast"
        },
        {
          "kind": "Unit",
          "name": "MediaSkipBackward"
        },
        {
          "kind": "Unit",
          "name": "MediaSkipForward"
        },
        {
          "kind": "Unit",
          "name": "MediaStepBackward"
        },
        {
          "kind": "Unit",
          "name": "MediaStepForward"
        },
        {
          "kind": "Unit",
          "name": "MediaTopMenu"
        },
        {
          "kind": "Unit",
          "name": "NavigateIn"
        },
        {
          "kind": "Unit",
          "name": "NavigateNext"
        },
        {
          "kind": "Unit",
          "name": "NavigateOut"
        },
        {
          "kind": "Unit",
          "name": "NavigatePrevious"
        },
        {
          "kind": "Unit",
          "name": "NextFavoriteChannel"
        },
        {
          "kind": "Unit",
          "name": "NextUserProfile"
        },
        {
          "kind": "Unit",
          "name": "OnDemand"
        },
        {
          "kind": "Unit",
          "name": "Pairing"
        },
        {
          "kind": "Unit",
          "name": "PinPDown"
        },
        {
          "kind": "Unit",
          "name": "PinPMove"
        },
        {
          "kind": "Unit",
          "name": "PinPToggle"
        },
        {
          "kind": "Unit",
          "name": "PinPUp"
        },
        {
          "kind": "Unit",
          "name": "PlaySpeedDown"
        },
        {
          "kind": "Unit",
          "name": "PlaySpeedReset"
        },
        {
          "kind": "Unit",
          "name": "PlaySpeedUp"
        },
        {
          "kind": "Unit",
          "name": "RandomToggle"
        },
        {
          "kind": "Unit",
          "name": "RcLowBattery"
        },
        {
          "kind": "Unit",
          "name": "RecordSpeedNext"
        },
        {
          "kind": "Unit",
          "name": "RfBypass"
        },
        {
          "kind": "Unit",
          "name": "ScanChannelsToggle"
        },
        {
          "kind": "Unit",
          "name": "ScreenModeNext"
        },
        {
          "kind": "Unit",
          "name": "Settings"
        },
        {
          "kind": "Unit",
          "name": "SplitScreenToggle"
        },
        {
          "kind": "Unit",
          "name": "STBInput"
        },
        {
          "kind": "Unit",
          "name": "STBPower"
        },
        {
          "kind": "Unit",
          "name": "Subtitle"
        },
        {
          "kind": "Unit",
          "name": "Teletext"
        },
        {
          "kind": "Unit",
          "name": "VideoModeNext"
        },
        {
          "kind": "Unit",
          "name": "Wink"
        },
        {
          "kind": "Unit",
          "name": "ZoomToggle"
        },
        {
          "kind": "Unit",
          "name": "F1"
        },
        {
          "kind": "Unit",
          "name": "F2"
        },
        {
          "kind": "Unit",
          "name": "F3"
        },
        {
          "kind": "Unit",
          "name": "F4"
        },
        {
          "kind": "Unit",
          "name": "F5"
        },
        {
          "kind": "Unit",
          "name": "F6"
        },
        {
          "kind": "Unit",
          "name": "F7"
        },
        {
          "kind": "Unit",
          "name": "F8"
        },
        {
          "kind": "Unit",
          "name": "F9"
        },
        {
          "kind": "Unit",
          "name": "F10"
        },
        {
          "kind": "Unit",
          "name": "F11"
        },
        {
          "kind": "Unit",
          "name": "F12"
        },
        {
          "kind": "Unit",
          "name": "F13"
        },
        {
          "kind": "Unit",
          "name": "F14"
        },
        {
          "kind": "Unit",
          "name": "F15"
        },
        {
          "kind": "Unit",
          "name": "F16"
        },
        {
          "kind": "Unit",
          "name": "F17"
        },
        {
          "kind": "Unit",
          "name": "F18"
        },
        {
          "kind": "Unit",
          "name": "F19"
        },
        {
          "kind": "Unit",
          "name": "F20"
        },
        {
          "kind": "Unit",
          "name": "F21"
        },
        {
          "kind": "Unit",
          "name": "F22"
        },
        {
          "kind": "Unit",
          "name": "F23"
        },
        {
          "kind": "Unit",
          "name": "F24"
        },
        {
          "kind": "Unit",
          "name": "F25"
        },
        {
          "kind": "Unit",
          "name": "F26"
        },
        {
          "kind": "Unit",
          "name": "F27"
        },
        {
          "kind": "Unit",
          "name": "F28"
        },
        {
          "kind": "Unit",
          "name": "F29"
        },
        {
          "kind": "Unit",
          "name": "F30"
        },
        {
          "kind": "Unit",
          "name": "F31"
        },
        {
          "kind": "Unit",
          "name": "F32"
        },
        {
          "kind": "Unit",
          "name": "F33"
        },
        {
          "kind": "Unit",
          "name": "F34"
        },
        {
          "kind": "Unit",
          "name": "F35"
        }
      ]
    },
    "bevy_input::keyboard::KeyCode": {
      "identifier": "KeyCode",
      "crate": "bevy_input",
      "path": "bevy_input::keyboard::KeyCode",
      "documentation": " The key code of a [`KeyboardInput`].\n\n ## Usage\n\n It is used as the generic `T` value of an [`ButtonInput`] to create a `Res<ButtonInput<KeyCode>>`.\n\n Code representing the location of a physical key\n This mostly conforms to the UI Events Specification's [`KeyboardEvent.code`] with a few\n exceptions:\n - The keys that the specification calls `MetaLeft` and `MetaRight` are named `SuperLeft` and\n   `SuperRight` here.\n - The key that the specification calls \"Super\" is reported as `Unidentified` here.\n\n [`KeyboardEvent.code`]: https://w3c.github.io/uievents-code/#code-value-tables\n\n ## Updating\n\n The resource is updated inside of the [`keyboard_input_system`].",
      "associated_functions": [
        "bevy_input::keyboard::KeyCode::assert_receiver_is_total_eq",
        "bevy_input::keyboard::KeyCode::clone",
        "bevy_input::keyboard::KeyCode::eq"
      ],
      "layout": [
        {
          "kind": "TupleStruct",
          "name": "Unidentified",
          "fields": [
            {
              "type": "bevy_input::keyboard::NativeKeyCode"
            }
          ]
        },
        {
          "kind": "Unit",
          "name": "Backquote"
        },
        {
          "kind": "Unit",
          "name": "Backslash"
        },
        {
          "kind": "Unit",
          "name": "BracketLeft"
        },
        {
          "kind": "Unit",
          "name": "BracketRight"
        },
        {
          "kind": "Unit",
          "name": "Comma"
        },
        {
          "kind": "Unit",
          "name": "Digit0"
        },
        {
          "kind": "Unit",
          "name": "Digit1"
        },
        {
          "kind": "Unit",
          "name": "Digit2"
        },
        {
          "kind": "Unit",
          "name": "Digit3"
        },
        {
          "kind": "Unit",
          "name": "Digit4"
        },
        {
          "kind": "Unit",
          "name": "Digit5"
        },
        {
          "kind": "Unit",
          "name": "Digit6"
        },
        {
          "kind": "Unit",
          "name": "Digit7"
        },
        {
          "kind": "Unit",
          "name": "Digit8"
        },
        {
          "kind": "Unit",
          "name": "Digit9"
        },
        {
          "kind": "Unit",
          "name": "Equal"
        },
        {
          "kind": "Unit",
          "name": "IntlBackslash"
        },
        {
          "kind": "Unit",
          "name": "IntlRo"
        },
        {
          "kind": "Unit",
          "name": "IntlYen"
        },
        {
          "kind": "Unit",
          "name": "KeyA"
        },
        {
          "kind": "Unit",
          "name": "KeyB"
        },
        {
          "kind": "Unit",
          "name": "KeyC"
        },
        {
          "kind": "Unit",
          "name": "KeyD"
        },
        {
          "kind": "Unit",
          "name": "KeyE"
        },
        {
          "kind": "Unit",
          "name": "KeyF"
        },
        {
          "kind": "Unit",
          "name": "KeyG"
        },
        {
          "kind": "Unit",
          "name": "KeyH"
        },
        {
          "kind": "Unit",
          "name": "KeyI"
        },
        {
          "kind": "Unit",
          "name": "KeyJ"
        },
        {
          "kind": "Unit",
          "name": "KeyK"
        },
        {
          "kind": "Unit",
          "name": "KeyL"
        },
        {
          "kind": "Unit",
          "name": "KeyM"
        },
        {
          "kind": "Unit",
          "name": "KeyN"
        },
        {
          "kind": "Unit",
          "name": "KeyO"
        },
        {
          "kind": "Unit",
          "name": "KeyP"
        },
        {
          "kind": "Unit",
          "name": "KeyQ"
        },
        {
          "kind": "Unit",
          "name": "KeyR"
        },
        {
          "kind": "Unit",
          "name": "KeyS"
        },
        {
          "kind": "Unit",
          "name": "KeyT"
        },
        {
          "kind": "Unit",
          "name": "KeyU"
        },
        {
          "kind": "Unit",
          "name": "KeyV"
        },
        {
          "kind": "Unit",
          "name": "KeyW"
        },
        {
          "kind": "Unit",
          "name": "KeyX"
        },
        {
          "kind": "Unit",
          "name": "KeyY"
        },
        {
          "kind": "Unit",
          "name": "KeyZ"
        },
        {
          "kind": "Unit",
          "name": "Minus"
        },
        {
          "kind": "Unit",
          "name": "Period"
        },
        {
          "kind": "Unit",
          "name": "Quote"
        },
        {
          "kind": "Unit",
          "name": "Semicolon"
        },
        {
          "kind": "Unit",
          "name": "Slash"
        },
        {
          "kind": "Unit",
          "name": "AltLeft"
        },
        {
          "kind": "Unit",
          "name": "AltRight"
        },
        {
          "kind": "Unit",
          "name": "Backspace"
        },
        {
          "kind": "Unit",
          "name": "CapsLock"
        },
        {
          "kind": "Unit",
          "name": "ContextMenu"
        },
        {
          "kind": "Unit",
          "name": "ControlLeft"
        },
        {
          "kind": "Unit",
          "name": "ControlRight"
        },
        {
          "kind": "Unit",
          "name": "Enter"
        },
        {
          "kind": "Unit",
          "name": "SuperLeft"
        },
        {
          "kind": "Unit",
          "name": "SuperRight"
        },
        {
          "kind": "Unit",
          "name": "ShiftLeft"
        },
        {
          "kind": "Unit",
          "name": "ShiftRight"
        },
        {
          "kind": "Unit",
          "name": "Space"
        },
        {
          "kind": "Unit",
          "name": "Tab"
        },
        {
          "kind": "Unit",
          "name": "Convert"
        },
        {
          "kind": "Unit",
          "name": "KanaMode"
        },
        {
          "kind": "Unit",
          "name": "Lang1"
        },
        {
          "kind": "Unit",
          "name": "Lang2"
        },
        {
          "kind": "Unit",
          "name": "Lang3"
        },
        {
          "kind": "Unit",
          "name": "Lang4"
        },
        {
          "kind": "Unit",
          "name": "Lang5"
        },
        {
          "kind": "Unit",
          "name": "NonConvert"
        },
        {
          "kind": "Unit",
          "name": "Delete"
        },
        {
          "kind": "Unit",
          "name": "End"
        },
        {
          "kind": "Unit",
          "name": "Help"
        },
        {
          "kind": "Unit",
          "name": "Home"
        },
        {
          "kind": "Unit",
          "name": "Insert"
        },
        {
          "kind": "Unit",
          "name": "PageDown"
        },
        {
          "kind": "Unit",
          "name": "PageUp"
        },
        {
          "kind": "Unit",
          "name": "ArrowDown"
        },
        {
          "kind": "Unit",
          "name": "ArrowLeft"
        },
        {
          "kind": "Unit",
          "name": "ArrowRight"
        },
        {
          "kind": "Unit",
          "name": "ArrowUp"
        },
        {
          "kind": "Unit",
          "name": "NumLock"
        },
        {
          "kind": "Unit",
          "name": "Numpad0"
        },
        {
          "kind": "Unit",
          "name": "Numpad1"
        },
        {
          "kind": "Unit",
          "name": "Numpad2"
        },
        {
          "kind": "Unit",
          "name": "Numpad3"
        },
        {
          "kind": "Unit",
          "name": "Numpad4"
        },
        {
          "kind": "Unit",
          "name": "Numpad5"
        },
        {
          "kind": "Unit",
          "name": "Numpad6"
        },
        {
          "kind": "Unit",
          "name": "Numpad7"
        },
        {
          "kind": "Unit",
          "name": "Numpad8"
        },
        {
          "kind": "Unit",
          "name": "Numpad9"
        },
        {
          "kind": "Unit",
          "name": "NumpadAdd"
        },
        {
          "kind": "Unit",
          "name": "NumpadBackspace"
        },
        {
          "kind": "Unit",
          "name": "NumpadClear"
        },
        {
          "kind": "Unit",
          "name": "NumpadClearEntry"
        },
        {
          "kind": "Unit",
          "name": "NumpadComma"
        },
        {
          "kind": "Unit",
          "name": "NumpadDecimal"
        },
        {
          "kind": "Unit",
          "name": "NumpadDivide"
        },
        {
          "kind": "Unit",
          "name": "NumpadEnter"
        },
        {
          "kind": "Unit",
          "name": "NumpadEqual"
        },
        {
          "kind": "Unit",
          "name": "NumpadHash"
        },
        {
          "kind": "Unit",
          "name": "NumpadMemoryAdd"
        },
        {
          "kind": "Unit",
          "name": "NumpadMemoryClear"
        },
        {
          "kind": "Unit",
          "name": "NumpadMemoryRecall"
        },
        {
          "kind": "Unit",
          "name": "NumpadMemoryStore"
        },
        {
          "kind": "Unit",
          "name": "NumpadMemorySubtract"
        },
        {
          "kind": "Unit",
          "name": "NumpadMultiply"
        },
        {
          "kind": "Unit",
          "name": "NumpadParenLeft"
        },
        {
          "kind": "Unit",
          "name": "NumpadParenRight"
        },
        {
          "kind": "Unit",
          "name": "NumpadStar"
        },
        {
          "kind": "Unit",
          "name": "NumpadSubtract"
        },
        {
          "kind": "Unit",
          "name": "Escape"
        },
        {
          "kind": "Unit",
          "name": "Fn"
        },
        {
          "kind": "Unit",
          "name": "FnLock"
        },
        {
          "kind": "Unit",
          "name": "PrintScreen"
        },
        {
          "kind": "Unit",
          "name": "ScrollLock"
        },
        {
          "kind": "Unit",
          "name": "Pause"
        },
        {
          "kind": "Unit",
          "name": "BrowserBack"
        },
        {
          "kind": "Unit",
          "name": "BrowserFavorites"
        },
        {
          "kind": "Unit",
          "name": "BrowserForward"
        },
        {
          "kind": "Unit",
          "name": "BrowserHome"
        },
        {
          "kind": "Unit",
          "name": "BrowserRefresh"
        },
        {
          "kind": "Unit",
          "name": "BrowserSearch"
        },
        {
          "kind": "Unit",
          "name": "BrowserStop"
        },
        {
          "kind": "Unit",
          "name": "Eject"
        },
        {
          "kind": "Unit",
          "name": "LaunchApp1"
        },
        {
          "kind": "Unit",
          "name": "LaunchApp2"
        },
        {
          "kind": "Unit",
          "name": "LaunchMail"
        },
        {
          "kind": "Unit",
          "name": "MediaPlayPause"
        },
        {
          "kind": "Unit",
          "name": "MediaSelect"
        },
        {
          "kind": "Unit",
          "name": "MediaStop"
        },
        {
          "kind": "Unit",
          "name": "MediaTrackNext"
        },
        {
          "kind": "Unit",
          "name": "MediaTrackPrevious"
        },
        {
          "kind": "Unit",
          "name": "Power"
        },
        {
          "kind": "Unit",
          "name": "Sleep"
        },
        {
          "kind": "Unit",
          "name": "AudioVolumeDown"
        },
        {
          "kind": "Unit",
          "name": "AudioVolumeMute"
        },
        {
          "kind": "Unit",
          "name": "AudioVolumeUp"
        },
        {
          "kind": "Unit",
          "name": "WakeUp"
        },
        {
          "kind": "Unit",
          "name": "Meta"
        },
        {
          "kind": "Unit",
          "name": "Hyper"
        },
        {
          "kind": "Unit",
          "name": "Turbo"
        },
        {
          "kind": "Unit",
          "name": "Abort"
        },
        {
          "kind": "Unit",
          "name": "Resume"
        },
        {
          "kind": "Unit",
          "name": "Suspend"
        },
        {
          "kind": "Unit",
          "name": "Again"
        },
        {
          "kind": "Unit",
          "name": "Copy"
        },
        {
          "kind": "Unit",
          "name": "Cut"
        },
        {
          "kind": "Unit",
          "name": "Find"
        },
        {
          "kind": "Unit",
          "name": "Open"
        },
        {
          "kind": "Unit",
          "name": "Paste"
        },
        {
          "kind": "Unit",
          "name": "Props"
        },
        {
          "kind": "Unit",
          "name": "Select"
        },
        {
          "kind": "Unit",
          "name": "Undo"
        },
        {
          "kind": "Unit",
          "name": "Hiragana"
        },
        {
          "kind": "Unit",
          "name": "Katakana"
        },
        {
          "kind": "Unit",
          "name": "F1"
        },
        {
          "kind": "Unit",
          "name": "F2"
        },
        {
          "kind": "Unit",
          "name": "F3"
        },
        {
          "kind": "Unit",
          "name": "F4"
        },
        {
          "kind": "Unit",
          "name": "F5"
        },
        {
          "kind": "Unit",
          "name": "F6"
        },
        {
          "kind": "Unit",
          "name": "F7"
        },
        {
          "kind": "Unit",
          "name": "F8"
        },
        {
          "kind": "Unit",
          "name": "F9"
        },
        {
          "kind": "Unit",
          "name": "F10"
        },
        {
          "kind": "Unit",
          "name": "F11"
        },
        {
          "kind": "Unit",
          "name": "F12"
        },
        {
          "kind": "Unit",
          "name": "F13"
        },
        {
          "kind": "Unit",
          "name": "F14"
        },
        {
          "kind": "Unit",
          "name": "F15"
        },
        {
          "kind": "Unit",
          "name": "F16"
        },
        {
          "kind": "Unit",
          "name": "F17"
        },
        {
          "kind": "Unit",
          "name": "F18"
        },
        {
          "kind": "Unit",
          "name": "F19"
        },
        {
          "kind": "Unit",
          "name": "F20"
        },
        {
          "kind": "Unit",
          "name": "F21"
        },
        {
          "kind": "Unit",
          "name": "F22"
        },
        {
          "kind": "Unit",
          "name": "F23"
        },
        {
          "kind": "Unit",
          "name": "F24"
        },
        {
          "kind": "Unit",
          "name": "F25"
        },
        {
          "kind": "Unit",
          "name": "F26"
        },
        {
          "kind": "Unit",
          "name": "F27"
        },
        {
          "kind": "Unit",
          "name": "F28"
        },
        {
          "kind": "Unit",
          "name": "F29"
        },
        {
          "kind": "Unit",
          "name": "F30"
        },
        {
          "kind": "Unit",
          "name": "F31"
        },
        {
          "kind": "Unit",
          "name": "F32"
        },
        {
          "kind": "Unit",
          "name": "F33"
        },
        {
          "kind": "Unit",
          "name": "F34"
        },
        {
          "kind": "Unit",
          "name": "F35"
        }
      ]
    },
    "bevy_input::keyboard::KeyboardFocusLost": {
      "identifier": "KeyboardFocusLost",
      "crate": "bevy_input",
      "path": "bevy_input::keyboard::KeyboardFocusLost",
      "documentation": " Gets generated from `bevy_winit::winit_runner`\n\n Used for clearing all cached states to avoid having 'stuck' key presses\n when, for example, switching between windows with 'Alt-Tab' or using any other\n OS specific key combination that leads to Bevy window losing focus and not receiving any\n input events",
      "associated_functions": [
        "bevy_input::keyboard::KeyboardFocusLost::assert_receiver_is_total_eq",
        "bevy_input::keyboard::KeyboardFocusLost::clone",
        "bevy_input::keyboard::KeyboardFocusLost::eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "KeyboardFocusLost"
      }
    },
    "bevy_input::keyboard::KeyboardInput": {
      "identifier": "KeyboardInput",
      "crate": "bevy_input",
      "path": "bevy_input::keyboard::KeyboardInput",
      "documentation": " A keyboard input event.\n\n This event is the translated version of the `WindowEvent::KeyboardInput` from the `winit` crate.\n It is available to the end user and can be used for game logic.\n\n ## Usage\n\n The event is consumed inside of the [`keyboard_input_system`]\n to update the [`ButtonInput<KeyCode>`](ButtonInput<KeyCode>) resource.",
      "associated_functions": [
        "bevy_input::keyboard::KeyboardInput::assert_receiver_is_total_eq",
        "bevy_input::keyboard::KeyboardInput::clone",
        "bevy_input::keyboard::KeyboardInput::eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "KeyboardInput",
        "fields": [
          {
            "name": "key_code",
            "type": "bevy_input::keyboard::KeyCode"
          },
          {
            "name": "logical_key",
            "type": "bevy_input::keyboard::Key"
          },
          {
            "name": "state",
            "type": "bevy_input::ButtonState"
          },
          {
            "name": "repeat",
            "type": "bool"
          },
          {
            "name": "window",
            "type": "bevy_ecs::entity::Entity"
          }
        ]
      }
    },
    "bevy_input::keyboard::NativeKey": {
      "identifier": "NativeKey",
      "crate": "bevy_input",
      "path": "bevy_input::keyboard::NativeKey",
      "documentation": " Contains the platform-native logical key identifier, known as keysym.\n\n Exactly what that means differs from platform to platform, but the values are to some degree\n tied to the currently active keyboard layout. The same key on the same keyboard may also report\n different values on different platforms, which is one of the reasons this is a per-platform\n enum.\n\n This enum is primarily used to store raw keysym when Winit doesn't map a given native logical\n key identifier to a meaningful [`Key`] variant. This lets you use [`Key`], and let the user\n define keybinds which work in the presence of identifiers we haven't mapped for you yet.",
      "associated_functions": [
        "bevy_input::keyboard::NativeKey::assert_receiver_is_total_eq",
        "bevy_input::keyboard::NativeKey::clone",
        "bevy_input::keyboard::NativeKey::eq"
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "Unidentified"
        },
        {
          "kind": "TupleStruct",
          "name": "Android",
          "fields": [
            {
              "type": "u32"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "MacOS",
          "fields": [
            {
              "type": "u16"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Windows",
          "fields": [
            {
              "type": "u16"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Xkb",
          "fields": [
            {
              "type": "u32"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Web",
          "fields": [
            {
              "type": "smol_str::SmolStr"
            }
          ]
        }
      ]
    },
    "bevy_input::keyboard::NativeKeyCode": {
      "identifier": "NativeKeyCode",
      "crate": "bevy_input",
      "path": "bevy_input::keyboard::NativeKeyCode",
      "documentation": " Contains the platform-native physical key identifier\n\n The exact values vary from platform to platform (which is part of why this is a per-platform\n enum), but the values are primarily tied to the key's physical location on the keyboard.\n\n This enum is primarily used to store raw keycodes when Winit doesn't map a given native\n physical key identifier to a meaningful [`KeyCode`] variant. In the presence of identifiers we\n haven't mapped for you yet, this lets you use [`KeyCode`] to:\n\n - Correctly match key press and release events.\n - On non-web platforms, support assigning keybinds to virtually any key through a UI.",
      "associated_functions": [
        "bevy_input::keyboard::NativeKeyCode::assert_receiver_is_total_eq",
        "bevy_input::keyboard::NativeKeyCode::clone",
        "bevy_input::keyboard::NativeKeyCode::eq"
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "Unidentified"
        },
        {
          "kind": "TupleStruct",
          "name": "Android",
          "fields": [
            {
              "type": "u32"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "MacOS",
          "fields": [
            {
              "type": "u16"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Windows",
          "fields": [
            {
              "type": "u16"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Xkb",
          "fields": [
            {
              "type": "u32"
            }
          ]
        }
      ]
    },
    "bevy_input::mouse::AccumulatedMouseMotion": {
      "identifier": "AccumulatedMouseMotion",
      "crate": "bevy_input",
      "path": "bevy_input::mouse::AccumulatedMouseMotion",
      "documentation": " Tracks how much the mouse has moved every frame.\n\n This resource is reset to zero every frame.\n\n This resource sums the total [`MouseMotion`] events received this frame.",
      "associated_functions": [
        "bevy_input::mouse::AccumulatedMouseMotion::clone",
        "bevy_input::mouse::AccumulatedMouseMotion::eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "AccumulatedMouseMotion",
        "fields": [
          {
            "name": "delta",
            "type": "glam::Vec2"
          }
        ]
      }
    },
    "bevy_input::mouse::AccumulatedMouseScroll": {
      "identifier": "AccumulatedMouseScroll",
      "crate": "bevy_input",
      "path": "bevy_input::mouse::AccumulatedMouseScroll",
      "documentation": " Tracks how much the mouse has scrolled every frame.\n\n This resource is reset to zero every frame.\n\n This resource sums the total [`MouseWheel`] events received this frame.",
      "associated_functions": [
        "bevy_input::mouse::AccumulatedMouseScroll::clone",
        "bevy_input::mouse::AccumulatedMouseScroll::eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "AccumulatedMouseScroll",
        "fields": [
          {
            "name": "unit",
            "type": "bevy_input::mouse::MouseScrollUnit"
          },
          {
            "name": "delta",
            "type": "glam::Vec2"
          }
        ]
      }
    },
    "bevy_input::mouse::MouseButton": {
      "identifier": "MouseButton",
      "crate": "bevy_input",
      "path": "bevy_input::mouse::MouseButton",
      "documentation": " A button on a mouse device.\n\n ## Usage\n\n It is used as the generic `T` value of an [`ButtonInput`] to create a `bevy`\n resource.\n\n ## Updating\n\n The resource is updated inside of the [`mouse_button_input_system`].",
      "associated_functions": [
        "bevy_input::mouse::MouseButton::assert_receiver_is_total_eq",
        "bevy_input::mouse::MouseButton::clone",
        "bevy_input::mouse::MouseButton::eq"
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "Left"
        },
        {
          "kind": "Unit",
          "name": "Right"
        },
        {
          "kind": "Unit",
          "name": "Middle"
        },
        {
          "kind": "Unit",
          "name": "Back"
        },
        {
          "kind": "Unit",
          "name": "Forward"
        },
        {
          "kind": "TupleStruct",
          "name": "Other",
          "fields": [
            {
              "type": "u16"
            }
          ]
        }
      ]
    },
    "bevy_input::mouse::MouseButtonInput": {
      "identifier": "MouseButtonInput",
      "crate": "bevy_input",
      "path": "bevy_input::mouse::MouseButtonInput",
      "documentation": " A mouse button input event.\n\n This event is the translated version of the `WindowEvent::MouseInput` from the `winit` crate.\n\n ## Usage\n\n The event is read inside of the [`mouse_button_input_system`]\n to update the [`ButtonInput<MouseButton>`] resource.",
      "associated_functions": [
        "bevy_input::mouse::MouseButtonInput::assert_receiver_is_total_eq",
        "bevy_input::mouse::MouseButtonInput::clone",
        "bevy_input::mouse::MouseButtonInput::eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "MouseButtonInput",
        "fields": [
          {
            "name": "button",
            "type": "bevy_input::mouse::MouseButton"
          },
          {
            "name": "state",
            "type": "bevy_input::ButtonState"
          },
          {
            "name": "window",
            "type": "bevy_ecs::entity::Entity"
          }
        ]
      }
    },
    "bevy_input::mouse::MouseMotion": {
      "identifier": "MouseMotion",
      "crate": "bevy_input",
      "path": "bevy_input::mouse::MouseMotion",
      "documentation": " An event reporting the change in physical position of a pointing device.\n\n This represents raw, unfiltered physical motion.\n It is the translated version of [`DeviceEvent::MouseMotion`] from the `winit` crate.\n\n All pointing devices connected to a single machine at the same time can emit the event independently.\n However, the event data does not make it possible to distinguish which device it is referring to.\n\n [`DeviceEvent::MouseMotion`]: https://docs.rs/winit/latest/winit/event/enum.DeviceEvent.html#variant.MouseMotion",
      "associated_functions": [
        "bevy_input::mouse::MouseMotion::clone",
        "bevy_input::mouse::MouseMotion::eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "MouseMotion",
        "fields": [
          {
            "name": "delta",
            "type": "glam::Vec2"
          }
        ]
      }
    },
    "bevy_input::mouse::MouseScrollUnit": {
      "identifier": "MouseScrollUnit",
      "crate": "bevy_input",
      "path": "bevy_input::mouse::MouseScrollUnit",
      "documentation": " The scroll unit.\n\n Describes how a value of a [`MouseWheel`] event has to be interpreted.\n\n The value of the event can either be interpreted as the amount of lines or the amount of pixels\n to scroll.",
      "associated_functions": [
        "bevy_input::mouse::MouseScrollUnit::assert_receiver_is_total_eq",
        "bevy_input::mouse::MouseScrollUnit::clone",
        "bevy_input::mouse::MouseScrollUnit::eq"
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "Line"
        },
        {
          "kind": "Unit",
          "name": "Pixel"
        }
      ]
    },
    "bevy_input::mouse::MouseWheel": {
      "identifier": "MouseWheel",
      "crate": "bevy_input",
      "path": "bevy_input::mouse::MouseWheel",
      "documentation": " A mouse wheel event.\n\n This event is the translated version of the `WindowEvent::MouseWheel` from the `winit` crate.",
      "associated_functions": [
        "bevy_input::mouse::MouseWheel::clone",
        "bevy_input::mouse::MouseWheel::eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "MouseWheel",
        "fields": [
          {
            "name": "unit",
            "type": "bevy_input::mouse::MouseScrollUnit"
          },
          {
            "name": "x",
            "type": "f32"
          },
          {
            "name": "y",
            "type": "f32"
          },
          {
            "name": "window",
            "type": "bevy_ecs::entity::Entity"
          }
        ]
      }
    },
    "bevy_input::touch::ForceTouch": {
      "identifier": "ForceTouch",
      "crate": "bevy_input",
      "path": "bevy_input::touch::ForceTouch",
      "documentation": " A force description of a [`Touch`] input.",
      "associated_functions": [
        "bevy_input::touch::ForceTouch::clone",
        "bevy_input::touch::ForceTouch::eq"
      ],
      "layout": [
        {
          "kind": "Struct",
          "name": "Calibrated",
          "fields": [
            {
              "name": "force",
              "type": "f64"
            },
            {
              "name": "max_possible_force",
              "type": "f64"
            },
            {
              "name": "altitude_angle",
              "type": "core::option::Option<f64>"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Normalized",
          "fields": [
            {
              "type": "f64"
            }
          ]
        }
      ]
    },
    "bevy_input::touch::TouchInput": {
      "identifier": "TouchInput",
      "crate": "bevy_input",
      "path": "bevy_input::touch::TouchInput",
      "documentation": " A touch input event.\n\n ## Logic\n\n Every time the user touches the screen, a new [`TouchPhase::Started`] event with an unique\n identifier for the finger is generated. When the finger is lifted, the [`TouchPhase::Ended`]\n event is generated with the same finger id.\n\n After a [`TouchPhase::Started`] event has been emitted, there may be zero or more [`TouchPhase::Moved`]\n events when the finger is moved or the touch pressure changes.\n\n The finger id may be reused by the system after an [`TouchPhase::Ended`] event. The user\n should assume that a new [`TouchPhase::Started`] event received with the same id has nothing\n to do with the old finger and is a new finger.\n\n A [`TouchPhase::Canceled`] event is emitted when the system has canceled tracking this\n touch, such as when the window loses focus, or on iOS if the user moves the\n device against their face.\n\n ## Note\n\n This event is the translated version of the `WindowEvent::Touch` from the `winit` crate.\n It is available to the end user and can be used for game logic.",
      "associated_functions": [
        "bevy_input::touch::TouchInput::clone",
        "bevy_input::touch::TouchInput::eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "TouchInput",
        "fields": [
          {
            "name": "phase",
            "type": "bevy_input::touch::TouchPhase"
          },
          {
            "name": "position",
            "type": "glam::Vec2"
          },
          {
            "name": "window",
            "type": "bevy_ecs::entity::Entity"
          },
          {
            "name": "force",
            "type": "core::option::Option<bevy_input::touch::ForceTouch>"
          },
          {
            "name": "id",
            "type": "u64"
          }
        ]
      }
    },
    "bevy_input::touch::TouchPhase": {
      "identifier": "TouchPhase",
      "crate": "bevy_input",
      "path": "bevy_input::touch::TouchPhase",
      "documentation": " A phase of a [`TouchInput`].\n\n ## Usage\n\n It is used to describe the phase of the touch input that is currently active.\n This includes a phase that indicates that a touch input has started or ended,\n or that a finger has moved. There is also a canceled phase that indicates that\n the system canceled the tracking of the finger.",
      "associated_functions": [
        "bevy_input::touch::TouchPhase::assert_receiver_is_total_eq",
        "bevy_input::touch::TouchPhase::clone",
        "bevy_input::touch::TouchPhase::eq"
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "Started"
        },
        {
          "kind": "Unit",
          "name": "Moved"
        },
        {
          "kind": "Unit",
          "name": "Ended"
        },
        {
          "kind": "Unit",
          "name": "Canceled"
        }
      ]
    },
    "bevy_math::affine3::Affine3": {
      "identifier": "Affine3",
      "crate": "bevy_math",
      "path": "bevy_math::affine3::Affine3",
      "documentation": " Reduced-size version of `glam::Affine3A` for use when storage has\n significant performance impact. Convert to `glam::Affine3A` to do\n non-trivial calculations.",
      "layout": {
        "kind": "Struct",
        "name": "Affine3",
        "fields": [
          {
            "name": "matrix3",
            "type": "glam::Mat3"
          },
          {
            "name": "translation",
            "type": "glam::Vec3"
          }
        ]
      }
    },
    "bevy_math::aspect_ratio::AspectRatio": {
      "identifier": "AspectRatio",
      "crate": "bevy_math",
      "path": "bevy_math::aspect_ratio::AspectRatio",
      "documentation": " An `AspectRatio` is the ratio of width to height.",
      "associated_functions": [
        "bevy_math::aspect_ratio::AspectRatio::clone",
        "bevy_math::aspect_ratio::AspectRatio::eq",
        "bevy_math::aspect_ratio::AspectRatio::inverse",
        "bevy_math::aspect_ratio::AspectRatio::is_landscape",
        "bevy_math::aspect_ratio::AspectRatio::is_portrait",
        "bevy_math::aspect_ratio::AspectRatio::is_square",
        "bevy_math::aspect_ratio::AspectRatio::ratio"
      ],
      "layout": {
        "kind": "TupleStruct",
        "name": "AspectRatio",
        "fields": [
          {
            "type": "f32"
          }
        ]
      }
    },
    "bevy_math::bounding::bounded2d::Aabb2d": {
      "identifier": "Aabb2d",
      "crate": "bevy_math",
      "path": "bevy_math::bounding::bounded2d::Aabb2d",
      "documentation": " A 2D axis-aligned bounding box, or bounding rectangle",
      "associated_functions": [
        "bevy_math::bounding::bounded2d::Aabb2d::bounding_circle",
        "bevy_math::bounding::bounded2d::Aabb2d::clone",
        "bevy_math::bounding::bounded2d::Aabb2d::closest_point",
        "bevy_math::bounding::bounded2d::Aabb2d::new"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Aabb2d",
        "fields": [
          {
            "name": "min",
            "type": "glam::Vec2"
          },
          {
            "name": "max",
            "type": "glam::Vec2"
          }
        ]
      }
    },
    "bevy_math::bounding::bounded2d::BoundingCircle": {
      "identifier": "BoundingCircle",
      "crate": "bevy_math",
      "path": "bevy_math::bounding::bounded2d::BoundingCircle",
      "documentation": " A bounding circle",
      "associated_functions": [
        "bevy_math::bounding::bounded2d::BoundingCircle::aabb_2d",
        "bevy_math::bounding::bounded2d::BoundingCircle::clone",
        "bevy_math::bounding::bounded2d::BoundingCircle::closest_point",
        "bevy_math::bounding::bounded2d::BoundingCircle::new",
        "bevy_math::bounding::bounded2d::BoundingCircle::radius"
      ],
      "layout": {
        "kind": "Struct",
        "name": "BoundingCircle",
        "fields": [
          {
            "name": "center",
            "type": "glam::Vec2"
          },
          {
            "name": "circle",
            "type": "bevy_math::primitives::dim2::Circle"
          }
        ]
      }
    },
    "bevy_math::bounding::bounded3d::Aabb3d": {
      "identifier": "Aabb3d",
      "crate": "bevy_math",
      "path": "bevy_math::bounding::bounded3d::Aabb3d",
      "documentation": " A 3D axis-aligned bounding box",
      "associated_functions": [
        "bevy_math::bounding::bounded3d::Aabb3d::bounding_sphere",
        "bevy_math::bounding::bounded3d::Aabb3d::clone"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Aabb3d",
        "fields": [
          {
            "name": "min",
            "type": "glam::Vec3A"
          },
          {
            "name": "max",
            "type": "glam::Vec3A"
          }
        ]
      }
    },
    "bevy_math::bounding::bounded3d::BoundingSphere": {
      "identifier": "BoundingSphere",
      "crate": "bevy_math",
      "path": "bevy_math::bounding::bounded3d::BoundingSphere",
      "documentation": " A bounding sphere",
      "associated_functions": [
        "bevy_math::bounding::bounded3d::BoundingSphere::aabb_3d",
        "bevy_math::bounding::bounded3d::BoundingSphere::clone",
        "bevy_math::bounding::bounded3d::BoundingSphere::radius"
      ],
      "layout": {
        "kind": "Struct",
        "name": "BoundingSphere",
        "fields": [
          {
            "name": "center",
            "type": "glam::Vec3A"
          },
          {
            "name": "sphere",
            "type": "bevy_math::primitives::dim3::Sphere"
          }
        ]
      }
    },
    "bevy_math::bounding::raycast2d::AabbCast2d": {
      "identifier": "AabbCast2d",
      "crate": "bevy_math",
      "path": "bevy_math::bounding::raycast2d::AabbCast2d",
      "documentation": " An intersection test that casts an [`Aabb2d`] along a ray.",
      "associated_functions": [
        "bevy_math::bounding::raycast2d::AabbCast2d::aabb_collision_at",
        "bevy_math::bounding::raycast2d::AabbCast2d::clone",
        "bevy_math::bounding::raycast2d::AabbCast2d::from_ray",
        "bevy_math::bounding::raycast2d::AabbCast2d::new"
      ],
      "layout": {
        "kind": "Struct",
        "name": "AabbCast2d",
        "fields": [
          {
            "name": "ray",
            "type": "bevy_math::bounding::raycast2d::RayCast2d"
          },
          {
            "name": "aabb",
            "type": "bevy_math::bounding::bounded2d::Aabb2d"
          }
        ]
      }
    },
    "bevy_math::bounding::raycast2d::BoundingCircleCast": {
      "identifier": "BoundingCircleCast",
      "crate": "bevy_math",
      "path": "bevy_math::bounding::raycast2d::BoundingCircleCast",
      "documentation": " An intersection test that casts a [`BoundingCircle`] along a ray.",
      "associated_functions": [
        "bevy_math::bounding::raycast2d::BoundingCircleCast::circle_collision_at",
        "bevy_math::bounding::raycast2d::BoundingCircleCast::clone",
        "bevy_math::bounding::raycast2d::BoundingCircleCast::from_ray",
        "bevy_math::bounding::raycast2d::BoundingCircleCast::new"
      ],
      "layout": {
        "kind": "Struct",
        "name": "BoundingCircleCast",
        "fields": [
          {
            "name": "ray",
            "type": "bevy_math::bounding::raycast2d::RayCast2d"
          },
          {
            "name": "circle",
            "type": "bevy_math::bounding::bounded2d::BoundingCircle"
          }
        ]
      }
    },
    "bevy_math::bounding::raycast2d::RayCast2d": {
      "identifier": "RayCast2d",
      "crate": "bevy_math",
      "path": "bevy_math::bounding::raycast2d::RayCast2d",
      "documentation": " A raycast intersection test for 2D bounding volumes",
      "associated_functions": [
        "bevy_math::bounding::raycast2d::RayCast2d::aabb_intersection_at",
        "bevy_math::bounding::raycast2d::RayCast2d::circle_intersection_at",
        "bevy_math::bounding::raycast2d::RayCast2d::clone",
        "bevy_math::bounding::raycast2d::RayCast2d::direction_recip",
        "bevy_math::bounding::raycast2d::RayCast2d::from_ray",
        "bevy_math::bounding::raycast2d::RayCast2d::new"
      ],
      "layout": {
        "kind": "Struct",
        "name": "RayCast2d",
        "fields": [
          {
            "name": "ray",
            "type": "bevy_math::ray::Ray2d"
          },
          {
            "name": "max",
            "type": "f32"
          },
          {
            "name": "direction_recip",
            "type": "glam::Vec2"
          }
        ]
      }
    },
    "bevy_math::bounding::raycast3d::AabbCast3d": {
      "identifier": "AabbCast3d",
      "crate": "bevy_math",
      "path": "bevy_math::bounding::raycast3d::AabbCast3d",
      "documentation": " An intersection test that casts an [`Aabb3d`] along a ray.",
      "associated_functions": [
        "bevy_math::bounding::raycast3d::AabbCast3d::aabb_collision_at",
        "bevy_math::bounding::raycast3d::AabbCast3d::clone",
        "bevy_math::bounding::raycast3d::AabbCast3d::from_ray"
      ],
      "layout": {
        "kind": "Struct",
        "name": "AabbCast3d",
        "fields": [
          {
            "name": "ray",
            "type": "bevy_math::bounding::raycast3d::RayCast3d"
          },
          {
            "name": "aabb",
            "type": "bevy_math::bounding::bounded3d::Aabb3d"
          }
        ]
      }
    },
    "bevy_math::bounding::raycast3d::BoundingSphereCast": {
      "identifier": "BoundingSphereCast",
      "crate": "bevy_math",
      "path": "bevy_math::bounding::raycast3d::BoundingSphereCast",
      "documentation": " An intersection test that casts a [`BoundingSphere`] along a ray.",
      "associated_functions": [
        "bevy_math::bounding::raycast3d::BoundingSphereCast::clone",
        "bevy_math::bounding::raycast3d::BoundingSphereCast::from_ray",
        "bevy_math::bounding::raycast3d::BoundingSphereCast::sphere_collision_at"
      ],
      "layout": {
        "kind": "Struct",
        "name": "BoundingSphereCast",
        "fields": [
          {
            "name": "ray",
            "type": "bevy_math::bounding::raycast3d::RayCast3d"
          },
          {
            "name": "sphere",
            "type": "bevy_math::bounding::bounded3d::BoundingSphere"
          }
        ]
      }
    },
    "bevy_math::bounding::raycast3d::RayCast3d": {
      "identifier": "RayCast3d",
      "crate": "bevy_math",
      "path": "bevy_math::bounding::raycast3d::RayCast3d",
      "documentation": " A raycast intersection test for 3D bounding volumes",
      "associated_functions": [
        "bevy_math::bounding::raycast3d::RayCast3d::aabb_intersection_at",
        "bevy_math::bounding::raycast3d::RayCast3d::clone",
        "bevy_math::bounding::raycast3d::RayCast3d::direction_recip",
        "bevy_math::bounding::raycast3d::RayCast3d::from_ray",
        "bevy_math::bounding::raycast3d::RayCast3d::sphere_intersection_at"
      ],
      "layout": {
        "kind": "Struct",
        "name": "RayCast3d",
        "fields": [
          {
            "name": "origin",
            "type": "glam::Vec3A"
          },
          {
            "name": "direction",
            "type": "bevy_math::direction::Dir3A"
          },
          {
            "name": "max",
            "type": "f32"
          },
          {
            "name": "direction_recip",
            "type": "glam::Vec3A"
          }
        ]
      }
    },
    "bevy_math::compass::CompassOctant": {
      "identifier": "CompassOctant",
      "crate": "bevy_math",
      "path": "bevy_math::compass::CompassOctant",
      "documentation": " A compass enum with 8 directions.\n ```text\n          N (North)\n          ▲\n     NW   │   NE\n        ╲ │ ╱\n W (West) ┼─────► E (East)\n        ╱ │ ╲\n     SW   │   SE\n          ▼\n          S (South)\n ```",
      "associated_functions": [
        "bevy_math::compass::CompassOctant::assert_receiver_is_total_eq",
        "bevy_math::compass::CompassOctant::clone",
        "bevy_math::compass::CompassOctant::eq"
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "North"
        },
        {
          "kind": "Unit",
          "name": "NorthEast"
        },
        {
          "kind": "Unit",
          "name": "East"
        },
        {
          "kind": "Unit",
          "name": "SouthEast"
        },
        {
          "kind": "Unit",
          "name": "South"
        },
        {
          "kind": "Unit",
          "name": "SouthWest"
        },
        {
          "kind": "Unit",
          "name": "West"
        },
        {
          "kind": "Unit",
          "name": "NorthWest"
        }
      ]
    },
    "bevy_math::compass::CompassQuadrant": {
      "identifier": "CompassQuadrant",
      "crate": "bevy_math",
      "path": "bevy_math::compass::CompassQuadrant",
      "documentation": " A compass enum with 4 directions.\n ```text\n          N (North)\n          ▲\n          │\n          │\n W (West) ┼─────► E (East)\n          │\n          │\n          ▼\n          S (South)\n ```",
      "associated_functions": [
        "bevy_math::compass::CompassQuadrant::assert_receiver_is_total_eq",
        "bevy_math::compass::CompassQuadrant::clone",
        "bevy_math::compass::CompassQuadrant::eq"
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "North"
        },
        {
          "kind": "Unit",
          "name": "East"
        },
        {
          "kind": "Unit",
          "name": "South"
        },
        {
          "kind": "Unit",
          "name": "West"
        }
      ]
    },
    "bevy_math::curve::easing::EaseFunction": {
      "identifier": "EaseFunction",
      "crate": "bevy_math",
      "path": "bevy_math::curve::easing::EaseFunction",
      "documentation": " Curve functions over the [unit interval], commonly used for easing transitions.\n\n [unit interval]: `Interval::UNIT`",
      "associated_functions": [
        "bevy_math::curve::easing::EaseFunction::clone",
        "bevy_math::curve::easing::EaseFunction::eq"
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "Linear"
        },
        {
          "kind": "Unit",
          "name": "QuadraticIn"
        },
        {
          "kind": "Unit",
          "name": "QuadraticOut"
        },
        {
          "kind": "Unit",
          "name": "QuadraticInOut"
        },
        {
          "kind": "Unit",
          "name": "CubicIn"
        },
        {
          "kind": "Unit",
          "name": "CubicOut"
        },
        {
          "kind": "Unit",
          "name": "CubicInOut"
        },
        {
          "kind": "Unit",
          "name": "QuarticIn"
        },
        {
          "kind": "Unit",
          "name": "QuarticOut"
        },
        {
          "kind": "Unit",
          "name": "QuarticInOut"
        },
        {
          "kind": "Unit",
          "name": "QuinticIn"
        },
        {
          "kind": "Unit",
          "name": "QuinticOut"
        },
        {
          "kind": "Unit",
          "name": "QuinticInOut"
        },
        {
          "kind": "Unit",
          "name": "SineIn"
        },
        {
          "kind": "Unit",
          "name": "SineOut"
        },
        {
          "kind": "Unit",
          "name": "SineInOut"
        },
        {
          "kind": "Unit",
          "name": "CircularIn"
        },
        {
          "kind": "Unit",
          "name": "CircularOut"
        },
        {
          "kind": "Unit",
          "name": "CircularInOut"
        },
        {
          "kind": "Unit",
          "name": "ExponentialIn"
        },
        {
          "kind": "Unit",
          "name": "ExponentialOut"
        },
        {
          "kind": "Unit",
          "name": "ExponentialInOut"
        },
        {
          "kind": "Unit",
          "name": "ElasticIn"
        },
        {
          "kind": "Unit",
          "name": "ElasticOut"
        },
        {
          "kind": "Unit",
          "name": "ElasticInOut"
        },
        {
          "kind": "Unit",
          "name": "BackIn"
        },
        {
          "kind": "Unit",
          "name": "BackOut"
        },
        {
          "kind": "Unit",
          "name": "BackInOut"
        },
        {
          "kind": "Unit",
          "name": "BounceIn"
        },
        {
          "kind": "Unit",
          "name": "BounceOut"
        },
        {
          "kind": "Unit",
          "name": "BounceInOut"
        },
        {
          "kind": "TupleStruct",
          "name": "Steps",
          "fields": [
            {
              "type": "usize"
            }
          ]
        },
        {
          "kind": "TupleStruct",
          "name": "Elastic",
          "fields": [
            {
              "type": "f32"
            }
          ]
        }
      ]
    },
    "bevy_math::curve::interval::Interval": {
      "identifier": "Interval",
      "crate": "bevy_math",
      "path": "bevy_math::curve::interval::Interval",
      "documentation": " A nonempty closed interval, possibly unbounded in either direction.\n\n In other words, the interval may stretch all the way to positive or negative infinity, but it\n will always have some nonempty interior.",
      "associated_functions": [
        "bevy_math::curve::interval::Interval::clamp",
        "bevy_math::curve::interval::Interval::clone",
        "bevy_math::curve::interval::Interval::contains",
        "bevy_math::curve::interval::Interval::contains_interval",
        "bevy_math::curve::interval::Interval::end",
        "bevy_math::curve::interval::Interval::eq",
        "bevy_math::curve::interval::Interval::has_finite_end",
        "bevy_math::curve::interval::Interval::has_finite_start",
        "bevy_math::curve::interval::Interval::is_bounded",
        "bevy_math::curve::interval::Interval::length",
        "bevy_math::curve::interval::Interval::start"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Interval",
        "fields": [
          {
            "name": "start",
            "type": "f32"
          },
          {
            "name": "end",
            "type": "f32"
          }
        ]
      }
    },
    "bevy_math::direction::Dir2": {
      "identifier": "Dir2",
      "crate": "bevy_math",
      "path": "bevy_math::direction::Dir2",
      "documentation": " A normalized vector pointing in a direction in 2D space",
      "associated_functions": [
        "bevy_math::direction::Dir2::as_vec2",
        "bevy_math::direction::Dir2::clone",
        "bevy_math::direction::Dir2::eq",
        "bevy_math::direction::Dir2::fast_renormalize",
        "bevy_math::direction::Dir2::from_xy_unchecked",
        "bevy_math::direction::Dir2::mul",
        "bevy_math::direction::Dir2::neg",
        "bevy_math::direction::Dir2::new_unchecked",
        "bevy_math::direction::Dir2::rotation_from",
        "bevy_math::direction::Dir2::rotation_from_x",
        "bevy_math::direction::Dir2::rotation_from_y",
        "bevy_math::direction::Dir2::rotation_to",
        "bevy_math::direction::Dir2::rotation_to_x",
        "bevy_math::direction::Dir2::rotation_to_y",
        "bevy_math::direction::Dir2::slerp"
      ],
      "layout": {
        "kind": "TupleStruct",
        "name": "Dir2",
        "fields": [
          {
            "type": "glam::Vec2"
          }
        ]
      }
    },
    "bevy_math::direction::Dir3": {
      "identifier": "Dir3",
      "crate": "bevy_math",
      "path": "bevy_math::direction::Dir3",
      "documentation": " A normalized vector pointing in a direction in 3D space",
      "associated_functions": [
        "bevy_math::direction::Dir3::as_vec3",
        "bevy_math::direction::Dir3::clone",
        "bevy_math::direction::Dir3::eq",
        "bevy_math::direction::Dir3::fast_renormalize",
        "bevy_math::direction::Dir3::from_xyz_unchecked",
        "bevy_math::direction::Dir3::mul",
        "bevy_math::direction::Dir3::neg",
        "bevy_math::direction::Dir3::new_unchecked",
        "bevy_math::direction::Dir3::slerp"
      ],
      "layout": {
        "kind": "TupleStruct",
        "name": "Dir3",
        "fields": [
          {
            "type": "glam::Vec3"
          }
        ]
      }
    },
    "bevy_math::direction::Dir3A": {
      "identifier": "Dir3A",
      "crate": "bevy_math",
      "path": "bevy_math::direction::Dir3A",
      "documentation": " A normalized SIMD vector pointing in a direction in 3D space.\n\n This type stores a 16 byte aligned [`Vec3A`].\n This may or may not be faster than [`Dir3`]: make sure to benchmark!",
      "associated_functions": [
        "bevy_math::direction::Dir3A::as_vec3a",
        "bevy_math::direction::Dir3A::clone",
        "bevy_math::direction::Dir3A::eq",
        "bevy_math::direction::Dir3A::fast_renormalize",
        "bevy_math::direction::Dir3A::from_xyz_unchecked",
        "bevy_math::direction::Dir3A::mul",
        "bevy_math::direction::Dir3A::neg",
        "bevy_math::direction::Dir3A::new_unchecked",
        "bevy_math::direction::Dir3A::slerp"
      ],
      "layout": {
        "kind": "TupleStruct",
        "name": "Dir3A",
        "fields": [
          {
            "type": "glam::Vec3A"
          }
        ]
      }
    },
    "bevy_math::float_ord::FloatOrd": {
      "identifier": "FloatOrd",
      "crate": "bevy_math",
      "path": "bevy_math::float_ord::FloatOrd",
      "documentation": " A wrapper for floats that implements [`Ord`], [`Eq`], and [`Hash`] traits.\n\n This is a work around for the fact that the IEEE 754-2008 standard,\n implemented by Rust's [`f32`] type,\n doesn't define an ordering for [`NaN`](f32::NAN),\n and `NaN` is not considered equal to any other `NaN`.\n\n Wrapping a float with `FloatOrd` breaks conformance with the standard\n by sorting `NaN` as less than all other numbers and equal to any other `NaN`.",
      "associated_functions": [
        "bevy_math::float_ord::FloatOrd::clone",
        "bevy_math::float_ord::FloatOrd::eq",
        "bevy_math::float_ord::FloatOrd::ge",
        "bevy_math::float_ord::FloatOrd::gt",
        "bevy_math::float_ord::FloatOrd::le",
        "bevy_math::float_ord::FloatOrd::lt",
        "bevy_math::float_ord::FloatOrd::neg"
      ],
      "layout": {
        "kind": "TupleStruct",
        "name": "FloatOrd",
        "fields": [
          {
            "type": "f32"
          }
        ]
      }
    },
    "bevy_math::isometry::Isometry2d": {
      "identifier": "Isometry2d",
      "crate": "bevy_math",
      "path": "bevy_math::isometry::Isometry2d",
      "documentation": " An isometry in two dimensions, representing a rotation followed by a translation.\n This can often be useful for expressing relative positions and transformations from one position to another.\n\n In particular, this type represents a distance-preserving transformation known as a *rigid motion* or a *direct motion*,\n and belongs to the special [Euclidean group] SE(2). This includes translation and rotation, but excludes reflection.\n\n For the three-dimensional version, see [`Isometry3d`].\n\n [Euclidean group]: https://en.wikipedia.org/wiki/Euclidean_group\n\n # Example\n\n Isometries can be created from a given translation and rotation:\n\n ```\n # use bevy_math::{Isometry2d, Rot2, Vec2};\n #\n let iso = Isometry2d::new(Vec2::new(2.0, 1.0), Rot2::degrees(90.0));\n ```\n\n Or from separate parts:\n\n ```\n # use bevy_math::{Isometry2d, Rot2, Vec2};\n #\n let iso1 = Isometry2d::from_translation(Vec2::new(2.0, 1.0));\n let iso2 = Isometry2d::from_rotation(Rot2::degrees(90.0));\n ```\n\n The isometries can be used to transform points:\n\n ```\n # use approx::assert_abs_diff_eq;\n # use bevy_math::{Isometry2d, Rot2, Vec2};\n #\n let iso = Isometry2d::new(Vec2::new(2.0, 1.0), Rot2::degrees(90.0));\n let point = Vec2::new(4.0, 4.0);\n\n // These are equivalent\n let result = iso.transform_point(point);\n let result = iso * point;\n\n assert_eq!(result, Vec2::new(-2.0, 5.0));\n ```\n\n Isometries can also be composed together:\n\n ```\n # use bevy_math::{Isometry2d, Rot2, Vec2};\n #\n # let iso = Isometry2d::new(Vec2::new(2.0, 1.0), Rot2::degrees(90.0));\n # let iso1 = Isometry2d::from_translation(Vec2::new(2.0, 1.0));\n # let iso2 = Isometry2d::from_rotation(Rot2::degrees(90.0));\n #\n assert_eq!(iso1 * iso2, iso);\n ```\n\n One common operation is to compute an isometry representing the relative positions of two objects\n for things like intersection tests. This can be done with an inverse transformation:\n\n ```\n # use bevy_math::{Isometry2d, Rot2, Vec2};\n #\n let circle_iso = Isometry2d::from_translation(Vec2::new(2.0, 1.0));\n let rectangle_iso = Isometry2d::from_rotation(Rot2::degrees(90.0));\n\n // Compute the relative position and orientation between the two shapes\n let relative_iso = circle_iso.inverse() * rectangle_iso;\n\n // Or alternatively, to skip an extra rotation operation:\n let relative_iso = circle_iso.inverse_mul(rectangle_iso);\n ```",
      "associated_functions": [
        "bevy_math::isometry::Isometry2d::clone",
        "bevy_math::isometry::Isometry2d::eq",
        "bevy_math::isometry::Isometry2d::from_rotation",
        "bevy_math::isometry::Isometry2d::from_translation",
        "bevy_math::isometry::Isometry2d::from_xy",
        "bevy_math::isometry::Isometry2d::inverse",
        "bevy_math::isometry::Isometry2d::inverse_mul",
        "bevy_math::isometry::Isometry2d::inverse_transform_point",
        "bevy_math::isometry::Isometry2d::mul",
        "bevy_math::isometry::Isometry2d::mul-1",
        "bevy_math::isometry::Isometry2d::mul-2",
        "bevy_math::isometry::Isometry2d::new",
        "bevy_math::isometry::Isometry2d::transform_point"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Isometry2d",
        "fields": [
          {
            "name": "rotation",
            "type": "bevy_math::rotation2d::Rot2"
          },
          {
            "name": "translation",
            "type": "glam::Vec2"
          }
        ]
      }
    },
    "bevy_math::isometry::Isometry3d": {
      "identifier": "Isometry3d",
      "crate": "bevy_math",
      "path": "bevy_math::isometry::Isometry3d",
      "documentation": " An isometry in three dimensions, representing a rotation followed by a translation.\n This can often be useful for expressing relative positions and transformations from one position to another.\n\n In particular, this type represents a distance-preserving transformation known as a *rigid motion* or a *direct motion*,\n and belongs to the special [Euclidean group] SE(3). This includes translation and rotation, but excludes reflection.\n\n For the two-dimensional version, see [`Isometry2d`].\n\n [Euclidean group]: https://en.wikipedia.org/wiki/Euclidean_group\n\n # Example\n\n Isometries can be created from a given translation and rotation:\n\n ```\n # use bevy_math::{Isometry3d, Quat, Vec3};\n # use std::f32::consts::FRAC_PI_2;\n #\n let iso = Isometry3d::new(Vec3::new(2.0, 1.0, 3.0), Quat::from_rotation_z(FRAC_PI_2));\n ```\n\n Or from separate parts:\n\n ```\n # use bevy_math::{Isometry3d, Quat, Vec3};\n # use std::f32::consts::FRAC_PI_2;\n #\n let iso1 = Isometry3d::from_translation(Vec3::new(2.0, 1.0, 3.0));\n let iso2 = Isometry3d::from_rotation(Quat::from_rotation_z(FRAC_PI_2));\n ```\n\n The isometries can be used to transform points:\n\n ```\n # use approx::assert_relative_eq;\n # use bevy_math::{Isometry3d, Quat, Vec3};\n # use std::f32::consts::FRAC_PI_2;\n #\n let iso = Isometry3d::new(Vec3::new(2.0, 1.0, 3.0), Quat::from_rotation_z(FRAC_PI_2));\n let point = Vec3::new(4.0, 4.0, 4.0);\n\n // These are equivalent\n let result = iso.transform_point(point);\n let result = iso * point;\n\n assert_relative_eq!(result, Vec3::new(-2.0, 5.0, 7.0));\n ```\n\n Isometries can also be composed together:\n\n ```\n # use bevy_math::{Isometry3d, Quat, Vec3};\n # use std::f32::consts::FRAC_PI_2;\n #\n # let iso = Isometry3d::new(Vec3::new(2.0, 1.0, 3.0), Quat::from_rotation_z(FRAC_PI_2));\n # let iso1 = Isometry3d::from_translation(Vec3::new(2.0, 1.0, 3.0));\n # let iso2 = Isometry3d::from_rotation(Quat::from_rotation_z(FRAC_PI_2));\n #\n assert_eq!(iso1 * iso2, iso);\n ```\n\n One common operation is to compute an isometry representing the relative positions of two objects\n for things like intersection tests. This can be done with an inverse transformation:\n\n ```\n # use bevy_math::{Isometry3d, Quat, Vec3};\n # use std::f32::consts::FRAC_PI_2;\n #\n let sphere_iso = Isometry3d::from_translation(Vec3::new(2.0, 1.0, 3.0));\n let cuboid_iso = Isometry3d::from_rotation(Quat::from_rotation_z(FRAC_PI_2));\n\n // Compute the relative position and orientation between the two shapes\n let relative_iso = sphere_iso.inverse() * cuboid_iso;\n\n // Or alternatively, to skip an extra rotation operation:\n let relative_iso = sphere_iso.inverse_mul(cuboid_iso);\n ```",
      "associated_functions": [
        "bevy_math::isometry::Isometry3d::clone",
        "bevy_math::isometry::Isometry3d::eq",
        "bevy_math::isometry::Isometry3d::from_rotation",
        "bevy_math::isometry::Isometry3d::from_xyz",
        "bevy_math::isometry::Isometry3d::inverse",
        "bevy_math::isometry::Isometry3d::inverse_mul",
        "bevy_math::isometry::Isometry3d::mul",
        "bevy_math::isometry::Isometry3d::mul-1",
        "bevy_math::isometry::Isometry3d::mul-2",
        "bevy_math::isometry::Isometry3d::mul-3"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Isometry3d",
        "fields": [
          {
            "name": "rotation",
            "type": "glam::Quat"
          },
          {
            "name": "translation",
            "type": "glam::Vec3A"
          }
        ]
      }
    },
    "bevy_math::primitives::dim2::Annulus": {
      "identifier": "Annulus",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim2::Annulus",
      "documentation": " A primitive shape formed by the region between two circles, also known as a ring.",
      "associated_functions": [
        "bevy_math::primitives::dim2::Annulus::clone",
        "bevy_math::primitives::dim2::Annulus::closest_point",
        "bevy_math::primitives::dim2::Annulus::diameter",
        "bevy_math::primitives::dim2::Annulus::eq",
        "bevy_math::primitives::dim2::Annulus::new",
        "bevy_math::primitives::dim2::Annulus::thickness"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Annulus",
        "fields": [
          {
            "name": "inner_circle",
            "type": "bevy_math::primitives::dim2::Circle"
          },
          {
            "name": "outer_circle",
            "type": "bevy_math::primitives::dim2::Circle"
          }
        ]
      }
    },
    "bevy_math::primitives::dim2::Arc2d": {
      "identifier": "Arc2d",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim2::Arc2d",
      "documentation": " A primitive representing an arc between two points on a circle.\n\n An arc has no area.\n If you want to include the portion of a circle's area swept out by the arc,\n use the pie-shaped [`CircularSector`].\n If you want to include only the space inside the convex hull of the arc,\n use the bowl-shaped [`CircularSegment`].\n\n The arc is drawn starting from [`Vec2::Y`], extending by `half_angle` radians on\n either side. The center of the circle is the origin [`Vec2::ZERO`]. Note that this\n means that the origin may not be within the `Arc2d`'s convex hull.\n\n **Warning:** Arcs with negative angle or radius, or with angle greater than an entire circle, are not officially supported.\n It is recommended to normalize arcs to have an angle in [0, 2π].",
      "associated_functions": [
        "bevy_math::primitives::dim2::Arc2d::angle",
        "bevy_math::primitives::dim2::Arc2d::apothem",
        "bevy_math::primitives::dim2::Arc2d::chord_length",
        "bevy_math::primitives::dim2::Arc2d::chord_midpoint",
        "bevy_math::primitives::dim2::Arc2d::clone",
        "bevy_math::primitives::dim2::Arc2d::eq",
        "bevy_math::primitives::dim2::Arc2d::from_degrees",
        "bevy_math::primitives::dim2::Arc2d::from_radians",
        "bevy_math::primitives::dim2::Arc2d::from_turns",
        "bevy_math::primitives::dim2::Arc2d::half_chord_length",
        "bevy_math::primitives::dim2::Arc2d::is_major",
        "bevy_math::primitives::dim2::Arc2d::is_minor",
        "bevy_math::primitives::dim2::Arc2d::left_endpoint",
        "bevy_math::primitives::dim2::Arc2d::length",
        "bevy_math::primitives::dim2::Arc2d::midpoint",
        "bevy_math::primitives::dim2::Arc2d::new",
        "bevy_math::primitives::dim2::Arc2d::right_endpoint",
        "bevy_math::primitives::dim2::Arc2d::sagitta"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Arc2d",
        "fields": [
          {
            "name": "radius",
            "type": "f32"
          },
          {
            "name": "half_angle",
            "type": "f32"
          }
        ]
      }
    },
    "bevy_math::primitives::dim2::Capsule2d": {
      "identifier": "Capsule2d",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim2::Capsule2d",
      "documentation": " A 2D capsule primitive, also known as a stadium or pill shape.\n\n A two-dimensional capsule is defined as a neighborhood of points at a distance (radius) from a line",
      "associated_functions": [
        "bevy_math::primitives::dim2::Capsule2d::clone",
        "bevy_math::primitives::dim2::Capsule2d::eq",
        "bevy_math::primitives::dim2::Capsule2d::new",
        "bevy_math::primitives::dim2::Capsule2d::to_inner_rectangle"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Capsule2d",
        "fields": [
          {
            "name": "radius",
            "type": "f32"
          },
          {
            "name": "half_length",
            "type": "f32"
          }
        ]
      }
    },
    "bevy_math::primitives::dim2::Circle": {
      "identifier": "Circle",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim2::Circle",
      "documentation": " A circle primitive, representing the set of points some distance from the origin",
      "associated_functions": [
        "bevy_math::primitives::dim2::Circle::clone",
        "bevy_math::primitives::dim2::Circle::closest_point",
        "bevy_math::primitives::dim2::Circle::diameter",
        "bevy_math::primitives::dim2::Circle::eq",
        "bevy_math::primitives::dim2::Circle::new"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Circle",
        "fields": [
          {
            "name": "radius",
            "type": "f32"
          }
        ]
      }
    },
    "bevy_math::primitives::dim2::CircularSector": {
      "identifier": "CircularSector",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim2::CircularSector",
      "documentation": " A primitive representing a circular sector: a pie slice of a circle.\n\n The segment is positioned so that it always includes [`Vec2::Y`] and is vertically symmetrical.\n To orient the sector differently, apply a rotation.\n The sector is drawn with the center of its circle at the origin [`Vec2::ZERO`].\n\n **Warning:** Circular sectors with negative angle or radius, or with angle greater than an entire circle, are not officially supported.\n We recommend normalizing circular sectors to have an angle in [0, 2π].",
      "associated_functions": [
        "bevy_math::primitives::dim2::CircularSector::angle",
        "bevy_math::primitives::dim2::CircularSector::apothem",
        "bevy_math::primitives::dim2::CircularSector::arc_length",
        "bevy_math::primitives::dim2::CircularSector::chord_length",
        "bevy_math::primitives::dim2::CircularSector::chord_midpoint",
        "bevy_math::primitives::dim2::CircularSector::clone",
        "bevy_math::primitives::dim2::CircularSector::eq",
        "bevy_math::primitives::dim2::CircularSector::from_degrees",
        "bevy_math::primitives::dim2::CircularSector::from_radians",
        "bevy_math::primitives::dim2::CircularSector::from_turns",
        "bevy_math::primitives::dim2::CircularSector::half_angle",
        "bevy_math::primitives::dim2::CircularSector::half_chord_length",
        "bevy_math::primitives::dim2::CircularSector::new",
        "bevy_math::primitives::dim2::CircularSector::radius",
        "bevy_math::primitives::dim2::CircularSector::sagitta"
      ],
      "layout": {
        "kind": "Struct",
        "name": "CircularSector",
        "fields": [
          {
            "name": "arc",
            "type": "bevy_math::primitives::dim2::Arc2d"
          }
        ]
      }
    },
    "bevy_math::primitives::dim2::CircularSegment": {
      "identifier": "CircularSegment",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim2::CircularSegment",
      "documentation": " A primitive representing a circular segment:\n the area enclosed by the arc of a circle and its chord (the line between its endpoints).\n\n The segment is drawn starting from [`Vec2::Y`], extending equally on either side.\n To orient the segment differently, apply a rotation.\n The segment is drawn with the center of its circle at the origin [`Vec2::ZERO`].\n When positioning a segment, the [`apothem`](Self::apothem) function may be particularly useful.\n\n **Warning:** Circular segments with negative angle or radius, or with angle greater than an entire circle, are not officially supported.\n We recommend normalizing circular segments to have an angle in [0, 2π].",
      "associated_functions": [
        "bevy_math::primitives::dim2::CircularSegment::angle",
        "bevy_math::primitives::dim2::CircularSegment::apothem",
        "bevy_math::primitives::dim2::CircularSegment::arc_length",
        "bevy_math::primitives::dim2::CircularSegment::chord_length",
        "bevy_math::primitives::dim2::CircularSegment::chord_midpoint",
        "bevy_math::primitives::dim2::CircularSegment::clone",
        "bevy_math::primitives::dim2::CircularSegment::eq",
        "bevy_math::primitives::dim2::CircularSegment::from_degrees",
        "bevy_math::primitives::dim2::CircularSegment::from_radians",
        "bevy_math::primitives::dim2::CircularSegment::from_turns",
        "bevy_math::primitives::dim2::CircularSegment::half_angle",
        "bevy_math::primitives::dim2::CircularSegment::half_chord_length",
        "bevy_math::primitives::dim2::CircularSegment::new",
        "bevy_math::primitives::dim2::CircularSegment::radius",
        "bevy_math::primitives::dim2::CircularSegment::sagitta"
      ],
      "layout": {
        "kind": "Struct",
        "name": "CircularSegment",
        "fields": [
          {
            "name": "arc",
            "type": "bevy_math::primitives::dim2::Arc2d"
          }
        ]
      }
    },
    "bevy_math::primitives::dim2::Ellipse": {
      "identifier": "Ellipse",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim2::Ellipse",
      "documentation": " An ellipse primitive, which is like a circle, but the width and height can be different",
      "associated_functions": [
        "bevy_math::primitives::dim2::Ellipse::clone",
        "bevy_math::primitives::dim2::Ellipse::eccentricity",
        "bevy_math::primitives::dim2::Ellipse::eq",
        "bevy_math::primitives::dim2::Ellipse::focal_length",
        "bevy_math::primitives::dim2::Ellipse::from_size",
        "bevy_math::primitives::dim2::Ellipse::new",
        "bevy_math::primitives::dim2::Ellipse::semi_major",
        "bevy_math::primitives::dim2::Ellipse::semi_minor"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Ellipse",
        "fields": [
          {
            "name": "half_size",
            "type": "glam::Vec2"
          }
        ]
      }
    },
    "bevy_math::primitives::dim2::Line2d": {
      "identifier": "Line2d",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim2::Line2d",
      "documentation": " An infinite line going through the origin along a direction in 2D space.\n\n For a finite line: [`Segment2d`]",
      "associated_functions": [
        "bevy_math::primitives::dim2::Line2d::clone",
        "bevy_math::primitives::dim2::Line2d::eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Line2d",
        "fields": [
          {
            "name": "direction",
            "type": "bevy_math::direction::Dir2"
          }
        ]
      }
    },
    "bevy_math::primitives::dim2::Plane2d": {
      "identifier": "Plane2d",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim2::Plane2d",
      "documentation": " An unbounded plane in 2D space. It forms a separating surface through the origin,\n stretching infinitely far",
      "associated_functions": [
        "bevy_math::primitives::dim2::Plane2d::clone",
        "bevy_math::primitives::dim2::Plane2d::eq",
        "bevy_math::primitives::dim2::Plane2d::new"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Plane2d",
        "fields": [
          {
            "name": "normal",
            "type": "bevy_math::direction::Dir2"
          }
        ]
      }
    },
    "bevy_math::primitives::dim2::Rectangle": {
      "identifier": "Rectangle",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim2::Rectangle",
      "documentation": " A rectangle primitive, which is like a square, except that the width and height can be different",
      "associated_functions": [
        "bevy_math::primitives::dim2::Rectangle::clone",
        "bevy_math::primitives::dim2::Rectangle::closest_point",
        "bevy_math::primitives::dim2::Rectangle::eq",
        "bevy_math::primitives::dim2::Rectangle::from_corners",
        "bevy_math::primitives::dim2::Rectangle::from_length",
        "bevy_math::primitives::dim2::Rectangle::from_size",
        "bevy_math::primitives::dim2::Rectangle::new",
        "bevy_math::primitives::dim2::Rectangle::size"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Rectangle",
        "fields": [
          {
            "name": "half_size",
            "type": "glam::Vec2"
          }
        ]
      }
    },
    "bevy_math::primitives::dim2::RegularPolygon": {
      "identifier": "RegularPolygon",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim2::RegularPolygon",
      "documentation": " A polygon centered on the origin where all vertices lie on a circle, equally far apart.",
      "associated_functions": [
        "bevy_math::primitives::dim2::RegularPolygon::circumradius",
        "bevy_math::primitives::dim2::RegularPolygon::clone",
        "bevy_math::primitives::dim2::RegularPolygon::eq",
        "bevy_math::primitives::dim2::RegularPolygon::external_angle_degrees",
        "bevy_math::primitives::dim2::RegularPolygon::external_angle_radians",
        "bevy_math::primitives::dim2::RegularPolygon::inradius",
        "bevy_math::primitives::dim2::RegularPolygon::internal_angle_degrees",
        "bevy_math::primitives::dim2::RegularPolygon::internal_angle_radians",
        "bevy_math::primitives::dim2::RegularPolygon::new",
        "bevy_math::primitives::dim2::RegularPolygon::side_length"
      ],
      "layout": {
        "kind": "Struct",
        "name": "RegularPolygon",
        "fields": [
          {
            "name": "circumcircle",
            "type": "bevy_math::primitives::dim2::Circle"
          },
          {
            "name": "sides",
            "type": "u32"
          }
        ]
      }
    },
    "bevy_math::primitives::dim2::Rhombus": {
      "identifier": "Rhombus",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim2::Rhombus",
      "documentation": " A rhombus primitive, also known as a diamond shape.\n A four sided polygon, centered on the origin, where opposite sides are parallel but without\n requiring right angles.",
      "associated_functions": [
        "bevy_math::primitives::dim2::Rhombus::circumradius",
        "bevy_math::primitives::dim2::Rhombus::clone",
        "bevy_math::primitives::dim2::Rhombus::closest_point",
        "bevy_math::primitives::dim2::Rhombus::eq",
        "bevy_math::primitives::dim2::Rhombus::from_inradius",
        "bevy_math::primitives::dim2::Rhombus::from_side",
        "bevy_math::primitives::dim2::Rhombus::inradius",
        "bevy_math::primitives::dim2::Rhombus::new",
        "bevy_math::primitives::dim2::Rhombus::side"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Rhombus",
        "fields": [
          {
            "name": "half_diagonals",
            "type": "glam::Vec2"
          }
        ]
      }
    },
    "bevy_math::primitives::dim2::Segment2d": {
      "identifier": "Segment2d",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim2::Segment2d",
      "documentation": " A segment of a line going through the origin along a direction in 2D space.",
      "associated_functions": [
        "bevy_math::primitives::dim2::Segment2d::clone",
        "bevy_math::primitives::dim2::Segment2d::eq",
        "bevy_math::primitives::dim2::Segment2d::new",
        "bevy_math::primitives::dim2::Segment2d::point1",
        "bevy_math::primitives::dim2::Segment2d::point2"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Segment2d",
        "fields": [
          {
            "name": "direction",
            "type": "bevy_math::direction::Dir2"
          },
          {
            "name": "half_length",
            "type": "f32"
          }
        ]
      }
    },
    "bevy_math::primitives::dim2::Triangle2d": {
      "identifier": "Triangle2d",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim2::Triangle2d",
      "documentation": " A triangle in 2D space",
      "associated_functions": [
        "bevy_math::primitives::dim2::Triangle2d::clone",
        "bevy_math::primitives::dim2::Triangle2d::eq",
        "bevy_math::primitives::dim2::Triangle2d::is_acute",
        "bevy_math::primitives::dim2::Triangle2d::is_degenerate",
        "bevy_math::primitives::dim2::Triangle2d::is_obtuse",
        "bevy_math::primitives::dim2::Triangle2d::new",
        "bevy_math::primitives::dim2::Triangle2d::reverse",
        "bevy_math::primitives::dim2::Triangle2d::reversed"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Triangle2d",
        "fields": [
          {
            "name": "vertices",
            "type": "[glam::Vec2; 3]"
          }
        ]
      }
    },
    "bevy_math::primitives::dim3::Capsule3d": {
      "identifier": "Capsule3d",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim3::Capsule3d",
      "documentation": " A 3D capsule primitive centered on the origin\n A three-dimensional capsule is defined as a surface at a distance (radius) from a line",
      "associated_functions": [
        "bevy_math::primitives::dim3::Capsule3d::clone",
        "bevy_math::primitives::dim3::Capsule3d::eq",
        "bevy_math::primitives::dim3::Capsule3d::new",
        "bevy_math::primitives::dim3::Capsule3d::to_cylinder"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Capsule3d",
        "fields": [
          {
            "name": "radius",
            "type": "f32"
          },
          {
            "name": "half_length",
            "type": "f32"
          }
        ]
      }
    },
    "bevy_math::primitives::dim3::Cone": {
      "identifier": "Cone",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim3::Cone",
      "documentation": " A cone primitive centered on the midpoint between the tip of the cone and the center of its base.\n\n The cone is oriented with its tip pointing towards the Y axis.",
      "associated_functions": [
        "bevy_math::primitives::dim3::Cone::base",
        "bevy_math::primitives::dim3::Cone::base_area",
        "bevy_math::primitives::dim3::Cone::clone",
        "bevy_math::primitives::dim3::Cone::eq",
        "bevy_math::primitives::dim3::Cone::lateral_area",
        "bevy_math::primitives::dim3::Cone::new",
        "bevy_math::primitives::dim3::Cone::slant_height"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Cone",
        "fields": [
          {
            "name": "radius",
            "type": "f32"
          },
          {
            "name": "height",
            "type": "f32"
          }
        ]
      }
    },
    "bevy_math::primitives::dim3::ConicalFrustum": {
      "identifier": "ConicalFrustum",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim3::ConicalFrustum",
      "documentation": " A conical frustum primitive.\n A conical frustum can be created\n by slicing off a section of a cone.",
      "associated_functions": [
        "bevy_math::primitives::dim3::ConicalFrustum::clone",
        "bevy_math::primitives::dim3::ConicalFrustum::eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "ConicalFrustum",
        "fields": [
          {
            "name": "radius_top",
            "type": "f32"
          },
          {
            "name": "radius_bottom",
            "type": "f32"
          },
          {
            "name": "height",
            "type": "f32"
          }
        ]
      }
    },
    "bevy_math::primitives::dim3::Cuboid": {
      "identifier": "Cuboid",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim3::Cuboid",
      "documentation": " A cuboid primitive, which is like a cube, except that the x, y, and z dimensions are not\n required to be the same.",
      "associated_functions": [
        "bevy_math::primitives::dim3::Cuboid::clone",
        "bevy_math::primitives::dim3::Cuboid::closest_point",
        "bevy_math::primitives::dim3::Cuboid::eq",
        "bevy_math::primitives::dim3::Cuboid::from_corners",
        "bevy_math::primitives::dim3::Cuboid::from_length",
        "bevy_math::primitives::dim3::Cuboid::from_size",
        "bevy_math::primitives::dim3::Cuboid::new",
        "bevy_math::primitives::dim3::Cuboid::size"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Cuboid",
        "fields": [
          {
            "name": "half_size",
            "type": "glam::Vec3"
          }
        ]
      }
    },
    "bevy_math::primitives::dim3::Cylinder": {
      "identifier": "Cylinder",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim3::Cylinder",
      "documentation": " A cylinder primitive centered on the origin",
      "associated_functions": [
        "bevy_math::primitives::dim3::Cylinder::base",
        "bevy_math::primitives::dim3::Cylinder::base_area",
        "bevy_math::primitives::dim3::Cylinder::clone",
        "bevy_math::primitives::dim3::Cylinder::eq",
        "bevy_math::primitives::dim3::Cylinder::lateral_area",
        "bevy_math::primitives::dim3::Cylinder::new"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Cylinder",
        "fields": [
          {
            "name": "radius",
            "type": "f32"
          },
          {
            "name": "half_height",
            "type": "f32"
          }
        ]
      }
    },
    "bevy_math::primitives::dim3::InfinitePlane3d": {
      "identifier": "InfinitePlane3d",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim3::InfinitePlane3d",
      "documentation": " An unbounded plane in 3D space. It forms a separating surface through the origin,\n stretching infinitely far",
      "associated_functions": [
        "bevy_math::primitives::dim3::InfinitePlane3d::clone",
        "bevy_math::primitives::dim3::InfinitePlane3d::eq",
        "bevy_math::primitives::dim3::InfinitePlane3d::isometry_from_xy",
        "bevy_math::primitives::dim3::InfinitePlane3d::isometry_into_xy"
      ],
      "layout": {
        "kind": "Struct",
        "name": "InfinitePlane3d",
        "fields": [
          {
            "name": "normal",
            "type": "bevy_math::direction::Dir3"
          }
        ]
      }
    },
    "bevy_math::primitives::dim3::Line3d": {
      "identifier": "Line3d",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim3::Line3d",
      "documentation": " An infinite line going through the origin along a direction in 3D space.\n\n For a finite line: [`Segment3d`]",
      "associated_functions": [
        "bevy_math::primitives::dim3::Line3d::clone",
        "bevy_math::primitives::dim3::Line3d::eq"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Line3d",
        "fields": [
          {
            "name": "direction",
            "type": "bevy_math::direction::Dir3"
          }
        ]
      }
    },
    "bevy_math::primitives::dim3::Plane3d": {
      "identifier": "Plane3d",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim3::Plane3d",
      "documentation": " A bounded plane in 3D space. It forms a surface starting from the origin with a defined height and width.",
      "associated_functions": [
        "bevy_math::primitives::dim3::Plane3d::clone",
        "bevy_math::primitives::dim3::Plane3d::eq",
        "bevy_math::primitives::dim3::Plane3d::new"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Plane3d",
        "fields": [
          {
            "name": "normal",
            "type": "bevy_math::direction::Dir3"
          },
          {
            "name": "half_size",
            "type": "glam::Vec2"
          }
        ]
      }
    },
    "bevy_math::primitives::dim3::Segment3d": {
      "identifier": "Segment3d",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim3::Segment3d",
      "documentation": " A segment of a line going through the origin along a direction in 3D space.",
      "associated_functions": [
        "bevy_math::primitives::dim3::Segment3d::clone",
        "bevy_math::primitives::dim3::Segment3d::eq",
        "bevy_math::primitives::dim3::Segment3d::new",
        "bevy_math::primitives::dim3::Segment3d::point1",
        "bevy_math::primitives::dim3::Segment3d::point2"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Segment3d",
        "fields": [
          {
            "name": "direction",
            "type": "bevy_math::direction::Dir3"
          },
          {
            "name": "half_length",
            "type": "f32"
          }
        ]
      }
    },
    "bevy_math::primitives::dim3::Sphere": {
      "identifier": "Sphere",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim3::Sphere",
      "documentation": " A sphere primitive, representing the set of all points some distance from the origin",
      "associated_functions": [
        "bevy_math::primitives::dim3::Sphere::clone",
        "bevy_math::primitives::dim3::Sphere::closest_point",
        "bevy_math::primitives::dim3::Sphere::diameter",
        "bevy_math::primitives::dim3::Sphere::eq",
        "bevy_math::primitives::dim3::Sphere::new"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Sphere",
        "fields": [
          {
            "name": "radius",
            "type": "f32"
          }
        ]
      }
    },
    "bevy_math::primitives::dim3::Tetrahedron": {
      "identifier": "Tetrahedron",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim3::Tetrahedron",
      "documentation": " A tetrahedron primitive.",
      "associated_functions": [
        "bevy_math::primitives::dim3::Tetrahedron::centroid",
        "bevy_math::primitives::dim3::Tetrahedron::clone",
        "bevy_math::primitives::dim3::Tetrahedron::eq",
        "bevy_math::primitives::dim3::Tetrahedron::new",
        "bevy_math::primitives::dim3::Tetrahedron::signed_volume"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Tetrahedron",
        "fields": [
          {
            "name": "vertices",
            "type": "[glam::Vec3; 4]"
          }
        ]
      }
    },
    "bevy_math::primitives::dim3::Torus": {
      "identifier": "Torus",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim3::Torus",
      "documentation": " A torus primitive, often representing a ring or donut shape\n The set of points some distance from a circle centered at the origin",
      "associated_functions": [
        "bevy_math::primitives::dim3::Torus::clone",
        "bevy_math::primitives::dim3::Torus::eq",
        "bevy_math::primitives::dim3::Torus::inner_radius",
        "bevy_math::primitives::dim3::Torus::new",
        "bevy_math::primitives::dim3::Torus::outer_radius"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Torus",
        "fields": [
          {
            "name": "minor_radius",
            "type": "f32"
          },
          {
            "name": "major_radius",
            "type": "f32"
          }
        ]
      }
    },
    "bevy_math::primitives::dim3::Triangle3d": {
      "identifier": "Triangle3d",
      "crate": "bevy_math",
      "path": "bevy_math::primitives::dim3::Triangle3d",
      "documentation": " A 3D triangle primitive.",
      "associated_functions": [
        "bevy_math::primitives::dim3::Triangle3d::centroid",
        "bevy_math::primitives::dim3::Triangle3d::circumcenter",
        "bevy_math::primitives::dim3::Triangle3d::clone",
        "bevy_math::primitives::dim3::Triangle3d::eq",
        "bevy_math::primitives::dim3::Triangle3d::is_acute",
        "bevy_math::primitives::dim3::Triangle3d::is_degenerate",
        "bevy_math::primitives::dim3::Triangle3d::is_obtuse",
        "bevy_math::primitives::dim3::Triangle3d::new",
        "bevy_math::primitives::dim3::Triangle3d::reverse",
        "bevy_math::primitives::dim3::Triangle3d::reversed"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Triangle3d",
        "fields": [
          {
            "name": "vertices",
            "type": "[glam::Vec3; 3]"
          }
        ]
      }
    },
    "bevy_math::ray::Ray2d": {
      "identifier": "Ray2d",
      "crate": "bevy_math",
      "path": "bevy_math::ray::Ray2d",
      "documentation": " An infinite half-line starting at `origin` and going in `direction` in 2D space.",
      "associated_functions": [
        "bevy_math::ray::Ray2d::clone",
        "bevy_math::ray::Ray2d::eq",
        "bevy_math::ray::Ray2d::get_point",
        "bevy_math::ray::Ray2d::intersect_plane",
        "bevy_math::ray::Ray2d::new"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Ray2d",
        "fields": [
          {
            "name": "origin",
            "type": "glam::Vec2"
          },
          {
            "name": "direction",
            "type": "bevy_math::direction::Dir2"
          }
        ]
      }
    },
    "bevy_math::ray::Ray3d": {
      "identifier": "Ray3d",
      "crate": "bevy_math",
      "path": "bevy_math::ray::Ray3d",
      "documentation": " An infinite half-line starting at `origin` and going in `direction` in 3D space.",
      "associated_functions": [
        "bevy_math::ray::Ray3d::clone",
        "bevy_math::ray::Ray3d::eq",
        "bevy_math::ray::Ray3d::get_point",
        "bevy_math::ray::Ray3d::intersect_plane",
        "bevy_math::ray::Ray3d::new"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Ray3d",
        "fields": [
          {
            "name": "origin",
            "type": "glam::Vec3"
          },
          {
            "name": "direction",
            "type": "bevy_math::direction::Dir3"
          }
        ]
      }
    },
    "bevy_math::rects::irect::IRect": {
      "identifier": "IRect",
      "crate": "bevy_math",
      "path": "bevy_math::rects::irect::IRect",
      "documentation": " A rectangle defined by two opposite corners.\n\n The rectangle is axis aligned, and defined by its minimum and maximum coordinates,\n stored in `IRect::min` and `IRect::max`, respectively. The minimum/maximum invariant\n must be upheld by the user when directly assigning the fields, otherwise some methods\n produce invalid results. It is generally recommended to use one of the constructor\n methods instead, which will ensure this invariant is met, unless you already have\n the minimum and maximum corners.",
      "associated_functions": [
        "bevy_math::rects::irect::IRect::as_rect",
        "bevy_math::rects::irect::IRect::as_urect",
        "bevy_math::rects::irect::IRect::assert_receiver_is_total_eq",
        "bevy_math::rects::irect::IRect::center",
        "bevy_math::rects::irect::IRect::clone",
        "bevy_math::rects::irect::IRect::contains",
        "bevy_math::rects::irect::IRect::eq",
        "bevy_math::rects::irect::IRect::from_center_half_size",
        "bevy_math::rects::irect::IRect::from_center_size",
        "bevy_math::rects::irect::IRect::from_corners",
        "bevy_math::rects::irect::IRect::half_size",
        "bevy_math::rects::irect::IRect::height",
        "bevy_math::rects::irect::IRect::inflate",
        "bevy_math::rects::irect::IRect::intersect",
        "bevy_math::rects::irect::IRect::is_empty",
        "bevy_math::rects::irect::IRect::new",
        "bevy_math::rects::irect::IRect::size",
        "bevy_math::rects::irect::IRect::union",
        "bevy_math::rects::irect::IRect::union_point",
        "bevy_math::rects::irect::IRect::width"
      ],
      "layout": {
        "kind": "Struct",
        "name": "IRect",
        "fields": [
          {
            "name": "min",
            "type": "glam::IVec2"
          },
          {
            "name": "max",
            "type": "glam::IVec2"
          }
        ]
      }
    },
    "bevy_math::rects::rect::Rect": {
      "identifier": "Rect",
      "crate": "bevy_math",
      "path": "bevy_math::rects::rect::Rect",
      "documentation": " A rectangle defined by two opposite corners.\n\n The rectangle is axis aligned, and defined by its minimum and maximum coordinates,\n stored in `Rect::min` and `Rect::max`, respectively. The minimum/maximum invariant\n must be upheld by the user when directly assigning the fields, otherwise some methods\n produce invalid results. It is generally recommended to use one of the constructor\n methods instead, which will ensure this invariant is met, unless you already have\n the minimum and maximum corners.",
      "associated_functions": [
        "bevy_math::rects::rect::Rect::as_irect",
        "bevy_math::rects::rect::Rect::as_urect",
        "bevy_math::rects::rect::Rect::center",
        "bevy_math::rects::rect::Rect::clone",
        "bevy_math::rects::rect::Rect::contains",
        "bevy_math::rects::rect::Rect::eq",
        "bevy_math::rects::rect::Rect::from_center_half_size",
        "bevy_math::rects::rect::Rect::from_center_size",
        "bevy_math::rects::rect::Rect::from_corners",
        "bevy_math::rects::rect::Rect::half_size",
        "bevy_math::rects::rect::Rect::height",
        "bevy_math::rects::rect::Rect::inflate",
        "bevy_math::rects::rect::Rect::intersect",
        "bevy_math::rects::rect::Rect::is_empty",
        "bevy_math::rects::rect::Rect::new",
        "bevy_math::rects::rect::Rect::normalize",
        "bevy_math::rects::rect::Rect::size",
        "bevy_math::rects::rect::Rect::union",
        "bevy_math::rects::rect::Rect::union_point",
        "bevy_math::rects::rect::Rect::width"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Rect",
        "fields": [
          {
            "name": "min",
            "type": "glam::Vec2"
          },
          {
            "name": "max",
            "type": "glam::Vec2"
          }
        ]
      }
    },
    "bevy_math::rects::urect::URect": {
      "identifier": "URect",
      "crate": "bevy_math",
      "path": "bevy_math::rects::urect::URect",
      "documentation": " A rectangle defined by two opposite corners.\n\n The rectangle is axis aligned, and defined by its minimum and maximum coordinates,\n stored in `URect::min` and `URect::max`, respectively. The minimum/maximum invariant\n must be upheld by the user when directly assigning the fields, otherwise some methods\n produce invalid results. It is generally recommended to use one of the constructor\n methods instead, which will ensure this invariant is met, unless you already have\n the minimum and maximum corners.",
      "associated_functions": [
        "bevy_math::rects::urect::URect::as_irect",
        "bevy_math::rects::urect::URect::as_rect",
        "bevy_math::rects::urect::URect::assert_receiver_is_total_eq",
        "bevy_math::rects::urect::URect::center",
        "bevy_math::rects::urect::URect::clone",
        "bevy_math::rects::urect::URect::contains",
        "bevy_math::rects::urect::URect::eq",
        "bevy_math::rects::urect::URect::from_center_half_size",
        "bevy_math::rects::urect::URect::from_center_size",
        "bevy_math::rects::urect::URect::from_corners",
        "bevy_math::rects::urect::URect::half_size",
        "bevy_math::rects::urect::URect::height",
        "bevy_math::rects::urect::URect::inflate",
        "bevy_math::rects::urect::URect::intersect",
        "bevy_math::rects::urect::URect::is_empty",
        "bevy_math::rects::urect::URect::new",
        "bevy_math::rects::urect::URect::size",
        "bevy_math::rects::urect::URect::union",
        "bevy_math::rects::urect::URect::union_point",
        "bevy_math::rects::urect::URect::width"
      ],
      "layout": {
        "kind": "Struct",
        "name": "URect",
        "fields": [
          {
            "name": "min",
            "type": "glam::UVec2"
          },
          {
            "name": "max",
            "type": "glam::UVec2"
          }
        ]
      }
    },
    "bevy_math::rotation2d::Rot2": {
      "identifier": "Rot2",
      "crate": "bevy_math",
      "path": "bevy_math::rotation2d::Rot2",
      "documentation": " A counterclockwise 2D rotation.\n\n # Example\n\n ```\n # use approx::assert_relative_eq;\n # use bevy_math::{Rot2, Vec2};\n use std::f32::consts::PI;\n\n // Create rotations from radians or degrees\n let rotation1 = Rot2::radians(PI / 2.0);\n let rotation2 = Rot2::degrees(45.0);\n\n // Get the angle back as radians or degrees\n assert_eq!(rotation1.as_degrees(), 90.0);\n assert_eq!(rotation2.as_radians(), PI / 4.0);\n\n // \"Add\" rotations together using `*`\n assert_relative_eq!(rotation1 * rotation2, Rot2::degrees(135.0));\n\n // Rotate vectors\n assert_relative_eq!(rotation1 * Vec2::X, Vec2::Y);\n ```",
      "associated_functions": [
        "bevy_math::rotation2d::Rot2::angle_between",
        "bevy_math::rotation2d::Rot2::angle_to",
        "bevy_math::rotation2d::Rot2::as_degrees",
        "bevy_math::rotation2d::Rot2::as_radians",
        "bevy_math::rotation2d::Rot2::as_turn_fraction",
        "bevy_math::rotation2d::Rot2::clone",
        "bevy_math::rotation2d::Rot2::degrees",
        "bevy_math::rotation2d::Rot2::eq",
        "bevy_math::rotation2d::Rot2::fast_renormalize",
        "bevy_math::rotation2d::Rot2::from_sin_cos",
        "bevy_math::rotation2d::Rot2::inverse",
        "bevy_math::rotation2d::Rot2::is_finite",
        "bevy_math::rotation2d::Rot2::is_nan",
        "bevy_math::rotation2d::Rot2::is_near_identity",
        "bevy_math::rotation2d::Rot2::is_normalized",
        "bevy_math::rotation2d::Rot2::length",
        "bevy_math::rotation2d::Rot2::length_recip",
        "bevy_math::rotation2d::Rot2::length_squared",
        "bevy_math::rotation2d::Rot2::mul",
        "bevy_math::rotation2d::Rot2::mul-1",
        "bevy_math::rotation2d::Rot2::mul-2",
        "bevy_math::rotation2d::Rot2::nlerp",
        "bevy_math::rotation2d::Rot2::normalize",
        "bevy_math::rotation2d::Rot2::radians",
        "bevy_math::rotation2d::Rot2::sin_cos",
        "bevy_math::rotation2d::Rot2::slerp",
        "bevy_math::rotation2d::Rot2::turn_fraction"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Rot2",
        "fields": [
          {
            "name": "cos",
            "type": "f32"
          },
          {
            "name": "sin",
            "type": "f32"
          }
        ]
      }
    },
    "bevy_mod_scripting_core::bindings::function::from::Val<bevy_ecs::entity::Entity>": {
      "identifier": "Val",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::bindings::function::from::Val<bevy_ecs::entity::Entity>",
      "generics": [
        {
          "type_id": "bevy_ecs::entity::Entity",
          "name": "T"
        }
      ],
      "documentation": " A wrapper around a value of type `T`.\n\n This can be used to retrieve a value out of a [`ScriptValue::Reference`] corresponding to the type `T`.\n You can also use this to return values from a script function to be allocated directly as a [`ScriptValue::Reference`].",
      "layout": {
        "kind": "TupleStruct",
        "name": "Val",
        "fields": [
          {
            "type": "bevy_ecs::entity::Entity"
          }
        ]
      }
    },
    "bevy_mod_scripting_core::bindings::function::from::Val<bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder>": {
      "identifier": "Val",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::bindings::function::from::Val<bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder>",
      "generics": [
        {
          "type_id": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder",
          "name": "T"
        }
      ],
      "documentation": " A wrapper around a value of type `T`.\n\n This can be used to retrieve a value out of a [`ScriptValue::Reference`] corresponding to the type `T`.\n You can also use this to return values from a script function to be allocated directly as a [`ScriptValue::Reference`].",
      "layout": {
        "kind": "TupleStruct",
        "name": "Val",
        "fields": [
          {
            "type": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder"
          }
        ]
      }
    },
    "bevy_mod_scripting_core::bindings::function::from::Val<bevy_mod_scripting_core::bindings::query::ScriptQueryResult>": {
      "identifier": "Val",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::bindings::function::from::Val<bevy_mod_scripting_core::bindings::query::ScriptQueryResult>",
      "generics": [
        {
          "type_id": "bevy_mod_scripting_core::bindings::query::ScriptQueryResult",
          "name": "T"
        }
      ],
      "documentation": " A wrapper around a value of type `T`.\n\n This can be used to retrieve a value out of a [`ScriptValue::Reference`] corresponding to the type `T`.\n You can also use this to return values from a script function to be allocated directly as a [`ScriptValue::Reference`].",
      "layout": {
        "kind": "TupleStruct",
        "name": "Val",
        "fields": [
          {
            "type": "bevy_mod_scripting_core::bindings::query::ScriptQueryResult"
          }
        ]
      }
    },
    "bevy_mod_scripting_core::bindings::function::from::Val<bevy_mod_scripting_core::docgen::info::FunctionInfo>": {
      "identifier": "Val",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::bindings::function::from::Val<bevy_mod_scripting_core::docgen::info::FunctionInfo>",
      "generics": [
        {
          "type_id": "bevy_mod_scripting_core::docgen::info::FunctionInfo",
          "name": "T"
        }
      ],
      "documentation": " A wrapper around a value of type `T`.\n\n This can be used to retrieve a value out of a [`ScriptValue::Reference`] corresponding to the type `T`.\n You can also use this to return values from a script function to be allocated directly as a [`ScriptValue::Reference`].",
      "layout": {
        "kind": "TupleStruct",
        "name": "Val",
        "fields": [
          {
            "type": "bevy_mod_scripting_core::docgen::info::FunctionInfo"
          }
        ]
      }
    },
    "bevy_mod_scripting_core::bindings::function::namespace::Namespace": {
      "identifier": "Namespace",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::bindings::function::namespace::Namespace",
      "documentation": " A namespace for functions",
      "layout": [
        {
          "kind": "Unit",
          "name": "Global"
        },
        {
          "kind": "TupleStruct",
          "name": "OnType",
          "fields": [
            {
              "type": "core::any::TypeId"
            }
          ]
        }
      ]
    },
    "bevy_mod_scripting_core::bindings::function::script_function::DynamicScriptFunctionMut": {
      "identifier": "DynamicScriptFunctionMut",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::bindings::function::script_function::DynamicScriptFunctionMut",
      "documentation": " A dynamic mutable script function.",
      "layout": null
    },
    "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration": {
      "identifier": "ScriptComponentRegistration",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration",
      "documentation": " A registration for a component type.",
      "associated_functions": [
        "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration::short_name",
        "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration::type_name"
      ],
      "layout": {
        "kind": "Struct",
        "name": "ScriptComponentRegistration",
        "fields": [
          {
            "name": "registration",
            "type": "bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration"
          },
          {
            "name": "component_id",
            "type": "bevy_ecs::component::ComponentId"
          }
        ]
      }
    },
    "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder": {
      "identifier": "ScriptQueryBuilder",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder",
      "documentation": " A builder for a query.",
      "associated_functions": [
        "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder::build",
        "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder::component",
        "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder::with",
        "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder::without"
      ],
      "layout": null
    },
    "bevy_mod_scripting_core::bindings::query::ScriptQueryResult": {
      "identifier": "ScriptQueryResult",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::bindings::query::ScriptQueryResult",
      "documentation": " A result from a query.",
      "associated_functions": [
        "bevy_mod_scripting_core::bindings::query::ScriptQueryResult::components",
        "bevy_mod_scripting_core::bindings::query::ScriptQueryResult::entity"
      ],
      "layout": null
    },
    "bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration": {
      "identifier": "ScriptResourceRegistration",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration",
      "documentation": " A registration for a resource type.",
      "associated_functions": [
        "bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration::short_name",
        "bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration::type_name"
      ],
      "layout": {
        "kind": "Struct",
        "name": "ScriptResourceRegistration",
        "fields": [
          {
            "name": "registration",
            "type": "bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration"
          },
          {
            "name": "resource_id",
            "type": "bevy_ecs::component::ComponentId"
          }
        ]
      }
    },
    "bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration": {
      "identifier": "ScriptTypeRegistration",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration",
      "documentation": " A wrapper around a `TypeRegistration` that provides additional information about the type.\n\n This is used as a hook to a rust type from a scripting language. We should be able to easily convert between a type name and a [`ScriptTypeRegistration`].",
      "associated_functions": [
        "bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration::short_name",
        "bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration::type_name"
      ],
      "layout": null
    },
    "bevy_mod_scripting_core::bindings::script_value::ScriptValue": {
      "identifier": "ScriptValue",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::bindings::script_value::ScriptValue",
      "documentation": " An abstraction of values that can be passed to and from scripts.\n This allows us to re-use logic between scripting languages.",
      "layout": null
    },
    "bevy_mod_scripting_core::docgen::info::FunctionArgInfo": {
      "identifier": "FunctionArgInfo",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::docgen::info::FunctionArgInfo",
      "documentation": " Information about a function argument.",
      "layout": {
        "kind": "Struct",
        "name": "FunctionArgInfo",
        "fields": [
          {
            "name": "name",
            "type": "core::option::Option<alloc::borrow::Cow<str>>"
          },
          {
            "name": "arg_index",
            "type": "usize"
          },
          {
            "name": "type_id",
            "type": "core::any::TypeId"
          }
        ]
      }
    },
    "bevy_mod_scripting_core::docgen::info::FunctionInfo": {
      "identifier": "FunctionInfo",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::docgen::info::FunctionInfo",
      "documentation": " Information about a function.",
      "layout": {
        "kind": "Struct",
        "name": "FunctionInfo",
        "fields": [
          {
            "name": "name",
            "type": "alloc::borrow::Cow<str>"
          },
          {
            "name": "namespace",
            "type": "bevy_mod_scripting_core::bindings::function::namespace::Namespace"
          },
          {
            "name": "arg_info",
            "type": "alloc::vec::Vec<bevy_mod_scripting_core::docgen::info::FunctionArgInfo>"
          },
          {
            "name": "return_info",
            "type": "bevy_mod_scripting_core::docgen::info::FunctionReturnInfo"
          },
          {
            "name": "docs",
            "type": "core::option::Option<alloc::borrow::Cow<str>>"
          }
        ]
      }
    },
    "bevy_mod_scripting_core::docgen::info::FunctionReturnInfo": {
      "identifier": "FunctionReturnInfo",
      "crate": "bevy_mod_scripting_core",
      "path": "bevy_mod_scripting_core::docgen::info::FunctionReturnInfo",
      "documentation": " Information about a function return value.",
      "layout": {
        "kind": "Struct",
        "name": "FunctionReturnInfo",
        "fields": [
          {
            "name": "type_id",
            "type": "core::any::TypeId"
          }
        ]
      }
    },
    "bevy_time::fixed::Fixed": {
      "identifier": "Fixed",
      "crate": "bevy_time",
      "path": "bevy_time::fixed::Fixed",
      "documentation": " The fixed timestep game clock following virtual time.\n\n A specialization of the [`Time`] structure. **For method documentation, see\n [`Time<Fixed>#impl-Time<Fixed>`].**\n     \n It is automatically inserted as a resource by\n [`TimePlugin`](crate::TimePlugin) and updated based on\n [`Time<Virtual>`](Virtual). The fixed clock is automatically set as the\n generic [`Time`] resource during [`FixedUpdate`](bevy_app::FixedUpdate)\n schedule processing.\n\n The fixed timestep clock advances in fixed-size increments, which is\n extremely useful for writing logic (like physics) that should have\n consistent behavior, regardless of framerate.\n\n The default [`timestep()`](Time::timestep) is 64 hertz, or 15625\n microseconds. This value was chosen because using 60 hertz has the potential\n for a pathological interaction with the monitor refresh rate where the game\n alternates between running two fixed timesteps and zero fixed timesteps per\n frame (for example when running two fixed timesteps takes longer than a\n frame). Additionally, the value is a power of two which losslessly converts\n into [`f32`] and [`f64`].\n\n To run a system on a fixed timestep, add it to one of the [`FixedMain`]\n schedules, most commonly [`FixedUpdate`](bevy_app::FixedUpdate).\n\n This schedule is run a number of times between\n [`PreUpdate`](bevy_app::PreUpdate) and [`Update`](bevy_app::Update)\n according to the accumulated [`overstep()`](Time::overstep) time divided by\n the [`timestep()`](Time::timestep). This means the schedule may run 0, 1 or\n more times during a single update (which typically corresponds to a rendered\n frame).\n\n `Time<Fixed>` and the generic [`Time`] resource will report a\n [`delta()`](Time::delta) equal to [`timestep()`](Time::timestep) and always\n grow [`elapsed()`](Time::elapsed) by one [`timestep()`](Time::timestep) per\n iteration.\n\n The fixed timestep clock follows the [`Time<Virtual>`](Virtual) clock, which\n means it is affected by [`pause()`](Time::pause),\n [`set_relative_speed()`](Time::set_relative_speed) and\n [`set_max_delta()`](Time::set_max_delta) from virtual time. If the virtual\n clock is paused, the [`FixedUpdate`](bevy_app::FixedUpdate) schedule will\n not run. It is guaranteed that the [`elapsed()`](Time::elapsed) time in\n `Time<Fixed>` is always between the previous `elapsed()` and the current\n `elapsed()` value in `Time<Virtual>`, so the values are compatible.\n\n Changing the timestep size while the game is running should not normally be\n done, as having a regular interval is the point of this schedule, but it may\n be necessary for effects like \"bullet-time\" if the normal granularity of the\n fixed timestep is too big for the slowed down time. In this case,\n [`set_timestep()`](Time::set_timestep) and be called to set a new value. The\n new value will be used immediately for the next run of the\n [`FixedUpdate`](bevy_app::FixedUpdate) schedule, meaning that it will affect\n the [`delta()`](Time::delta) value for the very next\n [`FixedUpdate`](bevy_app::FixedUpdate), even if it is still during the same\n frame. Any [`overstep()`](Time::overstep) present in the accumulator will be\n processed according to the new [`timestep()`](Time::timestep) value.",
      "associated_functions": [
        "bevy_time::fixed::Fixed::clone"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Fixed",
        "fields": [
          {
            "name": "timestep",
            "type": "bevy_utils::Duration"
          },
          {
            "name": "overstep",
            "type": "bevy_utils::Duration"
          }
        ]
      }
    },
    "bevy_time::real::Real": {
      "identifier": "Real",
      "crate": "bevy_time",
      "path": "bevy_time::real::Real",
      "documentation": " Real time clock representing elapsed wall clock time.\n\n A specialization of the [`Time`] structure. **For method documentation, see\n [`Time<Real>#impl-Time<Real>`].**\n\n It is automatically inserted as a resource by\n [`TimePlugin`](crate::TimePlugin) and updated with time instants according\n to [`TimeUpdateStrategy`](crate::TimeUpdateStrategy).[^disclaimer]\n\n Note:\n Using [`TimeUpdateStrategy::ManualDuration`](crate::TimeUpdateStrategy::ManualDuration)\n allows for mocking the wall clock for testing purposes.\n Besides this use case, it is not recommended to do this, as it will no longer\n represent \"wall clock\" time as intended.\n\n The [`delta()`](Time::delta) and [`elapsed()`](Time::elapsed) values of this\n clock should be used for anything which deals specifically with real time\n (wall clock time). It will not be affected by relative game speed\n adjustments, pausing or other adjustments.[^disclaimer]\n\n The clock does not count time from [`startup()`](Time::startup) to\n [`first_update()`](Time::first_update()) into elapsed, but instead will\n start counting time from the first update call. [`delta()`](Time::delta) and\n [`elapsed()`](Time::elapsed) will report zero on the first update as there\n is no previous update instant. This means that a [`delta()`](Time::delta) of\n zero must be handled without errors in application logic, as it may\n theoretically also happen at other times.\n\n [`Instant`]s for [`startup()`](Time::startup),\n [`first_update()`](Time::first_update) and\n [`last_update()`](Time::last_update) are recorded and accessible.\n\n [^disclaimer]: When using [`TimeUpdateStrategy::ManualDuration`](crate::TimeUpdateStrategy::ManualDuration),\n     [`Time<Real>#impl-Time<Real>`] is only a *mock* of wall clock time.\n",
      "associated_functions": [
        "bevy_time::real::Real::clone"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Real",
        "fields": [
          {
            "name": "startup",
            "type": "bevy_utils::Instant"
          },
          {
            "name": "first_update",
            "type": "core::option::Option<bevy_utils::Instant>"
          },
          {
            "name": "last_update",
            "type": "core::option::Option<bevy_utils::Instant>"
          }
        ]
      }
    },
    "bevy_time::stopwatch::Stopwatch": {
      "identifier": "Stopwatch",
      "crate": "bevy_time",
      "path": "bevy_time::stopwatch::Stopwatch",
      "documentation": " A Stopwatch is a struct that tracks elapsed time when started.\n\n Note that in order to advance the stopwatch [`tick`](Stopwatch::tick) **MUST** be called.\n # Examples\n\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut stopwatch = Stopwatch::new();\n assert_eq!(stopwatch.elapsed_secs(), 0.0);\n\n stopwatch.tick(Duration::from_secs_f32(1.0)); // tick one second\n assert_eq!(stopwatch.elapsed_secs(), 1.0);\n\n stopwatch.pause();\n stopwatch.tick(Duration::from_secs_f32(1.0)); // paused stopwatches don't tick\n assert_eq!(stopwatch.elapsed_secs(), 1.0);\n\n stopwatch.reset(); // reset the stopwatch\n assert!(stopwatch.is_paused());\n assert_eq!(stopwatch.elapsed_secs(), 0.0);\n ```",
      "associated_functions": [
        "bevy_time::stopwatch::Stopwatch::assert_receiver_is_total_eq",
        "bevy_time::stopwatch::Stopwatch::clone",
        "bevy_time::stopwatch::Stopwatch::elapsed",
        "bevy_time::stopwatch::Stopwatch::elapsed_secs",
        "bevy_time::stopwatch::Stopwatch::elapsed_secs_f64",
        "bevy_time::stopwatch::Stopwatch::eq",
        "bevy_time::stopwatch::Stopwatch::is_paused",
        "bevy_time::stopwatch::Stopwatch::new",
        "bevy_time::stopwatch::Stopwatch::pause",
        "bevy_time::stopwatch::Stopwatch::reset",
        "bevy_time::stopwatch::Stopwatch::set_elapsed",
        "bevy_time::stopwatch::Stopwatch::unpause"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Stopwatch",
        "fields": [
          {
            "name": "elapsed",
            "type": "bevy_utils::Duration"
          },
          {
            "name": "is_paused",
            "type": "bool"
          }
        ]
      }
    },
    "bevy_time::time::Time<()>": {
      "identifier": "Time",
      "crate": "bevy_time",
      "path": "bevy_time::time::Time<()>",
      "generics": [
        {
          "type_id": "()",
          "name": "T"
        }
      ],
      "documentation": " A generic clock resource that tracks how much it has advanced since its\n previous update and since its creation.\n\n Multiple instances of this resource are inserted automatically by\n [`TimePlugin`](crate::TimePlugin):\n\n - [`Time<Real>`](crate::real::Real) tracks real wall-clock time elapsed.\n - [`Time<Virtual>`](crate::virt::Virtual) tracks virtual game time that may\n   be paused or scaled.\n - [`Time<Fixed>`](crate::fixed::Fixed) tracks fixed timesteps based on\n   virtual time.\n - [`Time`] is a generic clock that corresponds to \"current\" or \"default\"\n   time for systems. It contains [`Time<Virtual>`](crate::virt::Virtual)\n   except inside the [`FixedMain`](bevy_app::FixedMain) schedule when it\n   contains [`Time<Fixed>`](crate::fixed::Fixed).\n\n The time elapsed since the previous time this clock was advanced is saved as\n [`delta()`](Time::delta) and the total amount of time the clock has advanced\n is saved as [`elapsed()`](Time::elapsed). Both are represented as exact\n [`Duration`] values with fixed nanosecond precision. The clock does not\n support time moving backwards, but it can be updated with [`Duration::ZERO`]\n which will set [`delta()`](Time::delta) to zero.\n\n These values are also available in seconds as `f32` via\n [`delta_secs()`](Time::delta_secs) and\n [`elapsed_secs()`](Time::elapsed_secs), and also in seconds as `f64`\n via [`delta_secs_f64()`](Time::delta_secs_f64) and\n [`elapsed_secs_f64()`](Time::elapsed_secs_f64).\n\n Since [`elapsed_secs()`](Time::elapsed_secs) will grow constantly and\n is `f32`, it will exhibit gradual precision loss. For applications that\n require an `f32` value but suffer from gradual precision loss there is\n [`elapsed_secs_wrapped()`](Time::elapsed_secs_wrapped) available. The\n same wrapped value is also available as [`Duration`] and `f64` for\n consistency. The wrap period is by default 1 hour, and can be set by\n [`set_wrap_period()`](Time::set_wrap_period).\n\n # Accessing clocks\n\n By default, any systems requiring current [`delta()`](Time::delta) or\n [`elapsed()`](Time::elapsed) should use `Res<Time>` to access the default\n time configured for the program. By default, this refers to\n [`Time<Virtual>`](crate::virt::Virtual) except during the\n [`FixedMain`](bevy_app::FixedMain) schedule when it refers to\n [`Time<Fixed>`](crate::fixed::Fixed). This ensures your system can be used\n either in [`Update`](bevy_app::Update) or\n [`FixedUpdate`](bevy_app::FixedUpdate) schedule depending on what is needed.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn ambivalent_system(time: Res<Time>) {\n     println!(\"this how I see time: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n }\n ```\n\n If your system needs to react based on real time (wall clock time), like for\n user interfaces, it should use `Res<Time<Real>>`. The\n [`delta()`](Time::delta) and [`elapsed()`](Time::elapsed) values will always\n correspond to real time and will not be affected by pause, time scaling or\n other tweaks.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn real_time_system(time: Res<Time<Real>>) {\n     println!(\"this will always be real time: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n }\n ```\n\n If your system specifically needs to access fixed timestep clock, even when\n placed in `Update` schedule, you should use `Res<Time<Fixed>>`. The\n [`delta()`](Time::delta) and [`elapsed()`](Time::elapsed) values will\n correspond to the latest fixed timestep that has been run.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn fixed_time_system(time: Res<Time<Fixed>>) {\n     println!(\"this will always be the last executed fixed timestep: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n }\n ```\n\n Finally, if your system specifically needs to know the current virtual game\n time, even if placed inside [`FixedUpdate`](bevy_app::FixedUpdate), for\n example to know if the game is [`was_paused()`](Time::was_paused) or to use\n [`effective_speed()`](Time::effective_speed), you can use\n `Res<Time<Virtual>>`. However, if the system is placed in\n [`FixedUpdate`](bevy_app::FixedUpdate), extra care must be used because your\n system might be run multiple times with the same [`delta()`](Time::delta)\n and [`elapsed()`](Time::elapsed) values as the virtual game time has not\n changed between the iterations.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn fixed_time_system(time: Res<Time<Virtual>>) {\n     println!(\"this will be virtual time for this update: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n     println!(\"also the relative speed of the game is now {}\", time.effective_speed());\n }\n ```\n\n If you need to change the settings for any of the clocks, for example to\n [`pause()`](Time::pause) the game, you should use `ResMut<Time<Virtual>>`.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n #[derive(Event)]\n struct PauseEvent(bool);\n\n fn pause_system(mut time: ResMut<Time<Virtual>>, mut events: EventReader<PauseEvent>) {\n     for ev in events.read() {\n         if ev.0 {\n             time.pause();\n         } else {\n             time.unpause();\n         }\n     }\n }\n ```\n\n # Adding custom clocks\n\n New custom clocks can be created by creating your own struct as a context\n and passing it to [`new_with()`](Time::new_with). These clocks can be\n inserted as resources as normal and then accessed by systems. You can use\n the [`advance_by()`](Time::advance_by) or [`advance_to()`](Time::advance_to)\n methods to move the clock forwards based on your own logic.\n\n If you want to add methods for your time instance and they require access to\n both your context and the generic time part, it's probably simplest to add a\n custom trait for them and implement it for `Time<Custom>`.\n\n Your context struct will need to implement the [`Default`] trait because\n [`Time`] structures support reflection. It also makes initialization trivial\n by being able to call `app.init_resource::<Time<Custom>>()`.\n\n You can also replace the \"generic\" `Time` clock resource if the \"default\"\n time for your game should not be the default virtual time provided. You can\n get a \"generic\" snapshot of your clock by calling `as_generic()` and then\n overwrite the [`Time`] resource with it. The default systems added by\n [`TimePlugin`](crate::TimePlugin) will overwrite the [`Time`] clock during\n [`First`](bevy_app::First) and [`FixedUpdate`](bevy_app::FixedUpdate)\n schedules.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n # use bevy_utils::Instant;\n #\n #[derive(Debug)]\n struct Custom {\n     last_external_time: Instant,\n }\n\n impl Default for Custom {\n     fn default() -> Self {\n         Self {\n             last_external_time: Instant::now(),\n         }\n     }\n }\n\n trait CustomTime {\n     fn update_from_external(&mut self, instant: Instant);\n }\n\n impl CustomTime for Time<Custom> {\n     fn update_from_external(&mut self, instant: Instant) {\n          let delta = instant - self.context().last_external_time;\n          self.advance_by(delta);\n          self.context_mut().last_external_time = instant;\n     }\n }\n ```",
      "layout": {
        "kind": "Struct",
        "name": "Time",
        "fields": [
          {
            "name": "context",
            "type": "()"
          },
          {
            "name": "wrap_period",
            "type": "bevy_utils::Duration"
          },
          {
            "name": "delta",
            "type": "bevy_utils::Duration"
          },
          {
            "name": "delta_secs",
            "type": "f32"
          },
          {
            "name": "delta_secs_f64",
            "type": "f64"
          },
          {
            "name": "elapsed",
            "type": "bevy_utils::Duration"
          },
          {
            "name": "elapsed_secs",
            "type": "f32"
          },
          {
            "name": "elapsed_secs_f64",
            "type": "f64"
          },
          {
            "name": "elapsed_wrapped",
            "type": "bevy_utils::Duration"
          },
          {
            "name": "elapsed_secs_wrapped",
            "type": "f32"
          },
          {
            "name": "elapsed_secs_wrapped_f64",
            "type": "f64"
          }
        ]
      }
    },
    "bevy_time::time::Time<bevy_time::fixed::Fixed>": {
      "identifier": "Time",
      "crate": "bevy_time",
      "path": "bevy_time::time::Time<bevy_time::fixed::Fixed>",
      "generics": [
        {
          "type_id": "bevy_time::fixed::Fixed",
          "name": "T"
        }
      ],
      "documentation": " A generic clock resource that tracks how much it has advanced since its\n previous update and since its creation.\n\n Multiple instances of this resource are inserted automatically by\n [`TimePlugin`](crate::TimePlugin):\n\n - [`Time<Real>`](crate::real::Real) tracks real wall-clock time elapsed.\n - [`Time<Virtual>`](crate::virt::Virtual) tracks virtual game time that may\n   be paused or scaled.\n - [`Time<Fixed>`](crate::fixed::Fixed) tracks fixed timesteps based on\n   virtual time.\n - [`Time`] is a generic clock that corresponds to \"current\" or \"default\"\n   time for systems. It contains [`Time<Virtual>`](crate::virt::Virtual)\n   except inside the [`FixedMain`](bevy_app::FixedMain) schedule when it\n   contains [`Time<Fixed>`](crate::fixed::Fixed).\n\n The time elapsed since the previous time this clock was advanced is saved as\n [`delta()`](Time::delta) and the total amount of time the clock has advanced\n is saved as [`elapsed()`](Time::elapsed). Both are represented as exact\n [`Duration`] values with fixed nanosecond precision. The clock does not\n support time moving backwards, but it can be updated with [`Duration::ZERO`]\n which will set [`delta()`](Time::delta) to zero.\n\n These values are also available in seconds as `f32` via\n [`delta_secs()`](Time::delta_secs) and\n [`elapsed_secs()`](Time::elapsed_secs), and also in seconds as `f64`\n via [`delta_secs_f64()`](Time::delta_secs_f64) and\n [`elapsed_secs_f64()`](Time::elapsed_secs_f64).\n\n Since [`elapsed_secs()`](Time::elapsed_secs) will grow constantly and\n is `f32`, it will exhibit gradual precision loss. For applications that\n require an `f32` value but suffer from gradual precision loss there is\n [`elapsed_secs_wrapped()`](Time::elapsed_secs_wrapped) available. The\n same wrapped value is also available as [`Duration`] and `f64` for\n consistency. The wrap period is by default 1 hour, and can be set by\n [`set_wrap_period()`](Time::set_wrap_period).\n\n # Accessing clocks\n\n By default, any systems requiring current [`delta()`](Time::delta) or\n [`elapsed()`](Time::elapsed) should use `Res<Time>` to access the default\n time configured for the program. By default, this refers to\n [`Time<Virtual>`](crate::virt::Virtual) except during the\n [`FixedMain`](bevy_app::FixedMain) schedule when it refers to\n [`Time<Fixed>`](crate::fixed::Fixed). This ensures your system can be used\n either in [`Update`](bevy_app::Update) or\n [`FixedUpdate`](bevy_app::FixedUpdate) schedule depending on what is needed.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn ambivalent_system(time: Res<Time>) {\n     println!(\"this how I see time: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n }\n ```\n\n If your system needs to react based on real time (wall clock time), like for\n user interfaces, it should use `Res<Time<Real>>`. The\n [`delta()`](Time::delta) and [`elapsed()`](Time::elapsed) values will always\n correspond to real time and will not be affected by pause, time scaling or\n other tweaks.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn real_time_system(time: Res<Time<Real>>) {\n     println!(\"this will always be real time: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n }\n ```\n\n If your system specifically needs to access fixed timestep clock, even when\n placed in `Update` schedule, you should use `Res<Time<Fixed>>`. The\n [`delta()`](Time::delta) and [`elapsed()`](Time::elapsed) values will\n correspond to the latest fixed timestep that has been run.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn fixed_time_system(time: Res<Time<Fixed>>) {\n     println!(\"this will always be the last executed fixed timestep: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n }\n ```\n\n Finally, if your system specifically needs to know the current virtual game\n time, even if placed inside [`FixedUpdate`](bevy_app::FixedUpdate), for\n example to know if the game is [`was_paused()`](Time::was_paused) or to use\n [`effective_speed()`](Time::effective_speed), you can use\n `Res<Time<Virtual>>`. However, if the system is placed in\n [`FixedUpdate`](bevy_app::FixedUpdate), extra care must be used because your\n system might be run multiple times with the same [`delta()`](Time::delta)\n and [`elapsed()`](Time::elapsed) values as the virtual game time has not\n changed between the iterations.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn fixed_time_system(time: Res<Time<Virtual>>) {\n     println!(\"this will be virtual time for this update: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n     println!(\"also the relative speed of the game is now {}\", time.effective_speed());\n }\n ```\n\n If you need to change the settings for any of the clocks, for example to\n [`pause()`](Time::pause) the game, you should use `ResMut<Time<Virtual>>`.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n #[derive(Event)]\n struct PauseEvent(bool);\n\n fn pause_system(mut time: ResMut<Time<Virtual>>, mut events: EventReader<PauseEvent>) {\n     for ev in events.read() {\n         if ev.0 {\n             time.pause();\n         } else {\n             time.unpause();\n         }\n     }\n }\n ```\n\n # Adding custom clocks\n\n New custom clocks can be created by creating your own struct as a context\n and passing it to [`new_with()`](Time::new_with). These clocks can be\n inserted as resources as normal and then accessed by systems. You can use\n the [`advance_by()`](Time::advance_by) or [`advance_to()`](Time::advance_to)\n methods to move the clock forwards based on your own logic.\n\n If you want to add methods for your time instance and they require access to\n both your context and the generic time part, it's probably simplest to add a\n custom trait for them and implement it for `Time<Custom>`.\n\n Your context struct will need to implement the [`Default`] trait because\n [`Time`] structures support reflection. It also makes initialization trivial\n by being able to call `app.init_resource::<Time<Custom>>()`.\n\n You can also replace the \"generic\" `Time` clock resource if the \"default\"\n time for your game should not be the default virtual time provided. You can\n get a \"generic\" snapshot of your clock by calling `as_generic()` and then\n overwrite the [`Time`] resource with it. The default systems added by\n [`TimePlugin`](crate::TimePlugin) will overwrite the [`Time`] clock during\n [`First`](bevy_app::First) and [`FixedUpdate`](bevy_app::FixedUpdate)\n schedules.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n # use bevy_utils::Instant;\n #\n #[derive(Debug)]\n struct Custom {\n     last_external_time: Instant,\n }\n\n impl Default for Custom {\n     fn default() -> Self {\n         Self {\n             last_external_time: Instant::now(),\n         }\n     }\n }\n\n trait CustomTime {\n     fn update_from_external(&mut self, instant: Instant);\n }\n\n impl CustomTime for Time<Custom> {\n     fn update_from_external(&mut self, instant: Instant) {\n          let delta = instant - self.context().last_external_time;\n          self.advance_by(delta);\n          self.context_mut().last_external_time = instant;\n     }\n }\n ```",
      "layout": {
        "kind": "Struct",
        "name": "Time",
        "fields": [
          {
            "name": "context",
            "type": "bevy_time::fixed::Fixed"
          },
          {
            "name": "wrap_period",
            "type": "bevy_utils::Duration"
          },
          {
            "name": "delta",
            "type": "bevy_utils::Duration"
          },
          {
            "name": "delta_secs",
            "type": "f32"
          },
          {
            "name": "delta_secs_f64",
            "type": "f64"
          },
          {
            "name": "elapsed",
            "type": "bevy_utils::Duration"
          },
          {
            "name": "elapsed_secs",
            "type": "f32"
          },
          {
            "name": "elapsed_secs_f64",
            "type": "f64"
          },
          {
            "name": "elapsed_wrapped",
            "type": "bevy_utils::Duration"
          },
          {
            "name": "elapsed_secs_wrapped",
            "type": "f32"
          },
          {
            "name": "elapsed_secs_wrapped_f64",
            "type": "f64"
          }
        ]
      }
    },
    "bevy_time::time::Time<bevy_time::real::Real>": {
      "identifier": "Time",
      "crate": "bevy_time",
      "path": "bevy_time::time::Time<bevy_time::real::Real>",
      "generics": [
        {
          "type_id": "bevy_time::real::Real",
          "name": "T"
        }
      ],
      "documentation": " A generic clock resource that tracks how much it has advanced since its\n previous update and since its creation.\n\n Multiple instances of this resource are inserted automatically by\n [`TimePlugin`](crate::TimePlugin):\n\n - [`Time<Real>`](crate::real::Real) tracks real wall-clock time elapsed.\n - [`Time<Virtual>`](crate::virt::Virtual) tracks virtual game time that may\n   be paused or scaled.\n - [`Time<Fixed>`](crate::fixed::Fixed) tracks fixed timesteps based on\n   virtual time.\n - [`Time`] is a generic clock that corresponds to \"current\" or \"default\"\n   time for systems. It contains [`Time<Virtual>`](crate::virt::Virtual)\n   except inside the [`FixedMain`](bevy_app::FixedMain) schedule when it\n   contains [`Time<Fixed>`](crate::fixed::Fixed).\n\n The time elapsed since the previous time this clock was advanced is saved as\n [`delta()`](Time::delta) and the total amount of time the clock has advanced\n is saved as [`elapsed()`](Time::elapsed). Both are represented as exact\n [`Duration`] values with fixed nanosecond precision. The clock does not\n support time moving backwards, but it can be updated with [`Duration::ZERO`]\n which will set [`delta()`](Time::delta) to zero.\n\n These values are also available in seconds as `f32` via\n [`delta_secs()`](Time::delta_secs) and\n [`elapsed_secs()`](Time::elapsed_secs), and also in seconds as `f64`\n via [`delta_secs_f64()`](Time::delta_secs_f64) and\n [`elapsed_secs_f64()`](Time::elapsed_secs_f64).\n\n Since [`elapsed_secs()`](Time::elapsed_secs) will grow constantly and\n is `f32`, it will exhibit gradual precision loss. For applications that\n require an `f32` value but suffer from gradual precision loss there is\n [`elapsed_secs_wrapped()`](Time::elapsed_secs_wrapped) available. The\n same wrapped value is also available as [`Duration`] and `f64` for\n consistency. The wrap period is by default 1 hour, and can be set by\n [`set_wrap_period()`](Time::set_wrap_period).\n\n # Accessing clocks\n\n By default, any systems requiring current [`delta()`](Time::delta) or\n [`elapsed()`](Time::elapsed) should use `Res<Time>` to access the default\n time configured for the program. By default, this refers to\n [`Time<Virtual>`](crate::virt::Virtual) except during the\n [`FixedMain`](bevy_app::FixedMain) schedule when it refers to\n [`Time<Fixed>`](crate::fixed::Fixed). This ensures your system can be used\n either in [`Update`](bevy_app::Update) or\n [`FixedUpdate`](bevy_app::FixedUpdate) schedule depending on what is needed.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn ambivalent_system(time: Res<Time>) {\n     println!(\"this how I see time: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n }\n ```\n\n If your system needs to react based on real time (wall clock time), like for\n user interfaces, it should use `Res<Time<Real>>`. The\n [`delta()`](Time::delta) and [`elapsed()`](Time::elapsed) values will always\n correspond to real time and will not be affected by pause, time scaling or\n other tweaks.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn real_time_system(time: Res<Time<Real>>) {\n     println!(\"this will always be real time: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n }\n ```\n\n If your system specifically needs to access fixed timestep clock, even when\n placed in `Update` schedule, you should use `Res<Time<Fixed>>`. The\n [`delta()`](Time::delta) and [`elapsed()`](Time::elapsed) values will\n correspond to the latest fixed timestep that has been run.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn fixed_time_system(time: Res<Time<Fixed>>) {\n     println!(\"this will always be the last executed fixed timestep: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n }\n ```\n\n Finally, if your system specifically needs to know the current virtual game\n time, even if placed inside [`FixedUpdate`](bevy_app::FixedUpdate), for\n example to know if the game is [`was_paused()`](Time::was_paused) or to use\n [`effective_speed()`](Time::effective_speed), you can use\n `Res<Time<Virtual>>`. However, if the system is placed in\n [`FixedUpdate`](bevy_app::FixedUpdate), extra care must be used because your\n system might be run multiple times with the same [`delta()`](Time::delta)\n and [`elapsed()`](Time::elapsed) values as the virtual game time has not\n changed between the iterations.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn fixed_time_system(time: Res<Time<Virtual>>) {\n     println!(\"this will be virtual time for this update: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n     println!(\"also the relative speed of the game is now {}\", time.effective_speed());\n }\n ```\n\n If you need to change the settings for any of the clocks, for example to\n [`pause()`](Time::pause) the game, you should use `ResMut<Time<Virtual>>`.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n #[derive(Event)]\n struct PauseEvent(bool);\n\n fn pause_system(mut time: ResMut<Time<Virtual>>, mut events: EventReader<PauseEvent>) {\n     for ev in events.read() {\n         if ev.0 {\n             time.pause();\n         } else {\n             time.unpause();\n         }\n     }\n }\n ```\n\n # Adding custom clocks\n\n New custom clocks can be created by creating your own struct as a context\n and passing it to [`new_with()`](Time::new_with). These clocks can be\n inserted as resources as normal and then accessed by systems. You can use\n the [`advance_by()`](Time::advance_by) or [`advance_to()`](Time::advance_to)\n methods to move the clock forwards based on your own logic.\n\n If you want to add methods for your time instance and they require access to\n both your context and the generic time part, it's probably simplest to add a\n custom trait for them and implement it for `Time<Custom>`.\n\n Your context struct will need to implement the [`Default`] trait because\n [`Time`] structures support reflection. It also makes initialization trivial\n by being able to call `app.init_resource::<Time<Custom>>()`.\n\n You can also replace the \"generic\" `Time` clock resource if the \"default\"\n time for your game should not be the default virtual time provided. You can\n get a \"generic\" snapshot of your clock by calling `as_generic()` and then\n overwrite the [`Time`] resource with it. The default systems added by\n [`TimePlugin`](crate::TimePlugin) will overwrite the [`Time`] clock during\n [`First`](bevy_app::First) and [`FixedUpdate`](bevy_app::FixedUpdate)\n schedules.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n # use bevy_utils::Instant;\n #\n #[derive(Debug)]\n struct Custom {\n     last_external_time: Instant,\n }\n\n impl Default for Custom {\n     fn default() -> Self {\n         Self {\n             last_external_time: Instant::now(),\n         }\n     }\n }\n\n trait CustomTime {\n     fn update_from_external(&mut self, instant: Instant);\n }\n\n impl CustomTime for Time<Custom> {\n     fn update_from_external(&mut self, instant: Instant) {\n          let delta = instant - self.context().last_external_time;\n          self.advance_by(delta);\n          self.context_mut().last_external_time = instant;\n     }\n }\n ```",
      "layout": {
        "kind": "Struct",
        "name": "Time",
        "fields": [
          {
            "name": "context",
            "type": "bevy_time::real::Real"
          },
          {
            "name": "wrap_period",
            "type": "bevy_utils::Duration"
          },
          {
            "name": "delta",
            "type": "bevy_utils::Duration"
          },
          {
            "name": "delta_secs",
            "type": "f32"
          },
          {
            "name": "delta_secs_f64",
            "type": "f64"
          },
          {
            "name": "elapsed",
            "type": "bevy_utils::Duration"
          },
          {
            "name": "elapsed_secs",
            "type": "f32"
          },
          {
            "name": "elapsed_secs_f64",
            "type": "f64"
          },
          {
            "name": "elapsed_wrapped",
            "type": "bevy_utils::Duration"
          },
          {
            "name": "elapsed_secs_wrapped",
            "type": "f32"
          },
          {
            "name": "elapsed_secs_wrapped_f64",
            "type": "f64"
          }
        ]
      }
    },
    "bevy_time::time::Time<bevy_time::virt::Virtual>": {
      "identifier": "Time",
      "crate": "bevy_time",
      "path": "bevy_time::time::Time<bevy_time::virt::Virtual>",
      "generics": [
        {
          "type_id": "bevy_time::virt::Virtual",
          "name": "T"
        }
      ],
      "documentation": " A generic clock resource that tracks how much it has advanced since its\n previous update and since its creation.\n\n Multiple instances of this resource are inserted automatically by\n [`TimePlugin`](crate::TimePlugin):\n\n - [`Time<Real>`](crate::real::Real) tracks real wall-clock time elapsed.\n - [`Time<Virtual>`](crate::virt::Virtual) tracks virtual game time that may\n   be paused or scaled.\n - [`Time<Fixed>`](crate::fixed::Fixed) tracks fixed timesteps based on\n   virtual time.\n - [`Time`] is a generic clock that corresponds to \"current\" or \"default\"\n   time for systems. It contains [`Time<Virtual>`](crate::virt::Virtual)\n   except inside the [`FixedMain`](bevy_app::FixedMain) schedule when it\n   contains [`Time<Fixed>`](crate::fixed::Fixed).\n\n The time elapsed since the previous time this clock was advanced is saved as\n [`delta()`](Time::delta) and the total amount of time the clock has advanced\n is saved as [`elapsed()`](Time::elapsed). Both are represented as exact\n [`Duration`] values with fixed nanosecond precision. The clock does not\n support time moving backwards, but it can be updated with [`Duration::ZERO`]\n which will set [`delta()`](Time::delta) to zero.\n\n These values are also available in seconds as `f32` via\n [`delta_secs()`](Time::delta_secs) and\n [`elapsed_secs()`](Time::elapsed_secs), and also in seconds as `f64`\n via [`delta_secs_f64()`](Time::delta_secs_f64) and\n [`elapsed_secs_f64()`](Time::elapsed_secs_f64).\n\n Since [`elapsed_secs()`](Time::elapsed_secs) will grow constantly and\n is `f32`, it will exhibit gradual precision loss. For applications that\n require an `f32` value but suffer from gradual precision loss there is\n [`elapsed_secs_wrapped()`](Time::elapsed_secs_wrapped) available. The\n same wrapped value is also available as [`Duration`] and `f64` for\n consistency. The wrap period is by default 1 hour, and can be set by\n [`set_wrap_period()`](Time::set_wrap_period).\n\n # Accessing clocks\n\n By default, any systems requiring current [`delta()`](Time::delta) or\n [`elapsed()`](Time::elapsed) should use `Res<Time>` to access the default\n time configured for the program. By default, this refers to\n [`Time<Virtual>`](crate::virt::Virtual) except during the\n [`FixedMain`](bevy_app::FixedMain) schedule when it refers to\n [`Time<Fixed>`](crate::fixed::Fixed). This ensures your system can be used\n either in [`Update`](bevy_app::Update) or\n [`FixedUpdate`](bevy_app::FixedUpdate) schedule depending on what is needed.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn ambivalent_system(time: Res<Time>) {\n     println!(\"this how I see time: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n }\n ```\n\n If your system needs to react based on real time (wall clock time), like for\n user interfaces, it should use `Res<Time<Real>>`. The\n [`delta()`](Time::delta) and [`elapsed()`](Time::elapsed) values will always\n correspond to real time and will not be affected by pause, time scaling or\n other tweaks.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn real_time_system(time: Res<Time<Real>>) {\n     println!(\"this will always be real time: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n }\n ```\n\n If your system specifically needs to access fixed timestep clock, even when\n placed in `Update` schedule, you should use `Res<Time<Fixed>>`. The\n [`delta()`](Time::delta) and [`elapsed()`](Time::elapsed) values will\n correspond to the latest fixed timestep that has been run.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn fixed_time_system(time: Res<Time<Fixed>>) {\n     println!(\"this will always be the last executed fixed timestep: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n }\n ```\n\n Finally, if your system specifically needs to know the current virtual game\n time, even if placed inside [`FixedUpdate`](bevy_app::FixedUpdate), for\n example to know if the game is [`was_paused()`](Time::was_paused) or to use\n [`effective_speed()`](Time::effective_speed), you can use\n `Res<Time<Virtual>>`. However, if the system is placed in\n [`FixedUpdate`](bevy_app::FixedUpdate), extra care must be used because your\n system might be run multiple times with the same [`delta()`](Time::delta)\n and [`elapsed()`](Time::elapsed) values as the virtual game time has not\n changed between the iterations.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n fn fixed_time_system(time: Res<Time<Virtual>>) {\n     println!(\"this will be virtual time for this update: delta {:?}, elapsed {:?}\", time.delta(), time.elapsed());\n     println!(\"also the relative speed of the game is now {}\", time.effective_speed());\n }\n ```\n\n If you need to change the settings for any of the clocks, for example to\n [`pause()`](Time::pause) the game, you should use `ResMut<Time<Virtual>>`.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n #\n #[derive(Event)]\n struct PauseEvent(bool);\n\n fn pause_system(mut time: ResMut<Time<Virtual>>, mut events: EventReader<PauseEvent>) {\n     for ev in events.read() {\n         if ev.0 {\n             time.pause();\n         } else {\n             time.unpause();\n         }\n     }\n }\n ```\n\n # Adding custom clocks\n\n New custom clocks can be created by creating your own struct as a context\n and passing it to [`new_with()`](Time::new_with). These clocks can be\n inserted as resources as normal and then accessed by systems. You can use\n the [`advance_by()`](Time::advance_by) or [`advance_to()`](Time::advance_to)\n methods to move the clock forwards based on your own logic.\n\n If you want to add methods for your time instance and they require access to\n both your context and the generic time part, it's probably simplest to add a\n custom trait for them and implement it for `Time<Custom>`.\n\n Your context struct will need to implement the [`Default`] trait because\n [`Time`] structures support reflection. It also makes initialization trivial\n by being able to call `app.init_resource::<Time<Custom>>()`.\n\n You can also replace the \"generic\" `Time` clock resource if the \"default\"\n time for your game should not be the default virtual time provided. You can\n get a \"generic\" snapshot of your clock by calling `as_generic()` and then\n overwrite the [`Time`] resource with it. The default systems added by\n [`TimePlugin`](crate::TimePlugin) will overwrite the [`Time`] clock during\n [`First`](bevy_app::First) and [`FixedUpdate`](bevy_app::FixedUpdate)\n schedules.\n\n ```\n # use bevy_ecs::prelude::*;\n # use bevy_time::prelude::*;\n # use bevy_utils::Instant;\n #\n #[derive(Debug)]\n struct Custom {\n     last_external_time: Instant,\n }\n\n impl Default for Custom {\n     fn default() -> Self {\n         Self {\n             last_external_time: Instant::now(),\n         }\n     }\n }\n\n trait CustomTime {\n     fn update_from_external(&mut self, instant: Instant);\n }\n\n impl CustomTime for Time<Custom> {\n     fn update_from_external(&mut self, instant: Instant) {\n          let delta = instant - self.context().last_external_time;\n          self.advance_by(delta);\n          self.context_mut().last_external_time = instant;\n     }\n }\n ```",
      "layout": {
        "kind": "Struct",
        "name": "Time",
        "fields": [
          {
            "name": "context",
            "type": "bevy_time::virt::Virtual"
          },
          {
            "name": "wrap_period",
            "type": "bevy_utils::Duration"
          },
          {
            "name": "delta",
            "type": "bevy_utils::Duration"
          },
          {
            "name": "delta_secs",
            "type": "f32"
          },
          {
            "name": "delta_secs_f64",
            "type": "f64"
          },
          {
            "name": "elapsed",
            "type": "bevy_utils::Duration"
          },
          {
            "name": "elapsed_secs",
            "type": "f32"
          },
          {
            "name": "elapsed_secs_f64",
            "type": "f64"
          },
          {
            "name": "elapsed_wrapped",
            "type": "bevy_utils::Duration"
          },
          {
            "name": "elapsed_secs_wrapped",
            "type": "f32"
          },
          {
            "name": "elapsed_secs_wrapped_f64",
            "type": "f64"
          }
        ]
      }
    },
    "bevy_time::timer::Timer": {
      "identifier": "Timer",
      "crate": "bevy_time",
      "path": "bevy_time::timer::Timer",
      "documentation": " Tracks elapsed time. Enters the finished state once `duration` is reached.\n\n Non repeating timers will stop tracking and stay in the finished state until reset.\n Repeating timers will only be in the finished state on each tick `duration` is reached or\n exceeded, and can still be reset at any given point.\n\n Paused timers will not have elapsed time increased.\n\n Note that in order to advance the timer [`tick`](Timer::tick) **MUST** be called.",
      "associated_functions": [
        "bevy_time::timer::Timer::assert_receiver_is_total_eq",
        "bevy_time::timer::Timer::clone",
        "bevy_time::timer::Timer::duration",
        "bevy_time::timer::Timer::elapsed",
        "bevy_time::timer::Timer::elapsed_secs",
        "bevy_time::timer::Timer::elapsed_secs_f64",
        "bevy_time::timer::Timer::eq",
        "bevy_time::timer::Timer::finished",
        "bevy_time::timer::Timer::fraction",
        "bevy_time::timer::Timer::fraction_remaining",
        "bevy_time::timer::Timer::from_seconds",
        "bevy_time::timer::Timer::just_finished",
        "bevy_time::timer::Timer::mode",
        "bevy_time::timer::Timer::new",
        "bevy_time::timer::Timer::pause",
        "bevy_time::timer::Timer::paused",
        "bevy_time::timer::Timer::remaining",
        "bevy_time::timer::Timer::remaining_secs",
        "bevy_time::timer::Timer::reset",
        "bevy_time::timer::Timer::set_duration",
        "bevy_time::timer::Timer::set_elapsed",
        "bevy_time::timer::Timer::set_mode",
        "bevy_time::timer::Timer::times_finished_this_tick",
        "bevy_time::timer::Timer::unpause"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Timer",
        "fields": [
          {
            "name": "stopwatch",
            "type": "bevy_time::stopwatch::Stopwatch"
          },
          {
            "name": "duration",
            "type": "bevy_utils::Duration"
          },
          {
            "name": "mode",
            "type": "bevy_time::timer::TimerMode"
          },
          {
            "name": "finished",
            "type": "bool"
          },
          {
            "name": "times_finished_this_tick",
            "type": "u32"
          }
        ]
      }
    },
    "bevy_time::timer::TimerMode": {
      "identifier": "TimerMode",
      "crate": "bevy_time",
      "path": "bevy_time::timer::TimerMode",
      "documentation": " Specifies [`Timer`] behavior.",
      "associated_functions": [
        "bevy_time::timer::TimerMode::assert_receiver_is_total_eq",
        "bevy_time::timer::TimerMode::clone",
        "bevy_time::timer::TimerMode::eq"
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "Once"
        },
        {
          "kind": "Unit",
          "name": "Repeating"
        }
      ]
    },
    "bevy_time::virt::Virtual": {
      "identifier": "Virtual",
      "crate": "bevy_time",
      "path": "bevy_time::virt::Virtual",
      "documentation": " The virtual game clock representing game time.\n\n A specialization of the [`Time`] structure. **For method documentation, see\n [`Time<Virtual>#impl-Time<Virtual>`].**\n\n Normally used as `Time<Virtual>`. It is automatically inserted as a resource\n by [`TimePlugin`](crate::TimePlugin) and updated based on\n [`Time<Real>`](Real). The virtual clock is automatically set as the default\n generic [`Time`] resource for the update.\n\n The virtual clock differs from real time clock in that it can be paused, sped up\n and slowed down. It also limits how much it can advance in a single update\n in order to prevent unexpected behavior in cases where updates do not happen\n at regular intervals (e.g. coming back after the program was suspended a long time).\n\n The virtual clock can be paused by calling [`pause()`](Time::pause) and\n unpaused by calling [`unpause()`](Time::unpause). When the game clock is\n paused [`delta()`](Time::delta) will be zero on each update, and\n [`elapsed()`](Time::elapsed) will not grow.\n [`effective_speed()`](Time::effective_speed) will return `0.0`. Calling\n [`pause()`](Time::pause) will not affect value the [`delta()`](Time::delta)\n value for the update currently being processed.\n\n The speed of the virtual clock can be changed by calling\n [`set_relative_speed()`](Time::set_relative_speed). A value of `2.0` means\n that virtual clock should advance twice as fast as real time, meaning that\n [`delta()`](Time::delta) values will be double of what\n [`Time<Real>::delta()`](Time::delta) reports and\n [`elapsed()`](Time::elapsed) will go twice as fast as\n [`Time<Real>::elapsed()`](Time::elapsed). Calling\n [`set_relative_speed()`](Time::set_relative_speed) will not affect the\n [`delta()`](Time::delta) value for the update currently being processed.\n\n The maximum amount of delta time that can be added by a single update can be\n set by [`set_max_delta()`](Time::set_max_delta). This value serves a dual\n purpose in the virtual clock.\n\n If the game temporarily freezes due to any reason, such as disk access, a\n blocking system call, or operating system level suspend, reporting the full\n elapsed delta time is likely to cause bugs in game logic. Usually if a\n laptop is suspended for an hour, it doesn't make sense to try to simulate\n the game logic for the elapsed hour when resuming. Instead it is better to\n lose the extra time and pretend a shorter duration of time passed. Setting\n [`max_delta()`](Time::max_delta) to a relatively short time means that the\n impact on game logic will be minimal.\n\n If the game lags for some reason, meaning that it will take a longer time to\n compute a frame than the real time that passes during the computation, then\n we would fall behind in processing virtual time. If this situation persists,\n and computing a frame takes longer depending on how much virtual time has\n passed, the game would enter a \"death spiral\" where computing each frame\n takes longer and longer and the game will appear to freeze. By limiting the\n maximum time that can be added at once, we also limit the amount of virtual\n time the game needs to compute for each frame. This means that the game will\n run slow, and it will run slower than real time, but it will not freeze and\n it will recover as soon as computation becomes fast again.\n\n You should set [`max_delta()`](Time::max_delta) to a value that is\n approximately the minimum FPS your game should have even if heavily lagged\n for a moment. The actual FPS when lagged will be somewhat lower than this,\n depending on how much more time it takes to compute a frame compared to real\n time. You should also consider how stable your FPS is, as the limit will\n also dictate how big of an FPS drop you can accept without losing time and\n falling behind real time.",
      "associated_functions": [
        "bevy_time::virt::Virtual::clone"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Virtual",
        "fields": [
          {
            "name": "max_delta",
            "type": "bevy_utils::Duration"
          },
          {
            "name": "paused",
            "type": "bool"
          },
          {
            "name": "relative_speed",
            "type": "f64"
          },
          {
            "name": "effective_speed",
            "type": "f64"
          }
        ]
      }
    },
    "bevy_transform::components::global_transform::GlobalTransform": {
      "identifier": "GlobalTransform",
      "crate": "bevy_transform",
      "path": "bevy_transform::components::global_transform::GlobalTransform",
      "documentation": " [`GlobalTransform`] is an affine transformation from entity-local coordinates to worldspace coordinates.\n\n You cannot directly mutate [`GlobalTransform`]; instead, you change an entity's transform by manipulating\n its [`Transform`], which indirectly causes Bevy to update its [`GlobalTransform`].\n\n * To get the global transform of an entity, you should get its [`GlobalTransform`].\n * For transform hierarchies to work correctly, you must have both a [`Transform`] and a [`GlobalTransform`].\n   * ~You may use the [`TransformBundle`](crate::bundles::TransformBundle) to guarantee this.~\n     [`TransformBundle`](crate::bundles::TransformBundle) is now deprecated.\n     [`GlobalTransform`] is automatically inserted whenever [`Transform`] is inserted.\n\n ## [`Transform`] and [`GlobalTransform`]\n\n [`Transform`] transforms an entity relative to its parent's reference frame, or relative to world space coordinates,\n if it doesn't have a [`Parent`](bevy_hierarchy::Parent).\n\n [`GlobalTransform`] is managed by Bevy; it is computed by successively applying the [`Transform`] of each ancestor\n entity which has a Transform. This is done automatically by Bevy-internal systems in the system set\n [`TransformPropagate`](crate::TransformSystem::TransformPropagate).\n\n This system runs during [`PostUpdate`](bevy_app::PostUpdate). If you\n update the [`Transform`] of an entity in this schedule or after, you will notice a 1 frame lag\n before the [`GlobalTransform`] is updated.\n\n # Examples\n\n - [`transform`][transform_example]\n\n [transform_example]: https://github.com/bevyengine/bevy/blob/latest/examples/transforms/transform.rs",
      "associated_functions": [
        "bevy_transform::components::global_transform::GlobalTransform::affine",
        "bevy_transform::components::global_transform::GlobalTransform::back",
        "bevy_transform::components::global_transform::GlobalTransform::clone",
        "bevy_transform::components::global_transform::GlobalTransform::compute_matrix",
        "bevy_transform::components::global_transform::GlobalTransform::compute_transform",
        "bevy_transform::components::global_transform::GlobalTransform::down",
        "bevy_transform::components::global_transform::GlobalTransform::eq",
        "bevy_transform::components::global_transform::GlobalTransform::forward",
        "bevy_transform::components::global_transform::GlobalTransform::from_isometry",
        "bevy_transform::components::global_transform::GlobalTransform::from_rotation",
        "bevy_transform::components::global_transform::GlobalTransform::from_scale",
        "bevy_transform::components::global_transform::GlobalTransform::from_translation",
        "bevy_transform::components::global_transform::GlobalTransform::from_xyz",
        "bevy_transform::components::global_transform::GlobalTransform::left",
        "bevy_transform::components::global_transform::GlobalTransform::mul",
        "bevy_transform::components::global_transform::GlobalTransform::mul-1",
        "bevy_transform::components::global_transform::GlobalTransform::mul-2",
        "bevy_transform::components::global_transform::GlobalTransform::mul_transform",
        "bevy_transform::components::global_transform::GlobalTransform::radius_vec3a",
        "bevy_transform::components::global_transform::GlobalTransform::reparented_to",
        "bevy_transform::components::global_transform::GlobalTransform::right",
        "bevy_transform::components::global_transform::GlobalTransform::rotation",
        "bevy_transform::components::global_transform::GlobalTransform::scale",
        "bevy_transform::components::global_transform::GlobalTransform::to_isometry",
        "bevy_transform::components::global_transform::GlobalTransform::transform_point",
        "bevy_transform::components::global_transform::GlobalTransform::translation",
        "bevy_transform::components::global_transform::GlobalTransform::translation_vec3a",
        "bevy_transform::components::global_transform::GlobalTransform::up"
      ],
      "layout": {
        "kind": "TupleStruct",
        "name": "GlobalTransform",
        "fields": [
          {
            "type": "glam::Affine3A"
          }
        ]
      }
    },
    "bevy_transform::components::transform::Transform": {
      "identifier": "Transform",
      "crate": "bevy_transform",
      "path": "bevy_transform::components::transform::Transform",
      "documentation": " Describe the position of an entity. If the entity has a parent, the position is relative\n to its parent position.\n\n * To place or move an entity, you should set its [`Transform`].\n * To get the global transform of an entity, you should get its [`GlobalTransform`].\n * To be displayed, an entity must have both a [`Transform`] and a [`GlobalTransform`].\n   * ~You may use the [`TransformBundle`](crate::bundles::TransformBundle) to guarantee this.~\n     [`TransformBundle`](crate::bundles::TransformBundle) is now deprecated.\n     [`GlobalTransform`] is automatically inserted whenever [`Transform`] is inserted.\n\n ## [`Transform`] and [`GlobalTransform`]\n\n [`Transform`] is the position of an entity relative to its parent position, or the reference\n frame if it doesn't have a [`Parent`](bevy_hierarchy::Parent).\n\n [`GlobalTransform`] is the position of an entity relative to the reference frame.\n\n [`GlobalTransform`] is updated from [`Transform`] by systems in the system set\n [`TransformPropagate`](crate::TransformSystem::TransformPropagate).\n\n This system runs during [`PostUpdate`](bevy_app::PostUpdate). If you\n update the [`Transform`] of an entity during this set or after, you will notice a 1 frame lag\n before the [`GlobalTransform`] is updated.\n\n # Examples\n\n - [`transform`][transform_example]\n\n [transform_example]: https://github.com/bevyengine/bevy/blob/latest/examples/transforms/transform.rs",
      "associated_functions": [
        "bevy_transform::components::transform::Transform::back",
        "bevy_transform::components::transform::Transform::clone",
        "bevy_transform::components::transform::Transform::compute_affine",
        "bevy_transform::components::transform::Transform::compute_matrix",
        "bevy_transform::components::transform::Transform::down",
        "bevy_transform::components::transform::Transform::eq",
        "bevy_transform::components::transform::Transform::forward",
        "bevy_transform::components::transform::Transform::from_isometry",
        "bevy_transform::components::transform::Transform::from_matrix",
        "bevy_transform::components::transform::Transform::from_rotation",
        "bevy_transform::components::transform::Transform::from_scale",
        "bevy_transform::components::transform::Transform::from_translation",
        "bevy_transform::components::transform::Transform::from_xyz",
        "bevy_transform::components::transform::Transform::is_finite",
        "bevy_transform::components::transform::Transform::left",
        "bevy_transform::components::transform::Transform::local_x",
        "bevy_transform::components::transform::Transform::local_y",
        "bevy_transform::components::transform::Transform::local_z",
        "bevy_transform::components::transform::Transform::mul",
        "bevy_transform::components::transform::Transform::mul-1",
        "bevy_transform::components::transform::Transform::mul-2",
        "bevy_transform::components::transform::Transform::mul_transform",
        "bevy_transform::components::transform::Transform::right",
        "bevy_transform::components::transform::Transform::rotate",
        "bevy_transform::components::transform::Transform::rotate_around",
        "bevy_transform::components::transform::Transform::rotate_axis",
        "bevy_transform::components::transform::Transform::rotate_local",
        "bevy_transform::components::transform::Transform::rotate_local_axis",
        "bevy_transform::components::transform::Transform::rotate_local_x",
        "bevy_transform::components::transform::Transform::rotate_local_y",
        "bevy_transform::components::transform::Transform::rotate_local_z",
        "bevy_transform::components::transform::Transform::rotate_x",
        "bevy_transform::components::transform::Transform::rotate_y",
        "bevy_transform::components::transform::Transform::rotate_z",
        "bevy_transform::components::transform::Transform::to_isometry",
        "bevy_transform::components::transform::Transform::transform_point",
        "bevy_transform::components::transform::Transform::translate_around",
        "bevy_transform::components::transform::Transform::up",
        "bevy_transform::components::transform::Transform::with_rotation",
        "bevy_transform::components::transform::Transform::with_scale",
        "bevy_transform::components::transform::Transform::with_translation"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Transform",
        "fields": [
          {
            "name": "translation",
            "type": "glam::Vec3"
          },
          {
            "name": "rotation",
            "type": "glam::Quat"
          },
          {
            "name": "scale",
            "type": "glam::Vec3"
          }
        ]
      }
    },
    "bevy_utils::Duration": {
      "identifier": "Duration",
      "crate": "bevy_utils",
      "path": "bevy_utils::Duration",
      "associated_functions": [
        "bevy_utils::Duration::abs_diff",
        "bevy_utils::Duration::add",
        "bevy_utils::Duration::as_micros",
        "bevy_utils::Duration::as_millis",
        "bevy_utils::Duration::as_nanos",
        "bevy_utils::Duration::as_secs",
        "bevy_utils::Duration::as_secs_f32",
        "bevy_utils::Duration::as_secs_f64",
        "bevy_utils::Duration::assert_receiver_is_total_eq",
        "bevy_utils::Duration::clone",
        "bevy_utils::Duration::div",
        "bevy_utils::Duration::div_duration_f32",
        "bevy_utils::Duration::div_duration_f64",
        "bevy_utils::Duration::div_f32",
        "bevy_utils::Duration::div_f64",
        "bevy_utils::Duration::eq",
        "bevy_utils::Duration::from_micros",
        "bevy_utils::Duration::from_millis",
        "bevy_utils::Duration::from_nanos",
        "bevy_utils::Duration::from_secs",
        "bevy_utils::Duration::from_secs_f32",
        "bevy_utils::Duration::from_secs_f64",
        "bevy_utils::Duration::is_zero",
        "bevy_utils::Duration::mul",
        "bevy_utils::Duration::mul_f32",
        "bevy_utils::Duration::mul_f64",
        "bevy_utils::Duration::new",
        "bevy_utils::Duration::saturating_add",
        "bevy_utils::Duration::saturating_mul",
        "bevy_utils::Duration::saturating_sub",
        "bevy_utils::Duration::sub",
        "bevy_utils::Duration::subsec_micros",
        "bevy_utils::Duration::subsec_millis",
        "bevy_utils::Duration::subsec_nanos"
      ],
      "layout": null
    },
    "bevy_utils::Instant": {
      "identifier": "Instant",
      "crate": "bevy_utils",
      "path": "bevy_utils::Instant",
      "associated_functions": [
        "bevy_utils::Instant::add",
        "bevy_utils::Instant::assert_receiver_is_total_eq",
        "bevy_utils::Instant::clone",
        "bevy_utils::Instant::duration_since",
        "bevy_utils::Instant::elapsed",
        "bevy_utils::Instant::eq",
        "bevy_utils::Instant::now",
        "bevy_utils::Instant::saturating_duration_since",
        "bevy_utils::Instant::sub",
        "bevy_utils::Instant::sub-1"
      ],
      "layout": null
    },
    "bevy_utils::hashbrown::HashMap<bevy_input::gamepad::GamepadAxis, bevy_input::gamepad::AxisSettings, bevy_utils::hashbrown::hash_map::DefaultHashBuilder>": {
      "identifier": "HashMap",
      "crate": "bevy_utils",
      "path": "bevy_utils::hashbrown::HashMap<bevy_input::gamepad::GamepadAxis, bevy_input::gamepad::AxisSettings, bevy_utils::hashbrown::hash_map::DefaultHashBuilder>",
      "generics": [
        {
          "type_id": "bevy_input::gamepad::GamepadAxis",
          "name": "K"
        },
        {
          "type_id": "bevy_input::gamepad::AxisSettings",
          "name": "V"
        }
      ],
      "layout": null
    },
    "bevy_utils::hashbrown::HashMap<bevy_input::gamepad::GamepadButton, bevy_input::gamepad::ButtonAxisSettings, bevy_utils::hashbrown::hash_map::DefaultHashBuilder>": {
      "identifier": "HashMap",
      "crate": "bevy_utils",
      "path": "bevy_utils::hashbrown::HashMap<bevy_input::gamepad::GamepadButton, bevy_input::gamepad::ButtonAxisSettings, bevy_utils::hashbrown::hash_map::DefaultHashBuilder>",
      "generics": [
        {
          "type_id": "bevy_input::gamepad::GamepadButton",
          "name": "K"
        },
        {
          "type_id": "bevy_input::gamepad::ButtonAxisSettings",
          "name": "V"
        }
      ],
      "layout": null
    },
    "bevy_utils::hashbrown::HashMap<bevy_input::gamepad::GamepadButton, bevy_input::gamepad::ButtonSettings, bevy_utils::hashbrown::hash_map::DefaultHashBuilder>": {
      "identifier": "HashMap",
      "crate": "bevy_utils",
      "path": "bevy_utils::hashbrown::HashMap<bevy_input::gamepad::GamepadButton, bevy_input::gamepad::ButtonSettings, bevy_utils::hashbrown::hash_map::DefaultHashBuilder>",
      "generics": [
        {
          "type_id": "bevy_input::gamepad::GamepadButton",
          "name": "K"
        },
        {
          "type_id": "bevy_input::gamepad::ButtonSettings",
          "name": "V"
        }
      ],
      "layout": null
    },
    "bevy_utils::hashbrown::HashMap<bevy_input::gamepad::GamepadInput, f32, bevy_utils::hashbrown::hash_map::DefaultHashBuilder>": {
      "identifier": "HashMap",
      "crate": "bevy_utils",
      "path": "bevy_utils::hashbrown::HashMap<bevy_input::gamepad::GamepadInput, f32, bevy_utils::hashbrown::hash_map::DefaultHashBuilder>",
      "generics": [
        {
          "type_id": "bevy_input::gamepad::GamepadInput",
          "name": "K"
        },
        {
          "type_id": "f32",
          "name": "V"
        }
      ],
      "layout": null
    },
    "bevy_utils::hashbrown::HashSet<bevy_input::gamepad::GamepadButton, bevy_utils::hashbrown::hash_map::DefaultHashBuilder>": {
      "identifier": "HashSet",
      "crate": "bevy_utils",
      "path": "bevy_utils::hashbrown::HashSet<bevy_input::gamepad::GamepadButton, bevy_utils::hashbrown::hash_map::DefaultHashBuilder>",
      "generics": [
        {
          "type_id": "bevy_input::gamepad::GamepadButton",
          "name": "V"
        }
      ],
      "layout": null
    },
    "bool": {
      "identifier": "bool",
      "path": "bool",
      "layout": null
    },
    "char": {
      "identifier": "char",
      "path": "char",
      "layout": null
    },
    "core::any::TypeId": {
      "identifier": "TypeId",
      "crate": "core",
      "path": "core::any::TypeId",
      "layout": null
    },
    "core::ops::RangeFull": {
      "identifier": "RangeFull",
      "crate": "core",
      "path": "core::ops::RangeFull",
      "associated_functions": [
        "core::ops::RangeFull::assert_receiver_is_total_eq",
        "core::ops::RangeFull::clone",
        "core::ops::RangeFull::eq"
      ],
      "layout": null
    },
    "core::option::Option<[u8; 6]>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<[u8; 6]>",
      "generics": [
        {
          "type_id": "[u8; 6]",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "[u8; 6]"
            }
          ]
        }
      ]
    },
    "core::option::Option<alloc::borrow::Cow<str>>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<alloc::borrow::Cow<str>>",
      "generics": [
        {
          "type_id": "alloc::borrow::Cow<str>",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "alloc::borrow::Cow<str>"
            }
          ]
        }
      ]
    },
    "core::option::Option<bevy_input::touch::ForceTouch>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<bevy_input::touch::ForceTouch>",
      "generics": [
        {
          "type_id": "bevy_input::touch::ForceTouch",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "bevy_input::touch::ForceTouch"
            }
          ]
        }
      ]
    },
    "core::option::Option<bevy_mod_scripting_core::bindings::function::from::Val<bevy_ecs::entity::Entity>>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<bevy_mod_scripting_core::bindings::function::from::Val<bevy_ecs::entity::Entity>>",
      "generics": [
        {
          "type_id": "bevy_mod_scripting_core::bindings::function::from::Val<bevy_ecs::entity::Entity>",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "bevy_mod_scripting_core::bindings::function::from::Val<bevy_ecs::entity::Entity>"
            }
          ]
        }
      ]
    },
    "core::option::Option<bevy_mod_scripting_core::bindings::reference::ReflectReference>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<bevy_mod_scripting_core::bindings::reference::ReflectReference>",
      "generics": [
        {
          "type_id": "ReflectReference",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "ReflectReference"
            }
          ]
        }
      ]
    },
    "core::option::Option<bevy_utils::Instant>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<bevy_utils::Instant>",
      "generics": [
        {
          "type_id": "bevy_utils::Instant",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "bevy_utils::Instant"
            }
          ]
        }
      ]
    },
    "core::option::Option<char>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<char>",
      "generics": [
        {
          "type_id": "char",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "char"
            }
          ]
        }
      ]
    },
    "core::option::Option<f32>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<f32>",
      "generics": [
        {
          "type_id": "f32",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "f32"
            }
          ]
        }
      ]
    },
    "core::option::Option<f64>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<f64>",
      "generics": [
        {
          "type_id": "f64",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "f64"
            }
          ]
        }
      ]
    },
    "core::option::Option<u16>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<u16>",
      "generics": [
        {
          "type_id": "u16",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "u16"
            }
          ]
        }
      ]
    },
    "core::option::Option<usize>": {
      "identifier": "Option",
      "crate": "core",
      "path": "core::option::Option<usize>",
      "generics": [
        {
          "type_id": "usize",
          "name": "T"
        }
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "None"
        },
        {
          "kind": "TupleStruct",
          "name": "Some",
          "fields": [
            {
              "type": "usize"
            }
          ]
        }
      ]
    },
    "core::sync::atomic::AtomicBool": {
      "identifier": "AtomicBool",
      "crate": "core",
      "path": "core::sync::atomic::AtomicBool",
      "associated_functions": [
        "core::sync::atomic::AtomicBool::into_inner",
        "core::sync::atomic::AtomicBool::new"
      ],
      "layout": null
    },
    "core::sync::atomic::AtomicI16": {
      "identifier": "AtomicI16",
      "crate": "core",
      "path": "core::sync::atomic::AtomicI16",
      "associated_functions": [
        "core::sync::atomic::AtomicI16::into_inner",
        "core::sync::atomic::AtomicI16::new"
      ],
      "layout": null
    },
    "core::sync::atomic::AtomicI32": {
      "identifier": "AtomicI32",
      "crate": "core",
      "path": "core::sync::atomic::AtomicI32",
      "associated_functions": [
        "core::sync::atomic::AtomicI32::into_inner",
        "core::sync::atomic::AtomicI32::new"
      ],
      "layout": null
    },
    "core::sync::atomic::AtomicI64": {
      "identifier": "AtomicI64",
      "crate": "core",
      "path": "core::sync::atomic::AtomicI64",
      "associated_functions": [
        "core::sync::atomic::AtomicI64::into_inner",
        "core::sync::atomic::AtomicI64::new"
      ],
      "layout": null
    },
    "core::sync::atomic::AtomicI8": {
      "identifier": "AtomicI8",
      "crate": "core",
      "path": "core::sync::atomic::AtomicI8",
      "associated_functions": [
        "core::sync::atomic::AtomicI8::into_inner",
        "core::sync::atomic::AtomicI8::new"
      ],
      "layout": null
    },
    "core::sync::atomic::AtomicIsize": {
      "identifier": "AtomicIsize",
      "crate": "core",
      "path": "core::sync::atomic::AtomicIsize",
      "associated_functions": [
        "core::sync::atomic::AtomicIsize::into_inner",
        "core::sync::atomic::AtomicIsize::new"
      ],
      "layout": null
    },
    "core::sync::atomic::AtomicU16": {
      "identifier": "AtomicU16",
      "crate": "core",
      "path": "core::sync::atomic::AtomicU16",
      "associated_functions": [
        "core::sync::atomic::AtomicU16::into_inner",
        "core::sync::atomic::AtomicU16::new"
      ],
      "layout": null
    },
    "core::sync::atomic::AtomicU32": {
      "identifier": "AtomicU32",
      "crate": "core",
      "path": "core::sync::atomic::AtomicU32",
      "associated_functions": [
        "core::sync::atomic::AtomicU32::into_inner",
        "core::sync::atomic::AtomicU32::new"
      ],
      "layout": null
    },
    "core::sync::atomic::AtomicU64": {
      "identifier": "AtomicU64",
      "crate": "core",
      "path": "core::sync::atomic::AtomicU64",
      "associated_functions": [
        "core::sync::atomic::AtomicU64::into_inner",
        "core::sync::atomic::AtomicU64::new"
      ],
      "layout": null
    },
    "core::sync::atomic::AtomicU8": {
      "identifier": "AtomicU8",
      "crate": "core",
      "path": "core::sync::atomic::AtomicU8",
      "associated_functions": [
        "core::sync::atomic::AtomicU8::into_inner",
        "core::sync::atomic::AtomicU8::new"
      ],
      "layout": null
    },
    "core::sync::atomic::AtomicUsize": {
      "identifier": "AtomicUsize",
      "crate": "core",
      "path": "core::sync::atomic::AtomicUsize",
      "associated_functions": [
        "core::sync::atomic::AtomicUsize::into_inner",
        "core::sync::atomic::AtomicUsize::new"
      ],
      "layout": null
    },
    "f32": {
      "identifier": "f32",
      "path": "f32",
      "layout": null
    },
    "f64": {
      "identifier": "f64",
      "path": "f64",
      "layout": null
    },
    "glam::Affine2": {
      "identifier": "Affine2",
      "crate": "glam",
      "path": "glam::Affine2",
      "associated_functions": [
        "glam::Affine2::abs_diff_eq",
        "glam::Affine2::clone",
        "glam::Affine2::eq",
        "glam::Affine2::from_angle",
        "glam::Affine2::from_angle_translation",
        "glam::Affine2::from_cols",
        "glam::Affine2::from_mat2",
        "glam::Affine2::from_mat2_translation",
        "glam::Affine2::from_mat3",
        "glam::Affine2::from_mat3a",
        "glam::Affine2::from_scale",
        "glam::Affine2::from_scale_angle_translation",
        "glam::Affine2::from_translation",
        "glam::Affine2::inverse",
        "glam::Affine2::is_finite",
        "glam::Affine2::is_nan",
        "glam::Affine2::mul",
        "glam::Affine2::mul-1",
        "glam::Affine2::mul-2",
        "glam::Affine2::to_cols_array",
        "glam::Affine2::to_cols_array_2d",
        "glam::Affine2::transform_point2",
        "glam::Affine2::transform_vector2"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Affine2",
        "fields": [
          {
            "name": "matrix2",
            "type": "glam::Mat2"
          },
          {
            "name": "translation",
            "type": "glam::Vec2"
          }
        ]
      }
    },
    "glam::Affine3A": {
      "identifier": "Affine3A",
      "crate": "glam",
      "path": "glam::Affine3A",
      "associated_functions": [
        "glam::Affine3A::abs_diff_eq",
        "glam::Affine3A::clone",
        "glam::Affine3A::eq",
        "glam::Affine3A::from_axis_angle",
        "glam::Affine3A::from_cols",
        "glam::Affine3A::from_mat3",
        "glam::Affine3A::from_mat3_translation",
        "glam::Affine3A::from_mat4",
        "glam::Affine3A::from_quat",
        "glam::Affine3A::from_rotation_translation",
        "glam::Affine3A::from_rotation_x",
        "glam::Affine3A::from_rotation_y",
        "glam::Affine3A::from_rotation_z",
        "glam::Affine3A::from_scale",
        "glam::Affine3A::from_scale_rotation_translation",
        "glam::Affine3A::from_translation",
        "glam::Affine3A::inverse",
        "glam::Affine3A::is_finite",
        "glam::Affine3A::is_nan",
        "glam::Affine3A::look_at_lh",
        "glam::Affine3A::look_at_rh",
        "glam::Affine3A::look_to_lh",
        "glam::Affine3A::look_to_rh",
        "glam::Affine3A::mul",
        "glam::Affine3A::mul-1",
        "glam::Affine3A::to_cols_array",
        "glam::Affine3A::to_cols_array_2d",
        "glam::Affine3A::transform_point3",
        "glam::Affine3A::transform_point3a",
        "glam::Affine3A::transform_vector3",
        "glam::Affine3A::transform_vector3a"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Affine3A",
        "fields": [
          {
            "name": "matrix3",
            "type": "glam::Mat3A"
          },
          {
            "name": "translation",
            "type": "glam::Vec3A"
          }
        ]
      }
    },
    "glam::BVec2": {
      "identifier": "BVec2",
      "crate": "glam",
      "path": "glam::BVec2",
      "associated_functions": [
        "glam::BVec2::all",
        "glam::BVec2::any",
        "glam::BVec2::assert_receiver_is_total_eq",
        "glam::BVec2::bitmask",
        "glam::BVec2::clone",
        "glam::BVec2::eq",
        "glam::BVec2::from_array",
        "glam::BVec2::new",
        "glam::BVec2::set",
        "glam::BVec2::splat",
        "glam::BVec2::test"
      ],
      "layout": {
        "kind": "Struct",
        "name": "BVec2",
        "fields": [
          {
            "name": "x",
            "type": "bool"
          },
          {
            "name": "y",
            "type": "bool"
          }
        ]
      }
    },
    "glam::BVec3": {
      "identifier": "BVec3",
      "crate": "glam",
      "path": "glam::BVec3",
      "associated_functions": [
        "glam::BVec3::all",
        "glam::BVec3::any",
        "glam::BVec3::assert_receiver_is_total_eq",
        "glam::BVec3::bitmask",
        "glam::BVec3::clone",
        "glam::BVec3::eq",
        "glam::BVec3::from_array",
        "glam::BVec3::new",
        "glam::BVec3::set",
        "glam::BVec3::splat",
        "glam::BVec3::test"
      ],
      "layout": {
        "kind": "Struct",
        "name": "BVec3",
        "fields": [
          {
            "name": "x",
            "type": "bool"
          },
          {
            "name": "y",
            "type": "bool"
          },
          {
            "name": "z",
            "type": "bool"
          }
        ]
      }
    },
    "glam::BVec3A": {
      "identifier": "BVec3A",
      "crate": "glam",
      "path": "glam::BVec3A",
      "associated_functions": [
        "glam::BVec3A::all",
        "glam::BVec3A::any",
        "glam::BVec3A::bitmask",
        "glam::BVec3A::clone",
        "glam::BVec3A::eq",
        "glam::BVec3A::from_array",
        "glam::BVec3A::new",
        "glam::BVec3A::set",
        "glam::BVec3A::splat",
        "glam::BVec3A::test"
      ],
      "layout": null
    },
    "glam::BVec4": {
      "identifier": "BVec4",
      "crate": "glam",
      "path": "glam::BVec4",
      "associated_functions": [
        "glam::BVec4::all",
        "glam::BVec4::any",
        "glam::BVec4::assert_receiver_is_total_eq",
        "glam::BVec4::bitmask",
        "glam::BVec4::clone",
        "glam::BVec4::eq",
        "glam::BVec4::from_array",
        "glam::BVec4::new",
        "glam::BVec4::set",
        "glam::BVec4::splat",
        "glam::BVec4::test"
      ],
      "layout": {
        "kind": "Struct",
        "name": "BVec4",
        "fields": [
          {
            "name": "x",
            "type": "bool"
          },
          {
            "name": "y",
            "type": "bool"
          },
          {
            "name": "z",
            "type": "bool"
          },
          {
            "name": "w",
            "type": "bool"
          }
        ]
      }
    },
    "glam::BVec4A": {
      "identifier": "BVec4A",
      "crate": "glam",
      "path": "glam::BVec4A",
      "associated_functions": [
        "glam::BVec4A::all",
        "glam::BVec4A::any",
        "glam::BVec4A::bitmask",
        "glam::BVec4A::clone",
        "glam::BVec4A::eq",
        "glam::BVec4A::from_array",
        "glam::BVec4A::new",
        "glam::BVec4A::set",
        "glam::BVec4A::splat",
        "glam::BVec4A::test"
      ],
      "layout": null
    },
    "glam::DAffine2": {
      "identifier": "DAffine2",
      "crate": "glam",
      "path": "glam::DAffine2",
      "associated_functions": [
        "glam::DAffine2::abs_diff_eq",
        "glam::DAffine2::clone",
        "glam::DAffine2::eq",
        "glam::DAffine2::from_angle",
        "glam::DAffine2::from_angle_translation",
        "glam::DAffine2::from_cols",
        "glam::DAffine2::from_mat2",
        "glam::DAffine2::from_mat2_translation",
        "glam::DAffine2::from_mat3",
        "glam::DAffine2::from_scale",
        "glam::DAffine2::from_scale_angle_translation",
        "glam::DAffine2::from_translation",
        "glam::DAffine2::inverse",
        "glam::DAffine2::is_finite",
        "glam::DAffine2::is_nan",
        "glam::DAffine2::mul",
        "glam::DAffine2::mul-1",
        "glam::DAffine2::to_cols_array",
        "glam::DAffine2::to_cols_array_2d",
        "glam::DAffine2::transform_point2",
        "glam::DAffine2::transform_vector2"
      ],
      "layout": {
        "kind": "Struct",
        "name": "DAffine2",
        "fields": [
          {
            "name": "matrix2",
            "type": "glam::DMat2"
          },
          {
            "name": "translation",
            "type": "glam::DVec2"
          }
        ]
      }
    },
    "glam::DAffine3": {
      "identifier": "DAffine3",
      "crate": "glam",
      "path": "glam::DAffine3",
      "associated_functions": [
        "glam::DAffine3::abs_diff_eq",
        "glam::DAffine3::clone",
        "glam::DAffine3::eq",
        "glam::DAffine3::from_axis_angle",
        "glam::DAffine3::from_cols",
        "glam::DAffine3::from_mat3",
        "glam::DAffine3::from_mat3_translation",
        "glam::DAffine3::from_mat4",
        "glam::DAffine3::from_quat",
        "glam::DAffine3::from_rotation_translation",
        "glam::DAffine3::from_rotation_x",
        "glam::DAffine3::from_rotation_y",
        "glam::DAffine3::from_rotation_z",
        "glam::DAffine3::from_scale",
        "glam::DAffine3::from_scale_rotation_translation",
        "glam::DAffine3::from_translation",
        "glam::DAffine3::inverse",
        "glam::DAffine3::is_finite",
        "glam::DAffine3::is_nan",
        "glam::DAffine3::look_at_lh",
        "glam::DAffine3::look_at_rh",
        "glam::DAffine3::look_to_lh",
        "glam::DAffine3::look_to_rh",
        "glam::DAffine3::mul",
        "glam::DAffine3::mul-1",
        "glam::DAffine3::to_cols_array",
        "glam::DAffine3::to_cols_array_2d",
        "glam::DAffine3::transform_point3",
        "glam::DAffine3::transform_vector3"
      ],
      "layout": {
        "kind": "Struct",
        "name": "DAffine3",
        "fields": [
          {
            "name": "matrix3",
            "type": "glam::DMat3"
          },
          {
            "name": "translation",
            "type": "glam::DVec3"
          }
        ]
      }
    },
    "glam::DMat2": {
      "identifier": "DMat2",
      "crate": "glam",
      "path": "glam::DMat2",
      "associated_functions": [
        "glam::DMat2::abs",
        "glam::DMat2::abs_diff_eq",
        "glam::DMat2::add",
        "glam::DMat2::add_mat2",
        "glam::DMat2::as_mat2",
        "glam::DMat2::clone",
        "glam::DMat2::col",
        "glam::DMat2::determinant",
        "glam::DMat2::div",
        "glam::DMat2::div_scalar",
        "glam::DMat2::eq",
        "glam::DMat2::from_angle",
        "glam::DMat2::from_cols",
        "glam::DMat2::from_diagonal",
        "glam::DMat2::from_mat3",
        "glam::DMat2::from_mat3_minor",
        "glam::DMat2::from_scale_angle",
        "glam::DMat2::inverse",
        "glam::DMat2::is_finite",
        "glam::DMat2::is_nan",
        "glam::DMat2::mul",
        "glam::DMat2::mul-1",
        "glam::DMat2::mul-2",
        "glam::DMat2::mul_mat2",
        "glam::DMat2::mul_scalar",
        "glam::DMat2::mul_vec2",
        "glam::DMat2::neg",
        "glam::DMat2::row",
        "glam::DMat2::sub",
        "glam::DMat2::sub_mat2",
        "glam::DMat2::to_cols_array",
        "glam::DMat2::to_cols_array_2d",
        "glam::DMat2::transpose"
      ],
      "layout": {
        "kind": "Struct",
        "name": "DMat2",
        "fields": [
          {
            "name": "x_axis",
            "type": "glam::DVec2"
          },
          {
            "name": "y_axis",
            "type": "glam::DVec2"
          }
        ]
      }
    },
    "glam::DMat3": {
      "identifier": "DMat3",
      "crate": "glam",
      "path": "glam::DMat3",
      "associated_functions": [
        "glam::DMat3::abs",
        "glam::DMat3::abs_diff_eq",
        "glam::DMat3::add",
        "glam::DMat3::add_mat3",
        "glam::DMat3::as_mat3",
        "glam::DMat3::clone",
        "glam::DMat3::col",
        "glam::DMat3::determinant",
        "glam::DMat3::div",
        "glam::DMat3::div_scalar",
        "glam::DMat3::eq",
        "glam::DMat3::from_angle",
        "glam::DMat3::from_axis_angle",
        "glam::DMat3::from_cols",
        "glam::DMat3::from_diagonal",
        "glam::DMat3::from_euler",
        "glam::DMat3::from_mat2",
        "glam::DMat3::from_mat4",
        "glam::DMat3::from_mat4_minor",
        "glam::DMat3::from_quat",
        "glam::DMat3::from_rotation_x",
        "glam::DMat3::from_rotation_y",
        "glam::DMat3::from_rotation_z",
        "glam::DMat3::from_scale",
        "glam::DMat3::from_scale_angle_translation",
        "glam::DMat3::from_translation",
        "glam::DMat3::inverse",
        "glam::DMat3::is_finite",
        "glam::DMat3::is_nan",
        "glam::DMat3::mul",
        "glam::DMat3::mul-1",
        "glam::DMat3::mul-2",
        "glam::DMat3::mul-3",
        "glam::DMat3::mul_mat3",
        "glam::DMat3::mul_scalar",
        "glam::DMat3::mul_vec3",
        "glam::DMat3::neg",
        "glam::DMat3::row",
        "glam::DMat3::sub",
        "glam::DMat3::sub_mat3",
        "glam::DMat3::to_cols_array",
        "glam::DMat3::to_cols_array_2d",
        "glam::DMat3::to_euler",
        "glam::DMat3::transform_point2",
        "glam::DMat3::transform_vector2",
        "glam::DMat3::transpose"
      ],
      "layout": {
        "kind": "Struct",
        "name": "DMat3",
        "fields": [
          {
            "name": "x_axis",
            "type": "glam::DVec3"
          },
          {
            "name": "y_axis",
            "type": "glam::DVec3"
          },
          {
            "name": "z_axis",
            "type": "glam::DVec3"
          }
        ]
      }
    },
    "glam::DMat4": {
      "identifier": "DMat4",
      "crate": "glam",
      "path": "glam::DMat4",
      "associated_functions": [
        "glam::DMat4::abs",
        "glam::DMat4::abs_diff_eq",
        "glam::DMat4::add",
        "glam::DMat4::add_mat4",
        "glam::DMat4::as_mat4",
        "glam::DMat4::clone",
        "glam::DMat4::col",
        "glam::DMat4::determinant",
        "glam::DMat4::div",
        "glam::DMat4::div_scalar",
        "glam::DMat4::eq",
        "glam::DMat4::from_axis_angle",
        "glam::DMat4::from_cols",
        "glam::DMat4::from_diagonal",
        "glam::DMat4::from_euler",
        "glam::DMat4::from_mat3",
        "glam::DMat4::from_quat",
        "glam::DMat4::from_rotation_translation",
        "glam::DMat4::from_rotation_x",
        "glam::DMat4::from_rotation_y",
        "glam::DMat4::from_rotation_z",
        "glam::DMat4::from_scale",
        "glam::DMat4::from_scale_rotation_translation",
        "glam::DMat4::from_translation",
        "glam::DMat4::inverse",
        "glam::DMat4::is_finite",
        "glam::DMat4::is_nan",
        "glam::DMat4::look_at_lh",
        "glam::DMat4::look_at_rh",
        "glam::DMat4::look_to_lh",
        "glam::DMat4::look_to_rh",
        "glam::DMat4::mul",
        "glam::DMat4::mul-1",
        "glam::DMat4::mul-2",
        "glam::DMat4::mul-3",
        "glam::DMat4::mul_mat4",
        "glam::DMat4::mul_scalar",
        "glam::DMat4::mul_vec4",
        "glam::DMat4::neg",
        "glam::DMat4::orthographic_lh",
        "glam::DMat4::orthographic_rh",
        "glam::DMat4::orthographic_rh_gl",
        "glam::DMat4::perspective_infinite_lh",
        "glam::DMat4::perspective_infinite_reverse_lh",
        "glam::DMat4::perspective_infinite_reverse_rh",
        "glam::DMat4::perspective_infinite_rh",
        "glam::DMat4::perspective_lh",
        "glam::DMat4::perspective_rh",
        "glam::DMat4::perspective_rh_gl",
        "glam::DMat4::project_point3",
        "glam::DMat4::row",
        "glam::DMat4::sub",
        "glam::DMat4::sub_mat4",
        "glam::DMat4::to_cols_array",
        "glam::DMat4::to_cols_array_2d",
        "glam::DMat4::to_euler",
        "glam::DMat4::transform_point3",
        "glam::DMat4::transform_vector3",
        "glam::DMat4::transpose"
      ],
      "layout": {
        "kind": "Struct",
        "name": "DMat4",
        "fields": [
          {
            "name": "x_axis",
            "type": "glam::DVec4"
          },
          {
            "name": "y_axis",
            "type": "glam::DVec4"
          },
          {
            "name": "z_axis",
            "type": "glam::DVec4"
          },
          {
            "name": "w_axis",
            "type": "glam::DVec4"
          }
        ]
      }
    },
    "glam::DQuat": {
      "identifier": "DQuat",
      "crate": "glam",
      "path": "glam::DQuat",
      "associated_functions": [
        "glam::DQuat::abs_diff_eq",
        "glam::DQuat::add",
        "glam::DQuat::angle_between",
        "glam::DQuat::as_quat",
        "glam::DQuat::clone",
        "glam::DQuat::conjugate",
        "glam::DQuat::div",
        "glam::DQuat::dot",
        "glam::DQuat::eq",
        "glam::DQuat::from_affine3",
        "glam::DQuat::from_array",
        "glam::DQuat::from_axis_angle",
        "glam::DQuat::from_euler",
        "glam::DQuat::from_mat3",
        "glam::DQuat::from_mat4",
        "glam::DQuat::from_rotation_arc",
        "glam::DQuat::from_rotation_arc_2d",
        "glam::DQuat::from_rotation_arc_colinear",
        "glam::DQuat::from_rotation_x",
        "glam::DQuat::from_rotation_y",
        "glam::DQuat::from_rotation_z",
        "glam::DQuat::from_scaled_axis",
        "glam::DQuat::from_vec4",
        "glam::DQuat::from_xyzw",
        "glam::DQuat::inverse",
        "glam::DQuat::is_finite",
        "glam::DQuat::is_nan",
        "glam::DQuat::is_near_identity",
        "glam::DQuat::is_normalized",
        "glam::DQuat::length",
        "glam::DQuat::length_recip",
        "glam::DQuat::length_squared",
        "glam::DQuat::lerp",
        "glam::DQuat::mul",
        "glam::DQuat::mul-1",
        "glam::DQuat::mul-2",
        "glam::DQuat::mul_quat",
        "glam::DQuat::mul_vec3",
        "glam::DQuat::neg",
        "glam::DQuat::normalize",
        "glam::DQuat::rotate_towards",
        "glam::DQuat::slerp",
        "glam::DQuat::sub",
        "glam::DQuat::to_array",
        "glam::DQuat::to_euler",
        "glam::DQuat::to_scaled_axis",
        "glam::DQuat::xyz"
      ],
      "layout": {
        "kind": "Struct",
        "name": "DQuat",
        "fields": [
          {
            "name": "x",
            "type": "f64"
          },
          {
            "name": "y",
            "type": "f64"
          },
          {
            "name": "z",
            "type": "f64"
          },
          {
            "name": "w",
            "type": "f64"
          }
        ]
      }
    },
    "glam::DVec2": {
      "identifier": "DVec2",
      "crate": "glam",
      "path": "glam::DVec2",
      "associated_functions": [
        "glam::DVec2::abs",
        "glam::DVec2::abs_diff_eq",
        "glam::DVec2::add",
        "glam::DVec2::add-1",
        "glam::DVec2::add-2",
        "glam::DVec2::angle_between",
        "glam::DVec2::angle_to",
        "glam::DVec2::as_i64vec2",
        "glam::DVec2::as_ivec2",
        "glam::DVec2::as_u64vec2",
        "glam::DVec2::as_uvec2",
        "glam::DVec2::as_vec2",
        "glam::DVec2::ceil",
        "glam::DVec2::clamp",
        "glam::DVec2::clamp_length",
        "glam::DVec2::clamp_length_max",
        "glam::DVec2::clamp_length_min",
        "glam::DVec2::clone",
        "glam::DVec2::cmpeq",
        "glam::DVec2::cmpge",
        "glam::DVec2::cmpgt",
        "glam::DVec2::cmple",
        "glam::DVec2::cmplt",
        "glam::DVec2::cmpne",
        "glam::DVec2::copysign",
        "glam::DVec2::distance",
        "glam::DVec2::distance_squared",
        "glam::DVec2::div",
        "glam::DVec2::div-1",
        "glam::DVec2::div-2",
        "glam::DVec2::div_euclid",
        "glam::DVec2::dot",
        "glam::DVec2::dot_into_vec",
        "glam::DVec2::element_product",
        "glam::DVec2::element_sum",
        "glam::DVec2::eq",
        "glam::DVec2::exp",
        "glam::DVec2::extend",
        "glam::DVec2::floor",
        "glam::DVec2::fract",
        "glam::DVec2::fract_gl",
        "glam::DVec2::from_angle",
        "glam::DVec2::from_array",
        "glam::DVec2::is_finite",
        "glam::DVec2::is_finite_mask",
        "glam::DVec2::is_nan",
        "glam::DVec2::is_nan_mask",
        "glam::DVec2::is_negative_bitmask",
        "glam::DVec2::is_normalized",
        "glam::DVec2::length",
        "glam::DVec2::length_recip",
        "glam::DVec2::length_squared",
        "glam::DVec2::lerp",
        "glam::DVec2::max",
        "glam::DVec2::max_element",
        "glam::DVec2::midpoint",
        "glam::DVec2::min",
        "glam::DVec2::min_element",
        "glam::DVec2::move_towards",
        "glam::DVec2::mul",
        "glam::DVec2::mul-1",
        "glam::DVec2::mul-2",
        "glam::DVec2::mul_add",
        "glam::DVec2::neg",
        "glam::DVec2::new",
        "glam::DVec2::normalize",
        "glam::DVec2::normalize_or",
        "glam::DVec2::normalize_or_zero",
        "glam::DVec2::perp",
        "glam::DVec2::perp_dot",
        "glam::DVec2::powf",
        "glam::DVec2::project_onto",
        "glam::DVec2::project_onto_normalized",
        "glam::DVec2::recip",
        "glam::DVec2::reflect",
        "glam::DVec2::refract",
        "glam::DVec2::reject_from",
        "glam::DVec2::reject_from_normalized",
        "glam::DVec2::rem",
        "glam::DVec2::rem-1",
        "glam::DVec2::rem-2",
        "glam::DVec2::rem_euclid",
        "glam::DVec2::rotate",
        "glam::DVec2::rotate_towards",
        "glam::DVec2::round",
        "glam::DVec2::select",
        "glam::DVec2::signum",
        "glam::DVec2::splat",
        "glam::DVec2::sub",
        "glam::DVec2::sub-1",
        "glam::DVec2::sub-2",
        "glam::DVec2::to_angle",
        "glam::DVec2::to_array",
        "glam::DVec2::trunc",
        "glam::DVec2::with_x",
        "glam::DVec2::with_y"
      ],
      "layout": {
        "kind": "Struct",
        "name": "DVec2",
        "fields": [
          {
            "name": "x",
            "type": "f64"
          },
          {
            "name": "y",
            "type": "f64"
          }
        ]
      }
    },
    "glam::DVec3": {
      "identifier": "DVec3",
      "crate": "glam",
      "path": "glam::DVec3",
      "associated_functions": [
        "glam::DVec3::abs",
        "glam::DVec3::abs_diff_eq",
        "glam::DVec3::add",
        "glam::DVec3::add-1",
        "glam::DVec3::add-2",
        "glam::DVec3::angle_between",
        "glam::DVec3::any_orthogonal_vector",
        "glam::DVec3::any_orthonormal_vector",
        "glam::DVec3::as_i64vec3",
        "glam::DVec3::as_ivec3",
        "glam::DVec3::as_u64vec3",
        "glam::DVec3::as_uvec3",
        "glam::DVec3::as_vec3",
        "glam::DVec3::as_vec3a",
        "glam::DVec3::ceil",
        "glam::DVec3::clamp",
        "glam::DVec3::clamp_length",
        "glam::DVec3::clamp_length_max",
        "glam::DVec3::clamp_length_min",
        "glam::DVec3::clone",
        "glam::DVec3::cmpeq",
        "glam::DVec3::cmpge",
        "glam::DVec3::cmpgt",
        "glam::DVec3::cmple",
        "glam::DVec3::cmplt",
        "glam::DVec3::cmpne",
        "glam::DVec3::copysign",
        "glam::DVec3::cross",
        "glam::DVec3::distance",
        "glam::DVec3::distance_squared",
        "glam::DVec3::div",
        "glam::DVec3::div-1",
        "glam::DVec3::div-2",
        "glam::DVec3::div_euclid",
        "glam::DVec3::dot",
        "glam::DVec3::dot_into_vec",
        "glam::DVec3::element_product",
        "glam::DVec3::element_sum",
        "glam::DVec3::eq",
        "glam::DVec3::exp",
        "glam::DVec3::extend",
        "glam::DVec3::floor",
        "glam::DVec3::fract",
        "glam::DVec3::fract_gl",
        "glam::DVec3::from_array",
        "glam::DVec3::is_finite",
        "glam::DVec3::is_finite_mask",
        "glam::DVec3::is_nan",
        "glam::DVec3::is_nan_mask",
        "glam::DVec3::is_negative_bitmask",
        "glam::DVec3::is_normalized",
        "glam::DVec3::length",
        "glam::DVec3::length_recip",
        "glam::DVec3::length_squared",
        "glam::DVec3::lerp",
        "glam::DVec3::max",
        "glam::DVec3::max_element",
        "glam::DVec3::midpoint",
        "glam::DVec3::min",
        "glam::DVec3::min_element",
        "glam::DVec3::move_towards",
        "glam::DVec3::mul",
        "glam::DVec3::mul-1",
        "glam::DVec3::mul-2",
        "glam::DVec3::mul_add",
        "glam::DVec3::neg",
        "glam::DVec3::new",
        "glam::DVec3::normalize",
        "glam::DVec3::normalize_or",
        "glam::DVec3::normalize_or_zero",
        "glam::DVec3::powf",
        "glam::DVec3::project_onto",
        "glam::DVec3::project_onto_normalized",
        "glam::DVec3::recip",
        "glam::DVec3::reflect",
        "glam::DVec3::refract",
        "glam::DVec3::reject_from",
        "glam::DVec3::reject_from_normalized",
        "glam::DVec3::rem",
        "glam::DVec3::rem-1",
        "glam::DVec3::rem-2",
        "glam::DVec3::rem_euclid",
        "glam::DVec3::round",
        "glam::DVec3::select",
        "glam::DVec3::signum",
        "glam::DVec3::splat",
        "glam::DVec3::sub",
        "glam::DVec3::sub-1",
        "glam::DVec3::sub-2",
        "glam::DVec3::to_array",
        "glam::DVec3::trunc",
        "glam::DVec3::truncate",
        "glam::DVec3::with_x",
        "glam::DVec3::with_y",
        "glam::DVec3::with_z"
      ],
      "layout": {
        "kind": "Struct",
        "name": "DVec3",
        "fields": [
          {
            "name": "x",
            "type": "f64"
          },
          {
            "name": "y",
            "type": "f64"
          },
          {
            "name": "z",
            "type": "f64"
          }
        ]
      }
    },
    "glam::DVec4": {
      "identifier": "DVec4",
      "crate": "glam",
      "path": "glam::DVec4",
      "associated_functions": [
        "glam::DVec4::abs",
        "glam::DVec4::abs_diff_eq",
        "glam::DVec4::add",
        "glam::DVec4::add-1",
        "glam::DVec4::add-2",
        "glam::DVec4::as_i64vec4",
        "glam::DVec4::as_ivec4",
        "glam::DVec4::as_u64vec4",
        "glam::DVec4::as_uvec4",
        "glam::DVec4::as_vec4",
        "glam::DVec4::ceil",
        "glam::DVec4::clamp",
        "glam::DVec4::clamp_length",
        "glam::DVec4::clamp_length_max",
        "glam::DVec4::clamp_length_min",
        "glam::DVec4::clone",
        "glam::DVec4::cmpeq",
        "glam::DVec4::cmpge",
        "glam::DVec4::cmpgt",
        "glam::DVec4::cmple",
        "glam::DVec4::cmplt",
        "glam::DVec4::cmpne",
        "glam::DVec4::copysign",
        "glam::DVec4::distance",
        "glam::DVec4::distance_squared",
        "glam::DVec4::div",
        "glam::DVec4::div-1",
        "glam::DVec4::div-2",
        "glam::DVec4::div_euclid",
        "glam::DVec4::dot",
        "glam::DVec4::dot_into_vec",
        "glam::DVec4::element_product",
        "glam::DVec4::element_sum",
        "glam::DVec4::eq",
        "glam::DVec4::exp",
        "glam::DVec4::floor",
        "glam::DVec4::fract",
        "glam::DVec4::fract_gl",
        "glam::DVec4::from_array",
        "glam::DVec4::is_finite",
        "glam::DVec4::is_finite_mask",
        "glam::DVec4::is_nan",
        "glam::DVec4::is_nan_mask",
        "glam::DVec4::is_negative_bitmask",
        "glam::DVec4::is_normalized",
        "glam::DVec4::length",
        "glam::DVec4::length_recip",
        "glam::DVec4::length_squared",
        "glam::DVec4::lerp",
        "glam::DVec4::max",
        "glam::DVec4::max_element",
        "glam::DVec4::midpoint",
        "glam::DVec4::min",
        "glam::DVec4::min_element",
        "glam::DVec4::move_towards",
        "glam::DVec4::mul",
        "glam::DVec4::mul-1",
        "glam::DVec4::mul-2",
        "glam::DVec4::mul_add",
        "glam::DVec4::neg",
        "glam::DVec4::new",
        "glam::DVec4::normalize",
        "glam::DVec4::normalize_or",
        "glam::DVec4::normalize_or_zero",
        "glam::DVec4::powf",
        "glam::DVec4::project_onto",
        "glam::DVec4::project_onto_normalized",
        "glam::DVec4::recip",
        "glam::DVec4::reflect",
        "glam::DVec4::refract",
        "glam::DVec4::reject_from",
        "glam::DVec4::reject_from_normalized",
        "glam::DVec4::rem",
        "glam::DVec4::rem-1",
        "glam::DVec4::rem-2",
        "glam::DVec4::rem_euclid",
        "glam::DVec4::round",
        "glam::DVec4::select",
        "glam::DVec4::signum",
        "glam::DVec4::splat",
        "glam::DVec4::sub",
        "glam::DVec4::sub-1",
        "glam::DVec4::sub-2",
        "glam::DVec4::to_array",
        "glam::DVec4::trunc",
        "glam::DVec4::truncate",
        "glam::DVec4::with_w",
        "glam::DVec4::with_x",
        "glam::DVec4::with_y",
        "glam::DVec4::with_z"
      ],
      "layout": {
        "kind": "Struct",
        "name": "DVec4",
        "fields": [
          {
            "name": "x",
            "type": "f64"
          },
          {
            "name": "y",
            "type": "f64"
          },
          {
            "name": "z",
            "type": "f64"
          },
          {
            "name": "w",
            "type": "f64"
          }
        ]
      }
    },
    "glam::EulerRot": {
      "identifier": "EulerRot",
      "crate": "glam",
      "path": "glam::EulerRot",
      "associated_functions": [
        "glam::EulerRot::assert_receiver_is_total_eq",
        "glam::EulerRot::clone",
        "glam::EulerRot::eq"
      ],
      "layout": [
        {
          "kind": "Unit",
          "name": "ZYX"
        },
        {
          "kind": "Unit",
          "name": "ZXY"
        },
        {
          "kind": "Unit",
          "name": "YXZ"
        },
        {
          "kind": "Unit",
          "name": "YZX"
        },
        {
          "kind": "Unit",
          "name": "XYZ"
        },
        {
          "kind": "Unit",
          "name": "XZY"
        },
        {
          "kind": "Unit",
          "name": "ZYZ"
        },
        {
          "kind": "Unit",
          "name": "ZXZ"
        },
        {
          "kind": "Unit",
          "name": "YXY"
        },
        {
          "kind": "Unit",
          "name": "YZY"
        },
        {
          "kind": "Unit",
          "name": "XYX"
        },
        {
          "kind": "Unit",
          "name": "XZX"
        },
        {
          "kind": "Unit",
          "name": "ZYXEx"
        },
        {
          "kind": "Unit",
          "name": "ZXYEx"
        },
        {
          "kind": "Unit",
          "name": "YXZEx"
        },
        {
          "kind": "Unit",
          "name": "YZXEx"
        },
        {
          "kind": "Unit",
          "name": "XYZEx"
        },
        {
          "kind": "Unit",
          "name": "XZYEx"
        },
        {
          "kind": "Unit",
          "name": "ZYZEx"
        },
        {
          "kind": "Unit",
          "name": "ZXZEx"
        },
        {
          "kind": "Unit",
          "name": "YXYEx"
        },
        {
          "kind": "Unit",
          "name": "YZYEx"
        },
        {
          "kind": "Unit",
          "name": "XYXEx"
        },
        {
          "kind": "Unit",
          "name": "XZXEx"
        }
      ]
    },
    "glam::I64Vec2": {
      "identifier": "I64Vec2",
      "crate": "glam",
      "path": "glam::I64Vec2",
      "associated_functions": [
        "glam::I64Vec2::abs",
        "glam::I64Vec2::add",
        "glam::I64Vec2::add-1",
        "glam::I64Vec2::add-2",
        "glam::I64Vec2::as_dvec2",
        "glam::I64Vec2::as_ivec2",
        "glam::I64Vec2::as_u64vec2",
        "glam::I64Vec2::as_uvec2",
        "glam::I64Vec2::as_vec2",
        "glam::I64Vec2::assert_receiver_is_total_eq",
        "glam::I64Vec2::clamp",
        "glam::I64Vec2::clone",
        "glam::I64Vec2::cmpeq",
        "glam::I64Vec2::cmpge",
        "glam::I64Vec2::cmpgt",
        "glam::I64Vec2::cmple",
        "glam::I64Vec2::cmplt",
        "glam::I64Vec2::cmpne",
        "glam::I64Vec2::distance_squared",
        "glam::I64Vec2::div",
        "glam::I64Vec2::div-1",
        "glam::I64Vec2::div-2",
        "glam::I64Vec2::div_euclid",
        "glam::I64Vec2::dot",
        "glam::I64Vec2::dot_into_vec",
        "glam::I64Vec2::element_product",
        "glam::I64Vec2::element_sum",
        "glam::I64Vec2::eq",
        "glam::I64Vec2::extend",
        "glam::I64Vec2::from_array",
        "glam::I64Vec2::is_negative_bitmask",
        "glam::I64Vec2::length_squared",
        "glam::I64Vec2::max",
        "glam::I64Vec2::max_element",
        "glam::I64Vec2::min",
        "glam::I64Vec2::min_element",
        "glam::I64Vec2::mul",
        "glam::I64Vec2::mul-1",
        "glam::I64Vec2::mul-2",
        "glam::I64Vec2::neg",
        "glam::I64Vec2::new",
        "glam::I64Vec2::perp",
        "glam::I64Vec2::perp_dot",
        "glam::I64Vec2::rem",
        "glam::I64Vec2::rem-1",
        "glam::I64Vec2::rem-2",
        "glam::I64Vec2::rem_euclid",
        "glam::I64Vec2::rotate",
        "glam::I64Vec2::saturating_add",
        "glam::I64Vec2::saturating_add_unsigned",
        "glam::I64Vec2::saturating_div",
        "glam::I64Vec2::saturating_mul",
        "glam::I64Vec2::saturating_sub",
        "glam::I64Vec2::saturating_sub_unsigned",
        "glam::I64Vec2::select",
        "glam::I64Vec2::signum",
        "glam::I64Vec2::splat",
        "glam::I64Vec2::sub",
        "glam::I64Vec2::sub-1",
        "glam::I64Vec2::sub-2",
        "glam::I64Vec2::to_array",
        "glam::I64Vec2::with_x",
        "glam::I64Vec2::with_y",
        "glam::I64Vec2::wrapping_add",
        "glam::I64Vec2::wrapping_add_unsigned",
        "glam::I64Vec2::wrapping_div",
        "glam::I64Vec2::wrapping_mul",
        "glam::I64Vec2::wrapping_sub",
        "glam::I64Vec2::wrapping_sub_unsigned"
      ],
      "layout": {
        "kind": "Struct",
        "name": "I64Vec2",
        "fields": [
          {
            "name": "x",
            "type": "i64"
          },
          {
            "name": "y",
            "type": "i64"
          }
        ]
      }
    },
    "glam::I64Vec3": {
      "identifier": "I64Vec3",
      "crate": "glam",
      "path": "glam::I64Vec3",
      "associated_functions": [
        "glam::I64Vec3::abs",
        "glam::I64Vec3::add",
        "glam::I64Vec3::add-1",
        "glam::I64Vec3::add-2",
        "glam::I64Vec3::as_dvec3",
        "glam::I64Vec3::as_ivec3",
        "glam::I64Vec3::as_u64vec3",
        "glam::I64Vec3::as_uvec3",
        "glam::I64Vec3::as_vec3",
        "glam::I64Vec3::as_vec3a",
        "glam::I64Vec3::assert_receiver_is_total_eq",
        "glam::I64Vec3::clamp",
        "glam::I64Vec3::clone",
        "glam::I64Vec3::cmpeq",
        "glam::I64Vec3::cmpge",
        "glam::I64Vec3::cmpgt",
        "glam::I64Vec3::cmple",
        "glam::I64Vec3::cmplt",
        "glam::I64Vec3::cmpne",
        "glam::I64Vec3::cross",
        "glam::I64Vec3::distance_squared",
        "glam::I64Vec3::div",
        "glam::I64Vec3::div-1",
        "glam::I64Vec3::div-2",
        "glam::I64Vec3::div_euclid",
        "glam::I64Vec3::dot",
        "glam::I64Vec3::dot_into_vec",
        "glam::I64Vec3::element_product",
        "glam::I64Vec3::element_sum",
        "glam::I64Vec3::eq",
        "glam::I64Vec3::extend",
        "glam::I64Vec3::from_array",
        "glam::I64Vec3::is_negative_bitmask",
        "glam::I64Vec3::length_squared",
        "glam::I64Vec3::max",
        "glam::I64Vec3::max_element",
        "glam::I64Vec3::min",
        "glam::I64Vec3::min_element",
        "glam::I64Vec3::mul",
        "glam::I64Vec3::mul-1",
        "glam::I64Vec3::mul-2",
        "glam::I64Vec3::neg",
        "glam::I64Vec3::new",
        "glam::I64Vec3::rem",
        "glam::I64Vec3::rem-1",
        "glam::I64Vec3::rem-2",
        "glam::I64Vec3::rem_euclid",
        "glam::I64Vec3::saturating_add",
        "glam::I64Vec3::saturating_add_unsigned",
        "glam::I64Vec3::saturating_div",
        "glam::I64Vec3::saturating_mul",
        "glam::I64Vec3::saturating_sub",
        "glam::I64Vec3::saturating_sub_unsigned",
        "glam::I64Vec3::select",
        "glam::I64Vec3::signum",
        "glam::I64Vec3::splat",
        "glam::I64Vec3::sub",
        "glam::I64Vec3::sub-1",
        "glam::I64Vec3::sub-2",
        "glam::I64Vec3::to_array",
        "glam::I64Vec3::truncate",
        "glam::I64Vec3::with_x",
        "glam::I64Vec3::with_y",
        "glam::I64Vec3::with_z",
        "glam::I64Vec3::wrapping_add",
        "glam::I64Vec3::wrapping_add_unsigned",
        "glam::I64Vec3::wrapping_div",
        "glam::I64Vec3::wrapping_mul",
        "glam::I64Vec3::wrapping_sub",
        "glam::I64Vec3::wrapping_sub_unsigned"
      ],
      "layout": {
        "kind": "Struct",
        "name": "I64Vec3",
        "fields": [
          {
            "name": "x",
            "type": "i64"
          },
          {
            "name": "y",
            "type": "i64"
          },
          {
            "name": "z",
            "type": "i64"
          }
        ]
      }
    },
    "glam::I64Vec4": {
      "identifier": "I64Vec4",
      "crate": "glam",
      "path": "glam::I64Vec4",
      "associated_functions": [
        "glam::I64Vec4::abs",
        "glam::I64Vec4::add",
        "glam::I64Vec4::add-1",
        "glam::I64Vec4::add-2",
        "glam::I64Vec4::as_dvec4",
        "glam::I64Vec4::as_ivec4",
        "glam::I64Vec4::as_u64vec4",
        "glam::I64Vec4::as_uvec4",
        "glam::I64Vec4::as_vec4",
        "glam::I64Vec4::assert_receiver_is_total_eq",
        "glam::I64Vec4::clamp",
        "glam::I64Vec4::clone",
        "glam::I64Vec4::cmpeq",
        "glam::I64Vec4::cmpge",
        "glam::I64Vec4::cmpgt",
        "glam::I64Vec4::cmple",
        "glam::I64Vec4::cmplt",
        "glam::I64Vec4::cmpne",
        "glam::I64Vec4::distance_squared",
        "glam::I64Vec4::div",
        "glam::I64Vec4::div-1",
        "glam::I64Vec4::div-2",
        "glam::I64Vec4::div_euclid",
        "glam::I64Vec4::dot",
        "glam::I64Vec4::dot_into_vec",
        "glam::I64Vec4::element_product",
        "glam::I64Vec4::element_sum",
        "glam::I64Vec4::eq",
        "glam::I64Vec4::from_array",
        "glam::I64Vec4::is_negative_bitmask",
        "glam::I64Vec4::length_squared",
        "glam::I64Vec4::max",
        "glam::I64Vec4::max_element",
        "glam::I64Vec4::min",
        "glam::I64Vec4::min_element",
        "glam::I64Vec4::mul",
        "glam::I64Vec4::mul-1",
        "glam::I64Vec4::mul-2",
        "glam::I64Vec4::neg",
        "glam::I64Vec4::new",
        "glam::I64Vec4::rem",
        "glam::I64Vec4::rem-1",
        "glam::I64Vec4::rem-2",
        "glam::I64Vec4::rem_euclid",
        "glam::I64Vec4::saturating_add",
        "glam::I64Vec4::saturating_add_unsigned",
        "glam::I64Vec4::saturating_div",
        "glam::I64Vec4::saturating_mul",
        "glam::I64Vec4::saturating_sub",
        "glam::I64Vec4::saturating_sub_unsigned",
        "glam::I64Vec4::select",
        "glam::I64Vec4::signum",
        "glam::I64Vec4::splat",
        "glam::I64Vec4::sub",
        "glam::I64Vec4::sub-1",
        "glam::I64Vec4::sub-2",
        "glam::I64Vec4::to_array",
        "glam::I64Vec4::truncate",
        "glam::I64Vec4::with_w",
        "glam::I64Vec4::with_x",
        "glam::I64Vec4::with_y",
        "glam::I64Vec4::with_z",
        "glam::I64Vec4::wrapping_add",
        "glam::I64Vec4::wrapping_add_unsigned",
        "glam::I64Vec4::wrapping_div",
        "glam::I64Vec4::wrapping_mul",
        "glam::I64Vec4::wrapping_sub",
        "glam::I64Vec4::wrapping_sub_unsigned"
      ],
      "layout": {
        "kind": "Struct",
        "name": "I64Vec4",
        "fields": [
          {
            "name": "x",
            "type": "i64"
          },
          {
            "name": "y",
            "type": "i64"
          },
          {
            "name": "z",
            "type": "i64"
          },
          {
            "name": "w",
            "type": "i64"
          }
        ]
      }
    },
    "glam::IVec2": {
      "identifier": "IVec2",
      "crate": "glam",
      "path": "glam::IVec2",
      "associated_functions": [
        "glam::IVec2::abs",
        "glam::IVec2::add",
        "glam::IVec2::add-1",
        "glam::IVec2::add-2",
        "glam::IVec2::as_dvec2",
        "glam::IVec2::as_i64vec2",
        "glam::IVec2::as_u64vec2",
        "glam::IVec2::as_uvec2",
        "glam::IVec2::as_vec2",
        "glam::IVec2::assert_receiver_is_total_eq",
        "glam::IVec2::clamp",
        "glam::IVec2::clone",
        "glam::IVec2::cmpeq",
        "glam::IVec2::cmpge",
        "glam::IVec2::cmpgt",
        "glam::IVec2::cmple",
        "glam::IVec2::cmplt",
        "glam::IVec2::cmpne",
        "glam::IVec2::distance_squared",
        "glam::IVec2::div",
        "glam::IVec2::div-1",
        "glam::IVec2::div-2",
        "glam::IVec2::div_euclid",
        "glam::IVec2::dot",
        "glam::IVec2::dot_into_vec",
        "glam::IVec2::element_product",
        "glam::IVec2::element_sum",
        "glam::IVec2::eq",
        "glam::IVec2::extend",
        "glam::IVec2::from_array",
        "glam::IVec2::is_negative_bitmask",
        "glam::IVec2::length_squared",
        "glam::IVec2::max",
        "glam::IVec2::max_element",
        "glam::IVec2::min",
        "glam::IVec2::min_element",
        "glam::IVec2::mul",
        "glam::IVec2::mul-1",
        "glam::IVec2::mul-2",
        "glam::IVec2::neg",
        "glam::IVec2::new",
        "glam::IVec2::perp",
        "glam::IVec2::perp_dot",
        "glam::IVec2::rem",
        "glam::IVec2::rem-1",
        "glam::IVec2::rem-2",
        "glam::IVec2::rem_euclid",
        "glam::IVec2::rotate",
        "glam::IVec2::saturating_add",
        "glam::IVec2::saturating_add_unsigned",
        "glam::IVec2::saturating_div",
        "glam::IVec2::saturating_mul",
        "glam::IVec2::saturating_sub",
        "glam::IVec2::saturating_sub_unsigned",
        "glam::IVec2::select",
        "glam::IVec2::signum",
        "glam::IVec2::splat",
        "glam::IVec2::sub",
        "glam::IVec2::sub-1",
        "glam::IVec2::sub-2",
        "glam::IVec2::to_array",
        "glam::IVec2::with_x",
        "glam::IVec2::with_y",
        "glam::IVec2::wrapping_add",
        "glam::IVec2::wrapping_add_unsigned",
        "glam::IVec2::wrapping_div",
        "glam::IVec2::wrapping_mul",
        "glam::IVec2::wrapping_sub",
        "glam::IVec2::wrapping_sub_unsigned"
      ],
      "layout": {
        "kind": "Struct",
        "name": "IVec2",
        "fields": [
          {
            "name": "x",
            "type": "i32"
          },
          {
            "name": "y",
            "type": "i32"
          }
        ]
      }
    },
    "glam::IVec3": {
      "identifier": "IVec3",
      "crate": "glam",
      "path": "glam::IVec3",
      "associated_functions": [
        "glam::IVec3::abs",
        "glam::IVec3::add",
        "glam::IVec3::add-1",
        "glam::IVec3::add-2",
        "glam::IVec3::as_dvec3",
        "glam::IVec3::as_i64vec3",
        "glam::IVec3::as_u64vec3",
        "glam::IVec3::as_uvec3",
        "glam::IVec3::as_vec3",
        "glam::IVec3::as_vec3a",
        "glam::IVec3::assert_receiver_is_total_eq",
        "glam::IVec3::clamp",
        "glam::IVec3::clone",
        "glam::IVec3::cmpeq",
        "glam::IVec3::cmpge",
        "glam::IVec3::cmpgt",
        "glam::IVec3::cmple",
        "glam::IVec3::cmplt",
        "glam::IVec3::cmpne",
        "glam::IVec3::cross",
        "glam::IVec3::distance_squared",
        "glam::IVec3::div",
        "glam::IVec3::div-1",
        "glam::IVec3::div-2",
        "glam::IVec3::div_euclid",
        "glam::IVec3::dot",
        "glam::IVec3::dot_into_vec",
        "glam::IVec3::element_product",
        "glam::IVec3::element_sum",
        "glam::IVec3::eq",
        "glam::IVec3::extend",
        "glam::IVec3::from_array",
        "glam::IVec3::is_negative_bitmask",
        "glam::IVec3::length_squared",
        "glam::IVec3::max",
        "glam::IVec3::max_element",
        "glam::IVec3::min",
        "glam::IVec3::min_element",
        "glam::IVec3::mul",
        "glam::IVec3::mul-1",
        "glam::IVec3::mul-2",
        "glam::IVec3::neg",
        "glam::IVec3::new",
        "glam::IVec3::rem",
        "glam::IVec3::rem-1",
        "glam::IVec3::rem-2",
        "glam::IVec3::rem_euclid",
        "glam::IVec3::saturating_add",
        "glam::IVec3::saturating_add_unsigned",
        "glam::IVec3::saturating_div",
        "glam::IVec3::saturating_mul",
        "glam::IVec3::saturating_sub",
        "glam::IVec3::saturating_sub_unsigned",
        "glam::IVec3::select",
        "glam::IVec3::signum",
        "glam::IVec3::splat",
        "glam::IVec3::sub",
        "glam::IVec3::sub-1",
        "glam::IVec3::sub-2",
        "glam::IVec3::to_array",
        "glam::IVec3::truncate",
        "glam::IVec3::with_x",
        "glam::IVec3::with_y",
        "glam::IVec3::with_z",
        "glam::IVec3::wrapping_add",
        "glam::IVec3::wrapping_add_unsigned",
        "glam::IVec3::wrapping_div",
        "glam::IVec3::wrapping_mul",
        "glam::IVec3::wrapping_sub",
        "glam::IVec3::wrapping_sub_unsigned"
      ],
      "layout": {
        "kind": "Struct",
        "name": "IVec3",
        "fields": [
          {
            "name": "x",
            "type": "i32"
          },
          {
            "name": "y",
            "type": "i32"
          },
          {
            "name": "z",
            "type": "i32"
          }
        ]
      }
    },
    "glam::IVec4": {
      "identifier": "IVec4",
      "crate": "glam",
      "path": "glam::IVec4",
      "associated_functions": [
        "glam::IVec4::abs",
        "glam::IVec4::add",
        "glam::IVec4::add-1",
        "glam::IVec4::add-2",
        "glam::IVec4::as_dvec4",
        "glam::IVec4::as_i64vec4",
        "glam::IVec4::as_u64vec4",
        "glam::IVec4::as_uvec4",
        "glam::IVec4::as_vec4",
        "glam::IVec4::assert_receiver_is_total_eq",
        "glam::IVec4::clamp",
        "glam::IVec4::clone",
        "glam::IVec4::cmpeq",
        "glam::IVec4::cmpge",
        "glam::IVec4::cmpgt",
        "glam::IVec4::cmple",
        "glam::IVec4::cmplt",
        "glam::IVec4::cmpne",
        "glam::IVec4::distance_squared",
        "glam::IVec4::div",
        "glam::IVec4::div-1",
        "glam::IVec4::div-2",
        "glam::IVec4::div_euclid",
        "glam::IVec4::dot",
        "glam::IVec4::dot_into_vec",
        "glam::IVec4::element_product",
        "glam::IVec4::element_sum",
        "glam::IVec4::eq",
        "glam::IVec4::from_array",
        "glam::IVec4::is_negative_bitmask",
        "glam::IVec4::length_squared",
        "glam::IVec4::max",
        "glam::IVec4::max_element",
        "glam::IVec4::min",
        "glam::IVec4::min_element",
        "glam::IVec4::mul",
        "glam::IVec4::mul-1",
        "glam::IVec4::mul-2",
        "glam::IVec4::neg",
        "glam::IVec4::new",
        "glam::IVec4::rem",
        "glam::IVec4::rem-1",
        "glam::IVec4::rem-2",
        "glam::IVec4::rem_euclid",
        "glam::IVec4::saturating_add",
        "glam::IVec4::saturating_add_unsigned",
        "glam::IVec4::saturating_div",
        "glam::IVec4::saturating_mul",
        "glam::IVec4::saturating_sub",
        "glam::IVec4::saturating_sub_unsigned",
        "glam::IVec4::select",
        "glam::IVec4::signum",
        "glam::IVec4::splat",
        "glam::IVec4::sub",
        "glam::IVec4::sub-1",
        "glam::IVec4::sub-2",
        "glam::IVec4::to_array",
        "glam::IVec4::truncate",
        "glam::IVec4::with_w",
        "glam::IVec4::with_x",
        "glam::IVec4::with_y",
        "glam::IVec4::with_z",
        "glam::IVec4::wrapping_add",
        "glam::IVec4::wrapping_add_unsigned",
        "glam::IVec4::wrapping_div",
        "glam::IVec4::wrapping_mul",
        "glam::IVec4::wrapping_sub",
        "glam::IVec4::wrapping_sub_unsigned"
      ],
      "layout": {
        "kind": "Struct",
        "name": "IVec4",
        "fields": [
          {
            "name": "x",
            "type": "i32"
          },
          {
            "name": "y",
            "type": "i32"
          },
          {
            "name": "z",
            "type": "i32"
          },
          {
            "name": "w",
            "type": "i32"
          }
        ]
      }
    },
    "glam::Mat2": {
      "identifier": "Mat2",
      "crate": "glam",
      "path": "glam::Mat2",
      "associated_functions": [
        "glam::Mat2::abs",
        "glam::Mat2::abs_diff_eq",
        "glam::Mat2::add",
        "glam::Mat2::add_mat2",
        "glam::Mat2::as_dmat2",
        "glam::Mat2::clone",
        "glam::Mat2::col",
        "glam::Mat2::determinant",
        "glam::Mat2::div",
        "glam::Mat2::div_scalar",
        "glam::Mat2::eq",
        "glam::Mat2::from_angle",
        "glam::Mat2::from_cols",
        "glam::Mat2::from_diagonal",
        "glam::Mat2::from_mat3",
        "glam::Mat2::from_mat3_minor",
        "glam::Mat2::from_mat3a",
        "glam::Mat2::from_mat3a_minor",
        "glam::Mat2::from_scale_angle",
        "glam::Mat2::inverse",
        "glam::Mat2::is_finite",
        "glam::Mat2::is_nan",
        "glam::Mat2::mul",
        "glam::Mat2::mul-1",
        "glam::Mat2::mul-2",
        "glam::Mat2::mul_mat2",
        "glam::Mat2::mul_scalar",
        "glam::Mat2::mul_vec2",
        "glam::Mat2::neg",
        "glam::Mat2::row",
        "glam::Mat2::sub",
        "glam::Mat2::sub_mat2",
        "glam::Mat2::to_cols_array",
        "glam::Mat2::to_cols_array_2d",
        "glam::Mat2::transpose"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Mat2",
        "fields": [
          {
            "name": "x_axis",
            "type": "glam::Vec2"
          },
          {
            "name": "y_axis",
            "type": "glam::Vec2"
          }
        ]
      }
    },
    "glam::Mat3": {
      "identifier": "Mat3",
      "crate": "glam",
      "path": "glam::Mat3",
      "associated_functions": [
        "glam::Mat3::abs",
        "glam::Mat3::abs_diff_eq",
        "glam::Mat3::add",
        "glam::Mat3::add_mat3",
        "glam::Mat3::as_dmat3",
        "glam::Mat3::clone",
        "glam::Mat3::col",
        "glam::Mat3::determinant",
        "glam::Mat3::div",
        "glam::Mat3::div_scalar",
        "glam::Mat3::eq",
        "glam::Mat3::from_angle",
        "glam::Mat3::from_axis_angle",
        "glam::Mat3::from_cols",
        "glam::Mat3::from_diagonal",
        "glam::Mat3::from_euler",
        "glam::Mat3::from_mat2",
        "glam::Mat3::from_mat4",
        "glam::Mat3::from_mat4_minor",
        "glam::Mat3::from_quat",
        "glam::Mat3::from_rotation_x",
        "glam::Mat3::from_rotation_y",
        "glam::Mat3::from_rotation_z",
        "glam::Mat3::from_scale",
        "glam::Mat3::from_scale_angle_translation",
        "glam::Mat3::from_translation",
        "glam::Mat3::inverse",
        "glam::Mat3::is_finite",
        "glam::Mat3::is_nan",
        "glam::Mat3::mul",
        "glam::Mat3::mul-1",
        "glam::Mat3::mul-2",
        "glam::Mat3::mul-3",
        "glam::Mat3::mul-4",
        "glam::Mat3::mul_mat3",
        "glam::Mat3::mul_scalar",
        "glam::Mat3::mul_vec3",
        "glam::Mat3::mul_vec3a",
        "glam::Mat3::neg",
        "glam::Mat3::row",
        "glam::Mat3::sub",
        "glam::Mat3::sub_mat3",
        "glam::Mat3::to_cols_array",
        "glam::Mat3::to_cols_array_2d",
        "glam::Mat3::to_euler",
        "glam::Mat3::transform_point2",
        "glam::Mat3::transform_vector2",
        "glam::Mat3::transpose"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Mat3",
        "fields": [
          {
            "name": "x_axis",
            "type": "glam::Vec3"
          },
          {
            "name": "y_axis",
            "type": "glam::Vec3"
          },
          {
            "name": "z_axis",
            "type": "glam::Vec3"
          }
        ]
      }
    },
    "glam::Mat3A": {
      "identifier": "Mat3A",
      "crate": "glam",
      "path": "glam::Mat3A",
      "associated_functions": [
        "glam::Mat3A::abs",
        "glam::Mat3A::abs_diff_eq",
        "glam::Mat3A::add",
        "glam::Mat3A::add_mat3",
        "glam::Mat3A::as_dmat3",
        "glam::Mat3A::clone",
        "glam::Mat3A::col",
        "glam::Mat3A::determinant",
        "glam::Mat3A::div",
        "glam::Mat3A::div_scalar",
        "glam::Mat3A::eq",
        "glam::Mat3A::from_angle",
        "glam::Mat3A::from_axis_angle",
        "glam::Mat3A::from_cols",
        "glam::Mat3A::from_diagonal",
        "glam::Mat3A::from_euler",
        "glam::Mat3A::from_mat2",
        "glam::Mat3A::from_mat4",
        "glam::Mat3A::from_mat4_minor",
        "glam::Mat3A::from_quat",
        "glam::Mat3A::from_rotation_x",
        "glam::Mat3A::from_rotation_y",
        "glam::Mat3A::from_rotation_z",
        "glam::Mat3A::from_scale",
        "glam::Mat3A::from_scale_angle_translation",
        "glam::Mat3A::from_translation",
        "glam::Mat3A::inverse",
        "glam::Mat3A::is_finite",
        "glam::Mat3A::is_nan",
        "glam::Mat3A::mul",
        "glam::Mat3A::mul-1",
        "glam::Mat3A::mul-2",
        "glam::Mat3A::mul-3",
        "glam::Mat3A::mul-4",
        "glam::Mat3A::mul_mat3",
        "glam::Mat3A::mul_scalar",
        "glam::Mat3A::mul_vec3",
        "glam::Mat3A::mul_vec3a",
        "glam::Mat3A::neg",
        "glam::Mat3A::row",
        "glam::Mat3A::sub",
        "glam::Mat3A::sub_mat3",
        "glam::Mat3A::to_cols_array",
        "glam::Mat3A::to_cols_array_2d",
        "glam::Mat3A::to_euler",
        "glam::Mat3A::transform_point2",
        "glam::Mat3A::transform_vector2",
        "glam::Mat3A::transpose"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Mat3A",
        "fields": [
          {
            "name": "x_axis",
            "type": "glam::Vec3A"
          },
          {
            "name": "y_axis",
            "type": "glam::Vec3A"
          },
          {
            "name": "z_axis",
            "type": "glam::Vec3A"
          }
        ]
      }
    },
    "glam::Mat4": {
      "identifier": "Mat4",
      "crate": "glam",
      "path": "glam::Mat4",
      "associated_functions": [
        "glam::Mat4::abs",
        "glam::Mat4::abs_diff_eq",
        "glam::Mat4::add",
        "glam::Mat4::add_mat4",
        "glam::Mat4::as_dmat4",
        "glam::Mat4::clone",
        "glam::Mat4::col",
        "glam::Mat4::determinant",
        "glam::Mat4::div",
        "glam::Mat4::div_scalar",
        "glam::Mat4::eq",
        "glam::Mat4::from_axis_angle",
        "glam::Mat4::from_cols",
        "glam::Mat4::from_diagonal",
        "glam::Mat4::from_euler",
        "glam::Mat4::from_mat3",
        "glam::Mat4::from_mat3a",
        "glam::Mat4::from_quat",
        "glam::Mat4::from_rotation_translation",
        "glam::Mat4::from_rotation_x",
        "glam::Mat4::from_rotation_y",
        "glam::Mat4::from_rotation_z",
        "glam::Mat4::from_scale",
        "glam::Mat4::from_scale_rotation_translation",
        "glam::Mat4::from_translation",
        "glam::Mat4::inverse",
        "glam::Mat4::is_finite",
        "glam::Mat4::is_nan",
        "glam::Mat4::look_at_lh",
        "glam::Mat4::look_at_rh",
        "glam::Mat4::look_to_lh",
        "glam::Mat4::look_to_rh",
        "glam::Mat4::mul",
        "glam::Mat4::mul-1",
        "glam::Mat4::mul-2",
        "glam::Mat4::mul-3",
        "glam::Mat4::mul_mat4",
        "glam::Mat4::mul_scalar",
        "glam::Mat4::mul_vec4",
        "glam::Mat4::neg",
        "glam::Mat4::orthographic_lh",
        "glam::Mat4::orthographic_rh",
        "glam::Mat4::orthographic_rh_gl",
        "glam::Mat4::perspective_infinite_lh",
        "glam::Mat4::perspective_infinite_reverse_lh",
        "glam::Mat4::perspective_infinite_reverse_rh",
        "glam::Mat4::perspective_infinite_rh",
        "glam::Mat4::perspective_lh",
        "glam::Mat4::perspective_rh",
        "glam::Mat4::perspective_rh_gl",
        "glam::Mat4::project_point3",
        "glam::Mat4::project_point3a",
        "glam::Mat4::row",
        "glam::Mat4::sub",
        "glam::Mat4::sub_mat4",
        "glam::Mat4::to_cols_array",
        "glam::Mat4::to_cols_array_2d",
        "glam::Mat4::to_euler",
        "glam::Mat4::transform_point3",
        "glam::Mat4::transform_point3a",
        "glam::Mat4::transform_vector3",
        "glam::Mat4::transform_vector3a",
        "glam::Mat4::transpose"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Mat4",
        "fields": [
          {
            "name": "x_axis",
            "type": "glam::Vec4"
          },
          {
            "name": "y_axis",
            "type": "glam::Vec4"
          },
          {
            "name": "z_axis",
            "type": "glam::Vec4"
          },
          {
            "name": "w_axis",
            "type": "glam::Vec4"
          }
        ]
      }
    },
    "glam::Quat": {
      "identifier": "Quat",
      "crate": "glam",
      "path": "glam::Quat",
      "associated_functions": [
        "glam::Quat::abs_diff_eq",
        "glam::Quat::add",
        "glam::Quat::angle_between",
        "glam::Quat::as_dquat",
        "glam::Quat::clone",
        "glam::Quat::conjugate",
        "glam::Quat::div",
        "glam::Quat::dot",
        "glam::Quat::eq",
        "glam::Quat::from_affine3",
        "glam::Quat::from_array",
        "glam::Quat::from_axis_angle",
        "glam::Quat::from_euler",
        "glam::Quat::from_mat3",
        "glam::Quat::from_mat3a",
        "glam::Quat::from_mat4",
        "glam::Quat::from_rotation_arc",
        "glam::Quat::from_rotation_arc_2d",
        "glam::Quat::from_rotation_arc_colinear",
        "glam::Quat::from_rotation_x",
        "glam::Quat::from_rotation_y",
        "glam::Quat::from_rotation_z",
        "glam::Quat::from_scaled_axis",
        "glam::Quat::from_vec4",
        "glam::Quat::from_xyzw",
        "glam::Quat::inverse",
        "glam::Quat::is_finite",
        "glam::Quat::is_nan",
        "glam::Quat::is_near_identity",
        "glam::Quat::is_normalized",
        "glam::Quat::length",
        "glam::Quat::length_recip",
        "glam::Quat::length_squared",
        "glam::Quat::lerp",
        "glam::Quat::mul",
        "glam::Quat::mul-1",
        "glam::Quat::mul-2",
        "glam::Quat::mul-3",
        "glam::Quat::mul_quat",
        "glam::Quat::mul_vec3",
        "glam::Quat::mul_vec3a",
        "glam::Quat::neg",
        "glam::Quat::normalize",
        "glam::Quat::rotate_towards",
        "glam::Quat::slerp",
        "glam::Quat::sub",
        "glam::Quat::to_array",
        "glam::Quat::to_euler",
        "glam::Quat::to_scaled_axis",
        "glam::Quat::xyz"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Quat",
        "fields": [
          {
            "name": "x",
            "type": "f32"
          },
          {
            "name": "y",
            "type": "f32"
          },
          {
            "name": "z",
            "type": "f32"
          },
          {
            "name": "w",
            "type": "f32"
          }
        ]
      }
    },
    "glam::U64Vec2": {
      "identifier": "U64Vec2",
      "crate": "glam",
      "path": "glam::U64Vec2",
      "associated_functions": [
        "glam::U64Vec2::add",
        "glam::U64Vec2::add-1",
        "glam::U64Vec2::add-2",
        "glam::U64Vec2::as_dvec2",
        "glam::U64Vec2::as_i64vec2",
        "glam::U64Vec2::as_ivec2",
        "glam::U64Vec2::as_uvec2",
        "glam::U64Vec2::as_vec2",
        "glam::U64Vec2::assert_receiver_is_total_eq",
        "glam::U64Vec2::clamp",
        "glam::U64Vec2::clone",
        "glam::U64Vec2::cmpeq",
        "glam::U64Vec2::cmpge",
        "glam::U64Vec2::cmpgt",
        "glam::U64Vec2::cmple",
        "glam::U64Vec2::cmplt",
        "glam::U64Vec2::cmpne",
        "glam::U64Vec2::div",
        "glam::U64Vec2::div-1",
        "glam::U64Vec2::div-2",
        "glam::U64Vec2::dot",
        "glam::U64Vec2::dot_into_vec",
        "glam::U64Vec2::element_product",
        "glam::U64Vec2::element_sum",
        "glam::U64Vec2::eq",
        "glam::U64Vec2::extend",
        "glam::U64Vec2::from_array",
        "glam::U64Vec2::length_squared",
        "glam::U64Vec2::max",
        "glam::U64Vec2::max_element",
        "glam::U64Vec2::min",
        "glam::U64Vec2::min_element",
        "glam::U64Vec2::mul",
        "glam::U64Vec2::mul-1",
        "glam::U64Vec2::mul-2",
        "glam::U64Vec2::new",
        "glam::U64Vec2::rem",
        "glam::U64Vec2::rem-1",
        "glam::U64Vec2::rem-2",
        "glam::U64Vec2::saturating_add",
        "glam::U64Vec2::saturating_add_signed",
        "glam::U64Vec2::saturating_div",
        "glam::U64Vec2::saturating_mul",
        "glam::U64Vec2::saturating_sub",
        "glam::U64Vec2::select",
        "glam::U64Vec2::splat",
        "glam::U64Vec2::sub",
        "glam::U64Vec2::sub-1",
        "glam::U64Vec2::sub-2",
        "glam::U64Vec2::to_array",
        "glam::U64Vec2::with_x",
        "glam::U64Vec2::with_y",
        "glam::U64Vec2::wrapping_add",
        "glam::U64Vec2::wrapping_add_signed",
        "glam::U64Vec2::wrapping_div",
        "glam::U64Vec2::wrapping_mul",
        "glam::U64Vec2::wrapping_sub"
      ],
      "layout": {
        "kind": "Struct",
        "name": "U64Vec2",
        "fields": [
          {
            "name": "x",
            "type": "u64"
          },
          {
            "name": "y",
            "type": "u64"
          }
        ]
      }
    },
    "glam::U64Vec3": {
      "identifier": "U64Vec3",
      "crate": "glam",
      "path": "glam::U64Vec3",
      "associated_functions": [
        "glam::U64Vec3::add",
        "glam::U64Vec3::add-1",
        "glam::U64Vec3::add-2",
        "glam::U64Vec3::as_dvec3",
        "glam::U64Vec3::as_i64vec3",
        "glam::U64Vec3::as_ivec3",
        "glam::U64Vec3::as_uvec3",
        "glam::U64Vec3::as_vec3",
        "glam::U64Vec3::as_vec3a",
        "glam::U64Vec3::assert_receiver_is_total_eq",
        "glam::U64Vec3::clamp",
        "glam::U64Vec3::clone",
        "glam::U64Vec3::cmpeq",
        "glam::U64Vec3::cmpge",
        "glam::U64Vec3::cmpgt",
        "glam::U64Vec3::cmple",
        "glam::U64Vec3::cmplt",
        "glam::U64Vec3::cmpne",
        "glam::U64Vec3::cross",
        "glam::U64Vec3::div",
        "glam::U64Vec3::div-1",
        "glam::U64Vec3::div-2",
        "glam::U64Vec3::dot",
        "glam::U64Vec3::dot_into_vec",
        "glam::U64Vec3::element_product",
        "glam::U64Vec3::element_sum",
        "glam::U64Vec3::eq",
        "glam::U64Vec3::extend",
        "glam::U64Vec3::from_array",
        "glam::U64Vec3::length_squared",
        "glam::U64Vec3::max",
        "glam::U64Vec3::max_element",
        "glam::U64Vec3::min",
        "glam::U64Vec3::min_element",
        "glam::U64Vec3::mul",
        "glam::U64Vec3::mul-1",
        "glam::U64Vec3::mul-2",
        "glam::U64Vec3::new",
        "glam::U64Vec3::rem",
        "glam::U64Vec3::rem-1",
        "glam::U64Vec3::rem-2",
        "glam::U64Vec3::saturating_add",
        "glam::U64Vec3::saturating_add_signed",
        "glam::U64Vec3::saturating_div",
        "glam::U64Vec3::saturating_mul",
        "glam::U64Vec3::saturating_sub",
        "glam::U64Vec3::select",
        "glam::U64Vec3::splat",
        "glam::U64Vec3::sub",
        "glam::U64Vec3::sub-1",
        "glam::U64Vec3::sub-2",
        "glam::U64Vec3::to_array",
        "glam::U64Vec3::truncate",
        "glam::U64Vec3::with_x",
        "glam::U64Vec3::with_y",
        "glam::U64Vec3::with_z",
        "glam::U64Vec3::wrapping_add",
        "glam::U64Vec3::wrapping_add_signed",
        "glam::U64Vec3::wrapping_div",
        "glam::U64Vec3::wrapping_mul",
        "glam::U64Vec3::wrapping_sub"
      ],
      "layout": {
        "kind": "Struct",
        "name": "U64Vec3",
        "fields": [
          {
            "name": "x",
            "type": "u64"
          },
          {
            "name": "y",
            "type": "u64"
          },
          {
            "name": "z",
            "type": "u64"
          }
        ]
      }
    },
    "glam::U64Vec4": {
      "identifier": "U64Vec4",
      "crate": "glam",
      "path": "glam::U64Vec4",
      "associated_functions": [
        "glam::U64Vec4::add",
        "glam::U64Vec4::add-1",
        "glam::U64Vec4::add-2",
        "glam::U64Vec4::as_dvec4",
        "glam::U64Vec4::as_i64vec4",
        "glam::U64Vec4::as_ivec4",
        "glam::U64Vec4::as_uvec4",
        "glam::U64Vec4::as_vec4",
        "glam::U64Vec4::assert_receiver_is_total_eq",
        "glam::U64Vec4::clamp",
        "glam::U64Vec4::clone",
        "glam::U64Vec4::cmpeq",
        "glam::U64Vec4::cmpge",
        "glam::U64Vec4::cmpgt",
        "glam::U64Vec4::cmple",
        "glam::U64Vec4::cmplt",
        "glam::U64Vec4::cmpne",
        "glam::U64Vec4::div",
        "glam::U64Vec4::div-1",
        "glam::U64Vec4::div-2",
        "glam::U64Vec4::dot",
        "glam::U64Vec4::dot_into_vec",
        "glam::U64Vec4::element_product",
        "glam::U64Vec4::element_sum",
        "glam::U64Vec4::eq",
        "glam::U64Vec4::from_array",
        "glam::U64Vec4::length_squared",
        "glam::U64Vec4::max",
        "glam::U64Vec4::max_element",
        "glam::U64Vec4::min",
        "glam::U64Vec4::min_element",
        "glam::U64Vec4::mul",
        "glam::U64Vec4::mul-1",
        "glam::U64Vec4::mul-2",
        "glam::U64Vec4::new",
        "glam::U64Vec4::rem",
        "glam::U64Vec4::rem-1",
        "glam::U64Vec4::rem-2",
        "glam::U64Vec4::saturating_add",
        "glam::U64Vec4::saturating_add_signed",
        "glam::U64Vec4::saturating_div",
        "glam::U64Vec4::saturating_mul",
        "glam::U64Vec4::saturating_sub",
        "glam::U64Vec4::select",
        "glam::U64Vec4::splat",
        "glam::U64Vec4::sub",
        "glam::U64Vec4::sub-1",
        "glam::U64Vec4::sub-2",
        "glam::U64Vec4::to_array",
        "glam::U64Vec4::truncate",
        "glam::U64Vec4::with_w",
        "glam::U64Vec4::with_x",
        "glam::U64Vec4::with_y",
        "glam::U64Vec4::with_z",
        "glam::U64Vec4::wrapping_add",
        "glam::U64Vec4::wrapping_add_signed",
        "glam::U64Vec4::wrapping_div",
        "glam::U64Vec4::wrapping_mul",
        "glam::U64Vec4::wrapping_sub"
      ],
      "layout": {
        "kind": "Struct",
        "name": "U64Vec4",
        "fields": [
          {
            "name": "x",
            "type": "u64"
          },
          {
            "name": "y",
            "type": "u64"
          },
          {
            "name": "z",
            "type": "u64"
          },
          {
            "name": "w",
            "type": "u64"
          }
        ]
      }
    },
    "glam::UVec2": {
      "identifier": "UVec2",
      "crate": "glam",
      "path": "glam::UVec2",
      "associated_functions": [
        "glam::UVec2::add",
        "glam::UVec2::add-1",
        "glam::UVec2::add-2",
        "glam::UVec2::as_dvec2",
        "glam::UVec2::as_i64vec2",
        "glam::UVec2::as_ivec2",
        "glam::UVec2::as_u64vec2",
        "glam::UVec2::as_vec2",
        "glam::UVec2::assert_receiver_is_total_eq",
        "glam::UVec2::clamp",
        "glam::UVec2::clone",
        "glam::UVec2::cmpeq",
        "glam::UVec2::cmpge",
        "glam::UVec2::cmpgt",
        "glam::UVec2::cmple",
        "glam::UVec2::cmplt",
        "glam::UVec2::cmpne",
        "glam::UVec2::div",
        "glam::UVec2::div-1",
        "glam::UVec2::div-2",
        "glam::UVec2::dot",
        "glam::UVec2::dot_into_vec",
        "glam::UVec2::element_product",
        "glam::UVec2::element_sum",
        "glam::UVec2::eq",
        "glam::UVec2::extend",
        "glam::UVec2::from_array",
        "glam::UVec2::length_squared",
        "glam::UVec2::max",
        "glam::UVec2::max_element",
        "glam::UVec2::min",
        "glam::UVec2::min_element",
        "glam::UVec2::mul",
        "glam::UVec2::mul-1",
        "glam::UVec2::mul-2",
        "glam::UVec2::new",
        "glam::UVec2::rem",
        "glam::UVec2::rem-1",
        "glam::UVec2::rem-2",
        "glam::UVec2::saturating_add",
        "glam::UVec2::saturating_add_signed",
        "glam::UVec2::saturating_div",
        "glam::UVec2::saturating_mul",
        "glam::UVec2::saturating_sub",
        "glam::UVec2::select",
        "glam::UVec2::splat",
        "glam::UVec2::sub",
        "glam::UVec2::sub-1",
        "glam::UVec2::sub-2",
        "glam::UVec2::to_array",
        "glam::UVec2::with_x",
        "glam::UVec2::with_y",
        "glam::UVec2::wrapping_add",
        "glam::UVec2::wrapping_add_signed",
        "glam::UVec2::wrapping_div",
        "glam::UVec2::wrapping_mul",
        "glam::UVec2::wrapping_sub"
      ],
      "layout": {
        "kind": "Struct",
        "name": "UVec2",
        "fields": [
          {
            "name": "x",
            "type": "u32"
          },
          {
            "name": "y",
            "type": "u32"
          }
        ]
      }
    },
    "glam::UVec3": {
      "identifier": "UVec3",
      "crate": "glam",
      "path": "glam::UVec3",
      "associated_functions": [
        "glam::UVec3::add",
        "glam::UVec3::add-1",
        "glam::UVec3::add-2",
        "glam::UVec3::as_dvec3",
        "glam::UVec3::as_i64vec3",
        "glam::UVec3::as_ivec3",
        "glam::UVec3::as_u64vec3",
        "glam::UVec3::as_vec3",
        "glam::UVec3::as_vec3a",
        "glam::UVec3::assert_receiver_is_total_eq",
        "glam::UVec3::clamp",
        "glam::UVec3::clone",
        "glam::UVec3::cmpeq",
        "glam::UVec3::cmpge",
        "glam::UVec3::cmpgt",
        "glam::UVec3::cmple",
        "glam::UVec3::cmplt",
        "glam::UVec3::cmpne",
        "glam::UVec3::cross",
        "glam::UVec3::div",
        "glam::UVec3::div-1",
        "glam::UVec3::div-2",
        "glam::UVec3::dot",
        "glam::UVec3::dot_into_vec",
        "glam::UVec3::element_product",
        "glam::UVec3::element_sum",
        "glam::UVec3::eq",
        "glam::UVec3::extend",
        "glam::UVec3::from_array",
        "glam::UVec3::length_squared",
        "glam::UVec3::max",
        "glam::UVec3::max_element",
        "glam::UVec3::min",
        "glam::UVec3::min_element",
        "glam::UVec3::mul",
        "glam::UVec3::mul-1",
        "glam::UVec3::mul-2",
        "glam::UVec3::new",
        "glam::UVec3::rem",
        "glam::UVec3::rem-1",
        "glam::UVec3::rem-2",
        "glam::UVec3::saturating_add",
        "glam::UVec3::saturating_add_signed",
        "glam::UVec3::saturating_div",
        "glam::UVec3::saturating_mul",
        "glam::UVec3::saturating_sub",
        "glam::UVec3::select",
        "glam::UVec3::splat",
        "glam::UVec3::sub",
        "glam::UVec3::sub-1",
        "glam::UVec3::sub-2",
        "glam::UVec3::to_array",
        "glam::UVec3::truncate",
        "glam::UVec3::with_x",
        "glam::UVec3::with_y",
        "glam::UVec3::with_z",
        "glam::UVec3::wrapping_add",
        "glam::UVec3::wrapping_add_signed",
        "glam::UVec3::wrapping_div",
        "glam::UVec3::wrapping_mul",
        "glam::UVec3::wrapping_sub"
      ],
      "layout": {
        "kind": "Struct",
        "name": "UVec3",
        "fields": [
          {
            "name": "x",
            "type": "u32"
          },
          {
            "name": "y",
            "type": "u32"
          },
          {
            "name": "z",
            "type": "u32"
          }
        ]
      }
    },
    "glam::UVec4": {
      "identifier": "UVec4",
      "crate": "glam",
      "path": "glam::UVec4",
      "associated_functions": [
        "glam::UVec4::add",
        "glam::UVec4::add-1",
        "glam::UVec4::add-2",
        "glam::UVec4::as_dvec4",
        "glam::UVec4::as_i64vec4",
        "glam::UVec4::as_ivec4",
        "glam::UVec4::as_u64vec4",
        "glam::UVec4::as_vec4",
        "glam::UVec4::assert_receiver_is_total_eq",
        "glam::UVec4::clamp",
        "glam::UVec4::clone",
        "glam::UVec4::cmpeq",
        "glam::UVec4::cmpge",
        "glam::UVec4::cmpgt",
        "glam::UVec4::cmple",
        "glam::UVec4::cmplt",
        "glam::UVec4::cmpne",
        "glam::UVec4::div",
        "glam::UVec4::div-1",
        "glam::UVec4::div-2",
        "glam::UVec4::dot",
        "glam::UVec4::dot_into_vec",
        "glam::UVec4::element_product",
        "glam::UVec4::element_sum",
        "glam::UVec4::eq",
        "glam::UVec4::from_array",
        "glam::UVec4::length_squared",
        "glam::UVec4::max",
        "glam::UVec4::max_element",
        "glam::UVec4::min",
        "glam::UVec4::min_element",
        "glam::UVec4::mul",
        "glam::UVec4::mul-1",
        "glam::UVec4::mul-2",
        "glam::UVec4::new",
        "glam::UVec4::rem",
        "glam::UVec4::rem-1",
        "glam::UVec4::rem-2",
        "glam::UVec4::saturating_add",
        "glam::UVec4::saturating_add_signed",
        "glam::UVec4::saturating_div",
        "glam::UVec4::saturating_mul",
        "glam::UVec4::saturating_sub",
        "glam::UVec4::select",
        "glam::UVec4::splat",
        "glam::UVec4::sub",
        "glam::UVec4::sub-1",
        "glam::UVec4::sub-2",
        "glam::UVec4::to_array",
        "glam::UVec4::truncate",
        "glam::UVec4::with_w",
        "glam::UVec4::with_x",
        "glam::UVec4::with_y",
        "glam::UVec4::with_z",
        "glam::UVec4::wrapping_add",
        "glam::UVec4::wrapping_add_signed",
        "glam::UVec4::wrapping_div",
        "glam::UVec4::wrapping_mul",
        "glam::UVec4::wrapping_sub"
      ],
      "layout": {
        "kind": "Struct",
        "name": "UVec4",
        "fields": [
          {
            "name": "x",
            "type": "u32"
          },
          {
            "name": "y",
            "type": "u32"
          },
          {
            "name": "z",
            "type": "u32"
          },
          {
            "name": "w",
            "type": "u32"
          }
        ]
      }
    },
    "glam::Vec2": {
      "identifier": "Vec2",
      "crate": "glam",
      "path": "glam::Vec2",
      "associated_functions": [
        "glam::Vec2::abs",
        "glam::Vec2::abs_diff_eq",
        "glam::Vec2::add",
        "glam::Vec2::add-1",
        "glam::Vec2::add-2",
        "glam::Vec2::angle_between",
        "glam::Vec2::angle_to",
        "glam::Vec2::as_dvec2",
        "glam::Vec2::as_i64vec2",
        "glam::Vec2::as_ivec2",
        "glam::Vec2::as_u64vec2",
        "glam::Vec2::as_uvec2",
        "glam::Vec2::ceil",
        "glam::Vec2::clamp",
        "glam::Vec2::clamp_length",
        "glam::Vec2::clamp_length_max",
        "glam::Vec2::clamp_length_min",
        "glam::Vec2::clone",
        "glam::Vec2::cmpeq",
        "glam::Vec2::cmpge",
        "glam::Vec2::cmpgt",
        "glam::Vec2::cmple",
        "glam::Vec2::cmplt",
        "glam::Vec2::cmpne",
        "glam::Vec2::copysign",
        "glam::Vec2::distance",
        "glam::Vec2::distance_squared",
        "glam::Vec2::div",
        "glam::Vec2::div-1",
        "glam::Vec2::div-2",
        "glam::Vec2::div_euclid",
        "glam::Vec2::dot",
        "glam::Vec2::dot_into_vec",
        "glam::Vec2::element_product",
        "glam::Vec2::element_sum",
        "glam::Vec2::eq",
        "glam::Vec2::exp",
        "glam::Vec2::extend",
        "glam::Vec2::floor",
        "glam::Vec2::fract",
        "glam::Vec2::fract_gl",
        "glam::Vec2::from_angle",
        "glam::Vec2::from_array",
        "glam::Vec2::is_finite",
        "glam::Vec2::is_finite_mask",
        "glam::Vec2::is_nan",
        "glam::Vec2::is_nan_mask",
        "glam::Vec2::is_negative_bitmask",
        "glam::Vec2::is_normalized",
        "glam::Vec2::length",
        "glam::Vec2::length_recip",
        "glam::Vec2::length_squared",
        "glam::Vec2::lerp",
        "glam::Vec2::max",
        "glam::Vec2::max_element",
        "glam::Vec2::midpoint",
        "glam::Vec2::min",
        "glam::Vec2::min_element",
        "glam::Vec2::move_towards",
        "glam::Vec2::mul",
        "glam::Vec2::mul-1",
        "glam::Vec2::mul-2",
        "glam::Vec2::mul_add",
        "glam::Vec2::neg",
        "glam::Vec2::new",
        "glam::Vec2::normalize",
        "glam::Vec2::normalize_or",
        "glam::Vec2::normalize_or_zero",
        "glam::Vec2::perp",
        "glam::Vec2::perp_dot",
        "glam::Vec2::powf",
        "glam::Vec2::project_onto",
        "glam::Vec2::project_onto_normalized",
        "glam::Vec2::recip",
        "glam::Vec2::reflect",
        "glam::Vec2::refract",
        "glam::Vec2::reject_from",
        "glam::Vec2::reject_from_normalized",
        "glam::Vec2::rem",
        "glam::Vec2::rem-1",
        "glam::Vec2::rem-2",
        "glam::Vec2::rem_euclid",
        "glam::Vec2::rotate",
        "glam::Vec2::rotate_towards",
        "glam::Vec2::round",
        "glam::Vec2::select",
        "glam::Vec2::signum",
        "glam::Vec2::splat",
        "glam::Vec2::sub",
        "glam::Vec2::sub-1",
        "glam::Vec2::sub-2",
        "glam::Vec2::to_angle",
        "glam::Vec2::to_array",
        "glam::Vec2::trunc",
        "glam::Vec2::with_x",
        "glam::Vec2::with_y"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Vec2",
        "fields": [
          {
            "name": "x",
            "type": "f32"
          },
          {
            "name": "y",
            "type": "f32"
          }
        ]
      }
    },
    "glam::Vec3": {
      "identifier": "Vec3",
      "crate": "glam",
      "path": "glam::Vec3",
      "associated_functions": [
        "glam::Vec3::abs",
        "glam::Vec3::abs_diff_eq",
        "glam::Vec3::add",
        "glam::Vec3::add-1",
        "glam::Vec3::add-2",
        "glam::Vec3::angle_between",
        "glam::Vec3::any_orthogonal_vector",
        "glam::Vec3::any_orthonormal_vector",
        "glam::Vec3::as_dvec3",
        "glam::Vec3::as_i64vec3",
        "glam::Vec3::as_ivec3",
        "glam::Vec3::as_u64vec3",
        "glam::Vec3::as_uvec3",
        "glam::Vec3::ceil",
        "glam::Vec3::clamp",
        "glam::Vec3::clamp_length",
        "glam::Vec3::clamp_length_max",
        "glam::Vec3::clamp_length_min",
        "glam::Vec3::clone",
        "glam::Vec3::cmpeq",
        "glam::Vec3::cmpge",
        "glam::Vec3::cmpgt",
        "glam::Vec3::cmple",
        "glam::Vec3::cmplt",
        "glam::Vec3::cmpne",
        "glam::Vec3::copysign",
        "glam::Vec3::cross",
        "glam::Vec3::distance",
        "glam::Vec3::distance_squared",
        "glam::Vec3::div",
        "glam::Vec3::div-1",
        "glam::Vec3::div-2",
        "glam::Vec3::div_euclid",
        "glam::Vec3::dot",
        "glam::Vec3::dot_into_vec",
        "glam::Vec3::element_product",
        "glam::Vec3::element_sum",
        "glam::Vec3::eq",
        "glam::Vec3::exp",
        "glam::Vec3::extend",
        "glam::Vec3::floor",
        "glam::Vec3::fract",
        "glam::Vec3::fract_gl",
        "glam::Vec3::from_array",
        "glam::Vec3::is_finite",
        "glam::Vec3::is_finite_mask",
        "glam::Vec3::is_nan",
        "glam::Vec3::is_nan_mask",
        "glam::Vec3::is_negative_bitmask",
        "glam::Vec3::is_normalized",
        "glam::Vec3::length",
        "glam::Vec3::length_recip",
        "glam::Vec3::length_squared",
        "glam::Vec3::lerp",
        "glam::Vec3::max",
        "glam::Vec3::max_element",
        "glam::Vec3::midpoint",
        "glam::Vec3::min",
        "glam::Vec3::min_element",
        "glam::Vec3::move_towards",
        "glam::Vec3::mul",
        "glam::Vec3::mul-1",
        "glam::Vec3::mul-2",
        "glam::Vec3::mul_add",
        "glam::Vec3::neg",
        "glam::Vec3::new",
        "glam::Vec3::normalize",
        "glam::Vec3::normalize_or",
        "glam::Vec3::normalize_or_zero",
        "glam::Vec3::powf",
        "glam::Vec3::project_onto",
        "glam::Vec3::project_onto_normalized",
        "glam::Vec3::recip",
        "glam::Vec3::reflect",
        "glam::Vec3::refract",
        "glam::Vec3::reject_from",
        "glam::Vec3::reject_from_normalized",
        "glam::Vec3::rem",
        "glam::Vec3::rem-1",
        "glam::Vec3::rem-2",
        "glam::Vec3::rem_euclid",
        "glam::Vec3::round",
        "glam::Vec3::select",
        "glam::Vec3::signum",
        "glam::Vec3::splat",
        "glam::Vec3::sub",
        "glam::Vec3::sub-1",
        "glam::Vec3::sub-2",
        "glam::Vec3::to_array",
        "glam::Vec3::trunc",
        "glam::Vec3::truncate",
        "glam::Vec3::with_x",
        "glam::Vec3::with_y",
        "glam::Vec3::with_z"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Vec3",
        "fields": [
          {
            "name": "x",
            "type": "f32"
          },
          {
            "name": "y",
            "type": "f32"
          },
          {
            "name": "z",
            "type": "f32"
          }
        ]
      }
    },
    "glam::Vec3A": {
      "identifier": "Vec3A",
      "crate": "glam",
      "path": "glam::Vec3A",
      "associated_functions": [
        "glam::Vec3A::abs",
        "glam::Vec3A::abs_diff_eq",
        "glam::Vec3A::add",
        "glam::Vec3A::add-1",
        "glam::Vec3A::add-2",
        "glam::Vec3A::angle_between",
        "glam::Vec3A::any_orthogonal_vector",
        "glam::Vec3A::any_orthonormal_vector",
        "glam::Vec3A::as_dvec3",
        "glam::Vec3A::as_i64vec3",
        "glam::Vec3A::as_ivec3",
        "glam::Vec3A::as_u64vec3",
        "glam::Vec3A::as_uvec3",
        "glam::Vec3A::ceil",
        "glam::Vec3A::clamp",
        "glam::Vec3A::clamp_length",
        "glam::Vec3A::clamp_length_max",
        "glam::Vec3A::clamp_length_min",
        "glam::Vec3A::clone",
        "glam::Vec3A::cmpeq",
        "glam::Vec3A::cmpge",
        "glam::Vec3A::cmpgt",
        "glam::Vec3A::cmple",
        "glam::Vec3A::cmplt",
        "glam::Vec3A::cmpne",
        "glam::Vec3A::copysign",
        "glam::Vec3A::cross",
        "glam::Vec3A::distance",
        "glam::Vec3A::distance_squared",
        "glam::Vec3A::div",
        "glam::Vec3A::div-1",
        "glam::Vec3A::div-2",
        "glam::Vec3A::div_euclid",
        "glam::Vec3A::dot",
        "glam::Vec3A::dot_into_vec",
        "glam::Vec3A::element_product",
        "glam::Vec3A::element_sum",
        "glam::Vec3A::eq",
        "glam::Vec3A::exp",
        "glam::Vec3A::extend",
        "glam::Vec3A::floor",
        "glam::Vec3A::fract",
        "glam::Vec3A::fract_gl",
        "glam::Vec3A::from_array",
        "glam::Vec3A::from_vec4",
        "glam::Vec3A::is_finite",
        "glam::Vec3A::is_finite_mask",
        "glam::Vec3A::is_nan",
        "glam::Vec3A::is_nan_mask",
        "glam::Vec3A::is_negative_bitmask",
        "glam::Vec3A::is_normalized",
        "glam::Vec3A::length",
        "glam::Vec3A::length_recip",
        "glam::Vec3A::length_squared",
        "glam::Vec3A::lerp",
        "glam::Vec3A::max",
        "glam::Vec3A::max_element",
        "glam::Vec3A::midpoint",
        "glam::Vec3A::min",
        "glam::Vec3A::min_element",
        "glam::Vec3A::move_towards",
        "glam::Vec3A::mul",
        "glam::Vec3A::mul-1",
        "glam::Vec3A::mul-2",
        "glam::Vec3A::mul_add",
        "glam::Vec3A::neg",
        "glam::Vec3A::new",
        "glam::Vec3A::normalize",
        "glam::Vec3A::normalize_or",
        "glam::Vec3A::normalize_or_zero",
        "glam::Vec3A::powf",
        "glam::Vec3A::project_onto",
        "glam::Vec3A::project_onto_normalized",
        "glam::Vec3A::recip",
        "glam::Vec3A::reflect",
        "glam::Vec3A::refract",
        "glam::Vec3A::reject_from",
        "glam::Vec3A::reject_from_normalized",
        "glam::Vec3A::rem",
        "glam::Vec3A::rem-1",
        "glam::Vec3A::rem-2",
        "glam::Vec3A::rem_euclid",
        "glam::Vec3A::round",
        "glam::Vec3A::select",
        "glam::Vec3A::signum",
        "glam::Vec3A::splat",
        "glam::Vec3A::sub",
        "glam::Vec3A::sub-1",
        "glam::Vec3A::sub-2",
        "glam::Vec3A::to_array",
        "glam::Vec3A::trunc",
        "glam::Vec3A::truncate",
        "glam::Vec3A::with_x",
        "glam::Vec3A::with_y",
        "glam::Vec3A::with_z"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Vec3A",
        "fields": [
          {
            "name": "x",
            "type": "f32"
          },
          {
            "name": "y",
            "type": "f32"
          },
          {
            "name": "z",
            "type": "f32"
          }
        ]
      }
    },
    "glam::Vec4": {
      "identifier": "Vec4",
      "crate": "glam",
      "path": "glam::Vec4",
      "associated_functions": [
        "glam::Vec4::abs",
        "glam::Vec4::abs_diff_eq",
        "glam::Vec4::add",
        "glam::Vec4::add-1",
        "glam::Vec4::add-2",
        "glam::Vec4::as_dvec4",
        "glam::Vec4::as_i64vec4",
        "glam::Vec4::as_ivec4",
        "glam::Vec4::as_u64vec4",
        "glam::Vec4::as_uvec4",
        "glam::Vec4::ceil",
        "glam::Vec4::clamp",
        "glam::Vec4::clamp_length",
        "glam::Vec4::clamp_length_max",
        "glam::Vec4::clamp_length_min",
        "glam::Vec4::clone",
        "glam::Vec4::cmpeq",
        "glam::Vec4::cmpge",
        "glam::Vec4::cmpgt",
        "glam::Vec4::cmple",
        "glam::Vec4::cmplt",
        "glam::Vec4::cmpne",
        "glam::Vec4::copysign",
        "glam::Vec4::distance",
        "glam::Vec4::distance_squared",
        "glam::Vec4::div",
        "glam::Vec4::div-1",
        "glam::Vec4::div-2",
        "glam::Vec4::div_euclid",
        "glam::Vec4::dot",
        "glam::Vec4::dot_into_vec",
        "glam::Vec4::element_product",
        "glam::Vec4::element_sum",
        "glam::Vec4::eq",
        "glam::Vec4::exp",
        "glam::Vec4::floor",
        "glam::Vec4::fract",
        "glam::Vec4::fract_gl",
        "glam::Vec4::from_array",
        "glam::Vec4::is_finite",
        "glam::Vec4::is_finite_mask",
        "glam::Vec4::is_nan",
        "glam::Vec4::is_nan_mask",
        "glam::Vec4::is_negative_bitmask",
        "glam::Vec4::is_normalized",
        "glam::Vec4::length",
        "glam::Vec4::length_recip",
        "glam::Vec4::length_squared",
        "glam::Vec4::lerp",
        "glam::Vec4::max",
        "glam::Vec4::max_element",
        "glam::Vec4::midpoint",
        "glam::Vec4::min",
        "glam::Vec4::min_element",
        "glam::Vec4::move_towards",
        "glam::Vec4::mul",
        "glam::Vec4::mul-1",
        "glam::Vec4::mul-2",
        "glam::Vec4::mul_add",
        "glam::Vec4::neg",
        "glam::Vec4::new",
        "glam::Vec4::normalize",
        "glam::Vec4::normalize_or",
        "glam::Vec4::normalize_or_zero",
        "glam::Vec4::powf",
        "glam::Vec4::project_onto",
        "glam::Vec4::project_onto_normalized",
        "glam::Vec4::recip",
        "glam::Vec4::reflect",
        "glam::Vec4::refract",
        "glam::Vec4::reject_from",
        "glam::Vec4::reject_from_normalized",
        "glam::Vec4::rem",
        "glam::Vec4::rem-1",
        "glam::Vec4::rem-2",
        "glam::Vec4::rem_euclid",
        "glam::Vec4::round",
        "glam::Vec4::select",
        "glam::Vec4::signum",
        "glam::Vec4::splat",
        "glam::Vec4::sub",
        "glam::Vec4::sub-1",
        "glam::Vec4::sub-2",
        "glam::Vec4::to_array",
        "glam::Vec4::trunc",
        "glam::Vec4::truncate",
        "glam::Vec4::with_w",
        "glam::Vec4::with_x",
        "glam::Vec4::with_y",
        "glam::Vec4::with_z"
      ],
      "layout": {
        "kind": "Struct",
        "name": "Vec4",
        "fields": [
          {
            "name": "x",
            "type": "f32"
          },
          {
            "name": "y",
            "type": "f32"
          },
          {
            "name": "z",
            "type": "f32"
          },
          {
            "name": "w",
            "type": "f32"
          }
        ]
      }
    },
    "i128": {
      "identifier": "i128",
      "path": "i128",
      "layout": null
    },
    "i16": {
      "identifier": "i16",
      "path": "i16",
      "layout": null
    },
    "i32": {
      "identifier": "i32",
      "path": "i32",
      "layout": null
    },
    "i64": {
      "identifier": "i64",
      "path": "i64",
      "layout": null
    },
    "i8": {
      "identifier": "i8",
      "path": "i8",
      "layout": null
    },
    "isize": {
      "identifier": "isize",
      "path": "isize",
      "layout": null
    },
    "smallvec::SmallVec<[bevy_ecs::entity::Entity; 8]>": {
      "identifier": "SmallVec",
      "crate": "smallvec",
      "path": "smallvec::SmallVec<[bevy_ecs::entity::Entity; 8]>",
      "generics": [
        {
          "type_id": "TypeId(0x8783a09395d134492f28fb50f029b988)",
          "name": "T"
        }
      ],
      "layout": null
    },
    "smol_str::SmolStr": {
      "identifier": "SmolStr",
      "crate": "smol_str",
      "path": "smol_str::SmolStr",
      "associated_functions": [
        "smol_str::SmolStr::clone",
        "smol_str::SmolStr::eq",
        "smol_str::SmolStr::is_empty",
        "smol_str::SmolStr::is_heap_allocated",
        "smol_str::SmolStr::len",
        "smol_str::SmolStr::to_string"
      ],
      "layout": null
    },
    "str": {
      "identifier": "",
      "path": "&str",
      "layout": null
    },
    "u128": {
      "identifier": "u128",
      "path": "u128",
      "layout": null
    },
    "u16": {
      "identifier": "u16",
      "path": "u16",
      "layout": null
    },
    "u32": {
      "identifier": "u32",
      "path": "u32",
      "layout": null
    },
    "u64": {
      "identifier": "u64",
      "path": "u64",
      "layout": null
    },
    "u8": {
      "identifier": "u8",
      "path": "u8",
      "layout": null
    },
    "usize": {
      "identifier": "usize",
      "path": "usize",
      "layout": null
    },
    "uuid::Uuid": {
      "identifier": "Uuid",
      "crate": "uuid",
      "path": "uuid::Uuid",
      "associated_functions": [
        "uuid::Uuid::as_u128",
        "uuid::Uuid::as_u64_pair",
        "uuid::Uuid::assert_receiver_is_total_eq",
        "uuid::Uuid::clone",
        "uuid::Uuid::encode_buffer",
        "uuid::Uuid::eq",
        "uuid::Uuid::from_bytes",
        "uuid::Uuid::from_bytes_le",
        "uuid::Uuid::from_u128",
        "uuid::Uuid::from_u128_le",
        "uuid::Uuid::from_u64_pair",
        "uuid::Uuid::get_node_id",
        "uuid::Uuid::get_version_num",
        "uuid::Uuid::into_bytes",
        "uuid::Uuid::is_max",
        "uuid::Uuid::is_nil",
        "uuid::Uuid::max",
        "uuid::Uuid::new_v4",
        "uuid::Uuid::nil",
        "uuid::Uuid::to_bytes_le",
        "uuid::Uuid::to_u128_le"
      ],
      "layout": null
    }
  },
  "functions": {
    "ReflectReference::clear": {
      "namespace": "ReflectReference",
      "identifier": "clear",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "name": "ctxt"
        },
        {
          "kind": {
            "primitive": "reflectReference"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "tuple": []
          }
        }
      }
    },
    "ReflectReference::display_ref": {
      "namespace": "ReflectReference",
      "identifier": "display_ref",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "name": "ctxt"
        },
        {
          "kind": {
            "primitive": "reflectReference"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "primitive": "string"
          }
        }
      }
    },
    "ReflectReference::display_value": {
      "namespace": "ReflectReference",
      "identifier": "display_value",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "name": "ctxt"
        },
        {
          "kind": {
            "primitive": "reflectReference"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "primitive": "string"
          }
        }
      }
    },
    "ReflectReference::functions": {
      "namespace": "ReflectReference",
      "identifier": "functions",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "name": "ctxt"
        },
        {
          "kind": {
            "primitive": "reflectReference"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "vec": {
              "val": "bevy_mod_scripting_core::docgen::info::FunctionInfo"
            }
          }
        }
      }
    },
    "ReflectReference::get": {
      "namespace": "ReflectReference",
      "identifier": "get",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "name": "ctxt"
        },
        {
          "kind": {
            "primitive": "reflectReference"
          },
          "name": "self_"
        },
        {
          "kind": {
            "unknown": "bevy_mod_scripting_core::bindings::script_value::ScriptValue"
          },
          "name": "key"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "unknown": "bevy_mod_scripting_core::bindings::script_value::ScriptValue"
          }
        }
      }
    },
    "ReflectReference::insert": {
      "namespace": "ReflectReference",
      "identifier": "insert",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "name": "ctxt"
        },
        {
          "kind": {
            "primitive": "reflectReference"
          },
          "name": "s"
        },
        {
          "kind": {
            "unknown": "bevy_mod_scripting_core::bindings::script_value::ScriptValue"
          },
          "name": "k"
        },
        {
          "kind": {
            "unknown": "bevy_mod_scripting_core::bindings::script_value::ScriptValue"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "tuple": []
          }
        }
      }
    },
    "ReflectReference::iter": {
      "namespace": "ReflectReference",
      "identifier": "iter",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "name": "ctxt"
        },
        {
          "kind": {
            "primitive": "reflectReference"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "unknown": "bevy_mod_scripting_core::bindings::function::script_function::DynamicScriptFunctionMut"
          }
        }
      }
    },
    "ReflectReference::len": {
      "namespace": "ReflectReference",
      "identifier": "len",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "name": "ctxt"
        },
        {
          "kind": {
            "primitive": "reflectReference"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "option": {
              "primitive": "usize"
            }
          }
        }
      }
    },
    "ReflectReference::pop": {
      "namespace": "ReflectReference",
      "identifier": "pop",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "name": "ctxt"
        },
        {
          "kind": {
            "primitive": "reflectReference"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "unknown": "bevy_mod_scripting_core::bindings::script_value::ScriptValue"
          }
        }
      }
    },
    "ReflectReference::push": {
      "namespace": "ReflectReference",
      "identifier": "push",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "name": "ctxt"
        },
        {
          "kind": {
            "primitive": "reflectReference"
          },
          "name": "s"
        },
        {
          "kind": {
            "unknown": "bevy_mod_scripting_core::bindings::script_value::ScriptValue"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "tuple": []
          }
        }
      }
    },
    "ReflectReference::remove": {
      "namespace": "ReflectReference",
      "identifier": "remove",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "name": "ctxt"
        },
        {
          "kind": {
            "primitive": "reflectReference"
          },
          "name": "s"
        },
        {
          "kind": {
            "unknown": "bevy_mod_scripting_core::bindings::script_value::ScriptValue"
          },
          "name": "k"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "unknown": "bevy_mod_scripting_core::bindings::script_value::ScriptValue"
          }
        }
      }
    },
    "ReflectReference::set": {
      "namespace": "ReflectReference",
      "identifier": "set",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "name": "ctxt"
        },
        {
          "kind": {
            "unknown": "bevy_mod_scripting_core::bindings::script_value::ScriptValue"
          },
          "name": "self_"
        },
        {
          "kind": {
            "unknown": "bevy_mod_scripting_core::bindings::script_value::ScriptValue"
          },
          "name": "key"
        },
        {
          "kind": {
            "unknown": "bevy_mod_scripting_core::bindings::script_value::ScriptValue"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "unknown": "bevy_mod_scripting_core::bindings::script_value::ScriptValue"
          }
        }
      }
    },
    "bevy_core::name::Name::clone": {
      "namespace": "bevy_core::name::Name",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_core::name::Name"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_core::name::Name"
        }
      }
    },
    "bevy_core::name::Name::eq": {
      "namespace": "bevy_core::name::Name",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_core::name::Name"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_core::name::Name"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_ecs::component::ComponentId::assert_receiver_is_total_eq": {
      "namespace": "bevy_ecs::component::ComponentId",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::component::ComponentId"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_ecs::component::ComponentId::clone": {
      "namespace": "bevy_ecs::component::ComponentId",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::component::ComponentId"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::component::ComponentId"
        }
      }
    },
    "bevy_ecs::component::ComponentId::eq": {
      "namespace": "bevy_ecs::component::ComponentId",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::component::ComponentId"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_ecs::component::ComponentId"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_ecs::component::ComponentId::index": {
      "namespace": "bevy_ecs::component::ComponentId",
      "identifier": "index",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::component::ComponentId"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "usize"
        }
      },
      "documentation": " Returns the index of the current component."
    },
    "bevy_ecs::component::ComponentId::new": {
      "namespace": "bevy_ecs::component::ComponentId",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::component::ComponentId"
        }
      },
      "documentation": " Creates a new [`ComponentId`].\n The `index` is a unique value associated with each type of component in a given world.\n Usually, this value is taken from a counter incremented for each type of component registered with the world."
    },
    "bevy_ecs::component::ComponentTicks::clone": {
      "namespace": "bevy_ecs::component::ComponentTicks",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::component::ComponentTicks"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::component::ComponentTicks"
        }
      }
    },
    "bevy_ecs::component::ComponentTicks::is_added": {
      "namespace": "bevy_ecs::component::ComponentTicks",
      "identifier": "is_added",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::component::ComponentTicks"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_ecs::component::Tick"
          },
          "name": "last_run"
        },
        {
          "kind": {
            "val": "bevy_ecs::component::Tick"
          },
          "name": "this_run"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if the component or resource was added after the system last ran\n (or the system is running for the first time)."
    },
    "bevy_ecs::component::ComponentTicks::is_changed": {
      "namespace": "bevy_ecs::component::ComponentTicks",
      "identifier": "is_changed",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::component::ComponentTicks"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_ecs::component::Tick"
          },
          "name": "last_run"
        },
        {
          "kind": {
            "val": "bevy_ecs::component::Tick"
          },
          "name": "this_run"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if the component or resource was added or mutably dereferenced after the system last ran\n (or the system is running for the first time)."
    },
    "bevy_ecs::component::ComponentTicks::new": {
      "namespace": "bevy_ecs::component::ComponentTicks",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::component::Tick"
          },
          "name": "change_tick"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::component::ComponentTicks"
        }
      },
      "documentation": " Creates a new instance with the same change tick for `added` and `changed`."
    },
    "bevy_ecs::component::ComponentTicks::set_changed": {
      "namespace": "bevy_ecs::component::ComponentTicks",
      "identifier": "set_changed",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_ecs::component::ComponentTicks"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_ecs::component::Tick"
          },
          "name": "change_tick"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Manually sets the change tick.\n This is normally done automatically via the [`DerefMut`](std::ops::DerefMut) implementation\n on [`Mut<T>`](crate::change_detection::Mut), [`ResMut<T>`](crate::change_detection::ResMut), etc.\n However, components and resources that make use of interior mutability might require manual updates.\n # Example\n ```no_run\n # use bevy_ecs::{world::World, component::ComponentTicks};\n let world: World = unimplemented!();\n let component_ticks: ComponentTicks = unimplemented!();\n component_ticks.set_changed(world.read_change_tick());\n ```"
    },
    "bevy_ecs::component::Tick::assert_receiver_is_total_eq": {
      "namespace": "bevy_ecs::component::Tick",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::component::Tick"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_ecs::component::Tick::clone": {
      "namespace": "bevy_ecs::component::Tick",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::component::Tick"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::component::Tick"
        }
      }
    },
    "bevy_ecs::component::Tick::eq": {
      "namespace": "bevy_ecs::component::Tick",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::component::Tick"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_ecs::component::Tick"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_ecs::component::Tick::get": {
      "namespace": "bevy_ecs::component::Tick",
      "identifier": "get",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::component::Tick"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Gets the value of this change tick."
    },
    "bevy_ecs::component::Tick::is_newer_than": {
      "namespace": "bevy_ecs::component::Tick",
      "identifier": "is_newer_than",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::component::Tick"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_ecs::component::Tick"
          },
          "name": "last_run"
        },
        {
          "kind": {
            "val": "bevy_ecs::component::Tick"
          },
          "name": "this_run"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if this `Tick` occurred since the system's `last_run`.\n `this_run` is the current tick of the system, used as a reference to help deal with wraparound."
    },
    "bevy_ecs::component::Tick::new": {
      "namespace": "bevy_ecs::component::Tick",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "tick"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::component::Tick"
        }
      },
      "documentation": " Creates a new [`Tick`] wrapping the given value."
    },
    "bevy_ecs::component::Tick::set": {
      "namespace": "bevy_ecs::component::Tick",
      "identifier": "set",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_ecs::component::Tick"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "tick"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Sets the value of this change tick."
    },
    "bevy_ecs::entity::Entity::clone": {
      "namespace": "bevy_ecs::entity::Entity",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::entity::Entity"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::entity::Entity"
        }
      }
    },
    "bevy_ecs::entity::Entity::eq": {
      "namespace": "bevy_ecs::entity::Entity",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::entity::Entity"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_ecs::entity::Entity"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_ecs::entity::Entity::from_bits": {
      "namespace": "bevy_ecs::entity::Entity",
      "identifier": "from_bits",
      "arguments": [
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "bits"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::entity::Entity"
        }
      },
      "documentation": " Reconstruct an `Entity` previously destructured with [`Entity::to_bits`].\n Only useful when applied to results from `to_bits` in the same instance of an application.\n # Panics\n This method will likely panic if given `u64` values that did not come from [`Entity::to_bits`]."
    },
    "bevy_ecs::entity::Entity::from_raw": {
      "namespace": "bevy_ecs::entity::Entity",
      "identifier": "from_raw",
      "arguments": [
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::entity::Entity"
        }
      },
      "documentation": " Creates a new entity ID with the specified `index` and a generation of 1.\n # Note\n Spawning a specific `entity` value is __rarely the right choice__. Most apps should favor\n [`Commands::spawn`](crate::system::Commands::spawn). This method should generally\n only be used for sharing entities across apps, and only when they have a scheme\n worked out to share an index space (which doesn't happen by default).\n In general, one should not try to synchronize the ECS by attempting to ensure that\n `Entity` lines up between instances, but instead insert a secondary identifier as\n a component."
    },
    "bevy_ecs::entity::Entity::generation": {
      "namespace": "bevy_ecs::entity::Entity",
      "identifier": "generation",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the generation of this Entity's index. The generation is incremented each time an\n entity with a given index is despawned. This serves as a \"count\" of the number of times a\n given index has been reused (index, generation) pairs uniquely identify a given Entity."
    },
    "bevy_ecs::entity::Entity::index": {
      "namespace": "bevy_ecs::entity::Entity",
      "identifier": "index",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Return a transiently unique identifier.\n No two simultaneously-live entities share the same index, but dead entities' indices may collide\n with both live and dead entities. Useful for compactly representing entities within a\n specific snapshot of the world, such as when serializing."
    },
    "bevy_ecs::entity::Entity::to_bits": {
      "namespace": "bevy_ecs::entity::Entity",
      "identifier": "to_bits",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Convert to a form convenient for passing outside of rust.\n Only useful for identifying entities within the same instance of an application. Do not use\n for serialization between runs.\n No particular structure is guaranteed for the returned bits."
    },
    "bevy_ecs::entity::hash::EntityHash::clone": {
      "namespace": "bevy_ecs::entity::hash::EntityHash",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::entity::hash::EntityHash"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::entity::hash::EntityHash"
        }
      }
    },
    "bevy_ecs::identifier::Identifier::clone": {
      "namespace": "bevy_ecs::identifier::Identifier",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::identifier::Identifier"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::identifier::Identifier"
        }
      }
    },
    "bevy_ecs::identifier::Identifier::eq": {
      "namespace": "bevy_ecs::identifier::Identifier",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::identifier::Identifier"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_ecs::identifier::Identifier"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_ecs::identifier::Identifier::from_bits": {
      "namespace": "bevy_ecs::identifier::Identifier",
      "identifier": "from_bits",
      "arguments": [
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::identifier::Identifier"
        }
      },
      "documentation": " Convert a `u64` into an [`Identifier`].\n # Panics\n This method will likely panic if given `u64` values that did not come from [`Identifier::to_bits`]."
    },
    "bevy_ecs::identifier::Identifier::low": {
      "namespace": "bevy_ecs::identifier::Identifier",
      "identifier": "low",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::identifier::Identifier"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the value of the low segment of the [`Identifier`]."
    },
    "bevy_ecs::identifier::Identifier::masked_high": {
      "namespace": "bevy_ecs::identifier::Identifier",
      "identifier": "masked_high",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::identifier::Identifier"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the masked value of the high segment of the [`Identifier`].\n Does not include the flag bits."
    },
    "bevy_ecs::identifier::Identifier::to_bits": {
      "namespace": "bevy_ecs::identifier::Identifier",
      "identifier": "to_bits",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::identifier::Identifier"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Convert the [`Identifier`] into a `u64`."
    },
    "bevy_ecs::removal_detection::RemovedComponentEntity::clone": {
      "namespace": "bevy_ecs::removal_detection::RemovedComponentEntity",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_ecs::removal_detection::RemovedComponentEntity"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::removal_detection::RemovedComponentEntity"
        }
      }
    },
    "bevy_hierarchy::components::children::Children::swap": {
      "namespace": "bevy_hierarchy::components::children::Children",
      "identifier": "swap",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_hierarchy::components::children::Children"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "a_index"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "b_index"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Swaps the child at `a_index` with the child at `b_index`."
    },
    "bevy_hierarchy::components::parent::Parent::assert_receiver_is_total_eq": {
      "namespace": "bevy_hierarchy::components::parent::Parent",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_hierarchy::components::parent::Parent"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_hierarchy::components::parent::Parent::eq": {
      "namespace": "bevy_hierarchy::components::parent::Parent",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_hierarchy::components::parent::Parent"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_hierarchy::components::parent::Parent"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_hierarchy::components::parent::Parent::get": {
      "namespace": "bevy_hierarchy::components::parent::Parent",
      "identifier": "get",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_hierarchy::components::parent::Parent"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::entity::Entity"
        }
      },
      "documentation": " Gets the [`Entity`] ID of the parent."
    },
    "bevy_hierarchy::events::HierarchyEvent::assert_receiver_is_total_eq": {
      "namespace": "bevy_hierarchy::events::HierarchyEvent",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_hierarchy::events::HierarchyEvent"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_hierarchy::events::HierarchyEvent::clone": {
      "namespace": "bevy_hierarchy::events::HierarchyEvent",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_hierarchy::events::HierarchyEvent"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_hierarchy::events::HierarchyEvent"
        }
      }
    },
    "bevy_hierarchy::events::HierarchyEvent::eq": {
      "namespace": "bevy_hierarchy::events::HierarchyEvent",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_hierarchy::events::HierarchyEvent"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_hierarchy::events::HierarchyEvent"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::ButtonState::assert_receiver_is_total_eq": {
      "namespace": "bevy_input::ButtonState",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::ButtonState"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_input::ButtonState::clone": {
      "namespace": "bevy_input::ButtonState",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::ButtonState"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::ButtonState"
        }
      }
    },
    "bevy_input::ButtonState::eq": {
      "namespace": "bevy_input::ButtonState",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::ButtonState"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::ButtonState"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::ButtonState::is_pressed": {
      "namespace": "bevy_input::ButtonState",
      "identifier": "is_pressed",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::ButtonState"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Is this button pressed?"
    },
    "bevy_input::gamepad::AxisSettings::clamp": {
      "namespace": "bevy_input::gamepad::AxisSettings",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::AxisSettings"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "new_value"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Clamps the `raw_value` according to the `AxisSettings`."
    },
    "bevy_input::gamepad::AxisSettings::clone": {
      "namespace": "bevy_input::gamepad::AxisSettings",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::AxisSettings"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::AxisSettings"
        }
      }
    },
    "bevy_input::gamepad::AxisSettings::deadzone_lowerbound": {
      "namespace": "bevy_input::gamepad::AxisSettings",
      "identifier": "deadzone_lowerbound",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::AxisSettings"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the value above which inputs will be rounded up to 0.0."
    },
    "bevy_input::gamepad::AxisSettings::deadzone_upperbound": {
      "namespace": "bevy_input::gamepad::AxisSettings",
      "identifier": "deadzone_upperbound",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::AxisSettings"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the value below which positive inputs will be rounded down to 0.0."
    },
    "bevy_input::gamepad::AxisSettings::eq": {
      "namespace": "bevy_input::gamepad::AxisSettings",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::AxisSettings"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gamepad::AxisSettings"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gamepad::AxisSettings::filter": {
      "namespace": "bevy_input::gamepad::AxisSettings",
      "identifier": "filter",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::AxisSettings"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "new_value"
        },
        {
          "kind": {
            "option": {
              "primitive": "f32"
            }
          },
          "name": "old_value"
        }
      ],
      "return_type": {
        "kind": {
          "option": {
            "primitive": "f32"
          }
        }
      },
      "documentation": " Filters the `new_value` based on the `old_value`, according to the [`AxisSettings`].\n Returns the clamped `new_value` if the change exceeds the settings threshold,\n and `None` otherwise."
    },
    "bevy_input::gamepad::AxisSettings::livezone_lowerbound": {
      "namespace": "bevy_input::gamepad::AxisSettings",
      "identifier": "livezone_lowerbound",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::AxisSettings"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the value below which negative inputs will be rounded down to -1.0."
    },
    "bevy_input::gamepad::AxisSettings::livezone_upperbound": {
      "namespace": "bevy_input::gamepad::AxisSettings",
      "identifier": "livezone_upperbound",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::AxisSettings"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the value above which inputs will be rounded up to 1.0."
    },
    "bevy_input::gamepad::AxisSettings::set_deadzone_lowerbound": {
      "namespace": "bevy_input::gamepad::AxisSettings",
      "identifier": "set_deadzone_lowerbound",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_input::gamepad::AxisSettings"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Try to set the value above which inputs will be rounded up to 0.0.\n If the value passed is less than -1.0 or less than `livezone_lowerbound`,\n the value will not be changed.\n Returns the new value of `deadzone_lowerbound`."
    },
    "bevy_input::gamepad::AxisSettings::set_deadzone_upperbound": {
      "namespace": "bevy_input::gamepad::AxisSettings",
      "identifier": "set_deadzone_upperbound",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_input::gamepad::AxisSettings"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Try to set the value below which positive inputs will be rounded down to 0.0.\n If the value passed is negative or greater than `livezone_upperbound`,\n the value will not be changed.\n Returns the new value of `deadzone_upperbound`."
    },
    "bevy_input::gamepad::AxisSettings::set_livezone_lowerbound": {
      "namespace": "bevy_input::gamepad::AxisSettings",
      "identifier": "set_livezone_lowerbound",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_input::gamepad::AxisSettings"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Try to set the value below which negative inputs will be rounded down to -1.0.\n If the value passed is positive or greater than `deadzone_lowerbound`,\n the value will not be changed.\n Returns the new value of `livezone_lowerbound`."
    },
    "bevy_input::gamepad::AxisSettings::set_livezone_upperbound": {
      "namespace": "bevy_input::gamepad::AxisSettings",
      "identifier": "set_livezone_upperbound",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_input::gamepad::AxisSettings"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Try to set the value above which inputs will be rounded up to 1.0.\n If the value passed is negative or less than `deadzone_upperbound`,\n the value will not be changed.\n Returns the new value of `livezone_upperbound`."
    },
    "bevy_input::gamepad::AxisSettings::set_threshold": {
      "namespace": "bevy_input::gamepad::AxisSettings",
      "identifier": "set_threshold",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_input::gamepad::AxisSettings"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Try to set the minimum value by which input must change before the changes will be applied.\n If the value passed is not within [0.0..=2.0], the value will not be changed.\n Returns the new value of threshold."
    },
    "bevy_input::gamepad::AxisSettings::threshold": {
      "namespace": "bevy_input::gamepad::AxisSettings",
      "identifier": "threshold",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::AxisSettings"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the minimum value by which input must change before the change is registered."
    },
    "bevy_input::gamepad::ButtonAxisSettings::clone": {
      "namespace": "bevy_input::gamepad::ButtonAxisSettings",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::ButtonAxisSettings"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::ButtonAxisSettings"
        }
      }
    },
    "bevy_input::gamepad::ButtonAxisSettings::filter": {
      "namespace": "bevy_input::gamepad::ButtonAxisSettings",
      "identifier": "filter",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::ButtonAxisSettings"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "new_value"
        },
        {
          "kind": {
            "option": {
              "primitive": "f32"
            }
          },
          "name": "old_value"
        }
      ],
      "return_type": {
        "kind": {
          "option": {
            "primitive": "f32"
          }
        }
      },
      "documentation": " Filters the `new_value` based on the `old_value`, according to the [`ButtonAxisSettings`].\n Returns the clamped `new_value`, according to the [`ButtonAxisSettings`], if the change\n exceeds the settings threshold, and `None` otherwise."
    },
    "bevy_input::gamepad::ButtonSettings::clone": {
      "namespace": "bevy_input::gamepad::ButtonSettings",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::ButtonSettings"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::ButtonSettings"
        }
      }
    },
    "bevy_input::gamepad::ButtonSettings::eq": {
      "namespace": "bevy_input::gamepad::ButtonSettings",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::ButtonSettings"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gamepad::ButtonSettings"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gamepad::ButtonSettings::is_pressed": {
      "namespace": "bevy_input::gamepad::ButtonSettings",
      "identifier": "is_pressed",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::ButtonSettings"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if the button is pressed.\n A button is considered pressed if the `value` passed is greater than or equal to the press threshold."
    },
    "bevy_input::gamepad::ButtonSettings::is_released": {
      "namespace": "bevy_input::gamepad::ButtonSettings",
      "identifier": "is_released",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::ButtonSettings"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if the button is released.\n A button is considered released if the `value` passed is lower than or equal to the release threshold."
    },
    "bevy_input::gamepad::ButtonSettings::press_threshold": {
      "namespace": "bevy_input::gamepad::ButtonSettings",
      "identifier": "press_threshold",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::ButtonSettings"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the button input threshold above which the button is considered pressed."
    },
    "bevy_input::gamepad::ButtonSettings::release_threshold": {
      "namespace": "bevy_input::gamepad::ButtonSettings",
      "identifier": "release_threshold",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::ButtonSettings"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the button input threshold below which the button is considered released."
    },
    "bevy_input::gamepad::ButtonSettings::set_press_threshold": {
      "namespace": "bevy_input::gamepad::ButtonSettings",
      "identifier": "set_press_threshold",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_input::gamepad::ButtonSettings"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Try to set the button input threshold above which the button is considered pressed.\n If the value passed is outside the range [release threshold..=1.0], the value will not be changed.\n Returns the new value of the press threshold."
    },
    "bevy_input::gamepad::ButtonSettings::set_release_threshold": {
      "namespace": "bevy_input::gamepad::ButtonSettings",
      "identifier": "set_release_threshold",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_input::gamepad::ButtonSettings"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Try to set the button input threshold below which the button is considered released. If the\n value passed is outside the range [0.0..=press threshold], the value will not be changed.\n Returns the new value of the release threshold."
    },
    "bevy_input::gamepad::Gamepad::dpad": {
      "namespace": "bevy_input::gamepad::Gamepad",
      "identifier": "dpad",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::Gamepad"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns the directional pad as a [`Vec2`]"
    },
    "bevy_input::gamepad::Gamepad::just_pressed": {
      "namespace": "bevy_input::gamepad::Gamepad",
      "identifier": "just_pressed",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::Gamepad"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_input::gamepad::GamepadButton"
          },
          "name": "button_type"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if the [`GamepadButton`] has been pressed during the current frame.\n Note: This function does not imply information regarding the current state of [`ButtonInput::pressed`] or [`ButtonInput::just_released`]."
    },
    "bevy_input::gamepad::Gamepad::just_released": {
      "namespace": "bevy_input::gamepad::Gamepad",
      "identifier": "just_released",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::Gamepad"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_input::gamepad::GamepadButton"
          },
          "name": "button_type"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if the [`GamepadButton`] has been released during the current frame.\n Note: This function does not imply information regarding the current state of [`ButtonInput::pressed`] or [`ButtonInput::just_pressed`]."
    },
    "bevy_input::gamepad::Gamepad::left_stick": {
      "namespace": "bevy_input::gamepad::Gamepad",
      "identifier": "left_stick",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::Gamepad"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns the left stick as a [`Vec2`]"
    },
    "bevy_input::gamepad::Gamepad::pressed": {
      "namespace": "bevy_input::gamepad::Gamepad",
      "identifier": "pressed",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::Gamepad"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_input::gamepad::GamepadButton"
          },
          "name": "button_type"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if the [`GamepadButton`] has been pressed."
    },
    "bevy_input::gamepad::Gamepad::product_id": {
      "namespace": "bevy_input::gamepad::Gamepad",
      "identifier": "product_id",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::Gamepad"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "option": {
            "primitive": "u16"
          }
        }
      },
      "documentation": " Returns the USB product ID as assigned by the [vendor], if available.\n [vendor]: Self::vendor_id"
    },
    "bevy_input::gamepad::Gamepad::right_stick": {
      "namespace": "bevy_input::gamepad::Gamepad",
      "identifier": "right_stick",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::Gamepad"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns the right stick as a [`Vec2`]"
    },
    "bevy_input::gamepad::Gamepad::vendor_id": {
      "namespace": "bevy_input::gamepad::Gamepad",
      "identifier": "vendor_id",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::Gamepad"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "option": {
            "primitive": "u16"
          }
        }
      },
      "documentation": " Returns the USB vendor ID as assigned by the USB-IF, if available."
    },
    "bevy_input::gamepad::GamepadAxis::assert_receiver_is_total_eq": {
      "namespace": "bevy_input::gamepad::GamepadAxis",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadAxis"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_input::gamepad::GamepadAxis::clone": {
      "namespace": "bevy_input::gamepad::GamepadAxis",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadAxis"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadAxis"
        }
      }
    },
    "bevy_input::gamepad::GamepadAxis::eq": {
      "namespace": "bevy_input::gamepad::GamepadAxis",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadAxis"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadAxis"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gamepad::GamepadAxisChangedEvent::clone": {
      "namespace": "bevy_input::gamepad::GamepadAxisChangedEvent",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadAxisChangedEvent"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadAxisChangedEvent"
        }
      }
    },
    "bevy_input::gamepad::GamepadAxisChangedEvent::eq": {
      "namespace": "bevy_input::gamepad::GamepadAxisChangedEvent",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadAxisChangedEvent"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadAxisChangedEvent"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gamepad::GamepadAxisChangedEvent::new": {
      "namespace": "bevy_input::gamepad::GamepadAxisChangedEvent",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "name": "entity"
        },
        {
          "kind": {
            "val": "bevy_input::gamepad::GamepadAxis"
          },
          "name": "axis"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadAxisChangedEvent"
        }
      },
      "documentation": " Creates a new [`GamepadAxisChangedEvent`]"
    },
    "bevy_input::gamepad::GamepadButton::assert_receiver_is_total_eq": {
      "namespace": "bevy_input::gamepad::GamepadButton",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadButton"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_input::gamepad::GamepadButton::clone": {
      "namespace": "bevy_input::gamepad::GamepadButton",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadButton"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadButton"
        }
      }
    },
    "bevy_input::gamepad::GamepadButton::eq": {
      "namespace": "bevy_input::gamepad::GamepadButton",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadButton"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadButton"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gamepad::GamepadButtonChangedEvent::clone": {
      "namespace": "bevy_input::gamepad::GamepadButtonChangedEvent",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadButtonChangedEvent"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadButtonChangedEvent"
        }
      }
    },
    "bevy_input::gamepad::GamepadButtonChangedEvent::eq": {
      "namespace": "bevy_input::gamepad::GamepadButtonChangedEvent",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadButtonChangedEvent"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadButtonChangedEvent"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gamepad::GamepadButtonChangedEvent::new": {
      "namespace": "bevy_input::gamepad::GamepadButtonChangedEvent",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "name": "entity"
        },
        {
          "kind": {
            "val": "bevy_input::gamepad::GamepadButton"
          },
          "name": "button"
        },
        {
          "kind": {
            "val": "bevy_input::ButtonState"
          },
          "name": "state"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadButtonChangedEvent"
        }
      },
      "documentation": " Creates a new [`GamepadButtonChangedEvent`]"
    },
    "bevy_input::gamepad::GamepadButtonStateChangedEvent::assert_receiver_is_total_eq": {
      "namespace": "bevy_input::gamepad::GamepadButtonStateChangedEvent",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadButtonStateChangedEvent"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_input::gamepad::GamepadButtonStateChangedEvent::clone": {
      "namespace": "bevy_input::gamepad::GamepadButtonStateChangedEvent",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadButtonStateChangedEvent"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadButtonStateChangedEvent"
        }
      }
    },
    "bevy_input::gamepad::GamepadButtonStateChangedEvent::eq": {
      "namespace": "bevy_input::gamepad::GamepadButtonStateChangedEvent",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadButtonStateChangedEvent"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadButtonStateChangedEvent"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gamepad::GamepadButtonStateChangedEvent::new": {
      "namespace": "bevy_input::gamepad::GamepadButtonStateChangedEvent",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "name": "entity"
        },
        {
          "kind": {
            "val": "bevy_input::gamepad::GamepadButton"
          },
          "name": "button"
        },
        {
          "kind": {
            "val": "bevy_input::ButtonState"
          },
          "name": "state"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadButtonStateChangedEvent"
        }
      },
      "documentation": " Creates a new [`GamepadButtonStateChangedEvent`]"
    },
    "bevy_input::gamepad::GamepadConnection::clone": {
      "namespace": "bevy_input::gamepad::GamepadConnection",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadConnection"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadConnection"
        }
      }
    },
    "bevy_input::gamepad::GamepadConnection::eq": {
      "namespace": "bevy_input::gamepad::GamepadConnection",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadConnection"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadConnection"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gamepad::GamepadConnectionEvent::clone": {
      "namespace": "bevy_input::gamepad::GamepadConnectionEvent",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadConnectionEvent"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadConnectionEvent"
        }
      }
    },
    "bevy_input::gamepad::GamepadConnectionEvent::connected": {
      "namespace": "bevy_input::gamepad::GamepadConnectionEvent",
      "identifier": "connected",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadConnectionEvent"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Is the gamepad connected?"
    },
    "bevy_input::gamepad::GamepadConnectionEvent::disconnected": {
      "namespace": "bevy_input::gamepad::GamepadConnectionEvent",
      "identifier": "disconnected",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadConnectionEvent"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Is the gamepad disconnected?"
    },
    "bevy_input::gamepad::GamepadConnectionEvent::eq": {
      "namespace": "bevy_input::gamepad::GamepadConnectionEvent",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadConnectionEvent"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadConnectionEvent"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gamepad::GamepadConnectionEvent::new": {
      "namespace": "bevy_input::gamepad::GamepadConnectionEvent",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "name": "gamepad"
        },
        {
          "kind": {
            "val": "bevy_input::gamepad::GamepadConnection"
          },
          "name": "connection"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadConnectionEvent"
        }
      },
      "documentation": " Creates a [`GamepadConnectionEvent`]."
    },
    "bevy_input::gamepad::GamepadEvent::clone": {
      "namespace": "bevy_input::gamepad::GamepadEvent",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadEvent"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadEvent"
        }
      }
    },
    "bevy_input::gamepad::GamepadEvent::eq": {
      "namespace": "bevy_input::gamepad::GamepadEvent",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadEvent"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadEvent"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gamepad::GamepadInput::assert_receiver_is_total_eq": {
      "namespace": "bevy_input::gamepad::GamepadInput",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadInput"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_input::gamepad::GamepadInput::clone": {
      "namespace": "bevy_input::gamepad::GamepadInput",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadInput"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadInput"
        }
      }
    },
    "bevy_input::gamepad::GamepadInput::eq": {
      "namespace": "bevy_input::gamepad::GamepadInput",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadInput"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadInput"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gamepad::GamepadRumbleIntensity::clone": {
      "namespace": "bevy_input::gamepad::GamepadRumbleIntensity",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadRumbleIntensity"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadRumbleIntensity"
        }
      }
    },
    "bevy_input::gamepad::GamepadRumbleIntensity::eq": {
      "namespace": "bevy_input::gamepad::GamepadRumbleIntensity",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadRumbleIntensity"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadRumbleIntensity"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gamepad::GamepadRumbleIntensity::strong_motor": {
      "namespace": "bevy_input::gamepad::GamepadRumbleIntensity",
      "identifier": "strong_motor",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "intensity"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadRumbleIntensity"
        }
      },
      "documentation": " Creates a new rumble intensity with strong motor intensity set to the given value.\n Clamped within the `0.0` to `1.0` range."
    },
    "bevy_input::gamepad::GamepadRumbleIntensity::weak_motor": {
      "namespace": "bevy_input::gamepad::GamepadRumbleIntensity",
      "identifier": "weak_motor",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "intensity"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadRumbleIntensity"
        }
      },
      "documentation": " Creates a new rumble intensity with weak motor intensity set to the given value.\n Clamped within the `0.0` to `1.0` range."
    },
    "bevy_input::gamepad::GamepadRumbleRequest::clone": {
      "namespace": "bevy_input::gamepad::GamepadRumbleRequest",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadRumbleRequest"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadRumbleRequest"
        }
      }
    },
    "bevy_input::gamepad::GamepadRumbleRequest::gamepad": {
      "namespace": "bevy_input::gamepad::GamepadRumbleRequest",
      "identifier": "gamepad",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadRumbleRequest"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::entity::Entity"
        }
      },
      "documentation": " Get the [`Entity`] associated with this request."
    },
    "bevy_input::gamepad::GamepadSettings::clone": {
      "namespace": "bevy_input::gamepad::GamepadSettings",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::GamepadSettings"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::GamepadSettings"
        }
      }
    },
    "bevy_input::gamepad::RawGamepadAxisChangedEvent::clone": {
      "namespace": "bevy_input::gamepad::RawGamepadAxisChangedEvent",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::RawGamepadAxisChangedEvent"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::RawGamepadAxisChangedEvent"
        }
      }
    },
    "bevy_input::gamepad::RawGamepadAxisChangedEvent::eq": {
      "namespace": "bevy_input::gamepad::RawGamepadAxisChangedEvent",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::RawGamepadAxisChangedEvent"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gamepad::RawGamepadAxisChangedEvent"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gamepad::RawGamepadAxisChangedEvent::new": {
      "namespace": "bevy_input::gamepad::RawGamepadAxisChangedEvent",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "name": "gamepad"
        },
        {
          "kind": {
            "val": "bevy_input::gamepad::GamepadAxis"
          },
          "name": "axis_type"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::RawGamepadAxisChangedEvent"
        }
      },
      "documentation": " Creates a [`RawGamepadAxisChangedEvent`]."
    },
    "bevy_input::gamepad::RawGamepadButtonChangedEvent::clone": {
      "namespace": "bevy_input::gamepad::RawGamepadButtonChangedEvent",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::RawGamepadButtonChangedEvent"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::RawGamepadButtonChangedEvent"
        }
      }
    },
    "bevy_input::gamepad::RawGamepadButtonChangedEvent::eq": {
      "namespace": "bevy_input::gamepad::RawGamepadButtonChangedEvent",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::RawGamepadButtonChangedEvent"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gamepad::RawGamepadButtonChangedEvent"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gamepad::RawGamepadButtonChangedEvent::new": {
      "namespace": "bevy_input::gamepad::RawGamepadButtonChangedEvent",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "bevy_ecs::entity::Entity"
          },
          "name": "gamepad"
        },
        {
          "kind": {
            "val": "bevy_input::gamepad::GamepadButton"
          },
          "name": "button_type"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::RawGamepadButtonChangedEvent"
        }
      },
      "documentation": " Creates a [`RawGamepadButtonChangedEvent`]."
    },
    "bevy_input::gamepad::RawGamepadEvent::clone": {
      "namespace": "bevy_input::gamepad::RawGamepadEvent",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::RawGamepadEvent"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gamepad::RawGamepadEvent"
        }
      }
    },
    "bevy_input::gamepad::RawGamepadEvent::eq": {
      "namespace": "bevy_input::gamepad::RawGamepadEvent",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gamepad::RawGamepadEvent"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gamepad::RawGamepadEvent"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gestures::DoubleTapGesture::clone": {
      "namespace": "bevy_input::gestures::DoubleTapGesture",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gestures::DoubleTapGesture"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gestures::DoubleTapGesture"
        }
      }
    },
    "bevy_input::gestures::DoubleTapGesture::eq": {
      "namespace": "bevy_input::gestures::DoubleTapGesture",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gestures::DoubleTapGesture"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gestures::DoubleTapGesture"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gestures::PanGesture::clone": {
      "namespace": "bevy_input::gestures::PanGesture",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gestures::PanGesture"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gestures::PanGesture"
        }
      }
    },
    "bevy_input::gestures::PanGesture::eq": {
      "namespace": "bevy_input::gestures::PanGesture",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gestures::PanGesture"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gestures::PanGesture"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gestures::PinchGesture::clone": {
      "namespace": "bevy_input::gestures::PinchGesture",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gestures::PinchGesture"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gestures::PinchGesture"
        }
      }
    },
    "bevy_input::gestures::PinchGesture::eq": {
      "namespace": "bevy_input::gestures::PinchGesture",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gestures::PinchGesture"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gestures::PinchGesture"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::gestures::RotationGesture::clone": {
      "namespace": "bevy_input::gestures::RotationGesture",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gestures::RotationGesture"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::gestures::RotationGesture"
        }
      }
    },
    "bevy_input::gestures::RotationGesture::eq": {
      "namespace": "bevy_input::gestures::RotationGesture",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::gestures::RotationGesture"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::gestures::RotationGesture"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::keyboard::Key::assert_receiver_is_total_eq": {
      "namespace": "bevy_input::keyboard::Key",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::Key"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_input::keyboard::Key::clone": {
      "namespace": "bevy_input::keyboard::Key",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::Key"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::keyboard::Key"
        }
      }
    },
    "bevy_input::keyboard::Key::eq": {
      "namespace": "bevy_input::keyboard::Key",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::Key"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::keyboard::Key"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::keyboard::KeyCode::assert_receiver_is_total_eq": {
      "namespace": "bevy_input::keyboard::KeyCode",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::KeyCode"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_input::keyboard::KeyCode::clone": {
      "namespace": "bevy_input::keyboard::KeyCode",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::KeyCode"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::keyboard::KeyCode"
        }
      }
    },
    "bevy_input::keyboard::KeyCode::eq": {
      "namespace": "bevy_input::keyboard::KeyCode",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::KeyCode"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::keyboard::KeyCode"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::keyboard::KeyboardFocusLost::assert_receiver_is_total_eq": {
      "namespace": "bevy_input::keyboard::KeyboardFocusLost",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::KeyboardFocusLost"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_input::keyboard::KeyboardFocusLost::clone": {
      "namespace": "bevy_input::keyboard::KeyboardFocusLost",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::KeyboardFocusLost"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::keyboard::KeyboardFocusLost"
        }
      }
    },
    "bevy_input::keyboard::KeyboardFocusLost::eq": {
      "namespace": "bevy_input::keyboard::KeyboardFocusLost",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::KeyboardFocusLost"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::keyboard::KeyboardFocusLost"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::keyboard::KeyboardInput::assert_receiver_is_total_eq": {
      "namespace": "bevy_input::keyboard::KeyboardInput",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::KeyboardInput"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_input::keyboard::KeyboardInput::clone": {
      "namespace": "bevy_input::keyboard::KeyboardInput",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::KeyboardInput"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::keyboard::KeyboardInput"
        }
      }
    },
    "bevy_input::keyboard::KeyboardInput::eq": {
      "namespace": "bevy_input::keyboard::KeyboardInput",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::KeyboardInput"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::keyboard::KeyboardInput"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::keyboard::NativeKey::assert_receiver_is_total_eq": {
      "namespace": "bevy_input::keyboard::NativeKey",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::NativeKey"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_input::keyboard::NativeKey::clone": {
      "namespace": "bevy_input::keyboard::NativeKey",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::NativeKey"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::keyboard::NativeKey"
        }
      }
    },
    "bevy_input::keyboard::NativeKey::eq": {
      "namespace": "bevy_input::keyboard::NativeKey",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::NativeKey"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::keyboard::NativeKey"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::keyboard::NativeKeyCode::assert_receiver_is_total_eq": {
      "namespace": "bevy_input::keyboard::NativeKeyCode",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::NativeKeyCode"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_input::keyboard::NativeKeyCode::clone": {
      "namespace": "bevy_input::keyboard::NativeKeyCode",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::NativeKeyCode"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::keyboard::NativeKeyCode"
        }
      }
    },
    "bevy_input::keyboard::NativeKeyCode::eq": {
      "namespace": "bevy_input::keyboard::NativeKeyCode",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::keyboard::NativeKeyCode"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::keyboard::NativeKeyCode"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::mouse::AccumulatedMouseMotion::clone": {
      "namespace": "bevy_input::mouse::AccumulatedMouseMotion",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::AccumulatedMouseMotion"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::mouse::AccumulatedMouseMotion"
        }
      }
    },
    "bevy_input::mouse::AccumulatedMouseMotion::eq": {
      "namespace": "bevy_input::mouse::AccumulatedMouseMotion",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::AccumulatedMouseMotion"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::mouse::AccumulatedMouseMotion"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::mouse::AccumulatedMouseScroll::clone": {
      "namespace": "bevy_input::mouse::AccumulatedMouseScroll",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::AccumulatedMouseScroll"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::mouse::AccumulatedMouseScroll"
        }
      }
    },
    "bevy_input::mouse::AccumulatedMouseScroll::eq": {
      "namespace": "bevy_input::mouse::AccumulatedMouseScroll",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::AccumulatedMouseScroll"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::mouse::AccumulatedMouseScroll"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::mouse::MouseButton::assert_receiver_is_total_eq": {
      "namespace": "bevy_input::mouse::MouseButton",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseButton"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_input::mouse::MouseButton::clone": {
      "namespace": "bevy_input::mouse::MouseButton",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseButton"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::mouse::MouseButton"
        }
      }
    },
    "bevy_input::mouse::MouseButton::eq": {
      "namespace": "bevy_input::mouse::MouseButton",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseButton"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseButton"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::mouse::MouseButtonInput::assert_receiver_is_total_eq": {
      "namespace": "bevy_input::mouse::MouseButtonInput",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseButtonInput"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_input::mouse::MouseButtonInput::clone": {
      "namespace": "bevy_input::mouse::MouseButtonInput",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseButtonInput"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::mouse::MouseButtonInput"
        }
      }
    },
    "bevy_input::mouse::MouseButtonInput::eq": {
      "namespace": "bevy_input::mouse::MouseButtonInput",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseButtonInput"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseButtonInput"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::mouse::MouseMotion::clone": {
      "namespace": "bevy_input::mouse::MouseMotion",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseMotion"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::mouse::MouseMotion"
        }
      }
    },
    "bevy_input::mouse::MouseMotion::eq": {
      "namespace": "bevy_input::mouse::MouseMotion",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseMotion"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseMotion"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::mouse::MouseScrollUnit::assert_receiver_is_total_eq": {
      "namespace": "bevy_input::mouse::MouseScrollUnit",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseScrollUnit"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_input::mouse::MouseScrollUnit::clone": {
      "namespace": "bevy_input::mouse::MouseScrollUnit",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseScrollUnit"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::mouse::MouseScrollUnit"
        }
      }
    },
    "bevy_input::mouse::MouseScrollUnit::eq": {
      "namespace": "bevy_input::mouse::MouseScrollUnit",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseScrollUnit"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseScrollUnit"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::mouse::MouseWheel::clone": {
      "namespace": "bevy_input::mouse::MouseWheel",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseWheel"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::mouse::MouseWheel"
        }
      }
    },
    "bevy_input::mouse::MouseWheel::eq": {
      "namespace": "bevy_input::mouse::MouseWheel",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseWheel"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::mouse::MouseWheel"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::touch::ForceTouch::clone": {
      "namespace": "bevy_input::touch::ForceTouch",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::touch::ForceTouch"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::touch::ForceTouch"
        }
      }
    },
    "bevy_input::touch::ForceTouch::eq": {
      "namespace": "bevy_input::touch::ForceTouch",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::touch::ForceTouch"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::touch::ForceTouch"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::touch::TouchInput::clone": {
      "namespace": "bevy_input::touch::TouchInput",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::touch::TouchInput"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::touch::TouchInput"
        }
      }
    },
    "bevy_input::touch::TouchInput::eq": {
      "namespace": "bevy_input::touch::TouchInput",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::touch::TouchInput"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::touch::TouchInput"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_input::touch::TouchPhase::assert_receiver_is_total_eq": {
      "namespace": "bevy_input::touch::TouchPhase",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::touch::TouchPhase"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_input::touch::TouchPhase::clone": {
      "namespace": "bevy_input::touch::TouchPhase",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::touch::TouchPhase"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_input::touch::TouchPhase"
        }
      }
    },
    "bevy_input::touch::TouchPhase::eq": {
      "namespace": "bevy_input::touch::TouchPhase",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_input::touch::TouchPhase"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_input::touch::TouchPhase"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::aspect_ratio::AspectRatio::clone": {
      "namespace": "bevy_math::aspect_ratio::AspectRatio",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::aspect_ratio::AspectRatio"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::aspect_ratio::AspectRatio"
        }
      }
    },
    "bevy_math::aspect_ratio::AspectRatio::eq": {
      "namespace": "bevy_math::aspect_ratio::AspectRatio",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::aspect_ratio::AspectRatio"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::aspect_ratio::AspectRatio"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::aspect_ratio::AspectRatio::inverse": {
      "namespace": "bevy_math::aspect_ratio::AspectRatio",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::aspect_ratio::AspectRatio"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::aspect_ratio::AspectRatio"
        }
      },
      "documentation": " Returns the inverse of this aspect ratio (height/width)."
    },
    "bevy_math::aspect_ratio::AspectRatio::is_landscape": {
      "namespace": "bevy_math::aspect_ratio::AspectRatio",
      "identifier": "is_landscape",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::aspect_ratio::AspectRatio"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the aspect ratio represents a landscape orientation."
    },
    "bevy_math::aspect_ratio::AspectRatio::is_portrait": {
      "namespace": "bevy_math::aspect_ratio::AspectRatio",
      "identifier": "is_portrait",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::aspect_ratio::AspectRatio"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the aspect ratio represents a portrait orientation."
    },
    "bevy_math::aspect_ratio::AspectRatio::is_square": {
      "namespace": "bevy_math::aspect_ratio::AspectRatio",
      "identifier": "is_square",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::aspect_ratio::AspectRatio"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the aspect ratio is exactly square."
    },
    "bevy_math::aspect_ratio::AspectRatio::ratio": {
      "namespace": "bevy_math::aspect_ratio::AspectRatio",
      "identifier": "ratio",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::aspect_ratio::AspectRatio"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the aspect ratio as a f32 value."
    },
    "bevy_math::bounding::bounded2d::Aabb2d::bounding_circle": {
      "namespace": "bevy_math::bounding::bounded2d::Aabb2d",
      "identifier": "bounding_circle",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded2d::Aabb2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::bounded2d::BoundingCircle"
        }
      },
      "documentation": " Computes the smallest [`BoundingCircle`] containing this [`Aabb2d`]."
    },
    "bevy_math::bounding::bounded2d::Aabb2d::clone": {
      "namespace": "bevy_math::bounding::bounded2d::Aabb2d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded2d::Aabb2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::bounded2d::Aabb2d"
        }
      }
    },
    "bevy_math::bounding::bounded2d::Aabb2d::closest_point": {
      "namespace": "bevy_math::bounding::bounded2d::Aabb2d",
      "identifier": "closest_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded2d::Aabb2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Finds the point on the AABB that is closest to the given `point`.\n If the point is outside the AABB, the returned point will be on the perimeter of the AABB.\n Otherwise, it will be inside the AABB and returned as is."
    },
    "bevy_math::bounding::bounded2d::Aabb2d::new": {
      "namespace": "bevy_math::bounding::bounded2d::Aabb2d",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "center"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "half_size"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::bounded2d::Aabb2d"
        }
      },
      "documentation": " Constructs an AABB from its center and half-size."
    },
    "bevy_math::bounding::bounded2d::BoundingCircle::aabb_2d": {
      "namespace": "bevy_math::bounding::bounded2d::BoundingCircle",
      "identifier": "aabb_2d",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded2d::BoundingCircle"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::bounded2d::Aabb2d"
        }
      },
      "documentation": " Computes the smallest [`Aabb2d`] containing this [`BoundingCircle`]."
    },
    "bevy_math::bounding::bounded2d::BoundingCircle::clone": {
      "namespace": "bevy_math::bounding::bounded2d::BoundingCircle",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded2d::BoundingCircle"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::bounded2d::BoundingCircle"
        }
      }
    },
    "bevy_math::bounding::bounded2d::BoundingCircle::closest_point": {
      "namespace": "bevy_math::bounding::bounded2d::BoundingCircle",
      "identifier": "closest_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded2d::BoundingCircle"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Finds the point on the bounding circle that is closest to the given `point`.\n If the point is outside the circle, the returned point will be on the perimeter of the circle.\n Otherwise, it will be inside the circle and returned as is."
    },
    "bevy_math::bounding::bounded2d::BoundingCircle::new": {
      "namespace": "bevy_math::bounding::bounded2d::BoundingCircle",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "center"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::bounded2d::BoundingCircle"
        }
      },
      "documentation": " Constructs a bounding circle from its center and radius."
    },
    "bevy_math::bounding::bounded2d::BoundingCircle::radius": {
      "namespace": "bevy_math::bounding::bounded2d::BoundingCircle",
      "identifier": "radius",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded2d::BoundingCircle"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the radius of the bounding circle"
    },
    "bevy_math::bounding::bounded3d::Aabb3d::bounding_sphere": {
      "namespace": "bevy_math::bounding::bounded3d::Aabb3d",
      "identifier": "bounding_sphere",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded3d::Aabb3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::bounded3d::BoundingSphere"
        }
      },
      "documentation": " Computes the smallest [`BoundingSphere`] containing this [`Aabb3d`]."
    },
    "bevy_math::bounding::bounded3d::Aabb3d::clone": {
      "namespace": "bevy_math::bounding::bounded3d::Aabb3d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded3d::Aabb3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::bounded3d::Aabb3d"
        }
      }
    },
    "bevy_math::bounding::bounded3d::BoundingSphere::aabb_3d": {
      "namespace": "bevy_math::bounding::bounded3d::BoundingSphere",
      "identifier": "aabb_3d",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded3d::BoundingSphere"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::bounded3d::Aabb3d"
        }
      },
      "documentation": " Computes the smallest [`Aabb3d`] containing this [`BoundingSphere`]."
    },
    "bevy_math::bounding::bounded3d::BoundingSphere::clone": {
      "namespace": "bevy_math::bounding::bounded3d::BoundingSphere",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded3d::BoundingSphere"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::bounded3d::BoundingSphere"
        }
      }
    },
    "bevy_math::bounding::bounded3d::BoundingSphere::radius": {
      "namespace": "bevy_math::bounding::bounded3d::BoundingSphere",
      "identifier": "radius",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded3d::BoundingSphere"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the radius of the bounding sphere"
    },
    "bevy_math::bounding::raycast2d::AabbCast2d::aabb_collision_at": {
      "namespace": "bevy_math::bounding::raycast2d::AabbCast2d",
      "identifier": "aabb_collision_at",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast2d::AabbCast2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::bounding::bounded2d::Aabb2d"
          },
          "name": "aabb"
        }
      ],
      "return_type": {
        "kind": {
          "option": {
            "primitive": "f32"
          }
        }
      },
      "documentation": " Get the distance at which the [`Aabb2d`]s collide, if at all."
    },
    "bevy_math::bounding::raycast2d::AabbCast2d::clone": {
      "namespace": "bevy_math::bounding::raycast2d::AabbCast2d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast2d::AabbCast2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::raycast2d::AabbCast2d"
        }
      }
    },
    "bevy_math::bounding::raycast2d::AabbCast2d::from_ray": {
      "namespace": "bevy_math::bounding::raycast2d::AabbCast2d",
      "identifier": "from_ray",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::bounding::bounded2d::Aabb2d"
          },
          "name": "aabb"
        },
        {
          "kind": {
            "val": "bevy_math::ray::Ray2d"
          },
          "name": "ray"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::raycast2d::AabbCast2d"
        }
      },
      "documentation": " Construct an [`AabbCast2d`] from an [`Aabb2d`], [`Ray2d`], and max distance."
    },
    "bevy_math::bounding::raycast2d::AabbCast2d::new": {
      "namespace": "bevy_math::bounding::raycast2d::AabbCast2d",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::bounding::bounded2d::Aabb2d"
          },
          "name": "aabb"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "origin"
        },
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "direction"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::raycast2d::AabbCast2d"
        }
      },
      "documentation": " Construct an [`AabbCast2d`] from an [`Aabb2d`], origin, [`Dir2`], and max distance."
    },
    "bevy_math::bounding::raycast2d::BoundingCircleCast::circle_collision_at": {
      "namespace": "bevy_math::bounding::raycast2d::BoundingCircleCast",
      "identifier": "circle_collision_at",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast2d::BoundingCircleCast"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::bounding::bounded2d::BoundingCircle"
          },
          "name": "circle"
        }
      ],
      "return_type": {
        "kind": {
          "option": {
            "primitive": "f32"
          }
        }
      },
      "documentation": " Get the distance at which the [`BoundingCircle`]s collide, if at all."
    },
    "bevy_math::bounding::raycast2d::BoundingCircleCast::clone": {
      "namespace": "bevy_math::bounding::raycast2d::BoundingCircleCast",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast2d::BoundingCircleCast"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::raycast2d::BoundingCircleCast"
        }
      }
    },
    "bevy_math::bounding::raycast2d::BoundingCircleCast::from_ray": {
      "namespace": "bevy_math::bounding::raycast2d::BoundingCircleCast",
      "identifier": "from_ray",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::bounding::bounded2d::BoundingCircle"
          },
          "name": "circle"
        },
        {
          "kind": {
            "val": "bevy_math::ray::Ray2d"
          },
          "name": "ray"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::raycast2d::BoundingCircleCast"
        }
      },
      "documentation": " Construct a [`BoundingCircleCast`] from a [`BoundingCircle`], [`Ray2d`], and max distance."
    },
    "bevy_math::bounding::raycast2d::BoundingCircleCast::new": {
      "namespace": "bevy_math::bounding::raycast2d::BoundingCircleCast",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::bounding::bounded2d::BoundingCircle"
          },
          "name": "circle"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "origin"
        },
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "direction"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::raycast2d::BoundingCircleCast"
        }
      },
      "documentation": " Construct a [`BoundingCircleCast`] from a [`BoundingCircle`], origin, [`Dir2`], and max distance."
    },
    "bevy_math::bounding::raycast2d::RayCast2d::aabb_intersection_at": {
      "namespace": "bevy_math::bounding::raycast2d::RayCast2d",
      "identifier": "aabb_intersection_at",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast2d::RayCast2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded2d::Aabb2d"
          },
          "name": "aabb"
        }
      ],
      "return_type": {
        "kind": {
          "option": {
            "primitive": "f32"
          }
        }
      },
      "documentation": " Get the distance of an intersection with an [`Aabb2d`], if any."
    },
    "bevy_math::bounding::raycast2d::RayCast2d::circle_intersection_at": {
      "namespace": "bevy_math::bounding::raycast2d::RayCast2d",
      "identifier": "circle_intersection_at",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast2d::RayCast2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded2d::BoundingCircle"
          },
          "name": "circle"
        }
      ],
      "return_type": {
        "kind": {
          "option": {
            "primitive": "f32"
          }
        }
      },
      "documentation": " Get the distance of an intersection with a [`BoundingCircle`], if any."
    },
    "bevy_math::bounding::raycast2d::RayCast2d::clone": {
      "namespace": "bevy_math::bounding::raycast2d::RayCast2d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast2d::RayCast2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::raycast2d::RayCast2d"
        }
      }
    },
    "bevy_math::bounding::raycast2d::RayCast2d::direction_recip": {
      "namespace": "bevy_math::bounding::raycast2d::RayCast2d",
      "identifier": "direction_recip",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast2d::RayCast2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Get the cached multiplicative inverse of the direction of the ray."
    },
    "bevy_math::bounding::raycast2d::RayCast2d::from_ray": {
      "namespace": "bevy_math::bounding::raycast2d::RayCast2d",
      "identifier": "from_ray",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::ray::Ray2d"
          },
          "name": "ray"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::raycast2d::RayCast2d"
        }
      },
      "documentation": " Construct a [`RayCast2d`] from a [`Ray2d`] and max distance."
    },
    "bevy_math::bounding::raycast2d::RayCast2d::new": {
      "namespace": "bevy_math::bounding::raycast2d::RayCast2d",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "origin"
        },
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "direction"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::raycast2d::RayCast2d"
        }
      },
      "documentation": " Construct a [`RayCast2d`] from an origin, [`Dir2`], and max distance."
    },
    "bevy_math::bounding::raycast3d::AabbCast3d::aabb_collision_at": {
      "namespace": "bevy_math::bounding::raycast3d::AabbCast3d",
      "identifier": "aabb_collision_at",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast3d::AabbCast3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::bounding::bounded3d::Aabb3d"
          },
          "name": "aabb"
        }
      ],
      "return_type": {
        "kind": {
          "option": {
            "primitive": "f32"
          }
        }
      },
      "documentation": " Get the distance at which the [`Aabb3d`]s collide, if at all."
    },
    "bevy_math::bounding::raycast3d::AabbCast3d::clone": {
      "namespace": "bevy_math::bounding::raycast3d::AabbCast3d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast3d::AabbCast3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::raycast3d::AabbCast3d"
        }
      }
    },
    "bevy_math::bounding::raycast3d::AabbCast3d::from_ray": {
      "namespace": "bevy_math::bounding::raycast3d::AabbCast3d",
      "identifier": "from_ray",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::bounding::bounded3d::Aabb3d"
          },
          "name": "aabb"
        },
        {
          "kind": {
            "val": "bevy_math::ray::Ray3d"
          },
          "name": "ray"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::raycast3d::AabbCast3d"
        }
      },
      "documentation": " Construct an [`AabbCast3d`] from an [`Aabb3d`], [`Ray3d`], and max distance."
    },
    "bevy_math::bounding::raycast3d::BoundingSphereCast::clone": {
      "namespace": "bevy_math::bounding::raycast3d::BoundingSphereCast",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast3d::BoundingSphereCast"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::raycast3d::BoundingSphereCast"
        }
      }
    },
    "bevy_math::bounding::raycast3d::BoundingSphereCast::from_ray": {
      "namespace": "bevy_math::bounding::raycast3d::BoundingSphereCast",
      "identifier": "from_ray",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::bounding::bounded3d::BoundingSphere"
          },
          "name": "sphere"
        },
        {
          "kind": {
            "val": "bevy_math::ray::Ray3d"
          },
          "name": "ray"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::raycast3d::BoundingSphereCast"
        }
      },
      "documentation": " Construct a [`BoundingSphereCast`] from a [`BoundingSphere`], [`Ray3d`], and max distance."
    },
    "bevy_math::bounding::raycast3d::BoundingSphereCast::sphere_collision_at": {
      "namespace": "bevy_math::bounding::raycast3d::BoundingSphereCast",
      "identifier": "sphere_collision_at",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast3d::BoundingSphereCast"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::bounding::bounded3d::BoundingSphere"
          },
          "name": "sphere"
        }
      ],
      "return_type": {
        "kind": {
          "option": {
            "primitive": "f32"
          }
        }
      },
      "documentation": " Get the distance at which the [`BoundingSphere`]s collide, if at all."
    },
    "bevy_math::bounding::raycast3d::RayCast3d::aabb_intersection_at": {
      "namespace": "bevy_math::bounding::raycast3d::RayCast3d",
      "identifier": "aabb_intersection_at",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast3d::RayCast3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded3d::Aabb3d"
          },
          "name": "aabb"
        }
      ],
      "return_type": {
        "kind": {
          "option": {
            "primitive": "f32"
          }
        }
      },
      "documentation": " Get the distance of an intersection with an [`Aabb3d`], if any."
    },
    "bevy_math::bounding::raycast3d::RayCast3d::clone": {
      "namespace": "bevy_math::bounding::raycast3d::RayCast3d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast3d::RayCast3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::raycast3d::RayCast3d"
        }
      }
    },
    "bevy_math::bounding::raycast3d::RayCast3d::direction_recip": {
      "namespace": "bevy_math::bounding::raycast3d::RayCast3d",
      "identifier": "direction_recip",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast3d::RayCast3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Get the cached multiplicative inverse of the direction of the ray."
    },
    "bevy_math::bounding::raycast3d::RayCast3d::from_ray": {
      "namespace": "bevy_math::bounding::raycast3d::RayCast3d",
      "identifier": "from_ray",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::ray::Ray3d"
          },
          "name": "ray"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::bounding::raycast3d::RayCast3d"
        }
      },
      "documentation": " Construct a [`RayCast3d`] from a [`Ray3d`] and max distance."
    },
    "bevy_math::bounding::raycast3d::RayCast3d::sphere_intersection_at": {
      "namespace": "bevy_math::bounding::raycast3d::RayCast3d",
      "identifier": "sphere_intersection_at",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::bounding::raycast3d::RayCast3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::bounding::bounded3d::BoundingSphere"
          },
          "name": "sphere"
        }
      ],
      "return_type": {
        "kind": {
          "option": {
            "primitive": "f32"
          }
        }
      },
      "documentation": " Get the distance of an intersection with a [`BoundingSphere`], if any."
    },
    "bevy_math::compass::CompassOctant::assert_receiver_is_total_eq": {
      "namespace": "bevy_math::compass::CompassOctant",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::compass::CompassOctant"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_math::compass::CompassOctant::clone": {
      "namespace": "bevy_math::compass::CompassOctant",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::compass::CompassOctant"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::compass::CompassOctant"
        }
      }
    },
    "bevy_math::compass::CompassOctant::eq": {
      "namespace": "bevy_math::compass::CompassOctant",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::compass::CompassOctant"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::compass::CompassOctant"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::compass::CompassQuadrant::assert_receiver_is_total_eq": {
      "namespace": "bevy_math::compass::CompassQuadrant",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::compass::CompassQuadrant"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_math::compass::CompassQuadrant::clone": {
      "namespace": "bevy_math::compass::CompassQuadrant",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::compass::CompassQuadrant"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::compass::CompassQuadrant"
        }
      }
    },
    "bevy_math::compass::CompassQuadrant::eq": {
      "namespace": "bevy_math::compass::CompassQuadrant",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::compass::CompassQuadrant"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::compass::CompassQuadrant"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::curve::easing::EaseFunction::clone": {
      "namespace": "bevy_math::curve::easing::EaseFunction",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::curve::easing::EaseFunction"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::curve::easing::EaseFunction"
        }
      }
    },
    "bevy_math::curve::easing::EaseFunction::eq": {
      "namespace": "bevy_math::curve::easing::EaseFunction",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::curve::easing::EaseFunction"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::curve::easing::EaseFunction"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::curve::interval::Interval::clamp": {
      "namespace": "bevy_math::curve::interval::Interval",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::curve::interval::Interval"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Clamp the given `value` to lie within this interval."
    },
    "bevy_math::curve::interval::Interval::clone": {
      "namespace": "bevy_math::curve::interval::Interval",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::curve::interval::Interval"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::curve::interval::Interval"
        }
      }
    },
    "bevy_math::curve::interval::Interval::contains": {
      "namespace": "bevy_math::curve::interval::Interval",
      "identifier": "contains",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::curve::interval::Interval"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "item"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if `item` is contained in this interval."
    },
    "bevy_math::curve::interval::Interval::contains_interval": {
      "namespace": "bevy_math::curve::interval::Interval",
      "identifier": "contains_interval",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::curve::interval::Interval"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::curve::interval::Interval"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if the other interval is contained in this interval.\n This is non-strict: each interval will contain itself."
    },
    "bevy_math::curve::interval::Interval::end": {
      "namespace": "bevy_math::curve::interval::Interval",
      "identifier": "end",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::curve::interval::Interval"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the end of this interval."
    },
    "bevy_math::curve::interval::Interval::eq": {
      "namespace": "bevy_math::curve::interval::Interval",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::curve::interval::Interval"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::curve::interval::Interval"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::curve::interval::Interval::has_finite_end": {
      "namespace": "bevy_math::curve::interval::Interval",
      "identifier": "has_finite_end",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::curve::interval::Interval"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if this interval has a finite end."
    },
    "bevy_math::curve::interval::Interval::has_finite_start": {
      "namespace": "bevy_math::curve::interval::Interval",
      "identifier": "has_finite_start",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::curve::interval::Interval"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if this interval has a finite start."
    },
    "bevy_math::curve::interval::Interval::is_bounded": {
      "namespace": "bevy_math::curve::interval::Interval",
      "identifier": "is_bounded",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::curve::interval::Interval"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if this interval is bounded — that is, if both its start and end are finite.\n Equivalently, an interval is bounded if its length is finite."
    },
    "bevy_math::curve::interval::Interval::length": {
      "namespace": "bevy_math::curve::interval::Interval",
      "identifier": "length",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::curve::interval::Interval"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the length of this interval. Note that the result may be infinite (`f32::INFINITY`)."
    },
    "bevy_math::curve::interval::Interval::start": {
      "namespace": "bevy_math::curve::interval::Interval",
      "identifier": "start",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::curve::interval::Interval"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the start of this interval."
    },
    "bevy_math::direction::Dir2::as_vec2": {
      "namespace": "bevy_math::direction::Dir2",
      "identifier": "as_vec2",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::direction::Dir2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns the inner [`Vec2`]"
    },
    "bevy_math::direction::Dir2::clone": {
      "namespace": "bevy_math::direction::Dir2",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::direction::Dir2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir2"
        }
      }
    },
    "bevy_math::direction::Dir2::eq": {
      "namespace": "bevy_math::direction::Dir2",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::direction::Dir2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::direction::Dir2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::direction::Dir2::fast_renormalize": {
      "namespace": "bevy_math::direction::Dir2",
      "identifier": "fast_renormalize",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir2"
        }
      },
      "documentation": " Returns `self` after an approximate normalization, assuming the value is already nearly normalized.\n Useful for preventing numerical error accumulation.\n See [`Dir3::fast_renormalize`] for an example of when such error accumulation might occur."
    },
    "bevy_math::direction::Dir2::from_xy_unchecked": {
      "namespace": "bevy_math::direction::Dir2",
      "identifier": "from_xy_unchecked",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir2"
        }
      },
      "documentation": " Create a direction from its `x` and `y` components, assuming the resulting vector is normalized.\n # Warning\n The vector produced from `x` and `y` must be normalized, i.e its length must be `1.0`."
    },
    "bevy_math::direction::Dir2::mul": {
      "namespace": "bevy_math::direction::Dir2",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "bevy_math::direction::Dir2::neg": {
      "namespace": "bevy_math::direction::Dir2",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir2"
        }
      }
    },
    "bevy_math::direction::Dir2::new_unchecked": {
      "namespace": "bevy_math::direction::Dir2",
      "identifier": "new_unchecked",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir2"
        }
      },
      "documentation": " Create a [`Dir2`] from a [`Vec2`] that is already normalized.\n # Warning\n `value` must be normalized, i.e its length must be `1.0`."
    },
    "bevy_math::direction::Dir2::rotation_from": {
      "namespace": "bevy_math::direction::Dir2",
      "identifier": "rotation_from",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      },
      "documentation": " Get the rotation that rotates `other` to this direction."
    },
    "bevy_math::direction::Dir2::rotation_from_x": {
      "namespace": "bevy_math::direction::Dir2",
      "identifier": "rotation_from_x",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      },
      "documentation": " Get the rotation that rotates the X-axis to this direction."
    },
    "bevy_math::direction::Dir2::rotation_from_y": {
      "namespace": "bevy_math::direction::Dir2",
      "identifier": "rotation_from_y",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      },
      "documentation": " Get the rotation that rotates the Y-axis to this direction."
    },
    "bevy_math::direction::Dir2::rotation_to": {
      "namespace": "bevy_math::direction::Dir2",
      "identifier": "rotation_to",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      },
      "documentation": " Get the rotation that rotates this direction to `other`."
    },
    "bevy_math::direction::Dir2::rotation_to_x": {
      "namespace": "bevy_math::direction::Dir2",
      "identifier": "rotation_to_x",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      },
      "documentation": " Get the rotation that rotates this direction to the X-axis."
    },
    "bevy_math::direction::Dir2::rotation_to_y": {
      "namespace": "bevy_math::direction::Dir2",
      "identifier": "rotation_to_y",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      },
      "documentation": " Get the rotation that rotates this direction to the Y-axis."
    },
    "bevy_math::direction::Dir2::slerp": {
      "namespace": "bevy_math::direction::Dir2",
      "identifier": "slerp",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir2"
        }
      },
      "documentation": " Performs a spherical linear interpolation between `self` and `rhs`\n based on the value `s`.\n This corresponds to interpolating between the two directions at a constant angular velocity.\n When `s == 0.0`, the result will be equal to `self`.\n When `s == 1.0`, the result will be equal to `rhs`.\n # Example\n ```\n # use bevy_math::Dir2;\n # use approx::{assert_relative_eq, RelativeEq};\n #\n let dir1 = Dir2::X;\n let dir2 = Dir2::Y;\n let result1 = dir1.slerp(dir2, 1.0 / 3.0);\n assert_relative_eq!(result1, Dir2::from_xy(0.75_f32.sqrt(), 0.5).unwrap());\n let result2 = dir1.slerp(dir2, 0.5);\n assert_relative_eq!(result2, Dir2::from_xy(0.5_f32.sqrt(), 0.5_f32.sqrt()).unwrap());\n ```"
    },
    "bevy_math::direction::Dir3::as_vec3": {
      "namespace": "bevy_math::direction::Dir3",
      "identifier": "as_vec3",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::direction::Dir3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns the inner [`Vec3`]"
    },
    "bevy_math::direction::Dir3::clone": {
      "namespace": "bevy_math::direction::Dir3",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::direction::Dir3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      }
    },
    "bevy_math::direction::Dir3::eq": {
      "namespace": "bevy_math::direction::Dir3",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::direction::Dir3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::direction::Dir3"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::direction::Dir3::fast_renormalize": {
      "namespace": "bevy_math::direction::Dir3",
      "identifier": "fast_renormalize",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": " Returns `self` after an approximate normalization, assuming the value is already nearly normalized.\n Useful for preventing numerical error accumulation.\n # Example\n The following seemingly benign code would start accumulating errors over time,\n leading to `dir` eventually not being normalized anymore.\n ```\n # use bevy_math::prelude::*;\n # let N: usize = 200;\n let mut dir = Dir3::X;\n let quaternion = Quat::from_euler(EulerRot::XYZ, 1.0, 2.0, 3.0);\n for i in 0..N {\n     dir = quaternion * dir;\n }\n ```\n Instead, do the following.\n ```\n # use bevy_math::prelude::*;\n # let N: usize = 200;\n let mut dir = Dir3::X;\n let quaternion = Quat::from_euler(EulerRot::XYZ, 1.0, 2.0, 3.0);\n for i in 0..N {\n     dir = quaternion * dir;\n     dir = dir.fast_renormalize();\n }\n ```"
    },
    "bevy_math::direction::Dir3::from_xyz_unchecked": {
      "namespace": "bevy_math::direction::Dir3",
      "identifier": "from_xyz_unchecked",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": " Create a direction from its `x`, `y`, and `z` components, assuming the resulting vector is normalized.\n # Warning\n The vector produced from `x`, `y`, and `z` must be normalized, i.e its length must be `1.0`."
    },
    "bevy_math::direction::Dir3::mul": {
      "namespace": "bevy_math::direction::Dir3",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "bevy_math::direction::Dir3::neg": {
      "namespace": "bevy_math::direction::Dir3",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      }
    },
    "bevy_math::direction::Dir3::new_unchecked": {
      "namespace": "bevy_math::direction::Dir3",
      "identifier": "new_unchecked",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": " Create a [`Dir3`] from a [`Vec3`] that is already normalized.\n # Warning\n `value` must be normalized, i.e its length must be `1.0`."
    },
    "bevy_math::direction::Dir3::slerp": {
      "namespace": "bevy_math::direction::Dir3",
      "identifier": "slerp",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::direction::Dir3"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": " Performs a spherical linear interpolation between `self` and `rhs`\n based on the value `s`.\n This corresponds to interpolating between the two directions at a constant angular velocity.\n When `s == 0.0`, the result will be equal to `self`.\n When `s == 1.0`, the result will be equal to `rhs`.\n # Example\n ```\n # use bevy_math::Dir3;\n # use approx::{assert_relative_eq, RelativeEq};\n #\n let dir1 = Dir3::X;\n let dir2 = Dir3::Y;\n let result1 = dir1.slerp(dir2, 1.0 / 3.0);\n assert_relative_eq!(\n     result1,\n     Dir3::from_xyz(0.75_f32.sqrt(), 0.5, 0.0).unwrap(),\n     epsilon = 0.000001\n );\n let result2 = dir1.slerp(dir2, 0.5);\n assert_relative_eq!(result2, Dir3::from_xyz(0.5_f32.sqrt(), 0.5_f32.sqrt(), 0.0).unwrap());\n ```"
    },
    "bevy_math::direction::Dir3A::as_vec3a": {
      "namespace": "bevy_math::direction::Dir3A",
      "identifier": "as_vec3a",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::direction::Dir3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns the inner [`Vec3A`]"
    },
    "bevy_math::direction::Dir3A::clone": {
      "namespace": "bevy_math::direction::Dir3A",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::direction::Dir3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3A"
        }
      }
    },
    "bevy_math::direction::Dir3A::eq": {
      "namespace": "bevy_math::direction::Dir3A",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::direction::Dir3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::direction::Dir3A"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::direction::Dir3A::fast_renormalize": {
      "namespace": "bevy_math::direction::Dir3A",
      "identifier": "fast_renormalize",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3A"
        }
      },
      "documentation": " Returns `self` after an approximate normalization, assuming the value is already nearly normalized.\n Useful for preventing numerical error accumulation.\n See [`Dir3::fast_renormalize`] for an example of when such error accumulation might occur."
    },
    "bevy_math::direction::Dir3A::from_xyz_unchecked": {
      "namespace": "bevy_math::direction::Dir3A",
      "identifier": "from_xyz_unchecked",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3A"
        }
      },
      "documentation": " Create a direction from its `x`, `y`, and `z` components, assuming the resulting vector is normalized.\n # Warning\n The vector produced from `x`, `y`, and `z` must be normalized, i.e its length must be `1.0`."
    },
    "bevy_math::direction::Dir3A::mul": {
      "namespace": "bevy_math::direction::Dir3A",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "bevy_math::direction::Dir3A::neg": {
      "namespace": "bevy_math::direction::Dir3A",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3A"
        }
      }
    },
    "bevy_math::direction::Dir3A::new_unchecked": {
      "namespace": "bevy_math::direction::Dir3A",
      "identifier": "new_unchecked",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3A"
        }
      },
      "documentation": " Create a [`Dir3A`] from a [`Vec3A`] that is already normalized.\n # Warning\n `value` must be normalized, i.e its length must be `1.0`."
    },
    "bevy_math::direction::Dir3A::slerp": {
      "namespace": "bevy_math::direction::Dir3A",
      "identifier": "slerp",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::direction::Dir3A"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3A"
        }
      },
      "documentation": " Performs a spherical linear interpolation between `self` and `rhs`\n based on the value `s`.\n This corresponds to interpolating between the two directions at a constant angular velocity.\n When `s == 0.0`, the result will be equal to `self`.\n When `s == 1.0`, the result will be equal to `rhs`.\n # Example\n ```\n # use bevy_math::Dir3A;\n # use approx::{assert_relative_eq, RelativeEq};\n #\n let dir1 = Dir3A::X;\n let dir2 = Dir3A::Y;\n let result1 = dir1.slerp(dir2, 1.0 / 3.0);\n assert_relative_eq!(\n     result1,\n     Dir3A::from_xyz(0.75_f32.sqrt(), 0.5, 0.0).unwrap(),\n     epsilon = 0.000001\n );\n let result2 = dir1.slerp(dir2, 0.5);\n assert_relative_eq!(result2, Dir3A::from_xyz(0.5_f32.sqrt(), 0.5_f32.sqrt(), 0.0).unwrap());\n ```"
    },
    "bevy_math::float_ord::FloatOrd::clone": {
      "namespace": "bevy_math::float_ord::FloatOrd",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::float_ord::FloatOrd"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::float_ord::FloatOrd"
        }
      }
    },
    "bevy_math::float_ord::FloatOrd::eq": {
      "namespace": "bevy_math::float_ord::FloatOrd",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::float_ord::FloatOrd"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::float_ord::FloatOrd"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::float_ord::FloatOrd::ge": {
      "namespace": "bevy_math::float_ord::FloatOrd",
      "identifier": "ge",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::float_ord::FloatOrd"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::float_ord::FloatOrd"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::float_ord::FloatOrd::gt": {
      "namespace": "bevy_math::float_ord::FloatOrd",
      "identifier": "gt",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::float_ord::FloatOrd"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::float_ord::FloatOrd"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::float_ord::FloatOrd::le": {
      "namespace": "bevy_math::float_ord::FloatOrd",
      "identifier": "le",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::float_ord::FloatOrd"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::float_ord::FloatOrd"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::float_ord::FloatOrd::lt": {
      "namespace": "bevy_math::float_ord::FloatOrd",
      "identifier": "lt",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::float_ord::FloatOrd"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::float_ord::FloatOrd"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::float_ord::FloatOrd::neg": {
      "namespace": "bevy_math::float_ord::FloatOrd",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::float_ord::FloatOrd"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::float_ord::FloatOrd"
        }
      }
    },
    "bevy_math::isometry::Isometry2d::clone": {
      "namespace": "bevy_math::isometry::Isometry2d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::isometry::Isometry2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry2d"
        }
      }
    },
    "bevy_math::isometry::Isometry2d::eq": {
      "namespace": "bevy_math::isometry::Isometry2d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::isometry::Isometry2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::isometry::Isometry2d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::isometry::Isometry2d::from_rotation": {
      "namespace": "bevy_math::isometry::Isometry2d",
      "identifier": "from_rotation",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry2d"
        }
      },
      "documentation": " Create a two-dimensional isometry from a rotation."
    },
    "bevy_math::isometry::Isometry2d::from_translation": {
      "namespace": "bevy_math::isometry::Isometry2d",
      "identifier": "from_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry2d"
        }
      },
      "documentation": " Create a two-dimensional isometry from a translation."
    },
    "bevy_math::isometry::Isometry2d::from_xy": {
      "namespace": "bevy_math::isometry::Isometry2d",
      "identifier": "from_xy",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry2d"
        }
      },
      "documentation": " Create a two-dimensional isometry from a translation with the given `x` and `y` components."
    },
    "bevy_math::isometry::Isometry2d::inverse": {
      "namespace": "bevy_math::isometry::Isometry2d",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::isometry::Isometry2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry2d"
        }
      },
      "documentation": " The inverse isometry that undoes this one."
    },
    "bevy_math::isometry::Isometry2d::inverse_mul": {
      "namespace": "bevy_math::isometry::Isometry2d",
      "identifier": "inverse_mul",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::isometry::Isometry2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::isometry::Isometry2d"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry2d"
        }
      },
      "documentation": " Compute `iso1.inverse() * iso2` in a more efficient way for one-shot cases.\n If the same isometry is used multiple times, it is more efficient to instead compute\n the inverse once and use that for each transformation."
    },
    "bevy_math::isometry::Isometry2d::inverse_transform_point": {
      "namespace": "bevy_math::isometry::Isometry2d",
      "identifier": "inverse_transform_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::isometry::Isometry2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Transform a point by rotating and translating it using the inverse of this isometry.\n This is more efficient than `iso.inverse().transform_point(point)` for one-shot cases.\n If the same isometry is used multiple times, it is more efficient to instead compute\n the inverse once and use that for each transformation."
    },
    "bevy_math::isometry::Isometry2d::mul": {
      "namespace": "bevy_math::isometry::Isometry2d",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::isometry::Isometry2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::isometry::Isometry2d"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry2d"
        }
      }
    },
    "bevy_math::isometry::Isometry2d::mul-1": {
      "namespace": "bevy_math::isometry::Isometry2d",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::isometry::Isometry2d"
          }
        },
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir2"
        }
      }
    },
    "bevy_math::isometry::Isometry2d::mul-2": {
      "namespace": "bevy_math::isometry::Isometry2d",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::isometry::Isometry2d"
          }
        },
        {
          "kind": {
            "val": "glam::Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "bevy_math::isometry::Isometry2d::new": {
      "namespace": "bevy_math::isometry::Isometry2d",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "translation"
        },
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry2d"
        }
      },
      "documentation": " Create a two-dimensional isometry from a rotation and a translation."
    },
    "bevy_math::isometry::Isometry2d::transform_point": {
      "namespace": "bevy_math::isometry::Isometry2d",
      "identifier": "transform_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::isometry::Isometry2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Transform a point by rotating and translating it using this isometry."
    },
    "bevy_math::isometry::Isometry3d::clone": {
      "namespace": "bevy_math::isometry::Isometry3d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::isometry::Isometry3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry3d"
        }
      }
    },
    "bevy_math::isometry::Isometry3d::eq": {
      "namespace": "bevy_math::isometry::Isometry3d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::isometry::Isometry3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::isometry::Isometry3d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::isometry::Isometry3d::from_rotation": {
      "namespace": "bevy_math::isometry::Isometry3d",
      "identifier": "from_rotation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry3d"
        }
      },
      "documentation": " Create a three-dimensional isometry from a rotation."
    },
    "bevy_math::isometry::Isometry3d::from_xyz": {
      "namespace": "bevy_math::isometry::Isometry3d",
      "identifier": "from_xyz",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry3d"
        }
      },
      "documentation": " Create a three-dimensional isometry from a translation with the given `x`, `y`, and `z` components."
    },
    "bevy_math::isometry::Isometry3d::inverse": {
      "namespace": "bevy_math::isometry::Isometry3d",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::isometry::Isometry3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry3d"
        }
      },
      "documentation": " The inverse isometry that undoes this one."
    },
    "bevy_math::isometry::Isometry3d::inverse_mul": {
      "namespace": "bevy_math::isometry::Isometry3d",
      "identifier": "inverse_mul",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::isometry::Isometry3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::isometry::Isometry3d"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry3d"
        }
      },
      "documentation": " Compute `iso1.inverse() * iso2` in a more efficient way for one-shot cases.\n If the same isometry is used multiple times, it is more efficient to instead compute\n the inverse once and use that for each transformation."
    },
    "bevy_math::isometry::Isometry3d::mul": {
      "namespace": "bevy_math::isometry::Isometry3d",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::isometry::Isometry3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::isometry::Isometry3d"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry3d"
        }
      }
    },
    "bevy_math::isometry::Isometry3d::mul-1": {
      "namespace": "bevy_math::isometry::Isometry3d",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::isometry::Isometry3d"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "bevy_math::isometry::Isometry3d::mul-2": {
      "namespace": "bevy_math::isometry::Isometry3d",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::isometry::Isometry3d"
          }
        },
        {
          "kind": {
            "val": "bevy_math::direction::Dir3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      }
    },
    "bevy_math::isometry::Isometry3d::mul-3": {
      "namespace": "bevy_math::isometry::Isometry3d",
      "identifier": "mul-3",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::isometry::Isometry3d"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "bevy_math::primitives::dim2::Annulus::clone": {
      "namespace": "bevy_math::primitives::dim2::Annulus",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Annulus"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Annulus"
        }
      }
    },
    "bevy_math::primitives::dim2::Annulus::closest_point": {
      "namespace": "bevy_math::primitives::dim2::Annulus",
      "identifier": "closest_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Annulus"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Finds the point on the annulus that is closest to the given `point`:\n - If the point is outside of the annulus completely, the returned point will be on the outer perimeter.\n - If the point is inside of the inner circle (hole) of the annulus, the returned point will be on the inner perimeter.\n - Otherwise, the returned point is overlapping the annulus and returned as is."
    },
    "bevy_math::primitives::dim2::Annulus::diameter": {
      "namespace": "bevy_math::primitives::dim2::Annulus",
      "identifier": "diameter",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Annulus"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the diameter of the annulus"
    },
    "bevy_math::primitives::dim2::Annulus::eq": {
      "namespace": "bevy_math::primitives::dim2::Annulus",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Annulus"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Annulus"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim2::Annulus::new": {
      "namespace": "bevy_math::primitives::dim2::Annulus",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "inner_radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "outer_radius"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Annulus"
        }
      },
      "documentation": " Create a new [`Annulus`] from the radii of the inner and outer circle"
    },
    "bevy_math::primitives::dim2::Annulus::thickness": {
      "namespace": "bevy_math::primitives::dim2::Annulus",
      "identifier": "thickness",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Annulus"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the thickness of the annulus"
    },
    "bevy_math::primitives::dim2::Arc2d::angle": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "angle",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Arc2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the angle of the arc"
    },
    "bevy_math::primitives::dim2::Arc2d::apothem": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "apothem",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Arc2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the length of the apothem of this arc, that is,\n the distance from the center of the circle to the midpoint of the chord, in the direction of the midpoint of the arc.\n Equivalently, the [`radius`](Self::radius) minus the [`sagitta`](Self::sagitta).\n Note that for a [`major`](Self::is_major) arc, the apothem will be negative."
    },
    "bevy_math::primitives::dim2::Arc2d::chord_length": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "chord_length",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Arc2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the distance between the endpoints (the length of the chord)"
    },
    "bevy_math::primitives::dim2::Arc2d::chord_midpoint": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "chord_midpoint",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Arc2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Get the midpoint of the two endpoints (the midpoint of the chord)"
    },
    "bevy_math::primitives::dim2::Arc2d::clone": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Arc2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Arc2d"
        }
      }
    },
    "bevy_math::primitives::dim2::Arc2d::eq": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Arc2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Arc2d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim2::Arc2d::from_degrees": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "from_degrees",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Arc2d"
        }
      },
      "documentation": " Create a new [`Arc2d`] from a `radius` and an `angle` in degrees."
    },
    "bevy_math::primitives::dim2::Arc2d::from_radians": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "from_radians",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Arc2d"
        }
      },
      "documentation": " Create a new [`Arc2d`] from a `radius` and an `angle` in radians"
    },
    "bevy_math::primitives::dim2::Arc2d::from_turns": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "from_turns",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "fraction"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Arc2d"
        }
      },
      "documentation": " Create a new [`Arc2d`] from a `radius` and a `fraction` of a single turn.\n For instance, `0.5` turns is a semicircle."
    },
    "bevy_math::primitives::dim2::Arc2d::half_chord_length": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "half_chord_length",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Arc2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get half the distance between the endpoints (half the length of the chord)"
    },
    "bevy_math::primitives::dim2::Arc2d::is_major": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "is_major",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Arc2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Produces true if the arc is at least half a circle.\n **Note:** This is not the negation of [`is_minor`](Self::is_minor): an exact semicircle is both major and minor."
    },
    "bevy_math::primitives::dim2::Arc2d::is_minor": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "is_minor",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Arc2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Produces true if the arc is at most half a circle.\n **Note:** This is not the negation of [`is_major`](Self::is_major): an exact semicircle is both major and minor."
    },
    "bevy_math::primitives::dim2::Arc2d::left_endpoint": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "left_endpoint",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Arc2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Get the left-hand end point of the arc"
    },
    "bevy_math::primitives::dim2::Arc2d::length": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "length",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Arc2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the length of the arc"
    },
    "bevy_math::primitives::dim2::Arc2d::midpoint": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "midpoint",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Arc2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Get the midpoint of the arc"
    },
    "bevy_math::primitives::dim2::Arc2d::new": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "half_angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Arc2d"
        }
      },
      "documentation": " Create a new [`Arc2d`] from a `radius` and a `half_angle`"
    },
    "bevy_math::primitives::dim2::Arc2d::right_endpoint": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "right_endpoint",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Arc2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Get the right-hand end point of the arc"
    },
    "bevy_math::primitives::dim2::Arc2d::sagitta": {
      "namespace": "bevy_math::primitives::dim2::Arc2d",
      "identifier": "sagitta",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Arc2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the length of the sagitta of this arc, that is,\n the length of the line between the midpoints of the arc and its chord.\n Equivalently, the height of the triangle whose base is the chord and whose apex is the midpoint of the arc.\n The sagitta is also the sum of the [`radius`](Self::radius) and the [`apothem`](Self::apothem)."
    },
    "bevy_math::primitives::dim2::Capsule2d::clone": {
      "namespace": "bevy_math::primitives::dim2::Capsule2d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Capsule2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Capsule2d"
        }
      }
    },
    "bevy_math::primitives::dim2::Capsule2d::eq": {
      "namespace": "bevy_math::primitives::dim2::Capsule2d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Capsule2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Capsule2d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim2::Capsule2d::new": {
      "namespace": "bevy_math::primitives::dim2::Capsule2d",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "length"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Capsule2d"
        }
      },
      "documentation": " Create a new `Capsule2d` from a radius and length"
    },
    "bevy_math::primitives::dim2::Capsule2d::to_inner_rectangle": {
      "namespace": "bevy_math::primitives::dim2::Capsule2d",
      "identifier": "to_inner_rectangle",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Capsule2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Rectangle"
        }
      },
      "documentation": " Get the part connecting the semicircular ends of the capsule as a [`Rectangle`]"
    },
    "bevy_math::primitives::dim2::Circle::clone": {
      "namespace": "bevy_math::primitives::dim2::Circle",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Circle"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Circle"
        }
      }
    },
    "bevy_math::primitives::dim2::Circle::closest_point": {
      "namespace": "bevy_math::primitives::dim2::Circle",
      "identifier": "closest_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Circle"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Finds the point on the circle that is closest to the given `point`.\n If the point is outside the circle, the returned point will be on the perimeter of the circle.\n Otherwise, it will be inside the circle and returned as is."
    },
    "bevy_math::primitives::dim2::Circle::diameter": {
      "namespace": "bevy_math::primitives::dim2::Circle",
      "identifier": "diameter",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Circle"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the diameter of the circle"
    },
    "bevy_math::primitives::dim2::Circle::eq": {
      "namespace": "bevy_math::primitives::dim2::Circle",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Circle"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Circle"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim2::Circle::new": {
      "namespace": "bevy_math::primitives::dim2::Circle",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Circle"
        }
      },
      "documentation": " Create a new [`Circle`] from a `radius`"
    },
    "bevy_math::primitives::dim2::CircularSector::angle": {
      "namespace": "bevy_math::primitives::dim2::CircularSector",
      "identifier": "angle",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSector"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the angle of the sector"
    },
    "bevy_math::primitives::dim2::CircularSector::apothem": {
      "namespace": "bevy_math::primitives::dim2::CircularSector",
      "identifier": "apothem",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSector"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the length of the apothem of this sector\n See [`Arc2d::apothem`]"
    },
    "bevy_math::primitives::dim2::CircularSector::arc_length": {
      "namespace": "bevy_math::primitives::dim2::CircularSector",
      "identifier": "arc_length",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSector"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the length of the arc defining the sector"
    },
    "bevy_math::primitives::dim2::CircularSector::chord_length": {
      "namespace": "bevy_math::primitives::dim2::CircularSector",
      "identifier": "chord_length",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSector"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the length of the chord defined by the sector\n See [`Arc2d::chord_length`]"
    },
    "bevy_math::primitives::dim2::CircularSector::chord_midpoint": {
      "namespace": "bevy_math::primitives::dim2::CircularSector",
      "identifier": "chord_midpoint",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSector"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Get the midpoint of the chord defined by the sector\n See [`Arc2d::chord_midpoint`]"
    },
    "bevy_math::primitives::dim2::CircularSector::clone": {
      "namespace": "bevy_math::primitives::dim2::CircularSector",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSector"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::CircularSector"
        }
      }
    },
    "bevy_math::primitives::dim2::CircularSector::eq": {
      "namespace": "bevy_math::primitives::dim2::CircularSector",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSector"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSector"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim2::CircularSector::from_degrees": {
      "namespace": "bevy_math::primitives::dim2::CircularSector",
      "identifier": "from_degrees",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::CircularSector"
        }
      },
      "documentation": " Create a new [`CircularSector`] from a `radius` and an `angle` in degrees."
    },
    "bevy_math::primitives::dim2::CircularSector::from_radians": {
      "namespace": "bevy_math::primitives::dim2::CircularSector",
      "identifier": "from_radians",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::CircularSector"
        }
      },
      "documentation": " Create a new [`CircularSector`] from a `radius` and an `angle` in radians."
    },
    "bevy_math::primitives::dim2::CircularSector::from_turns": {
      "namespace": "bevy_math::primitives::dim2::CircularSector",
      "identifier": "from_turns",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "fraction"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::CircularSector"
        }
      },
      "documentation": " Create a new [`CircularSector`] from a `radius` and a number of `turns` of a circle.\n For instance, `0.5` turns is a semicircle."
    },
    "bevy_math::primitives::dim2::CircularSector::half_angle": {
      "namespace": "bevy_math::primitives::dim2::CircularSector",
      "identifier": "half_angle",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSector"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get half the angle of the sector"
    },
    "bevy_math::primitives::dim2::CircularSector::half_chord_length": {
      "namespace": "bevy_math::primitives::dim2::CircularSector",
      "identifier": "half_chord_length",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSector"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get half the length of the chord defined by the sector\n See [`Arc2d::half_chord_length`]"
    },
    "bevy_math::primitives::dim2::CircularSector::new": {
      "namespace": "bevy_math::primitives::dim2::CircularSector",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::CircularSector"
        }
      },
      "documentation": " Create a new [`CircularSector`] from a `radius` and an `angle`"
    },
    "bevy_math::primitives::dim2::CircularSector::radius": {
      "namespace": "bevy_math::primitives::dim2::CircularSector",
      "identifier": "radius",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSector"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the radius of the sector"
    },
    "bevy_math::primitives::dim2::CircularSector::sagitta": {
      "namespace": "bevy_math::primitives::dim2::CircularSector",
      "identifier": "sagitta",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSector"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the length of the sagitta of this sector\n See [`Arc2d::sagitta`]"
    },
    "bevy_math::primitives::dim2::CircularSegment::angle": {
      "namespace": "bevy_math::primitives::dim2::CircularSegment",
      "identifier": "angle",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSegment"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the angle of the segment"
    },
    "bevy_math::primitives::dim2::CircularSegment::apothem": {
      "namespace": "bevy_math::primitives::dim2::CircularSegment",
      "identifier": "apothem",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSegment"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the length of the apothem of this segment,\n which is the signed distance between the segment and the center of its circle\n See [`Arc2d::apothem`]"
    },
    "bevy_math::primitives::dim2::CircularSegment::arc_length": {
      "namespace": "bevy_math::primitives::dim2::CircularSegment",
      "identifier": "arc_length",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSegment"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the length of the arc defining the segment"
    },
    "bevy_math::primitives::dim2::CircularSegment::chord_length": {
      "namespace": "bevy_math::primitives::dim2::CircularSegment",
      "identifier": "chord_length",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSegment"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the length of the segment's base, also known as its chord"
    },
    "bevy_math::primitives::dim2::CircularSegment::chord_midpoint": {
      "namespace": "bevy_math::primitives::dim2::CircularSegment",
      "identifier": "chord_midpoint",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSegment"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Get the midpoint of the segment's base, also known as its chord"
    },
    "bevy_math::primitives::dim2::CircularSegment::clone": {
      "namespace": "bevy_math::primitives::dim2::CircularSegment",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSegment"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::CircularSegment"
        }
      }
    },
    "bevy_math::primitives::dim2::CircularSegment::eq": {
      "namespace": "bevy_math::primitives::dim2::CircularSegment",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSegment"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSegment"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim2::CircularSegment::from_degrees": {
      "namespace": "bevy_math::primitives::dim2::CircularSegment",
      "identifier": "from_degrees",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::CircularSegment"
        }
      },
      "documentation": " Create a new [`CircularSegment`] from a `radius` and an `angle` in degrees."
    },
    "bevy_math::primitives::dim2::CircularSegment::from_radians": {
      "namespace": "bevy_math::primitives::dim2::CircularSegment",
      "identifier": "from_radians",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::CircularSegment"
        }
      },
      "documentation": " Create a new [`CircularSegment`] from a `radius` and an `angle` in radians."
    },
    "bevy_math::primitives::dim2::CircularSegment::from_turns": {
      "namespace": "bevy_math::primitives::dim2::CircularSegment",
      "identifier": "from_turns",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "fraction"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::CircularSegment"
        }
      },
      "documentation": " Create a new [`CircularSegment`] from a `radius` and a number of `turns` of a circle.\n For instance, `0.5` turns is a semicircle."
    },
    "bevy_math::primitives::dim2::CircularSegment::half_angle": {
      "namespace": "bevy_math::primitives::dim2::CircularSegment",
      "identifier": "half_angle",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSegment"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the half-angle of the segment"
    },
    "bevy_math::primitives::dim2::CircularSegment::half_chord_length": {
      "namespace": "bevy_math::primitives::dim2::CircularSegment",
      "identifier": "half_chord_length",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSegment"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get half the length of the segment's base, also known as its chord"
    },
    "bevy_math::primitives::dim2::CircularSegment::new": {
      "namespace": "bevy_math::primitives::dim2::CircularSegment",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::CircularSegment"
        }
      },
      "documentation": " Create a new [`CircularSegment`] from a `radius`, and an `angle`"
    },
    "bevy_math::primitives::dim2::CircularSegment::radius": {
      "namespace": "bevy_math::primitives::dim2::CircularSegment",
      "identifier": "radius",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSegment"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the radius of the segment"
    },
    "bevy_math::primitives::dim2::CircularSegment::sagitta": {
      "namespace": "bevy_math::primitives::dim2::CircularSegment",
      "identifier": "sagitta",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::CircularSegment"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the length of the sagitta of this segment, also known as its height\n See [`Arc2d::sagitta`]"
    },
    "bevy_math::primitives::dim2::Ellipse::clone": {
      "namespace": "bevy_math::primitives::dim2::Ellipse",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Ellipse"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Ellipse"
        }
      }
    },
    "bevy_math::primitives::dim2::Ellipse::eccentricity": {
      "namespace": "bevy_math::primitives::dim2::Ellipse",
      "identifier": "eccentricity",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Ellipse"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the [eccentricity](https://en.wikipedia.org/wiki/Eccentricity_(mathematics)) of the ellipse.\n It can be thought of as a measure of how \"stretched\" or elongated the ellipse is.\n The value should be in the range [0, 1), where 0 represents a circle, and 1 represents a parabola."
    },
    "bevy_math::primitives::dim2::Ellipse::eq": {
      "namespace": "bevy_math::primitives::dim2::Ellipse",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Ellipse"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Ellipse"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim2::Ellipse::focal_length": {
      "namespace": "bevy_math::primitives::dim2::Ellipse",
      "identifier": "focal_length",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Ellipse"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the focal length of the ellipse. This corresponds to the distance between one of the foci and the center of the ellipse.\n The focal length of an ellipse is related to its eccentricity by `eccentricity = focal_length / semi_major`"
    },
    "bevy_math::primitives::dim2::Ellipse::from_size": {
      "namespace": "bevy_math::primitives::dim2::Ellipse",
      "identifier": "from_size",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "size"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Ellipse"
        }
      },
      "documentation": " Create a new `Ellipse` from a given full size.\n `size.x` is the diameter along the X axis, and `size.y` is the diameter along the Y axis."
    },
    "bevy_math::primitives::dim2::Ellipse::new": {
      "namespace": "bevy_math::primitives::dim2::Ellipse",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "half_width"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "half_height"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Ellipse"
        }
      },
      "documentation": " Create a new `Ellipse` from half of its width and height.\n This corresponds to the two perpendicular radii defining the ellipse."
    },
    "bevy_math::primitives::dim2::Ellipse::semi_major": {
      "namespace": "bevy_math::primitives::dim2::Ellipse",
      "identifier": "semi_major",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Ellipse"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the length of the semi-major axis. This corresponds to the longest radius of the ellipse."
    },
    "bevy_math::primitives::dim2::Ellipse::semi_minor": {
      "namespace": "bevy_math::primitives::dim2::Ellipse",
      "identifier": "semi_minor",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Ellipse"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the length of the semi-minor axis. This corresponds to the shortest radius of the ellipse."
    },
    "bevy_math::primitives::dim2::Line2d::clone": {
      "namespace": "bevy_math::primitives::dim2::Line2d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Line2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Line2d"
        }
      }
    },
    "bevy_math::primitives::dim2::Line2d::eq": {
      "namespace": "bevy_math::primitives::dim2::Line2d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Line2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Line2d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim2::Plane2d::clone": {
      "namespace": "bevy_math::primitives::dim2::Plane2d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Plane2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Plane2d"
        }
      }
    },
    "bevy_math::primitives::dim2::Plane2d::eq": {
      "namespace": "bevy_math::primitives::dim2::Plane2d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Plane2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Plane2d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim2::Plane2d::new": {
      "namespace": "bevy_math::primitives::dim2::Plane2d",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "normal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Plane2d"
        }
      },
      "documentation": " Create a new `Plane2d` from a normal\n # Panics\n Panics if the given `normal` is zero (or very close to zero), or non-finite."
    },
    "bevy_math::primitives::dim2::Rectangle::clone": {
      "namespace": "bevy_math::primitives::dim2::Rectangle",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Rectangle"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Rectangle"
        }
      }
    },
    "bevy_math::primitives::dim2::Rectangle::closest_point": {
      "namespace": "bevy_math::primitives::dim2::Rectangle",
      "identifier": "closest_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Rectangle"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Finds the point on the rectangle that is closest to the given `point`.\n If the point is outside the rectangle, the returned point will be on the perimeter of the rectangle.\n Otherwise, it will be inside the rectangle and returned as is."
    },
    "bevy_math::primitives::dim2::Rectangle::eq": {
      "namespace": "bevy_math::primitives::dim2::Rectangle",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Rectangle"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Rectangle"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim2::Rectangle::from_corners": {
      "namespace": "bevy_math::primitives::dim2::Rectangle",
      "identifier": "from_corners",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "point1"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "point2"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Rectangle"
        }
      },
      "documentation": " Create a new `Rectangle` from two corner points"
    },
    "bevy_math::primitives::dim2::Rectangle::from_length": {
      "namespace": "bevy_math::primitives::dim2::Rectangle",
      "identifier": "from_length",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "length"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Rectangle"
        }
      },
      "documentation": " Create a `Rectangle` from a single length.\n The resulting `Rectangle` will be the same size in every direction."
    },
    "bevy_math::primitives::dim2::Rectangle::from_size": {
      "namespace": "bevy_math::primitives::dim2::Rectangle",
      "identifier": "from_size",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "size"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Rectangle"
        }
      },
      "documentation": " Create a new `Rectangle` from a given full size"
    },
    "bevy_math::primitives::dim2::Rectangle::new": {
      "namespace": "bevy_math::primitives::dim2::Rectangle",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "width"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "height"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Rectangle"
        }
      },
      "documentation": " Create a new `Rectangle` from a full width and height"
    },
    "bevy_math::primitives::dim2::Rectangle::size": {
      "namespace": "bevy_math::primitives::dim2::Rectangle",
      "identifier": "size",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Rectangle"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Get the size of the rectangle"
    },
    "bevy_math::primitives::dim2::RegularPolygon::circumradius": {
      "namespace": "bevy_math::primitives::dim2::RegularPolygon",
      "identifier": "circumradius",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::RegularPolygon"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the radius of the circumcircle on which all vertices\n of the regular polygon lie"
    },
    "bevy_math::primitives::dim2::RegularPolygon::clone": {
      "namespace": "bevy_math::primitives::dim2::RegularPolygon",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::RegularPolygon"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::RegularPolygon"
        }
      }
    },
    "bevy_math::primitives::dim2::RegularPolygon::eq": {
      "namespace": "bevy_math::primitives::dim2::RegularPolygon",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::RegularPolygon"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::RegularPolygon"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim2::RegularPolygon::external_angle_degrees": {
      "namespace": "bevy_math::primitives::dim2::RegularPolygon",
      "identifier": "external_angle_degrees",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::RegularPolygon"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the external angle of the regular polygon in degrees.\n This is the angle formed by two adjacent sides with points\n within the angle being in the exterior of the polygon"
    },
    "bevy_math::primitives::dim2::RegularPolygon::external_angle_radians": {
      "namespace": "bevy_math::primitives::dim2::RegularPolygon",
      "identifier": "external_angle_radians",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::RegularPolygon"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the external angle of the regular polygon in radians.\n This is the angle formed by two adjacent sides with points\n within the angle being in the exterior of the polygon"
    },
    "bevy_math::primitives::dim2::RegularPolygon::inradius": {
      "namespace": "bevy_math::primitives::dim2::RegularPolygon",
      "identifier": "inradius",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::RegularPolygon"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the inradius or apothem of the regular polygon.\n This is the radius of the largest circle that can\n be drawn within the polygon"
    },
    "bevy_math::primitives::dim2::RegularPolygon::internal_angle_degrees": {
      "namespace": "bevy_math::primitives::dim2::RegularPolygon",
      "identifier": "internal_angle_degrees",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::RegularPolygon"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the internal angle of the regular polygon in degrees.\n This is the angle formed by two adjacent sides with points\n within the angle being in the interior of the polygon"
    },
    "bevy_math::primitives::dim2::RegularPolygon::internal_angle_radians": {
      "namespace": "bevy_math::primitives::dim2::RegularPolygon",
      "identifier": "internal_angle_radians",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::RegularPolygon"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the internal angle of the regular polygon in radians.\n This is the angle formed by two adjacent sides with points\n within the angle being in the interior of the polygon"
    },
    "bevy_math::primitives::dim2::RegularPolygon::new": {
      "namespace": "bevy_math::primitives::dim2::RegularPolygon",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "circumradius"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "sides"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::RegularPolygon"
        }
      },
      "documentation": " Create a new `RegularPolygon`\n from the radius of the circumcircle and a number of sides\n # Panics\n Panics if `circumradius` is negative"
    },
    "bevy_math::primitives::dim2::RegularPolygon::side_length": {
      "namespace": "bevy_math::primitives::dim2::RegularPolygon",
      "identifier": "side_length",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::RegularPolygon"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the length of one side of the regular polygon"
    },
    "bevy_math::primitives::dim2::Rhombus::circumradius": {
      "namespace": "bevy_math::primitives::dim2::Rhombus",
      "identifier": "circumradius",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Rhombus"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the radius of the circumcircle on which all vertices\n of the rhombus lie"
    },
    "bevy_math::primitives::dim2::Rhombus::clone": {
      "namespace": "bevy_math::primitives::dim2::Rhombus",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Rhombus"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Rhombus"
        }
      }
    },
    "bevy_math::primitives::dim2::Rhombus::closest_point": {
      "namespace": "bevy_math::primitives::dim2::Rhombus",
      "identifier": "closest_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Rhombus"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Finds the point on the rhombus that is closest to the given `point`.\n If the point is outside the rhombus, the returned point will be on the perimeter of the rhombus.\n Otherwise, it will be inside the rhombus and returned as is."
    },
    "bevy_math::primitives::dim2::Rhombus::eq": {
      "namespace": "bevy_math::primitives::dim2::Rhombus",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Rhombus"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Rhombus"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim2::Rhombus::from_inradius": {
      "namespace": "bevy_math::primitives::dim2::Rhombus",
      "identifier": "from_inradius",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "inradius"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Rhombus"
        }
      },
      "documentation": " Create a new `Rhombus` from a given inradius with all inner angles equal."
    },
    "bevy_math::primitives::dim2::Rhombus::from_side": {
      "namespace": "bevy_math::primitives::dim2::Rhombus",
      "identifier": "from_side",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "side"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Rhombus"
        }
      },
      "documentation": " Create a new `Rhombus` from a side length with all inner angles equal."
    },
    "bevy_math::primitives::dim2::Rhombus::inradius": {
      "namespace": "bevy_math::primitives::dim2::Rhombus",
      "identifier": "inradius",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Rhombus"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the radius of the largest circle that can\n be drawn within the rhombus"
    },
    "bevy_math::primitives::dim2::Rhombus::new": {
      "namespace": "bevy_math::primitives::dim2::Rhombus",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "horizontal_diagonal"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "vertical_diagonal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Rhombus"
        }
      },
      "documentation": " Create a new `Rhombus` from a vertical and horizontal diagonal sizes."
    },
    "bevy_math::primitives::dim2::Rhombus::side": {
      "namespace": "bevy_math::primitives::dim2::Rhombus",
      "identifier": "side",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Rhombus"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the length of each side of the rhombus"
    },
    "bevy_math::primitives::dim2::Segment2d::clone": {
      "namespace": "bevy_math::primitives::dim2::Segment2d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Segment2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Segment2d"
        }
      }
    },
    "bevy_math::primitives::dim2::Segment2d::eq": {
      "namespace": "bevy_math::primitives::dim2::Segment2d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Segment2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Segment2d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim2::Segment2d::new": {
      "namespace": "bevy_math::primitives::dim2::Segment2d",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "direction"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "length"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Segment2d"
        }
      },
      "documentation": " Create a new `Segment2d` from a direction and full length of the segment"
    },
    "bevy_math::primitives::dim2::Segment2d::point1": {
      "namespace": "bevy_math::primitives::dim2::Segment2d",
      "identifier": "point1",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Segment2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Get the position of the first point on the line segment"
    },
    "bevy_math::primitives::dim2::Segment2d::point2": {
      "namespace": "bevy_math::primitives::dim2::Segment2d",
      "identifier": "point2",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Segment2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Get the position of the second point on the line segment"
    },
    "bevy_math::primitives::dim2::Triangle2d::clone": {
      "namespace": "bevy_math::primitives::dim2::Triangle2d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Triangle2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Triangle2d"
        }
      }
    },
    "bevy_math::primitives::dim2::Triangle2d::eq": {
      "namespace": "bevy_math::primitives::dim2::Triangle2d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Triangle2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Triangle2d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim2::Triangle2d::is_acute": {
      "namespace": "bevy_math::primitives::dim2::Triangle2d",
      "identifier": "is_acute",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Triangle2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Checks if the triangle is acute, meaning all angles are less than 90 degrees"
    },
    "bevy_math::primitives::dim2::Triangle2d::is_degenerate": {
      "namespace": "bevy_math::primitives::dim2::Triangle2d",
      "identifier": "is_degenerate",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Triangle2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Checks if the triangle is degenerate, meaning it has zero area.\n A triangle is degenerate if the cross product of the vectors `ab` and `ac` has a length less than `10e-7`.\n This indicates that the three vertices are collinear or nearly collinear."
    },
    "bevy_math::primitives::dim2::Triangle2d::is_obtuse": {
      "namespace": "bevy_math::primitives::dim2::Triangle2d",
      "identifier": "is_obtuse",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim2::Triangle2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Checks if the triangle is obtuse, meaning one angle is greater than 90 degrees"
    },
    "bevy_math::primitives::dim2::Triangle2d::new": {
      "namespace": "bevy_math::primitives::dim2::Triangle2d",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "a"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "b"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "c"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Triangle2d"
        }
      },
      "documentation": " Create a new `Triangle2d` from points `a`, `b`, and `c`"
    },
    "bevy_math::primitives::dim2::Triangle2d::reverse": {
      "namespace": "bevy_math::primitives::dim2::Triangle2d",
      "identifier": "reverse",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_math::primitives::dim2::Triangle2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Reverse the [`WindingOrder`] of the triangle\n by swapping the first and last vertices."
    },
    "bevy_math::primitives::dim2::Triangle2d::reversed": {
      "namespace": "bevy_math::primitives::dim2::Triangle2d",
      "identifier": "reversed",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::primitives::dim2::Triangle2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Triangle2d"
        }
      },
      "documentation": " This triangle but reversed."
    },
    "bevy_math::primitives::dim3::Capsule3d::clone": {
      "namespace": "bevy_math::primitives::dim3::Capsule3d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Capsule3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Capsule3d"
        }
      }
    },
    "bevy_math::primitives::dim3::Capsule3d::eq": {
      "namespace": "bevy_math::primitives::dim3::Capsule3d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Capsule3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Capsule3d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim3::Capsule3d::new": {
      "namespace": "bevy_math::primitives::dim3::Capsule3d",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "length"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Capsule3d"
        }
      },
      "documentation": " Create a new `Capsule3d` from a radius and length"
    },
    "bevy_math::primitives::dim3::Capsule3d::to_cylinder": {
      "namespace": "bevy_math::primitives::dim3::Capsule3d",
      "identifier": "to_cylinder",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Capsule3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Cylinder"
        }
      },
      "documentation": " Get the part connecting the hemispherical ends\n of the capsule as a [`Cylinder`]"
    },
    "bevy_math::primitives::dim3::Cone::base": {
      "namespace": "bevy_math::primitives::dim3::Cone",
      "identifier": "base",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cone"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Circle"
        }
      },
      "documentation": " Get the base of the cone as a [`Circle`]"
    },
    "bevy_math::primitives::dim3::Cone::base_area": {
      "namespace": "bevy_math::primitives::dim3::Cone",
      "identifier": "base_area",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cone"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the surface area of the base of the cone"
    },
    "bevy_math::primitives::dim3::Cone::clone": {
      "namespace": "bevy_math::primitives::dim3::Cone",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cone"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Cone"
        }
      }
    },
    "bevy_math::primitives::dim3::Cone::eq": {
      "namespace": "bevy_math::primitives::dim3::Cone",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cone"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cone"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim3::Cone::lateral_area": {
      "namespace": "bevy_math::primitives::dim3::Cone",
      "identifier": "lateral_area",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cone"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the surface area of the side of the cone,\n also known as the lateral area"
    },
    "bevy_math::primitives::dim3::Cone::new": {
      "namespace": "bevy_math::primitives::dim3::Cone",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "height"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Cone"
        }
      },
      "documentation": " Create a new [`Cone`] from a radius and height."
    },
    "bevy_math::primitives::dim3::Cone::slant_height": {
      "namespace": "bevy_math::primitives::dim3::Cone",
      "identifier": "slant_height",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cone"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the slant height of the cone, the length of the line segment\n connecting a point on the base to the apex"
    },
    "bevy_math::primitives::dim3::ConicalFrustum::clone": {
      "namespace": "bevy_math::primitives::dim3::ConicalFrustum",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::ConicalFrustum"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::ConicalFrustum"
        }
      }
    },
    "bevy_math::primitives::dim3::ConicalFrustum::eq": {
      "namespace": "bevy_math::primitives::dim3::ConicalFrustum",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::ConicalFrustum"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::ConicalFrustum"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim3::Cuboid::clone": {
      "namespace": "bevy_math::primitives::dim3::Cuboid",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cuboid"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Cuboid"
        }
      }
    },
    "bevy_math::primitives::dim3::Cuboid::closest_point": {
      "namespace": "bevy_math::primitives::dim3::Cuboid",
      "identifier": "closest_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cuboid"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Finds the point on the cuboid that is closest to the given `point`.\n If the point is outside the cuboid, the returned point will be on the surface of the cuboid.\n Otherwise, it will be inside the cuboid and returned as is."
    },
    "bevy_math::primitives::dim3::Cuboid::eq": {
      "namespace": "bevy_math::primitives::dim3::Cuboid",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cuboid"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cuboid"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim3::Cuboid::from_corners": {
      "namespace": "bevy_math::primitives::dim3::Cuboid",
      "identifier": "from_corners",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "point1"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "point2"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Cuboid"
        }
      },
      "documentation": " Create a new `Cuboid` from two corner points"
    },
    "bevy_math::primitives::dim3::Cuboid::from_length": {
      "namespace": "bevy_math::primitives::dim3::Cuboid",
      "identifier": "from_length",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "length"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Cuboid"
        }
      },
      "documentation": " Create a `Cuboid` from a single length.\n The resulting `Cuboid` will be the same size in every direction."
    },
    "bevy_math::primitives::dim3::Cuboid::from_size": {
      "namespace": "bevy_math::primitives::dim3::Cuboid",
      "identifier": "from_size",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "size"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Cuboid"
        }
      },
      "documentation": " Create a new `Cuboid` from a given full size"
    },
    "bevy_math::primitives::dim3::Cuboid::new": {
      "namespace": "bevy_math::primitives::dim3::Cuboid",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x_length"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y_length"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z_length"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Cuboid"
        }
      },
      "documentation": " Create a new `Cuboid` from a full x, y, and z length"
    },
    "bevy_math::primitives::dim3::Cuboid::size": {
      "namespace": "bevy_math::primitives::dim3::Cuboid",
      "identifier": "size",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cuboid"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Get the size of the cuboid"
    },
    "bevy_math::primitives::dim3::Cylinder::base": {
      "namespace": "bevy_math::primitives::dim3::Cylinder",
      "identifier": "base",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cylinder"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim2::Circle"
        }
      },
      "documentation": " Get the base of the cylinder as a [`Circle`]"
    },
    "bevy_math::primitives::dim3::Cylinder::base_area": {
      "namespace": "bevy_math::primitives::dim3::Cylinder",
      "identifier": "base_area",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cylinder"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the surface area of one base of the cylinder"
    },
    "bevy_math::primitives::dim3::Cylinder::clone": {
      "namespace": "bevy_math::primitives::dim3::Cylinder",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cylinder"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Cylinder"
        }
      }
    },
    "bevy_math::primitives::dim3::Cylinder::eq": {
      "namespace": "bevy_math::primitives::dim3::Cylinder",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cylinder"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cylinder"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim3::Cylinder::lateral_area": {
      "namespace": "bevy_math::primitives::dim3::Cylinder",
      "identifier": "lateral_area",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Cylinder"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the surface area of the side of the cylinder,\n also known as the lateral area"
    },
    "bevy_math::primitives::dim3::Cylinder::new": {
      "namespace": "bevy_math::primitives::dim3::Cylinder",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "height"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Cylinder"
        }
      },
      "documentation": " Create a new `Cylinder` from a radius and full height"
    },
    "bevy_math::primitives::dim3::InfinitePlane3d::clone": {
      "namespace": "bevy_math::primitives::dim3::InfinitePlane3d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::InfinitePlane3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::InfinitePlane3d"
        }
      }
    },
    "bevy_math::primitives::dim3::InfinitePlane3d::eq": {
      "namespace": "bevy_math::primitives::dim3::InfinitePlane3d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::InfinitePlane3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::InfinitePlane3d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim3::InfinitePlane3d::isometry_from_xy": {
      "namespace": "bevy_math::primitives::dim3::InfinitePlane3d",
      "identifier": "isometry_from_xy",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::InfinitePlane3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "origin"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry3d"
        }
      },
      "documentation": " Computes an [`Isometry3d`] which transforms points from the XY-plane to this plane with the\n given `origin`.\n ## Guarantees\n * the transformation is a [congruence] meaning it will preserve all distances and angles of\n   the transformed geometry\n * uses the least rotation possible to transform the geometry\n * if two geometries are transformed with the same isometry, then the relations between\n   them, like distances, are also preserved\n * compared to projections, the transformation is lossless (up to floating point errors)\n   reversible\n ## Non-Guarantees\n * the rotation used is generally not unique\n * the orientation of the transformed geometry in the XY plane might be arbitrary, to\n   enforce some kind of alignment the user has to use an extra transformation ontop of this\n   one\n See [`isometries_xy`] for example usescases.\n [congruence]: https://en.wikipedia.org/wiki/Congruence_(geometry)\n [`isometries_xy`]: `InfinitePlane3d::isometries_xy`"
    },
    "bevy_math::primitives::dim3::InfinitePlane3d::isometry_into_xy": {
      "namespace": "bevy_math::primitives::dim3::InfinitePlane3d",
      "identifier": "isometry_into_xy",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::InfinitePlane3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "origin"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry3d"
        }
      },
      "documentation": " Computes an [`Isometry3d`] which transforms points from the plane in 3D space with the given\n `origin` to the XY-plane.\n ## Guarantees\n * the transformation is a [congruence] meaning it will preserve all distances and angles of\n   the transformed geometry\n * uses the least rotation possible to transform the geometry\n * if two geometries are transformed with the same isometry, then the relations between\n   them, like distances, are also preserved\n * compared to projections, the transformation is lossless (up to floating point errors)\n   reversible\n ## Non-Guarantees\n * the rotation used is generally not unique\n * the orientation of the transformed geometry in the XY plane might be arbitrary, to\n   enforce some kind of alignment the user has to use an extra transformation ontop of this\n   one\n See [`isometries_xy`] for example usescases.\n [congruence]: https://en.wikipedia.org/wiki/Congruence_(geometry)\n [`isometries_xy`]: `InfinitePlane3d::isometries_xy`"
    },
    "bevy_math::primitives::dim3::Line3d::clone": {
      "namespace": "bevy_math::primitives::dim3::Line3d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Line3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Line3d"
        }
      }
    },
    "bevy_math::primitives::dim3::Line3d::eq": {
      "namespace": "bevy_math::primitives::dim3::Line3d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Line3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Line3d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim3::Plane3d::clone": {
      "namespace": "bevy_math::primitives::dim3::Plane3d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Plane3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Plane3d"
        }
      }
    },
    "bevy_math::primitives::dim3::Plane3d::eq": {
      "namespace": "bevy_math::primitives::dim3::Plane3d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Plane3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Plane3d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim3::Plane3d::new": {
      "namespace": "bevy_math::primitives::dim3::Plane3d",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "normal"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "half_size"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Plane3d"
        }
      },
      "documentation": " Create a new `Plane3d` from a normal and a half size\n # Panics\n Panics if the given `normal` is zero (or very close to zero), or non-finite."
    },
    "bevy_math::primitives::dim3::Segment3d::clone": {
      "namespace": "bevy_math::primitives::dim3::Segment3d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Segment3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Segment3d"
        }
      }
    },
    "bevy_math::primitives::dim3::Segment3d::eq": {
      "namespace": "bevy_math::primitives::dim3::Segment3d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Segment3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Segment3d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim3::Segment3d::new": {
      "namespace": "bevy_math::primitives::dim3::Segment3d",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::direction::Dir3"
          },
          "name": "direction"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "length"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Segment3d"
        }
      },
      "documentation": " Create a new `Segment3d` from a direction and full length of the segment"
    },
    "bevy_math::primitives::dim3::Segment3d::point1": {
      "namespace": "bevy_math::primitives::dim3::Segment3d",
      "identifier": "point1",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Segment3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Get the position of the first point on the line segment"
    },
    "bevy_math::primitives::dim3::Segment3d::point2": {
      "namespace": "bevy_math::primitives::dim3::Segment3d",
      "identifier": "point2",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Segment3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Get the position of the second point on the line segment"
    },
    "bevy_math::primitives::dim3::Sphere::clone": {
      "namespace": "bevy_math::primitives::dim3::Sphere",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Sphere"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Sphere"
        }
      }
    },
    "bevy_math::primitives::dim3::Sphere::closest_point": {
      "namespace": "bevy_math::primitives::dim3::Sphere",
      "identifier": "closest_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Sphere"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Finds the point on the sphere that is closest to the given `point`.\n If the point is outside the sphere, the returned point will be on the surface of the sphere.\n Otherwise, it will be inside the sphere and returned as is."
    },
    "bevy_math::primitives::dim3::Sphere::diameter": {
      "namespace": "bevy_math::primitives::dim3::Sphere",
      "identifier": "diameter",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Sphere"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the diameter of the sphere"
    },
    "bevy_math::primitives::dim3::Sphere::eq": {
      "namespace": "bevy_math::primitives::dim3::Sphere",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Sphere"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Sphere"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim3::Sphere::new": {
      "namespace": "bevy_math::primitives::dim3::Sphere",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radius"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Sphere"
        }
      },
      "documentation": " Create a new [`Sphere`] from a `radius`"
    },
    "bevy_math::primitives::dim3::Tetrahedron::centroid": {
      "namespace": "bevy_math::primitives::dim3::Tetrahedron",
      "identifier": "centroid",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Tetrahedron"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Get the centroid of the tetrahedron.\n This function finds the geometric center of the tetrahedron\n by averaging the vertices: `centroid = (a + b + c + d) / 4`."
    },
    "bevy_math::primitives::dim3::Tetrahedron::clone": {
      "namespace": "bevy_math::primitives::dim3::Tetrahedron",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Tetrahedron"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Tetrahedron"
        }
      }
    },
    "bevy_math::primitives::dim3::Tetrahedron::eq": {
      "namespace": "bevy_math::primitives::dim3::Tetrahedron",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Tetrahedron"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Tetrahedron"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim3::Tetrahedron::new": {
      "namespace": "bevy_math::primitives::dim3::Tetrahedron",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "a"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "b"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "c"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "d"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Tetrahedron"
        }
      },
      "documentation": " Create a new [`Tetrahedron`] from points `a`, `b`, `c` and `d`."
    },
    "bevy_math::primitives::dim3::Tetrahedron::signed_volume": {
      "namespace": "bevy_math::primitives::dim3::Tetrahedron",
      "identifier": "signed_volume",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Tetrahedron"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the signed volume of the tetrahedron.\n If it's negative, the normal vector of the face defined by\n the first three points using the right-hand rule points\n away from the fourth vertex."
    },
    "bevy_math::primitives::dim3::Torus::clone": {
      "namespace": "bevy_math::primitives::dim3::Torus",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Torus"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Torus"
        }
      }
    },
    "bevy_math::primitives::dim3::Torus::eq": {
      "namespace": "bevy_math::primitives::dim3::Torus",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Torus"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Torus"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim3::Torus::inner_radius": {
      "namespace": "bevy_math::primitives::dim3::Torus",
      "identifier": "inner_radius",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Torus"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the inner radius of the torus.\n For a ring torus, this corresponds to the radius of the hole,\n or `major_radius - minor_radius`"
    },
    "bevy_math::primitives::dim3::Torus::new": {
      "namespace": "bevy_math::primitives::dim3::Torus",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "inner_radius"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "outer_radius"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Torus"
        }
      },
      "documentation": " Create a new `Torus` from an inner and outer radius.\n The inner radius is the radius of the hole, and the outer radius\n is the radius of the entire object"
    },
    "bevy_math::primitives::dim3::Torus::outer_radius": {
      "namespace": "bevy_math::primitives::dim3::Torus",
      "identifier": "outer_radius",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Torus"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get the outer radius of the torus.\n This corresponds to the overall radius of the entire object,\n or `major_radius + minor_radius`"
    },
    "bevy_math::primitives::dim3::Triangle3d::centroid": {
      "namespace": "bevy_math::primitives::dim3::Triangle3d",
      "identifier": "centroid",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Triangle3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Get the centroid of the triangle.\n This function finds the geometric center of the triangle by averaging the vertices:\n `centroid = (a + b + c) / 3`."
    },
    "bevy_math::primitives::dim3::Triangle3d::circumcenter": {
      "namespace": "bevy_math::primitives::dim3::Triangle3d",
      "identifier": "circumcenter",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Triangle3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Get the circumcenter of the triangle."
    },
    "bevy_math::primitives::dim3::Triangle3d::clone": {
      "namespace": "bevy_math::primitives::dim3::Triangle3d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Triangle3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Triangle3d"
        }
      }
    },
    "bevy_math::primitives::dim3::Triangle3d::eq": {
      "namespace": "bevy_math::primitives::dim3::Triangle3d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Triangle3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Triangle3d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::primitives::dim3::Triangle3d::is_acute": {
      "namespace": "bevy_math::primitives::dim3::Triangle3d",
      "identifier": "is_acute",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Triangle3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Checks if the triangle is acute, meaning all angles are less than 90 degrees"
    },
    "bevy_math::primitives::dim3::Triangle3d::is_degenerate": {
      "namespace": "bevy_math::primitives::dim3::Triangle3d",
      "identifier": "is_degenerate",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Triangle3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Checks if the triangle is degenerate, meaning it has zero area.\n A triangle is degenerate if the cross product of the vectors `ab` and `ac` has a length less than `10e-7`.\n This indicates that the three vertices are collinear or nearly collinear."
    },
    "bevy_math::primitives::dim3::Triangle3d::is_obtuse": {
      "namespace": "bevy_math::primitives::dim3::Triangle3d",
      "identifier": "is_obtuse",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::primitives::dim3::Triangle3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Checks if the triangle is obtuse, meaning one angle is greater than 90 degrees"
    },
    "bevy_math::primitives::dim3::Triangle3d::new": {
      "namespace": "bevy_math::primitives::dim3::Triangle3d",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "a"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "b"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "c"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Triangle3d"
        }
      },
      "documentation": " Create a new [`Triangle3d`] from points `a`, `b`, and `c`."
    },
    "bevy_math::primitives::dim3::Triangle3d::reverse": {
      "namespace": "bevy_math::primitives::dim3::Triangle3d",
      "identifier": "reverse",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_math::primitives::dim3::Triangle3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Reverse the triangle by swapping the first and last vertices."
    },
    "bevy_math::primitives::dim3::Triangle3d::reversed": {
      "namespace": "bevy_math::primitives::dim3::Triangle3d",
      "identifier": "reversed",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::primitives::dim3::Triangle3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::primitives::dim3::Triangle3d"
        }
      },
      "documentation": " This triangle but reversed."
    },
    "bevy_math::ray::Ray2d::clone": {
      "namespace": "bevy_math::ray::Ray2d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::ray::Ray2d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::ray::Ray2d"
        }
      }
    },
    "bevy_math::ray::Ray2d::eq": {
      "namespace": "bevy_math::ray::Ray2d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::ray::Ray2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::ray::Ray2d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::ray::Ray2d::get_point": {
      "namespace": "bevy_math::ray::Ray2d",
      "identifier": "get_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::ray::Ray2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "distance"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Get a point at a given distance along the ray"
    },
    "bevy_math::ray::Ray2d::intersect_plane": {
      "namespace": "bevy_math::ray::Ray2d",
      "identifier": "intersect_plane",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::ray::Ray2d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "plane_origin"
        },
        {
          "kind": {
            "val": "bevy_math::primitives::dim2::Plane2d"
          },
          "name": "plane"
        }
      ],
      "return_type": {
        "kind": {
          "option": {
            "primitive": "f32"
          }
        }
      },
      "documentation": " Get the distance to a plane if the ray intersects it"
    },
    "bevy_math::ray::Ray2d::new": {
      "namespace": "bevy_math::ray::Ray2d",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "origin"
        },
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          },
          "name": "direction"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::ray::Ray2d"
        }
      },
      "documentation": " Create a new `Ray2d` from a given origin and direction"
    },
    "bevy_math::ray::Ray3d::clone": {
      "namespace": "bevy_math::ray::Ray3d",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::ray::Ray3d"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::ray::Ray3d"
        }
      }
    },
    "bevy_math::ray::Ray3d::eq": {
      "namespace": "bevy_math::ray::Ray3d",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::ray::Ray3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::ray::Ray3d"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::ray::Ray3d::get_point": {
      "namespace": "bevy_math::ray::Ray3d",
      "identifier": "get_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::ray::Ray3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "distance"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Get a point at a given distance along the ray"
    },
    "bevy_math::ray::Ray3d::intersect_plane": {
      "namespace": "bevy_math::ray::Ray3d",
      "identifier": "intersect_plane",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::ray::Ray3d"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "plane_origin"
        },
        {
          "kind": {
            "val": "bevy_math::primitives::dim3::InfinitePlane3d"
          },
          "name": "plane"
        }
      ],
      "return_type": {
        "kind": {
          "option": {
            "primitive": "f32"
          }
        }
      },
      "documentation": " Get the distance to a plane if the ray intersects it"
    },
    "bevy_math::ray::Ray3d::new": {
      "namespace": "bevy_math::ray::Ray3d",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "origin"
        },
        {
          "kind": {
            "val": "bevy_math::direction::Dir3"
          },
          "name": "direction"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::ray::Ray3d"
        }
      },
      "documentation": " Create a new `Ray3d` from a given origin and direction"
    },
    "bevy_math::rects::irect::IRect::as_rect": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "as_rect",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::rect::Rect"
        }
      },
      "documentation": " Returns self as [`Rect`] (f32)"
    },
    "bevy_math::rects::irect::IRect::as_urect": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "as_urect",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::urect::URect"
        }
      },
      "documentation": " Returns self as [`URect`] (u32)"
    },
    "bevy_math::rects::irect::IRect::assert_receiver_is_total_eq": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_math::rects::irect::IRect::center": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "center",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " The center point of the rectangle.\n # Rounding Behavior\n If the (min + max) contains odd numbers they will be rounded down to the nearest whole number when calculating the center.\n # Examples\n ```\n # use bevy_math::{IRect, IVec2};\n let r = IRect::new(0, 0, 5, 2); // w=5 h=2\n assert_eq!(r.center(), IVec2::new(2, 1));\n ```"
    },
    "bevy_math::rects::irect::IRect::clone": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::irect::IRect"
        }
      }
    },
    "bevy_math::rects::irect::IRect::contains": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "contains",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Check if a point lies within this rectangle, inclusive of its edges.\n # Examples\n ```\n # use bevy_math::IRect;\n let r = IRect::new(0, 0, 5, 1); // w=5 h=1\n assert!(r.contains(r.center()));\n assert!(r.contains(r.min));\n assert!(r.contains(r.max));\n ```"
    },
    "bevy_math::rects::irect::IRect::eq": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::rects::irect::IRect::from_center_half_size": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "from_center_half_size",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "origin"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "half_size"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::irect::IRect"
        }
      },
      "documentation": " Create a new rectangle from its center and half-size.\n # Panics\n This method panics if any of the components of the half-size is negative.\n # Examples\n ```\n # use bevy_math::{IRect, IVec2};\n let r = IRect::from_center_half_size(IVec2::ZERO, IVec2::ONE); // w=2 h=2\n assert_eq!(r.min, IVec2::splat(-1));\n assert_eq!(r.max, IVec2::splat(1));\n ```"
    },
    "bevy_math::rects::irect::IRect::from_center_size": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "from_center_size",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "origin"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "size"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::irect::IRect"
        }
      },
      "documentation": " Create a new rectangle from its center and size.\n # Rounding Behavior\n If the size contains odd numbers they will be rounded down to the nearest whole number.\n # Panics\n This method panics if any of the components of the size is negative.\n # Examples\n ```\n # use bevy_math::{IRect, IVec2};\n let r = IRect::from_center_size(IVec2::ZERO, IVec2::new(3, 2)); // w=2 h=2\n assert_eq!(r.min, IVec2::splat(-1));\n assert_eq!(r.max, IVec2::splat(1));\n ```"
    },
    "bevy_math::rects::irect::IRect::from_corners": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "from_corners",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "p0"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "p1"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::irect::IRect"
        }
      },
      "documentation": " Create a new rectangle from two corner points.\n The two points do not need to be the minimum and/or maximum corners.\n They only need to be two opposite corners.\n # Examples\n ```\n # use bevy_math::{IRect, IVec2};\n // Unit rect from [0,0] to [1,1]\n let r = IRect::from_corners(IVec2::ZERO, IVec2::ONE); // w=1 h=1\n // Same; the points do not need to be ordered\n let r = IRect::from_corners(IVec2::ONE, IVec2::ZERO); // w=1 h=1\n ```"
    },
    "bevy_math::rects::irect::IRect::half_size": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "half_size",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Rectangle half-size.\n # Rounding Behavior\n If the full size contains odd numbers they will be rounded down to the nearest whole number when calculating the half size.\n # Examples\n ```\n # use bevy_math::{IRect, IVec2};\n let r = IRect::new(0, 0, 4, 3); // w=4 h=3\n assert_eq!(r.half_size(), IVec2::new(2, 1));\n ```"
    },
    "bevy_math::rects::irect::IRect::height": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "height",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Rectangle height (max.y - min.y).\n # Examples\n ```\n # use bevy_math::IRect;\n let r = IRect::new(0, 0, 5, 1); // w=5 h=1\n assert_eq!(r.height(), 1);\n ```"
    },
    "bevy_math::rects::irect::IRect::inflate": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "inflate",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "expansion"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::irect::IRect"
        }
      },
      "documentation": " Create a new rectangle by expanding it evenly on all sides.\n A positive expansion value produces a larger rectangle,\n while a negative expansion value produces a smaller rectangle.\n If this would result in zero or negative width or height, [`IRect::EMPTY`] is returned instead.\n # Examples\n ```\n # use bevy_math::{IRect, IVec2};\n let r = IRect::new(0, 0, 5, 1); // w=5 h=1\n let r2 = r.inflate(3); // w=11 h=7\n assert_eq!(r2.min, IVec2::splat(-3));\n assert_eq!(r2.max, IVec2::new(8, 4));\n let r = IRect::new(0, -1, 4, 3); // w=4 h=4\n let r2 = r.inflate(-1); // w=2 h=2\n assert_eq!(r2.min, IVec2::new(1, 0));\n assert_eq!(r2.max, IVec2::new(3, 2));\n ```"
    },
    "bevy_math::rects::irect::IRect::intersect": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "intersect",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::rects::irect::IRect"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::irect::IRect"
        }
      },
      "documentation": " Build a new rectangle formed of the intersection of this rectangle and another rectangle.\n The intersection is the largest rectangle enclosed in both rectangles. If the intersection\n is empty, this method returns an empty rectangle ([`IRect::is_empty()`] returns `true`), but\n the actual values of [`IRect::min`] and [`IRect::max`] are implementation-dependent.\n # Examples\n ```\n # use bevy_math::{IRect, IVec2};\n let r1 = IRect::new(0, 0, 5, 1); // w=5 h=1\n let r2 = IRect::new(1, -1, 3, 3); // w=2 h=4\n let r = r1.intersect(r2);\n assert_eq!(r.min, IVec2::new(1, 0));\n assert_eq!(r.max, IVec2::new(3, 1));\n ```"
    },
    "bevy_math::rects::irect::IRect::is_empty": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "is_empty",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Check if the rectangle is empty.\n # Examples\n ```\n # use bevy_math::{IRect, IVec2};\n let r = IRect::from_corners(IVec2::ZERO, IVec2::new(0, 1)); // w=0 h=1\n assert!(r.is_empty());\n ```"
    },
    "bevy_math::rects::irect::IRect::new": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "x0"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "y0"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "x1"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "y1"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::irect::IRect"
        }
      },
      "documentation": " Create a new rectangle from two corner points.\n The two points do not need to be the minimum and/or maximum corners.\n They only need to be two opposite corners.\n # Examples\n ```\n # use bevy_math::IRect;\n let r = IRect::new(0, 4, 10, 6); // w=10 h=2\n let r = IRect::new(2, 3, 5, -1); // w=3 h=4\n ```"
    },
    "bevy_math::rects::irect::IRect::size": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "size",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Rectangle size.\n # Examples\n ```\n # use bevy_math::{IRect, IVec2};\n let r = IRect::new(0, 0, 5, 1); // w=5 h=1\n assert_eq!(r.size(), IVec2::new(5, 1));\n ```"
    },
    "bevy_math::rects::irect::IRect::union": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "union",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::rects::irect::IRect"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::irect::IRect"
        }
      },
      "documentation": " Build a new rectangle formed of the union of this rectangle and another rectangle.\n The union is the smallest rectangle enclosing both rectangles.\n # Examples\n ```\n # use bevy_math::{IRect, IVec2};\n let r1 = IRect::new(0, 0, 5, 1); // w=5 h=1\n let r2 = IRect::new(1, -1, 3, 3); // w=2 h=4\n let r = r1.union(r2);\n assert_eq!(r.min, IVec2::new(0, -1));\n assert_eq!(r.max, IVec2::new(5, 3));\n ```"
    },
    "bevy_math::rects::irect::IRect::union_point": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "union_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::irect::IRect"
        }
      },
      "documentation": " Build a new rectangle formed of the union of this rectangle and a point.\n The union is the smallest rectangle enclosing both the rectangle and the point. If the\n point is already inside the rectangle, this method returns a copy of the rectangle.\n # Examples\n ```\n # use bevy_math::{IRect, IVec2};\n let r = IRect::new(0, 0, 5, 1); // w=5 h=1\n let u = r.union_point(IVec2::new(3, 6));\n assert_eq!(u.min, IVec2::ZERO);\n assert_eq!(u.max, IVec2::new(5, 6));\n ```"
    },
    "bevy_math::rects::irect::IRect::width": {
      "namespace": "bevy_math::rects::irect::IRect",
      "identifier": "width",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::irect::IRect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Rectangle width (max.x - min.x).\n # Examples\n ```\n # use bevy_math::IRect;\n let r = IRect::new(0, 0, 5, 1); // w=5 h=1\n assert_eq!(r.width(), 5);\n ```"
    },
    "bevy_math::rects::rect::Rect::as_irect": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "as_irect",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::irect::IRect"
        }
      },
      "documentation": " Returns self as [`IRect`] (i32)"
    },
    "bevy_math::rects::rect::Rect::as_urect": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "as_urect",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::urect::URect"
        }
      },
      "documentation": " Returns self as [`URect`] (u32)"
    },
    "bevy_math::rects::rect::Rect::center": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "center",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " The center point of the rectangle.\n # Examples\n ```\n # use bevy_math::{Rect, Vec2};\n let r = Rect::new(0., 0., 5., 1.); // w=5 h=1\n assert!(r.center().abs_diff_eq(Vec2::new(2.5, 0.5), 1e-5));\n ```"
    },
    "bevy_math::rects::rect::Rect::clone": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::rect::Rect"
        }
      }
    },
    "bevy_math::rects::rect::Rect::contains": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "contains",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Check if a point lies within this rectangle, inclusive of its edges.\n # Examples\n ```\n # use bevy_math::Rect;\n let r = Rect::new(0., 0., 5., 1.); // w=5 h=1\n assert!(r.contains(r.center()));\n assert!(r.contains(r.min));\n assert!(r.contains(r.max));\n ```"
    },
    "bevy_math::rects::rect::Rect::eq": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::rects::rect::Rect::from_center_half_size": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "from_center_half_size",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "origin"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "half_size"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::rect::Rect"
        }
      },
      "documentation": " Create a new rectangle from its center and half-size.\n # Panics\n This method panics if any of the components of the half-size is negative.\n # Examples\n ```\n # use bevy_math::{Rect, Vec2};\n let r = Rect::from_center_half_size(Vec2::ZERO, Vec2::ONE); // w=2 h=2\n assert!(r.min.abs_diff_eq(Vec2::splat(-1.), 1e-5));\n assert!(r.max.abs_diff_eq(Vec2::splat(1.), 1e-5));\n ```"
    },
    "bevy_math::rects::rect::Rect::from_center_size": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "from_center_size",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "origin"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "size"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::rect::Rect"
        }
      },
      "documentation": " Create a new rectangle from its center and size.\n # Panics\n This method panics if any of the components of the size is negative.\n # Examples\n ```\n # use bevy_math::{Rect, Vec2};\n let r = Rect::from_center_size(Vec2::ZERO, Vec2::ONE); // w=1 h=1\n assert!(r.min.abs_diff_eq(Vec2::splat(-0.5), 1e-5));\n assert!(r.max.abs_diff_eq(Vec2::splat(0.5), 1e-5));\n ```"
    },
    "bevy_math::rects::rect::Rect::from_corners": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "from_corners",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "p0"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "p1"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::rect::Rect"
        }
      },
      "documentation": " Create a new rectangle from two corner points.\n The two points do not need to be the minimum and/or maximum corners.\n They only need to be two opposite corners.\n # Examples\n ```\n # use bevy_math::{Rect, Vec2};\n // Unit rect from [0,0] to [1,1]\n let r = Rect::from_corners(Vec2::ZERO, Vec2::ONE); // w=1 h=1\n // Same; the points do not need to be ordered\n let r = Rect::from_corners(Vec2::ONE, Vec2::ZERO); // w=1 h=1\n ```"
    },
    "bevy_math::rects::rect::Rect::half_size": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "half_size",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Rectangle half-size.\n # Examples\n ```\n # use bevy_math::{Rect, Vec2};\n let r = Rect::new(0., 0., 5., 1.); // w=5 h=1\n assert!(r.half_size().abs_diff_eq(Vec2::new(2.5, 0.5), 1e-5));\n ```"
    },
    "bevy_math::rects::rect::Rect::height": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "height",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Rectangle height (max.y - min.y).\n # Examples\n ```\n # use bevy_math::Rect;\n let r = Rect::new(0., 0., 5., 1.); // w=5 h=1\n assert!((r.height() - 1.).abs() <= 1e-5);\n ```"
    },
    "bevy_math::rects::rect::Rect::inflate": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "inflate",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "expansion"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::rect::Rect"
        }
      },
      "documentation": " Create a new rectangle by expanding it evenly on all sides.\n A positive expansion value produces a larger rectangle,\n while a negative expansion value produces a smaller rectangle.\n If this would result in zero or negative width or height, [`Rect::EMPTY`] is returned instead.\n # Examples\n ```\n # use bevy_math::{Rect, Vec2};\n let r = Rect::new(0., 0., 5., 1.); // w=5 h=1\n let r2 = r.inflate(3.); // w=11 h=7\n assert!(r2.min.abs_diff_eq(Vec2::splat(-3.), 1e-5));\n assert!(r2.max.abs_diff_eq(Vec2::new(8., 4.), 1e-5));\n let r = Rect::new(0., -1., 6., 7.); // w=6 h=8\n let r2 = r.inflate(-2.); // w=11 h=7\n assert!(r2.min.abs_diff_eq(Vec2::new(2., 1.), 1e-5));\n assert!(r2.max.abs_diff_eq(Vec2::new(4., 5.), 1e-5));\n ```"
    },
    "bevy_math::rects::rect::Rect::intersect": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "intersect",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::rects::rect::Rect"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::rect::Rect"
        }
      },
      "documentation": " Build a new rectangle formed of the intersection of this rectangle and another rectangle.\n The intersection is the largest rectangle enclosed in both rectangles. If the intersection\n is empty, this method returns an empty rectangle ([`Rect::is_empty()`] returns `true`), but\n the actual values of [`Rect::min`] and [`Rect::max`] are implementation-dependent.\n # Examples\n ```\n # use bevy_math::{Rect, Vec2};\n let r1 = Rect::new(0., 0., 5., 1.); // w=5 h=1\n let r2 = Rect::new(1., -1., 3., 3.); // w=2 h=4\n let r = r1.intersect(r2);\n assert!(r.min.abs_diff_eq(Vec2::new(1., 0.), 1e-5));\n assert!(r.max.abs_diff_eq(Vec2::new(3., 1.), 1e-5));\n ```"
    },
    "bevy_math::rects::rect::Rect::is_empty": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "is_empty",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Check if the rectangle is empty.\n # Examples\n ```\n # use bevy_math::{Rect, Vec2};\n let r = Rect::from_corners(Vec2::ZERO, Vec2::new(0., 1.)); // w=0 h=1\n assert!(r.is_empty());\n ```"
    },
    "bevy_math::rects::rect::Rect::new": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x0"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y0"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x1"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y1"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::rect::Rect"
        }
      },
      "documentation": " Create a new rectangle from two corner points.\n The two points do not need to be the minimum and/or maximum corners.\n They only need to be two opposite corners.\n # Examples\n ```\n # use bevy_math::Rect;\n let r = Rect::new(0., 4., 10., 6.); // w=10 h=2\n let r = Rect::new(2., 3., 5., -1.); // w=3 h=4\n ```"
    },
    "bevy_math::rects::rect::Rect::normalize": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "normalize",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::rects::rect::Rect"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::rect::Rect"
        }
      },
      "documentation": " Build a new rectangle from this one with its coordinates expressed\n relative to `other` in a normalized ([0..1] x [0..1]) coordinate system.\n # Examples\n ```\n # use bevy_math::{Rect, Vec2};\n let r = Rect::new(2., 3., 4., 6.);\n let s = Rect::new(0., 0., 10., 10.);\n let n = r.normalize(s);\n assert_eq!(n.min.x, 0.2);\n assert_eq!(n.min.y, 0.3);\n assert_eq!(n.max.x, 0.4);\n assert_eq!(n.max.y, 0.6);\n ```"
    },
    "bevy_math::rects::rect::Rect::size": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "size",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Rectangle size.\n # Examples\n ```\n # use bevy_math::{Rect, Vec2};\n let r = Rect::new(0., 0., 5., 1.); // w=5 h=1\n assert!(r.size().abs_diff_eq(Vec2::new(5., 1.), 1e-5));\n ```"
    },
    "bevy_math::rects::rect::Rect::union": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "union",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::rects::rect::Rect"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::rect::Rect"
        }
      },
      "documentation": " Build a new rectangle formed of the union of this rectangle and another rectangle.\n The union is the smallest rectangle enclosing both rectangles.\n # Examples\n ```\n # use bevy_math::{Rect, Vec2};\n let r1 = Rect::new(0., 0., 5., 1.); // w=5 h=1\n let r2 = Rect::new(1., -1., 3., 3.); // w=2 h=4\n let r = r1.union(r2);\n assert!(r.min.abs_diff_eq(Vec2::new(0., -1.), 1e-5));\n assert!(r.max.abs_diff_eq(Vec2::new(5., 3.), 1e-5));\n ```"
    },
    "bevy_math::rects::rect::Rect::union_point": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "union_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::rect::Rect"
        }
      },
      "documentation": " Build a new rectangle formed of the union of this rectangle and a point.\n The union is the smallest rectangle enclosing both the rectangle and the point. If the\n point is already inside the rectangle, this method returns a copy of the rectangle.\n # Examples\n ```\n # use bevy_math::{Rect, Vec2};\n let r = Rect::new(0., 0., 5., 1.); // w=5 h=1\n let u = r.union_point(Vec2::new(3., 6.));\n assert!(u.min.abs_diff_eq(Vec2::ZERO, 1e-5));\n assert!(u.max.abs_diff_eq(Vec2::new(5., 6.), 1e-5));\n ```"
    },
    "bevy_math::rects::rect::Rect::width": {
      "namespace": "bevy_math::rects::rect::Rect",
      "identifier": "width",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::rect::Rect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Rectangle width (max.x - min.x).\n # Examples\n ```\n # use bevy_math::Rect;\n let r = Rect::new(0., 0., 5., 1.); // w=5 h=1\n assert!((r.width() - 5.).abs() <= 1e-5);\n ```"
    },
    "bevy_math::rects::urect::URect::as_irect": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "as_irect",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::irect::IRect"
        }
      },
      "documentation": " Returns self as [`IRect`] (i32)"
    },
    "bevy_math::rects::urect::URect::as_rect": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "as_rect",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::rect::Rect"
        }
      },
      "documentation": " Returns self as [`Rect`] (f32)"
    },
    "bevy_math::rects::urect::URect::assert_receiver_is_total_eq": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_math::rects::urect::URect::center": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "center",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " The center point of the rectangle.\n # Rounding Behavior\n If the (min + max) contains odd numbers they will be rounded down to the nearest whole number when calculating the center.\n # Examples\n ```\n # use bevy_math::{URect, UVec2};\n let r = URect::new(0, 0, 4, 2); // w=4 h=2\n assert_eq!(r.center(), UVec2::new(2, 1));\n ```"
    },
    "bevy_math::rects::urect::URect::clone": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::urect::URect"
        }
      }
    },
    "bevy_math::rects::urect::URect::contains": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "contains",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Check if a point lies within this rectangle, inclusive of its edges.\n # Examples\n ```\n # use bevy_math::URect;\n let r = URect::new(0, 0, 5, 1); // w=5 h=1\n assert!(r.contains(r.center()));\n assert!(r.contains(r.min));\n assert!(r.contains(r.max));\n ```"
    },
    "bevy_math::rects::urect::URect::eq": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::rects::urect::URect::from_center_half_size": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "from_center_half_size",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "origin"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "half_size"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::urect::URect"
        }
      },
      "documentation": " Create a new rectangle from its center and half-size.\n # Panics\n This method panics if any of the components of the half-size is negative or if `origin - half_size` results in any negatives.\n # Examples\n ```\n # use bevy_math::{URect, UVec2};\n let r = URect::from_center_half_size(UVec2::ONE, UVec2::ONE); // w=2 h=2\n assert_eq!(r.min, UVec2::splat(0));\n assert_eq!(r.max, UVec2::splat(2));\n ```"
    },
    "bevy_math::rects::urect::URect::from_center_size": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "from_center_size",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "origin"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "size"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::urect::URect"
        }
      },
      "documentation": " Create a new rectangle from its center and size.\n # Rounding Behavior\n If the size contains odd numbers they will be rounded down to the nearest whole number.\n # Panics\n This method panics if any of the components of the size is negative or if `origin - (size / 2)` results in any negatives.\n # Examples\n ```\n # use bevy_math::{URect, UVec2};\n let r = URect::from_center_size(UVec2::ONE, UVec2::splat(2)); // w=2 h=2\n assert_eq!(r.min, UVec2::splat(0));\n assert_eq!(r.max, UVec2::splat(2));\n ```"
    },
    "bevy_math::rects::urect::URect::from_corners": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "from_corners",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "p0"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "p1"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::urect::URect"
        }
      },
      "documentation": " Create a new rectangle from two corner points.\n The two points do not need to be the minimum and/or maximum corners.\n They only need to be two opposite corners.\n # Examples\n ```\n # use bevy_math::{URect, UVec2};\n // Unit rect from [0,0] to [1,1]\n let r = URect::from_corners(UVec2::ZERO, UVec2::ONE); // w=1 h=1\n // Same; the points do not need to be ordered\n let r = URect::from_corners(UVec2::ONE, UVec2::ZERO); // w=1 h=1\n ```"
    },
    "bevy_math::rects::urect::URect::half_size": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "half_size",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Rectangle half-size.\n # Rounding Behavior\n If the full size contains odd numbers they will be rounded down to the nearest whole number when calculating the half size.\n # Examples\n ```\n # use bevy_math::{URect, UVec2};\n let r = URect::new(0, 0, 4, 2); // w=4 h=2\n assert_eq!(r.half_size(), UVec2::new(2, 1));\n ```"
    },
    "bevy_math::rects::urect::URect::height": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "height",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Rectangle height (max.y - min.y).\n # Examples\n ```\n # use bevy_math::URect;\n let r = URect::new(0, 0, 5, 1); // w=5 h=1\n assert_eq!(r.height(), 1);\n ```"
    },
    "bevy_math::rects::urect::URect::inflate": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "inflate",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "expansion"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::urect::URect"
        }
      },
      "documentation": " Create a new rectangle by expanding it evenly on all sides.\n A positive expansion value produces a larger rectangle,\n while a negative expansion value produces a smaller rectangle.\n If this would result in zero width or height, [`URect::EMPTY`] is returned instead.\n # Examples\n ```\n # use bevy_math::{URect, UVec2};\n let r = URect::new(4, 4, 6, 6); // w=2 h=2\n let r2 = r.inflate(1); // w=4 h=4\n assert_eq!(r2.min, UVec2::splat(3));\n assert_eq!(r2.max, UVec2::splat(7));\n let r = URect::new(4, 4, 8, 8); // w=4 h=4\n let r2 = r.inflate(-1); // w=2 h=2\n assert_eq!(r2.min, UVec2::splat(5));\n assert_eq!(r2.max, UVec2::splat(7));\n ```"
    },
    "bevy_math::rects::urect::URect::intersect": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "intersect",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::rects::urect::URect"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::urect::URect"
        }
      },
      "documentation": " Build a new rectangle formed of the intersection of this rectangle and another rectangle.\n The intersection is the largest rectangle enclosed in both rectangles. If the intersection\n is empty, this method returns an empty rectangle ([`URect::is_empty()`] returns `true`), but\n the actual values of [`URect::min`] and [`URect::max`] are implementation-dependent.\n # Examples\n ```\n # use bevy_math::{URect, UVec2};\n let r1 = URect::new(0, 0, 2, 2); // w=2 h=2\n let r2 = URect::new(1, 1, 3, 3); // w=2 h=2\n let r = r1.intersect(r2);\n assert_eq!(r.min, UVec2::new(1, 1));\n assert_eq!(r.max, UVec2::new(2, 2));\n ```"
    },
    "bevy_math::rects::urect::URect::is_empty": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "is_empty",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Check if the rectangle is empty.\n # Examples\n ```\n # use bevy_math::{URect, UVec2};\n let r = URect::from_corners(UVec2::ZERO, UVec2::new(0, 1)); // w=0 h=1\n assert!(r.is_empty());\n ```"
    },
    "bevy_math::rects::urect::URect::new": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "x0"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "y0"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "x1"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "y1"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::urect::URect"
        }
      },
      "documentation": " Create a new rectangle from two corner points.\n The two points do not need to be the minimum and/or maximum corners.\n They only need to be two opposite corners.\n # Examples\n ```\n # use bevy_math::URect;\n let r = URect::new(0, 4, 10, 6); // w=10 h=2\n let r = URect::new(2, 4, 5, 0); // w=3 h=4\n ```"
    },
    "bevy_math::rects::urect::URect::size": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "size",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Rectangle size.\n # Examples\n ```\n # use bevy_math::{URect, UVec2};\n let r = URect::new(0, 0, 5, 1); // w=5 h=1\n assert_eq!(r.size(), UVec2::new(5, 1));\n ```"
    },
    "bevy_math::rects::urect::URect::union": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "union",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::rects::urect::URect"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::urect::URect"
        }
      },
      "documentation": " Build a new rectangle formed of the union of this rectangle and another rectangle.\n The union is the smallest rectangle enclosing both rectangles.\n # Examples\n ```\n # use bevy_math::{URect, UVec2};\n let r1 = URect::new(0, 0, 5, 1); // w=5 h=1\n let r2 = URect::new(1, 0, 3, 8); // w=2 h=4\n let r = r1.union(r2);\n assert_eq!(r.min, UVec2::new(0, 0));\n assert_eq!(r.max, UVec2::new(5, 8));\n ```"
    },
    "bevy_math::rects::urect::URect::union_point": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "union_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rects::urect::URect"
        }
      },
      "documentation": " Build a new rectangle formed of the union of this rectangle and a point.\n The union is the smallest rectangle enclosing both the rectangle and the point. If the\n point is already inside the rectangle, this method returns a copy of the rectangle.\n # Examples\n ```\n # use bevy_math::{URect, UVec2};\n let r = URect::new(0, 0, 5, 1); // w=5 h=1\n let u = r.union_point(UVec2::new(3, 6));\n assert_eq!(u.min, UVec2::ZERO);\n assert_eq!(u.max, UVec2::new(5, 6));\n ```"
    },
    "bevy_math::rects::urect::URect::width": {
      "namespace": "bevy_math::rects::urect::URect",
      "identifier": "width",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rects::urect::URect"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Rectangle width (max.x - min.x).\n # Examples\n ```\n # use bevy_math::URect;\n let r = URect::new(0, 0, 5, 1); // w=5 h=1\n assert_eq!(r.width(), 5);\n ```"
    },
    "bevy_math::rotation2d::Rot2::angle_between": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "angle_between",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the angle in radians needed to make `self` and `other` coincide."
    },
    "bevy_math::rotation2d::Rot2::angle_to": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "angle_to",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the angle in radians needed to make `self` and `other` coincide."
    },
    "bevy_math::rotation2d::Rot2::as_degrees": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "as_degrees",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the rotation in degrees in the `(-180, 180]` range."
    },
    "bevy_math::rotation2d::Rot2::as_radians": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "as_radians",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the rotation in radians in the `(-pi, pi]` range."
    },
    "bevy_math::rotation2d::Rot2::as_turn_fraction": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "as_turn_fraction",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the rotation as a fraction of a full 360 degree turn."
    },
    "bevy_math::rotation2d::Rot2::clone": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      }
    },
    "bevy_math::rotation2d::Rot2::degrees": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "degrees",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "degrees"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      },
      "documentation": " Creates a [`Rot2`] from a counterclockwise angle in degrees.\n # Note\n The input rotation will always be clamped to the range `(-180°, 180°]` by design.\n # Example\n ```\n # use bevy_math::Rot2;\n # use approx::assert_relative_eq;\n let rot1 = Rot2::degrees(270.0);\n let rot2 = Rot2::degrees(-90.0);\n assert_relative_eq!(rot1, rot2);\n let rot3 = Rot2::degrees(180.0);\n assert_relative_eq!(rot1 * rot1, rot3);\n ```"
    },
    "bevy_math::rotation2d::Rot2::eq": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_math::rotation2d::Rot2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_math::rotation2d::Rot2::fast_renormalize": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "fast_renormalize",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      },
      "documentation": " Returns `self` after an approximate normalization, assuming the value is already nearly normalized.\n Useful for preventing numerical error accumulation.\n See [`Dir3::fast_renormalize`](crate::Dir3::fast_renormalize) for an example of when such error accumulation might occur."
    },
    "bevy_math::rotation2d::Rot2::from_sin_cos": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "from_sin_cos",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "sin"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "cos"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      },
      "documentation": " Creates a [`Rot2`] from the sine and cosine of an angle in radians.\n The rotation is only valid if `sin * sin + cos * cos == 1.0`.\n # Panics\n Panics if `sin * sin + cos * cos != 1.0` when the `glam_assert` feature is enabled."
    },
    "bevy_math::rotation2d::Rot2::inverse": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      },
      "documentation": " Returns the inverse of the rotation. This is also the conjugate\n of the unit complex number representing the rotation."
    },
    "bevy_math::rotation2d::Rot2::is_finite": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if the rotation is neither infinite nor NaN."
    },
    "bevy_math::rotation2d::Rot2::is_nan": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if the rotation is NaN."
    },
    "bevy_math::rotation2d::Rot2::is_near_identity": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "is_near_identity",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if the rotation is near [`Rot2::IDENTITY`]."
    },
    "bevy_math::rotation2d::Rot2::is_normalized": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "is_normalized",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns whether `self` has a length of `1.0` or not.\n Uses a precision threshold of approximately `1e-4`."
    },
    "bevy_math::rotation2d::Rot2::length": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "length",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the length or norm of the complex number used to represent the rotation.\n The length is typically expected to be `1.0`. Unexpectedly denormalized rotations\n can be a result of incorrect construction or floating point error caused by\n successive operations."
    },
    "bevy_math::rotation2d::Rot2::length_recip": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "length_recip",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes `1.0 / self.length()`.\n For valid results, `self` must _not_ have a length of zero."
    },
    "bevy_math::rotation2d::Rot2::length_squared": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the squared length or norm of the complex number used to represent the rotation.\n This is generally faster than [`Rot2::length()`], as it avoids a square\n root operation.\n The length is typically expected to be `1.0`. Unexpectedly denormalized rotations\n can be a result of incorrect construction or floating point error caused by\n successive operations."
    },
    "bevy_math::rotation2d::Rot2::mul": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      }
    },
    "bevy_math::rotation2d::Rot2::mul-1": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          }
        },
        {
          "kind": {
            "val": "bevy_math::direction::Dir2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir2"
        }
      }
    },
    "bevy_math::rotation2d::Rot2::mul-2": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          }
        },
        {
          "kind": {
            "val": "glam::Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "bevy_math::rotation2d::Rot2::nlerp": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "nlerp",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "end"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      },
      "documentation": " Performs a linear interpolation between `self` and `rhs` based on\n the value `s`, and normalizes the rotation afterwards.\n When `s == 0.0`, the result will be equal to `self`.\n When `s == 1.0`, the result will be equal to `rhs`.\n This is slightly more efficient than [`slerp`](Self::slerp), and produces a similar result\n when the difference between the two rotations is small. At larger differences,\n the result resembles a kind of ease-in-out effect.\n If you would like the angular velocity to remain constant, consider using [`slerp`](Self::slerp) instead.\n # Details\n `nlerp` corresponds to computing an angle for a point at position `s` on a line drawn\n between the endpoints of the arc formed by `self` and `rhs` on a unit circle,\n and normalizing the result afterwards.\n Note that if the angles are opposite like 0 and π, the line will pass through the origin,\n and the resulting angle will always be either `self` or `rhs` depending on `s`.\n If `s` happens to be `0.5` in this case, a valid rotation cannot be computed, and `self`\n will be returned as a fallback.\n # Example\n ```\n # use bevy_math::Rot2;\n #\n let rot1 = Rot2::IDENTITY;\n let rot2 = Rot2::degrees(135.0);\n let result1 = rot1.nlerp(rot2, 1.0 / 3.0);\n assert_eq!(result1.as_degrees(), 28.675055);\n let result2 = rot1.nlerp(rot2, 0.5);\n assert_eq!(result2.as_degrees(), 67.5);\n ```"
    },
    "bevy_math::rotation2d::Rot2::normalize": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "normalize",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      },
      "documentation": " Returns `self` with a length of `1.0`.\n Note that [`Rot2`] should typically already be normalized by design.\n Manual normalization is only needed when successive operations result in\n accumulated floating point error, or if the rotation was constructed\n with invalid values.\n # Panics\n Panics if `self` has a length of zero, NaN, or infinity when debug assertions are enabled."
    },
    "bevy_math::rotation2d::Rot2::radians": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "radians",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "radians"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      },
      "documentation": " Creates a [`Rot2`] from a counterclockwise angle in radians.\n # Note\n The input rotation will always be clamped to the range `(-π, π]` by design.\n # Example\n ```\n # use bevy_math::Rot2;\n # use approx::assert_relative_eq;\n # use std::f32::consts::{FRAC_PI_2, PI};\n let rot1 = Rot2::radians(3.0 * FRAC_PI_2);\n let rot2 = Rot2::radians(-FRAC_PI_2);\n assert_relative_eq!(rot1, rot2);\n let rot3 = Rot2::radians(PI);\n assert_relative_eq!(rot1 * rot1, rot3);\n ```"
    },
    "bevy_math::rotation2d::Rot2::sin_cos": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "sin_cos",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": [
            {
              "primitive": "f32"
            },
            {
              "primitive": "f32"
            }
          ]
        }
      },
      "documentation": " Returns the sine and cosine of the rotation angle in radians."
    },
    "bevy_math::rotation2d::Rot2::slerp": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "slerp",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::rotation2d::Rot2"
          },
          "name": "end"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      },
      "documentation": " Performs a spherical linear interpolation between `self` and `end`\n based on the value `s`.\n This corresponds to interpolating between the two angles at a constant angular velocity.\n When `s == 0.0`, the result will be equal to `self`.\n When `s == 1.0`, the result will be equal to `rhs`.\n If you would like the rotation to have a kind of ease-in-out effect, consider\n using the slightly more efficient [`nlerp`](Self::nlerp) instead.\n # Example\n ```\n # use bevy_math::Rot2;\n #\n let rot1 = Rot2::IDENTITY;\n let rot2 = Rot2::degrees(135.0);\n let result1 = rot1.slerp(rot2, 1.0 / 3.0);\n assert_eq!(result1.as_degrees(), 45.0);\n let result2 = rot1.slerp(rot2, 0.5);\n assert_eq!(result2.as_degrees(), 67.5);\n ```"
    },
    "bevy_math::rotation2d::Rot2::turn_fraction": {
      "namespace": "bevy_math::rotation2d::Rot2",
      "identifier": "turn_fraction",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "fraction"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::rotation2d::Rot2"
        }
      },
      "documentation": " Creates a [`Rot2`] from a counterclockwise fraction of a full turn of 360 degrees.\n # Note\n The input rotation will always be clamped to the range `(-50%, 50%]` by design.\n # Example\n ```\n # use bevy_math::Rot2;\n # use approx::assert_relative_eq;\n let rot1 = Rot2::turn_fraction(0.75);\n let rot2 = Rot2::turn_fraction(-0.25);\n assert_relative_eq!(rot1, rot2);\n let rot3 = Rot2::turn_fraction(0.5);\n assert_relative_eq!(rot1 * rot1, rot3);\n ```"
    },
    "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration::short_name": {
      "namespace": "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration",
      "identifier": "short_name",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "str"
        }
      }
    },
    "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration::type_name": {
      "namespace": "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration",
      "identifier": "type_name",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "str"
        }
      }
    },
    "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder::build": {
      "namespace": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder",
      "identifier": "build",
      "arguments": [
        {
          "kind": {
            "primitive": "functionCallContext"
          },
          "name": "ctxt"
        },
        {
          "kind": {
            "val": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "interopResult": {
            "vec": {
              "val": "bevy_mod_scripting_core::bindings::query::ScriptQueryResult"
            }
          }
        }
      }
    },
    "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder::component": {
      "namespace": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder",
      "identifier": "component",
      "arguments": [
        {
          "kind": {
            "val": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder"
          },
          "name": "s"
        },
        {
          "kind": {
            "val": "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration"
          },
          "name": "components"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder"
        }
      }
    },
    "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder::with": {
      "namespace": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder",
      "identifier": "with",
      "arguments": [
        {
          "kind": {
            "val": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder"
          },
          "name": "s"
        },
        {
          "kind": {
            "val": "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration"
          },
          "name": "with"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder"
        }
      }
    },
    "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder::without": {
      "namespace": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder",
      "identifier": "without",
      "arguments": [
        {
          "kind": {
            "val": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder"
          },
          "name": "s"
        },
        {
          "kind": {
            "val": "bevy_mod_scripting_core::bindings::query::ScriptComponentRegistration"
          },
          "name": "without"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_mod_scripting_core::bindings::query::ScriptQueryBuilder"
        }
      }
    },
    "bevy_mod_scripting_core::bindings::query::ScriptQueryResult::components": {
      "namespace": "bevy_mod_scripting_core::bindings::query::ScriptQueryResult",
      "identifier": "components",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_mod_scripting_core::bindings::query::ScriptQueryResult"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "vec": {
            "primitive": "reflectReference"
          }
        }
      }
    },
    "bevy_mod_scripting_core::bindings::query::ScriptQueryResult::entity": {
      "namespace": "bevy_mod_scripting_core::bindings::query::ScriptQueryResult",
      "identifier": "entity",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_mod_scripting_core::bindings::query::ScriptQueryResult"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_ecs::entity::Entity"
        }
      }
    },
    "bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration::short_name": {
      "namespace": "bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration",
      "identifier": "short_name",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "str"
        }
      }
    },
    "bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration::type_name": {
      "namespace": "bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration",
      "identifier": "type_name",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_mod_scripting_core::bindings::query::ScriptResourceRegistration"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "str"
        }
      }
    },
    "bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration::short_name": {
      "namespace": "bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration",
      "identifier": "short_name",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "string"
        }
      }
    },
    "bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration::type_name": {
      "namespace": "bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration",
      "identifier": "type_name",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_mod_scripting_core::bindings::query::ScriptTypeRegistration"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "string"
        }
      }
    },
    "bevy_time::fixed::Fixed::clone": {
      "namespace": "bevy_time::fixed::Fixed",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::fixed::Fixed"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_time::fixed::Fixed"
        }
      }
    },
    "bevy_time::real::Real::clone": {
      "namespace": "bevy_time::real::Real",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::real::Real"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_time::real::Real"
        }
      }
    },
    "bevy_time::stopwatch::Stopwatch::assert_receiver_is_total_eq": {
      "namespace": "bevy_time::stopwatch::Stopwatch",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::stopwatch::Stopwatch"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_time::stopwatch::Stopwatch::clone": {
      "namespace": "bevy_time::stopwatch::Stopwatch",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::stopwatch::Stopwatch"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_time::stopwatch::Stopwatch"
        }
      }
    },
    "bevy_time::stopwatch::Stopwatch::elapsed": {
      "namespace": "bevy_time::stopwatch::Stopwatch",
      "identifier": "elapsed",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::stopwatch::Stopwatch"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Duration"
        }
      },
      "documentation": " Returns the elapsed time since the last [`reset`](Stopwatch::reset)\n of the stopwatch.\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut stopwatch = Stopwatch::new();\n stopwatch.tick(Duration::from_secs(1));\n assert_eq!(stopwatch.elapsed(), Duration::from_secs(1));\n ```\n # See Also\n [`elapsed_secs`](Stopwatch::elapsed_secs) - if an `f32` value is desirable instead.\n [`elapsed_secs_f64`](Stopwatch::elapsed_secs_f64) - if an `f64` is desirable instead."
    },
    "bevy_time::stopwatch::Stopwatch::elapsed_secs": {
      "namespace": "bevy_time::stopwatch::Stopwatch",
      "identifier": "elapsed_secs",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::stopwatch::Stopwatch"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the elapsed time since the last [`reset`](Stopwatch::reset)\n of the stopwatch, in seconds.\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut stopwatch = Stopwatch::new();\n stopwatch.tick(Duration::from_secs(1));\n assert_eq!(stopwatch.elapsed_secs(), 1.0);\n ```\n # See Also\n [`elapsed`](Stopwatch::elapsed) - if a `Duration` is desirable instead.\n [`elapsed_secs_f64`](Stopwatch::elapsed_secs_f64) - if an `f64` is desirable instead."
    },
    "bevy_time::stopwatch::Stopwatch::elapsed_secs_f64": {
      "namespace": "bevy_time::stopwatch::Stopwatch",
      "identifier": "elapsed_secs_f64",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::stopwatch::Stopwatch"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the elapsed time since the last [`reset`](Stopwatch::reset)\n of the stopwatch, in seconds, as f64.\n # See Also\n [`elapsed`](Stopwatch::elapsed) - if a `Duration` is desirable instead.\n [`elapsed_secs`](Stopwatch::elapsed_secs) - if an `f32` is desirable instead."
    },
    "bevy_time::stopwatch::Stopwatch::eq": {
      "namespace": "bevy_time::stopwatch::Stopwatch",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::stopwatch::Stopwatch"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_time::stopwatch::Stopwatch"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_time::stopwatch::Stopwatch::is_paused": {
      "namespace": "bevy_time::stopwatch::Stopwatch",
      "identifier": "is_paused",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::stopwatch::Stopwatch"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if the stopwatch is paused.\n # Examples\n ```\n # use bevy_time::*;\n let mut stopwatch = Stopwatch::new();\n assert!(!stopwatch.is_paused());\n stopwatch.pause();\n assert!(stopwatch.is_paused());\n stopwatch.unpause();\n assert!(!stopwatch.is_paused());\n ```"
    },
    "bevy_time::stopwatch::Stopwatch::new": {
      "namespace": "bevy_time::stopwatch::Stopwatch",
      "identifier": "new",
      "return_type": {
        "kind": {
          "val": "bevy_time::stopwatch::Stopwatch"
        }
      },
      "documentation": " Create a new unpaused `Stopwatch` with no elapsed time.\n # Examples\n ```\n # use bevy_time::*;\n let stopwatch = Stopwatch::new();\n assert_eq!(stopwatch.elapsed_secs(), 0.0);\n assert_eq!(stopwatch.is_paused(), false);\n ```"
    },
    "bevy_time::stopwatch::Stopwatch::pause": {
      "namespace": "bevy_time::stopwatch::Stopwatch",
      "identifier": "pause",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_time::stopwatch::Stopwatch"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Pauses the stopwatch. Any call to [`tick`](Stopwatch::tick) while\n paused will not have any effect on the elapsed time.\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut stopwatch = Stopwatch::new();\n stopwatch.pause();\n stopwatch.tick(Duration::from_secs_f32(1.5));\n assert!(stopwatch.is_paused());\n assert_eq!(stopwatch.elapsed_secs(), 0.0);\n ```"
    },
    "bevy_time::stopwatch::Stopwatch::reset": {
      "namespace": "bevy_time::stopwatch::Stopwatch",
      "identifier": "reset",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_time::stopwatch::Stopwatch"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Resets the stopwatch. The reset doesn't affect the paused state of the stopwatch.\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut stopwatch = Stopwatch::new();\n stopwatch.tick(Duration::from_secs_f32(1.5));\n stopwatch.reset();\n assert_eq!(stopwatch.elapsed_secs(), 0.0);\n ```"
    },
    "bevy_time::stopwatch::Stopwatch::set_elapsed": {
      "namespace": "bevy_time::stopwatch::Stopwatch",
      "identifier": "set_elapsed",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_time::stopwatch::Stopwatch"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_utils::Duration"
          },
          "name": "time"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Sets the elapsed time of the stopwatch.\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut stopwatch = Stopwatch::new();\n stopwatch.set_elapsed(Duration::from_secs_f32(1.0));\n assert_eq!(stopwatch.elapsed_secs(), 1.0);\n ```"
    },
    "bevy_time::stopwatch::Stopwatch::unpause": {
      "namespace": "bevy_time::stopwatch::Stopwatch",
      "identifier": "unpause",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_time::stopwatch::Stopwatch"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Unpauses the stopwatch. Resume the effect of ticking on elapsed time.\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut stopwatch = Stopwatch::new();\n stopwatch.pause();\n stopwatch.tick(Duration::from_secs_f32(1.0));\n stopwatch.unpause();\n stopwatch.tick(Duration::from_secs_f32(1.0));\n assert!(!stopwatch.is_paused());\n assert_eq!(stopwatch.elapsed_secs(), 1.0);\n ```"
    },
    "bevy_time::timer::Timer::assert_receiver_is_total_eq": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_time::timer::Timer::clone": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_time::timer::Timer"
        }
      }
    },
    "bevy_time::timer::Timer::duration": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "duration",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Duration"
        }
      },
      "documentation": " Returns the duration of the timer.\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let timer = Timer::new(Duration::from_secs(1), TimerMode::Once);\n assert_eq!(timer.duration(), Duration::from_secs(1));\n ```"
    },
    "bevy_time::timer::Timer::elapsed": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "elapsed",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Duration"
        }
      },
      "documentation": " Returns the time elapsed on the timer. Guaranteed to be between 0.0 and `duration`.\n Will only equal `duration` when the timer is finished and non repeating.\n See also [`Stopwatch::elapsed`](Stopwatch::elapsed).\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut timer = Timer::from_seconds(1.0, TimerMode::Once);\n timer.tick(Duration::from_secs_f32(0.5));\n assert_eq!(timer.elapsed(), Duration::from_secs_f32(0.5));\n ```"
    },
    "bevy_time::timer::Timer::elapsed_secs": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "elapsed_secs",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the time elapsed on the timer as an `f32`.\n See also [`Timer::elapsed`](Timer::elapsed)."
    },
    "bevy_time::timer::Timer::elapsed_secs_f64": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "elapsed_secs_f64",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the time elapsed on the timer as an `f64`.\n See also [`Timer::elapsed`](Timer::elapsed)."
    },
    "bevy_time::timer::Timer::eq": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_time::timer::Timer::finished": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "finished",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if the timer has reached its duration.\n For repeating timers, this method behaves identically to [`Timer::just_finished`].\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut timer_once = Timer::from_seconds(1.0, TimerMode::Once);\n timer_once.tick(Duration::from_secs_f32(1.5));\n assert!(timer_once.finished());\n timer_once.tick(Duration::from_secs_f32(0.5));\n assert!(timer_once.finished());\n let mut timer_repeating = Timer::from_seconds(1.0, TimerMode::Repeating);\n timer_repeating.tick(Duration::from_secs_f32(1.1));\n assert!(timer_repeating.finished());\n timer_repeating.tick(Duration::from_secs_f32(0.8));\n assert!(!timer_repeating.finished());\n timer_repeating.tick(Duration::from_secs_f32(0.6));\n assert!(timer_repeating.finished());\n ```"
    },
    "bevy_time::timer::Timer::fraction": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "fraction",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the fraction of the timer elapsed time (goes from 0.0 to 1.0).\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut timer = Timer::from_seconds(2.0, TimerMode::Once);\n timer.tick(Duration::from_secs_f32(0.5));\n assert_eq!(timer.fraction(), 0.25);\n ```"
    },
    "bevy_time::timer::Timer::fraction_remaining": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "fraction_remaining",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the fraction of the timer remaining time (goes from 1.0 to 0.0).\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut timer = Timer::from_seconds(2.0, TimerMode::Once);\n timer.tick(Duration::from_secs_f32(0.5));\n assert_eq!(timer.fraction_remaining(), 0.75);\n ```"
    },
    "bevy_time::timer::Timer::from_seconds": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "from_seconds",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "duration"
        },
        {
          "kind": {
            "val": "bevy_time::timer::TimerMode"
          },
          "name": "mode"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_time::timer::Timer"
        }
      },
      "documentation": " Creates a new timer with a given duration in seconds.\n # Example\n ```\n # use bevy_time::*;\n let mut timer = Timer::from_seconds(1.0, TimerMode::Once);\n ```"
    },
    "bevy_time::timer::Timer::just_finished": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "just_finished",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` only on the tick the timer reached its duration.\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut timer = Timer::from_seconds(1.0, TimerMode::Once);\n timer.tick(Duration::from_secs_f32(1.5));\n assert!(timer.just_finished());\n timer.tick(Duration::from_secs_f32(0.5));\n assert!(!timer.just_finished());\n ```"
    },
    "bevy_time::timer::Timer::mode": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "mode",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_time::timer::TimerMode"
        }
      },
      "documentation": " Returns the mode of the timer.\n # Examples\n ```\n # use bevy_time::*;\n let mut timer = Timer::from_seconds(1.0, TimerMode::Repeating);\n assert_eq!(timer.mode(), TimerMode::Repeating);\n ```"
    },
    "bevy_time::timer::Timer::new": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "val": "bevy_utils::Duration"
          },
          "name": "duration"
        },
        {
          "kind": {
            "val": "bevy_time::timer::TimerMode"
          },
          "name": "mode"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_time::timer::Timer"
        }
      },
      "documentation": " Creates a new timer with a given duration.\n See also [`Timer::from_seconds`](Timer::from_seconds)."
    },
    "bevy_time::timer::Timer::pause": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "pause",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Pauses the Timer. Disables the ticking of the timer.\n See also [`Stopwatch::pause`](Stopwatch::pause).\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut timer = Timer::from_seconds(1.0, TimerMode::Once);\n timer.pause();\n timer.tick(Duration::from_secs_f32(0.5));\n assert_eq!(timer.elapsed_secs(), 0.0);\n ```"
    },
    "bevy_time::timer::Timer::paused": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "paused",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if the timer is paused.\n See also [`Stopwatch::is_paused`](Stopwatch::is_paused).\n # Examples\n ```\n # use bevy_time::*;\n let mut timer = Timer::from_seconds(1.0, TimerMode::Once);\n assert!(!timer.paused());\n timer.pause();\n assert!(timer.paused());\n timer.unpause();\n assert!(!timer.paused());\n ```"
    },
    "bevy_time::timer::Timer::remaining": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "remaining",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Duration"
        }
      },
      "documentation": " Returns the remaining time using Duration\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut timer = Timer::from_seconds(2.0, TimerMode::Once);\n timer.tick(Duration::from_secs_f32(0.5));\n assert_eq!(timer.remaining(), Duration::from_secs_f32(1.5));\n ```"
    },
    "bevy_time::timer::Timer::remaining_secs": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "remaining_secs",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the remaining time in seconds\n # Examples\n ```\n # use bevy_time::*;\n use std::cmp::Ordering;\n use std::time::Duration;\n let mut timer = Timer::from_seconds(2.0, TimerMode::Once);\n timer.tick(Duration::from_secs_f32(0.5));\n let result = timer.remaining_secs().total_cmp(&1.5);\n assert_eq!(Ordering::Equal, result);\n ```"
    },
    "bevy_time::timer::Timer::reset": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "reset",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Resets the timer. The reset doesn't affect the `paused` state of the timer.\n See also [`Stopwatch::reset`](Stopwatch::reset).\n Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut timer = Timer::from_seconds(1.0, TimerMode::Once);\n timer.tick(Duration::from_secs_f32(1.5));\n timer.reset();\n assert!(!timer.finished());\n assert!(!timer.just_finished());\n assert_eq!(timer.elapsed_secs(), 0.0);\n ```"
    },
    "bevy_time::timer::Timer::set_duration": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "set_duration",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_time::timer::Timer"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_utils::Duration"
          },
          "name": "duration"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Sets the duration of the timer.\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut timer = Timer::from_seconds(1.5, TimerMode::Once);\n timer.set_duration(Duration::from_secs(1));\n assert_eq!(timer.duration(), Duration::from_secs(1));\n ```"
    },
    "bevy_time::timer::Timer::set_elapsed": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "set_elapsed",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_time::timer::Timer"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_utils::Duration"
          },
          "name": "time"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Sets the elapsed time of the timer without any other considerations.\n See also [`Stopwatch::set`](Stopwatch::set).\n #\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut timer = Timer::from_seconds(1.0, TimerMode::Once);\n timer.set_elapsed(Duration::from_secs(2));\n assert_eq!(timer.elapsed(), Duration::from_secs(2));\n // the timer is not finished even if the elapsed time is greater than the duration.\n assert!(!timer.finished());\n ```"
    },
    "bevy_time::timer::Timer::set_mode": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "set_mode",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_time::timer::Timer"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_time::timer::TimerMode"
          },
          "name": "mode"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Sets the mode of the timer.\n # Examples\n ```\n # use bevy_time::*;\n let mut timer = Timer::from_seconds(1.0, TimerMode::Repeating);\n timer.set_mode(TimerMode::Once);\n assert_eq!(timer.mode(), TimerMode::Once);\n ```"
    },
    "bevy_time::timer::Timer::times_finished_this_tick": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "times_finished_this_tick",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the number of times a repeating timer\n finished during the last [`tick`](Timer<T>::tick) call.\n For non repeating-timers, this method will only ever\n return 0 or 1.\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut timer = Timer::from_seconds(1.0, TimerMode::Repeating);\n timer.tick(Duration::from_secs_f32(6.0));\n assert_eq!(timer.times_finished_this_tick(), 6);\n timer.tick(Duration::from_secs_f32(2.0));\n assert_eq!(timer.times_finished_this_tick(), 2);\n timer.tick(Duration::from_secs_f32(0.5));\n assert_eq!(timer.times_finished_this_tick(), 0);\n ```"
    },
    "bevy_time::timer::Timer::unpause": {
      "namespace": "bevy_time::timer::Timer",
      "identifier": "unpause",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_time::timer::Timer"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Unpauses the Timer. Resumes the ticking of the timer.\n See also [`Stopwatch::unpause()`](Stopwatch::unpause).\n # Examples\n ```\n # use bevy_time::*;\n use std::time::Duration;\n let mut timer = Timer::from_seconds(1.0, TimerMode::Once);\n timer.pause();\n timer.tick(Duration::from_secs_f32(0.5));\n timer.unpause();\n timer.tick(Duration::from_secs_f32(0.5));\n assert_eq!(timer.elapsed_secs(), 0.5);\n ```"
    },
    "bevy_time::timer::TimerMode::assert_receiver_is_total_eq": {
      "namespace": "bevy_time::timer::TimerMode",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::TimerMode"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_time::timer::TimerMode::clone": {
      "namespace": "bevy_time::timer::TimerMode",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::TimerMode"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_time::timer::TimerMode"
        }
      }
    },
    "bevy_time::timer::TimerMode::eq": {
      "namespace": "bevy_time::timer::TimerMode",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::timer::TimerMode"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_time::timer::TimerMode"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_time::virt::Virtual::clone": {
      "namespace": "bevy_time::virt::Virtual",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_time::virt::Virtual"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_time::virt::Virtual"
        }
      }
    },
    "bevy_transform::components::global_transform::GlobalTransform::affine": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "affine",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Returns the 3d affine transformation matrix as an [`Affine3A`]."
    },
    "bevy_transform::components::global_transform::GlobalTransform::back": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "back",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": "Return the local back vector (Z)."
    },
    "bevy_transform::components::global_transform::GlobalTransform::clone": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::global_transform::GlobalTransform"
        }
      }
    },
    "bevy_transform::components::global_transform::GlobalTransform::compute_matrix": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "compute_matrix",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Returns the 3d affine transformation matrix as a [`Mat4`]."
    },
    "bevy_transform::components::global_transform::GlobalTransform::compute_transform": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "compute_transform",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::transform::Transform"
        }
      },
      "documentation": " Returns the transformation as a [`Transform`].\n The transform is expected to be non-degenerate and without shearing, or the output\n will be invalid."
    },
    "bevy_transform::components::global_transform::GlobalTransform::down": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "down",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": "Return the local down vector (-Y)."
    },
    "bevy_transform::components::global_transform::GlobalTransform::eq": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_transform::components::global_transform::GlobalTransform::forward": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "forward",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": "Return the local forward vector (-Z)."
    },
    "bevy_transform::components::global_transform::GlobalTransform::from_isometry": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "from_isometry",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::isometry::Isometry3d"
          },
          "name": "iso"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::global_transform::GlobalTransform"
        }
      }
    },
    "bevy_transform::components::global_transform::GlobalTransform::from_rotation": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "from_rotation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::global_transform::GlobalTransform"
        }
      }
    },
    "bevy_transform::components::global_transform::GlobalTransform::from_scale": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "from_scale",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "scale"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::global_transform::GlobalTransform"
        }
      }
    },
    "bevy_transform::components::global_transform::GlobalTransform::from_translation": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "from_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::global_transform::GlobalTransform"
        }
      }
    },
    "bevy_transform::components::global_transform::GlobalTransform::from_xyz": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "from_xyz",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::global_transform::GlobalTransform"
        }
      }
    },
    "bevy_transform::components::global_transform::GlobalTransform::left": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "left",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": "Return the local left vector (-X)."
    },
    "bevy_transform::components::global_transform::GlobalTransform::mul": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "bevy_transform::components::global_transform::GlobalTransform::mul-1": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "bevy_transform::components::global_transform::GlobalTransform"
          }
        },
        {
          "kind": {
            "val": "bevy_transform::components::global_transform::GlobalTransform"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::global_transform::GlobalTransform"
        }
      }
    },
    "bevy_transform::components::global_transform::GlobalTransform::mul-2": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "bevy_transform::components::global_transform::GlobalTransform"
          }
        },
        {
          "kind": {
            "val": "bevy_transform::components::transform::Transform"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::global_transform::GlobalTransform"
        }
      }
    },
    "bevy_transform::components::global_transform::GlobalTransform::mul_transform": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "mul_transform",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_transform::components::transform::Transform"
          },
          "name": "transform"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::global_transform::GlobalTransform"
        }
      },
      "documentation": " Multiplies `self` with `transform` component by component, returning the\n resulting [`GlobalTransform`]"
    },
    "bevy_transform::components::global_transform::GlobalTransform::radius_vec3a": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "radius_vec3a",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "extents"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Get an upper bound of the radius from the given `extents`."
    },
    "bevy_transform::components::global_transform::GlobalTransform::reparented_to": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "reparented_to",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "parent"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::transform::Transform"
        }
      },
      "documentation": " Returns the [`Transform`] `self` would have if it was a child of an entity\n with the `parent` [`GlobalTransform`].\n This is useful if you want to \"reparent\" an [`Entity`](bevy_ecs::entity::Entity).\n Say you have an entity `e1` that you want to turn into a child of `e2`,\n but you want `e1` to keep the same global transform, even after re-parenting. You would use:\n ```\n # use bevy_transform::prelude::{GlobalTransform, Transform};\n # use bevy_ecs::prelude::{Entity, Query, Component, Commands};\n # use bevy_hierarchy::{prelude::Parent, BuildChildren};\n #[derive(Component)]\n struct ToReparent {\n     new_parent: Entity,\n }\n fn reparent_system(\n     mut commands: Commands,\n     mut targets: Query<(&mut Transform, Entity, &GlobalTransform, &ToReparent)>,\n     transforms: Query<&GlobalTransform>,\n ) {\n     for (mut transform, entity, initial, to_reparent) in targets.iter_mut() {\n         if let Ok(parent_transform) = transforms.get(to_reparent.new_parent) {\n             *transform = initial.reparented_to(parent_transform);\n             commands.entity(entity)\n                 .remove::<ToReparent>()\n                 .set_parent(to_reparent.new_parent);\n         }\n     }\n }\n ```\n The transform is expected to be non-degenerate and without shearing, or the output\n will be invalid."
    },
    "bevy_transform::components::global_transform::GlobalTransform::right": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "right",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": "Return the local right vector (X)."
    },
    "bevy_transform::components::global_transform::GlobalTransform::rotation": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "rotation",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Get the rotation as a [`Quat`].\n The transform is expected to be non-degenerate and without shearing, or the output will be invalid.\n # Warning\n This is calculated using `to_scale_rotation_translation`, meaning that you\n should probably use it directly if you also need translation or scale."
    },
    "bevy_transform::components::global_transform::GlobalTransform::scale": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "scale",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Get the scale as a [`Vec3`].\n The transform is expected to be non-degenerate and without shearing, or the output will be invalid.\n Some of the computations overlap with `to_scale_rotation_translation`, which means you should use\n it instead if you also need rotation."
    },
    "bevy_transform::components::global_transform::GlobalTransform::to_isometry": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "to_isometry",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry3d"
        }
      },
      "documentation": " Returns the isometric part of the transformation as an [isometry]. Any scaling done by the\n transformation will be ignored.\n The transform is expected to be non-degenerate and without shearing, or the output\n will be invalid.\n [isometry]: Isometry3d"
    },
    "bevy_transform::components::global_transform::GlobalTransform::transform_point": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "transform_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Transforms the given point from local space to global space, applying shear, scale, rotation and translation.\n It can be used like this:\n ```\n # use bevy_transform::prelude::{GlobalTransform};\n # use bevy_math::prelude::Vec3;\n let global_transform = GlobalTransform::from_xyz(1., 2., 3.);\n let local_point = Vec3::new(1., 2., 3.);\n let global_point = global_transform.transform_point(local_point);\n assert_eq!(global_point, Vec3::new(2., 4., 6.));\n ```\n ```\n # use bevy_transform::prelude::{GlobalTransform};\n # use bevy_math::Vec3;\n let global_point = Vec3::new(2., 4., 6.);\n let global_transform = GlobalTransform::from_xyz(1., 2., 3.);\n let local_point = global_transform.affine().inverse().transform_point3(global_point);\n assert_eq!(local_point, Vec3::new(1., 2., 3.))\n ```\n To apply shear, scale, and rotation *without* applying translation, different functions are available:\n ```\n # use bevy_transform::prelude::{GlobalTransform};\n # use bevy_math::prelude::Vec3;\n let global_transform = GlobalTransform::from_xyz(1., 2., 3.);\n let local_direction = Vec3::new(1., 2., 3.);\n let global_direction = global_transform.affine().transform_vector3(local_direction);\n assert_eq!(global_direction, Vec3::new(1., 2., 3.));\n let roundtripped_local_direction = global_transform.affine().inverse().transform_vector3(global_direction);\n assert_eq!(roundtripped_local_direction, local_direction);\n ```"
    },
    "bevy_transform::components::global_transform::GlobalTransform::translation": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "translation",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Get the translation as a [`Vec3`]."
    },
    "bevy_transform::components::global_transform::GlobalTransform::translation_vec3a": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "translation_vec3a",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Get the translation as a [`Vec3A`]."
    },
    "bevy_transform::components::global_transform::GlobalTransform::up": {
      "namespace": "bevy_transform::components::global_transform::GlobalTransform",
      "identifier": "up",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::global_transform::GlobalTransform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": "Return the local up vector (Y)."
    },
    "bevy_transform::components::transform::Transform::back": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "back",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": " Equivalent to [`local_z()`][Transform::local_z]"
    },
    "bevy_transform::components::transform::Transform::clone": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::transform::Transform"
        }
      }
    },
    "bevy_transform::components::transform::Transform::compute_affine": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "compute_affine",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Returns the 3d affine transformation matrix from this transforms translation,\n rotation, and scale."
    },
    "bevy_transform::components::transform::Transform::compute_matrix": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "compute_matrix",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Returns the 3d affine transformation matrix from this transforms translation,\n rotation, and scale."
    },
    "bevy_transform::components::transform::Transform::down": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "down",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": " Equivalent to [`-local_y()`][Transform::local_y]"
    },
    "bevy_transform::components::transform::Transform::eq": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_transform::components::transform::Transform::forward": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "forward",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": " Equivalent to [`-local_z()`][Transform::local_z]"
    },
    "bevy_transform::components::transform::Transform::from_isometry": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "from_isometry",
      "arguments": [
        {
          "kind": {
            "val": "bevy_math::isometry::Isometry3d"
          },
          "name": "iso"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::transform::Transform"
        }
      },
      "documentation": " Creates a new [`Transform`] that is equivalent to the given [isometry].\n [isometry]: Isometry3d"
    },
    "bevy_transform::components::transform::Transform::from_matrix": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "from_matrix",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat4"
          },
          "name": "world_from_local"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::transform::Transform"
        }
      },
      "documentation": " Extracts the translation, rotation, and scale from `matrix`. It must be a 3d affine\n transformation matrix."
    },
    "bevy_transform::components::transform::Transform::from_rotation": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "from_rotation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::transform::Transform"
        }
      },
      "documentation": " Creates a new [`Transform`], with `rotation`. Translation will be 0 and scale 1 on\n all axes."
    },
    "bevy_transform::components::transform::Transform::from_scale": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "from_scale",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "scale"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::transform::Transform"
        }
      },
      "documentation": " Creates a new [`Transform`], with `scale`. Translation will be 0 and rotation 0 on\n all axes."
    },
    "bevy_transform::components::transform::Transform::from_translation": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "from_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::transform::Transform"
        }
      },
      "documentation": " Creates a new [`Transform`], with `translation`. Rotation will be 0 and scale 1 on\n all axes."
    },
    "bevy_transform::components::transform::Transform::from_xyz": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "from_xyz",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::transform::Transform"
        }
      },
      "documentation": " Creates a new [`Transform`] at the position `(x, y, z)`. In 2d, the `z` component\n is used for z-ordering elements: higher `z`-value will be in front of lower\n `z`-value."
    },
    "bevy_transform::components::transform::Transform::is_finite": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, translation, rotation and scale all are\n finite. If any of them contains a `NaN`, positive or negative infinity,\n this will return `false`."
    },
    "bevy_transform::components::transform::Transform::left": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "left",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": " Equivalent to [`-local_x()`][Transform::local_x()]"
    },
    "bevy_transform::components::transform::Transform::local_x": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "local_x",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": " Get the unit vector in the local `X` direction."
    },
    "bevy_transform::components::transform::Transform::local_y": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "local_y",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": " Get the unit vector in the local `Y` direction."
    },
    "bevy_transform::components::transform::Transform::local_z": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "local_z",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": " Get the unit vector in the local `Z` direction."
    },
    "bevy_transform::components::transform::Transform::mul": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "bevy_transform::components::transform::Transform::mul-1": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "bevy_transform::components::transform::Transform"
          }
        },
        {
          "kind": {
            "val": "bevy_transform::components::global_transform::GlobalTransform"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::global_transform::GlobalTransform"
        }
      }
    },
    "bevy_transform::components::transform::Transform::mul-2": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "bevy_transform::components::transform::Transform"
          }
        },
        {
          "kind": {
            "val": "bevy_transform::components::transform::Transform"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::transform::Transform"
        }
      }
    },
    "bevy_transform::components::transform::Transform::mul_transform": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "mul_transform",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_transform::components::transform::Transform"
          },
          "name": "transform"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::transform::Transform"
        }
      },
      "documentation": " Multiplies `self` with `transform` component by component, returning the\n resulting [`Transform`]"
    },
    "bevy_transform::components::transform::Transform::right": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "right",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": " Equivalent to [`local_x()`][Transform::local_x()]"
    },
    "bevy_transform::components::transform::Transform::rotate": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "rotate",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Rotates this [`Transform`] by the given rotation.\n If this [`Transform`] has a parent, the `rotation` is relative to the rotation of the parent.\n # Examples\n - [`3d_rotation`]\n [`3d_rotation`]: https://github.com/bevyengine/bevy/blob/latest/examples/transforms/3d_rotation.rs"
    },
    "bevy_transform::components::transform::Transform::rotate_around": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "rotate_around",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "point"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Rotates this [`Transform`] around a `point` in space.\n If this [`Transform`] has a parent, the `point` is relative to the [`Transform`] of the parent."
    },
    "bevy_transform::components::transform::Transform::rotate_axis": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "rotate_axis",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::direction::Dir3"
          },
          "name": "axis"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Rotates this [`Transform`] around the given `axis` by `angle` (in radians).\n If this [`Transform`] has a parent, the `axis` is relative to the rotation of the parent."
    },
    "bevy_transform::components::transform::Transform::rotate_local": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "rotate_local",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Rotates this [`Transform`] by the given `rotation`.\n The `rotation` is relative to this [`Transform`]'s current rotation."
    },
    "bevy_transform::components::transform::Transform::rotate_local_axis": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "rotate_local_axis",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_math::direction::Dir3"
          },
          "name": "axis"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Rotates this [`Transform`] around its local `axis` by `angle` (in radians)."
    },
    "bevy_transform::components::transform::Transform::rotate_local_x": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "rotate_local_x",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Rotates this [`Transform`] around its local `X` axis by `angle` (in radians)."
    },
    "bevy_transform::components::transform::Transform::rotate_local_y": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "rotate_local_y",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Rotates this [`Transform`] around its local `Y` axis by `angle` (in radians)."
    },
    "bevy_transform::components::transform::Transform::rotate_local_z": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "rotate_local_z",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Rotates this [`Transform`] around its local `Z` axis by `angle` (in radians)."
    },
    "bevy_transform::components::transform::Transform::rotate_x": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "rotate_x",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Rotates this [`Transform`] around the `X` axis by `angle` (in radians).\n If this [`Transform`] has a parent, the axis is relative to the rotation of the parent."
    },
    "bevy_transform::components::transform::Transform::rotate_y": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "rotate_y",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Rotates this [`Transform`] around the `Y` axis by `angle` (in radians).\n If this [`Transform`] has a parent, the axis is relative to the rotation of the parent."
    },
    "bevy_transform::components::transform::Transform::rotate_z": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "rotate_z",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Rotates this [`Transform`] around the `Z` axis by `angle` (in radians).\n If this [`Transform`] has a parent, the axis is relative to the rotation of the parent."
    },
    "bevy_transform::components::transform::Transform::to_isometry": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "to_isometry",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::isometry::Isometry3d"
        }
      },
      "documentation": " Get the [isometry] defined by this transform's rotation and translation, ignoring scale.\n [isometry]: Isometry3d"
    },
    "bevy_transform::components::transform::Transform::transform_point": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "transform_point",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "point"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Transforms the given `point`, applying scale, rotation and translation.\n If this [`Transform`] has an ancestor entity with a [`Transform`] component,\n [`Transform::transform_point`] will transform a point in local space into its\n parent transform's space.\n If this [`Transform`] does not have a parent, [`Transform::transform_point`] will\n transform a point in local space into worldspace coordinates.\n If you always want to transform a point in local space to worldspace, or if you need\n the inverse transformations, see [`GlobalTransform::transform_point()`]."
    },
    "bevy_transform::components::transform::Transform::translate_around": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "translate_around",
      "arguments": [
        {
          "kind": {
            "mut": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "point"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Translates this [`Transform`] around a `point` in space.\n If this [`Transform`] has a parent, the `point` is relative to the [`Transform`] of the parent."
    },
    "bevy_transform::components::transform::Transform::up": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "up",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_math::direction::Dir3"
        }
      },
      "documentation": " Equivalent to [`local_y()`][Transform::local_y]"
    },
    "bevy_transform::components::transform::Transform::with_rotation": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "with_rotation",
      "arguments": [
        {
          "kind": {
            "val": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::transform::Transform"
        }
      },
      "documentation": " Returns this [`Transform`] with a new rotation."
    },
    "bevy_transform::components::transform::Transform::with_scale": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "with_scale",
      "arguments": [
        {
          "kind": {
            "val": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "scale"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::transform::Transform"
        }
      },
      "documentation": " Returns this [`Transform`] with a new scale."
    },
    "bevy_transform::components::transform::Transform::with_translation": {
      "namespace": "bevy_transform::components::transform::Transform",
      "identifier": "with_translation",
      "arguments": [
        {
          "kind": {
            "val": "bevy_transform::components::transform::Transform"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_transform::components::transform::Transform"
        }
      },
      "documentation": " Returns this [`Transform`] with a new translation."
    },
    "bevy_utils::Duration::abs_diff": {
      "namespace": "bevy_utils::Duration",
      "identifier": "abs_diff",
      "arguments": [
        {
          "kind": {
            "val": "bevy_utils::Duration"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_utils::Duration"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Duration"
        }
      },
      "documentation": " Computes the absolute difference between `self` and `other`.\n # Examples\n ```\n use std::time::Duration;\n assert_eq!(Duration::new(100, 0).abs_diff(Duration::new(80, 0)), Duration::new(20, 0));\n assert_eq!(Duration::new(100, 400_000_000).abs_diff(Duration::new(110, 0)), Duration::new(9, 600_000_000));\n ```"
    },
    "bevy_utils::Duration::add": {
      "namespace": "bevy_utils::Duration",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "bevy_utils::Duration"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_utils::Duration"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Duration"
        }
      }
    },
    "bevy_utils::Duration::as_micros": {
      "namespace": "bevy_utils::Duration",
      "identifier": "as_micros",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_utils::Duration"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u128"
        }
      },
      "documentation": " Returns the total number of whole microseconds contained by this `Duration`.\n # Examples\n ```\n use std::time::Duration;\n let duration = Duration::new(5, 730_023_852);\n assert_eq!(duration.as_micros(), 5_730_023);\n ```"
    },
    "bevy_utils::Duration::as_millis": {
      "namespace": "bevy_utils::Duration",
      "identifier": "as_millis",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_utils::Duration"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u128"
        }
      },
      "documentation": " Returns the total number of whole milliseconds contained by this `Duration`.\n # Examples\n ```\n use std::time::Duration;\n let duration = Duration::new(5, 730_023_852);\n assert_eq!(duration.as_millis(), 5_730);\n ```"
    },
    "bevy_utils::Duration::as_nanos": {
      "namespace": "bevy_utils::Duration",
      "identifier": "as_nanos",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_utils::Duration"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u128"
        }
      },
      "documentation": " Returns the total number of nanoseconds contained by this `Duration`.\n # Examples\n ```\n use std::time::Duration;\n let duration = Duration::new(5, 730_023_852);\n assert_eq!(duration.as_nanos(), 5_730_023_852);\n ```"
    },
    "bevy_utils::Duration::as_secs": {
      "namespace": "bevy_utils::Duration",
      "identifier": "as_secs",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_utils::Duration"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Returns the number of _whole_ seconds contained by this `Duration`.\n The returned value does not include the fractional (nanosecond) part of the\n duration, which can be obtained using [`subsec_nanos`].\n # Examples\n ```\n use std::time::Duration;\n let duration = Duration::new(5, 730_023_852);\n assert_eq!(duration.as_secs(), 5);\n ```\n To determine the total number of seconds represented by the `Duration`\n including the fractional part, use [`as_secs_f64`] or [`as_secs_f32`]\n [`as_secs_f64`]: Duration::as_secs_f64\n [`as_secs_f32`]: Duration::as_secs_f32\n [`subsec_nanos`]: Duration::subsec_nanos"
    },
    "bevy_utils::Duration::as_secs_f32": {
      "namespace": "bevy_utils::Duration",
      "identifier": "as_secs_f32",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_utils::Duration"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the number of seconds contained by this `Duration` as `f32`.\n The returned value includes the fractional (nanosecond) part of the duration.\n # Examples\n ```\n use std::time::Duration;\n let dur = Duration::new(2, 700_000_000);\n assert_eq!(dur.as_secs_f32(), 2.7);\n ```"
    },
    "bevy_utils::Duration::as_secs_f64": {
      "namespace": "bevy_utils::Duration",
      "identifier": "as_secs_f64",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_utils::Duration"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the number of seconds contained by this `Duration` as `f64`.\n The returned value includes the fractional (nanosecond) part of the duration.\n # Examples\n ```\n use std::time::Duration;\n let dur = Duration::new(2, 700_000_000);\n assert_eq!(dur.as_secs_f64(), 2.7);\n ```"
    },
    "bevy_utils::Duration::assert_receiver_is_total_eq": {
      "namespace": "bevy_utils::Duration",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_utils::Duration"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_utils::Duration::clone": {
      "namespace": "bevy_utils::Duration",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_utils::Duration"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Duration"
        }
      }
    },
    "bevy_utils::Duration::div": {
      "namespace": "bevy_utils::Duration",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "bevy_utils::Duration"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Duration"
        }
      }
    },
    "bevy_utils::Duration::div_duration_f32": {
      "namespace": "bevy_utils::Duration",
      "identifier": "div_duration_f32",
      "arguments": [
        {
          "kind": {
            "val": "bevy_utils::Duration"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_utils::Duration"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Divides `Duration` by `Duration` and returns `f32`.\n # Examples\n ```\n use std::time::Duration;\n let dur1 = Duration::new(2, 700_000_000);\n let dur2 = Duration::new(5, 400_000_000);\n assert_eq!(dur1.div_duration_f32(dur2), 0.5);\n ```"
    },
    "bevy_utils::Duration::div_duration_f64": {
      "namespace": "bevy_utils::Duration",
      "identifier": "div_duration_f64",
      "arguments": [
        {
          "kind": {
            "val": "bevy_utils::Duration"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_utils::Duration"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Divides `Duration` by `Duration` and returns `f64`.\n # Examples\n ```\n use std::time::Duration;\n let dur1 = Duration::new(2, 700_000_000);\n let dur2 = Duration::new(5, 400_000_000);\n assert_eq!(dur1.div_duration_f64(dur2), 0.5);\n ```"
    },
    "bevy_utils::Duration::div_f32": {
      "namespace": "bevy_utils::Duration",
      "identifier": "div_f32",
      "arguments": [
        {
          "kind": {
            "val": "bevy_utils::Duration"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Duration"
        }
      },
      "documentation": " Divides `Duration` by `f32`.\n # Panics\n This method will panic if result is negative, overflows `Duration` or not finite.\n # Examples\n ```\n use std::time::Duration;\n let dur = Duration::new(2, 700_000_000);\n // note that due to rounding errors result is slightly\n // different from 0.859_872_611\n assert_eq!(dur.div_f32(3.14), Duration::new(0, 859_872_580));\n assert_eq!(dur.div_f32(3.14e5), Duration::new(0, 8_599));\n ```"
    },
    "bevy_utils::Duration::div_f64": {
      "namespace": "bevy_utils::Duration",
      "identifier": "div_f64",
      "arguments": [
        {
          "kind": {
            "val": "bevy_utils::Duration"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Duration"
        }
      },
      "documentation": " Divides `Duration` by `f64`.\n # Panics\n This method will panic if result is negative, overflows `Duration` or not finite.\n # Examples\n ```\n use std::time::Duration;\n let dur = Duration::new(2, 700_000_000);\n assert_eq!(dur.div_f64(3.14), Duration::new(0, 859_872_611));\n assert_eq!(dur.div_f64(3.14e5), Duration::new(0, 8_599));\n ```"
    },
    "bevy_utils::Duration::eq": {
      "namespace": "bevy_utils::Duration",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_utils::Duration"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_utils::Duration"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_utils::Duration::from_micros": {
      "namespace": "bevy_utils::Duration",
      "identifier": "from_micros",
      "arguments": [
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "micros"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Duration"
        }
      },
      "documentation": " Creates a new `Duration` from the specified number of microseconds.\n # Examples\n ```\n use std::time::Duration;\n let duration = Duration::from_micros(1_000_002);\n assert_eq!(1, duration.as_secs());\n assert_eq!(2_000, duration.subsec_nanos());\n ```"
    },
    "bevy_utils::Duration::from_millis": {
      "namespace": "bevy_utils::Duration",
      "identifier": "from_millis",
      "arguments": [
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "millis"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Duration"
        }
      },
      "documentation": " Creates a new `Duration` from the specified number of milliseconds.\n # Examples\n ```\n use std::time::Duration;\n let duration = Duration::from_millis(2_569);\n assert_eq!(2, duration.as_secs());\n assert_eq!(569_000_000, duration.subsec_nanos());\n ```"
    },
    "bevy_utils::Duration::from_nanos": {
      "namespace": "bevy_utils::Duration",
      "identifier": "from_nanos",
      "arguments": [
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "nanos"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Duration"
        }
      },
      "documentation": " Creates a new `Duration` from the specified number of nanoseconds.\n Note: Using this on the return value of `as_nanos()` might cause unexpected behavior:\n `as_nanos()` returns a u128, and can return values that do not fit in u64, e.g. 585 years.\n Instead, consider using the pattern `Duration::new(d.as_secs(), d.subsec_nanos())`\n if you cannot copy/clone the Duration directly.\n # Examples\n ```\n use std::time::Duration;\n let duration = Duration::from_nanos(1_000_000_123);\n assert_eq!(1, duration.as_secs());\n assert_eq!(123, duration.subsec_nanos());\n ```"
    },
    "bevy_utils::Duration::from_secs": {
      "namespace": "bevy_utils::Duration",
      "identifier": "from_secs",
      "arguments": [
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "secs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Duration"
        }
      },
      "documentation": " Creates a new `Duration` from the specified number of whole seconds.\n # Examples\n ```\n use std::time::Duration;\n let duration = Duration::from_secs(5);\n assert_eq!(5, duration.as_secs());\n assert_eq!(0, duration.subsec_nanos());\n ```"
    },
    "bevy_utils::Duration::from_secs_f32": {
      "namespace": "bevy_utils::Duration",
      "identifier": "from_secs_f32",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "secs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Duration"
        }
      },
      "documentation": " Creates a new `Duration` from the specified number of seconds represented\n as `f32`.\n # Panics\n This constructor will panic if `secs` is negative, overflows `Duration` or not finite.\n # Examples\n ```\n use std::time::Duration;\n let res = Duration::from_secs_f32(0.0);\n assert_eq!(res, Duration::new(0, 0));\n let res = Duration::from_secs_f32(1e-20);\n assert_eq!(res, Duration::new(0, 0));\n let res = Duration::from_secs_f32(4.2e-7);\n assert_eq!(res, Duration::new(0, 420));\n let res = Duration::from_secs_f32(2.7);\n assert_eq!(res, Duration::new(2, 700_000_048));\n let res = Duration::from_secs_f32(3e10);\n assert_eq!(res, Duration::new(30_000_001_024, 0));\n // subnormal float\n let res = Duration::from_secs_f32(f32::from_bits(1));\n assert_eq!(res, Duration::new(0, 0));\n // conversion uses rounding\n let res = Duration::from_secs_f32(0.999e-9);\n assert_eq!(res, Duration::new(0, 1));\n ```"
    },
    "bevy_utils::Duration::from_secs_f64": {
      "namespace": "bevy_utils::Duration",
      "identifier": "from_secs_f64",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "secs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Duration"
        }
      },
      "documentation": " Creates a new `Duration` from the specified number of seconds represented\n as `f64`.\n # Panics\n This constructor will panic if `secs` is negative, overflows `Duration` or not finite.\n # Examples\n ```\n use std::time::Duration;\n let res = Duration::from_secs_f64(0.0);\n assert_eq!(res, Duration::new(0, 0));\n let res = Duration::from_secs_f64(1e-20);\n assert_eq!(res, Duration::new(0, 0));\n let res = Duration::from_secs_f64(4.2e-7);\n assert_eq!(res, Duration::new(0, 420));\n let res = Duration::from_secs_f64(2.7);\n assert_eq!(res, Duration::new(2, 700_000_000));\n let res = Duration::from_secs_f64(3e10);\n assert_eq!(res, Duration::new(30_000_000_000, 0));\n // subnormal float\n let res = Duration::from_secs_f64(f64::from_bits(1));\n assert_eq!(res, Duration::new(0, 0));\n // conversion uses rounding\n let res = Duration::from_secs_f64(0.999e-9);\n assert_eq!(res, Duration::new(0, 1));\n ```"
    },
    "bevy_utils::Duration::is_zero": {
      "namespace": "bevy_utils::Duration",
      "identifier": "is_zero",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_utils::Duration"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if this `Duration` spans no time.\n # Examples\n ```\n use std::time::Duration;\n assert!(Duration::ZERO.is_zero());\n assert!(Duration::new(0, 0).is_zero());\n assert!(Duration::from_nanos(0).is_zero());\n assert!(Duration::from_secs(0).is_zero());\n assert!(!Duration::new(1, 1).is_zero());\n assert!(!Duration::from_nanos(1).is_zero());\n assert!(!Duration::from_secs(1).is_zero());\n ```"
    },
    "bevy_utils::Duration::mul": {
      "namespace": "bevy_utils::Duration",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "bevy_utils::Duration"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Duration"
        }
      }
    },
    "bevy_utils::Duration::mul_f32": {
      "namespace": "bevy_utils::Duration",
      "identifier": "mul_f32",
      "arguments": [
        {
          "kind": {
            "val": "bevy_utils::Duration"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Duration"
        }
      },
      "documentation": " Multiplies `Duration` by `f32`.\n # Panics\n This method will panic if result is negative, overflows `Duration` or not finite.\n # Examples\n ```\n use std::time::Duration;\n let dur = Duration::new(2, 700_000_000);\n assert_eq!(dur.mul_f32(3.14), Duration::new(8, 478_000_641));\n assert_eq!(dur.mul_f32(3.14e5), Duration::new(847_800, 0));\n ```"
    },
    "bevy_utils::Duration::mul_f64": {
      "namespace": "bevy_utils::Duration",
      "identifier": "mul_f64",
      "arguments": [
        {
          "kind": {
            "val": "bevy_utils::Duration"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Duration"
        }
      },
      "documentation": " Multiplies `Duration` by `f64`.\n # Panics\n This method will panic if result is negative, overflows `Duration` or not finite.\n # Examples\n ```\n use std::time::Duration;\n let dur = Duration::new(2, 700_000_000);\n assert_eq!(dur.mul_f64(3.14), Duration::new(8, 478_000_000));\n assert_eq!(dur.mul_f64(3.14e5), Duration::new(847_800, 0));\n ```"
    },
    "bevy_utils::Duration::new": {
      "namespace": "bevy_utils::Duration",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "secs"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "nanos"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Duration"
        }
      },
      "documentation": " Creates a new `Duration` from the specified number of whole seconds and\n additional nanoseconds.\n If the number of nanoseconds is greater than 1 billion (the number of\n nanoseconds in a second), then it will carry over into the seconds provided.\n # Panics\n This constructor will panic if the carry from the nanoseconds overflows\n the seconds counter.\n # Examples\n ```\n use std::time::Duration;\n let five_seconds = Duration::new(5, 0);\n ```"
    },
    "bevy_utils::Duration::saturating_add": {
      "namespace": "bevy_utils::Duration",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "bevy_utils::Duration"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_utils::Duration"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Duration"
        }
      },
      "documentation": " Saturating `Duration` addition. Computes `self + other`, returning [`Duration::MAX`]\n if overflow occurred.\n # Examples\n ```\n #![feature(duration_constants)]\n use std::time::Duration;\n assert_eq!(Duration::new(0, 0).saturating_add(Duration::new(0, 1)), Duration::new(0, 1));\n assert_eq!(Duration::new(1, 0).saturating_add(Duration::new(u64::MAX, 0)), Duration::MAX);\n ```"
    },
    "bevy_utils::Duration::saturating_mul": {
      "namespace": "bevy_utils::Duration",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "bevy_utils::Duration"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Duration"
        }
      },
      "documentation": " Saturating `Duration` multiplication. Computes `self * other`, returning\n [`Duration::MAX`] if overflow occurred.\n # Examples\n ```\n #![feature(duration_constants)]\n use std::time::Duration;\n assert_eq!(Duration::new(0, 500_000_001).saturating_mul(2), Duration::new(1, 2));\n assert_eq!(Duration::new(u64::MAX - 1, 0).saturating_mul(2), Duration::MAX);\n ```"
    },
    "bevy_utils::Duration::saturating_sub": {
      "namespace": "bevy_utils::Duration",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "bevy_utils::Duration"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_utils::Duration"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Duration"
        }
      },
      "documentation": " Saturating `Duration` subtraction. Computes `self - other`, returning [`Duration::ZERO`]\n if the result would be negative or if overflow occurred.\n # Examples\n ```\n use std::time::Duration;\n assert_eq!(Duration::new(0, 1).saturating_sub(Duration::new(0, 0)), Duration::new(0, 1));\n assert_eq!(Duration::new(0, 0).saturating_sub(Duration::new(0, 1)), Duration::ZERO);\n ```"
    },
    "bevy_utils::Duration::sub": {
      "namespace": "bevy_utils::Duration",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "bevy_utils::Duration"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_utils::Duration"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Duration"
        }
      }
    },
    "bevy_utils::Duration::subsec_micros": {
      "namespace": "bevy_utils::Duration",
      "identifier": "subsec_micros",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_utils::Duration"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the fractional part of this `Duration`, in whole microseconds.\n This method does **not** return the length of the duration when\n represented by microseconds. The returned number always represents a\n fractional portion of a second (i.e., it is less than one million).\n # Examples\n ```\n use std::time::Duration;\n let duration = Duration::from_micros(1_234_567);\n assert_eq!(duration.as_secs(), 1);\n assert_eq!(duration.subsec_micros(), 234_567);\n ```"
    },
    "bevy_utils::Duration::subsec_millis": {
      "namespace": "bevy_utils::Duration",
      "identifier": "subsec_millis",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_utils::Duration"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the fractional part of this `Duration`, in whole milliseconds.\n This method does **not** return the length of the duration when\n represented by milliseconds. The returned number always represents a\n fractional portion of a second (i.e., it is less than one thousand).\n # Examples\n ```\n use std::time::Duration;\n let duration = Duration::from_millis(5_432);\n assert_eq!(duration.as_secs(), 5);\n assert_eq!(duration.subsec_millis(), 432);\n ```"
    },
    "bevy_utils::Duration::subsec_nanos": {
      "namespace": "bevy_utils::Duration",
      "identifier": "subsec_nanos",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_utils::Duration"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the fractional part of this `Duration`, in nanoseconds.\n This method does **not** return the length of the duration when\n represented by nanoseconds. The returned number always represents a\n fractional portion of a second (i.e., it is less than one billion).\n # Examples\n ```\n use std::time::Duration;\n let duration = Duration::from_millis(5_010);\n assert_eq!(duration.as_secs(), 5);\n assert_eq!(duration.subsec_nanos(), 10_000_000);\n ```"
    },
    "bevy_utils::Instant::add": {
      "namespace": "bevy_utils::Instant",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "bevy_utils::Instant"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_utils::Duration"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Instant"
        }
      },
      "documentation": " # Panics\n This function may panic if the resulting point in time cannot be represented by the\n underlying data structure. See [`Instant::checked_add`] for a version without panic."
    },
    "bevy_utils::Instant::assert_receiver_is_total_eq": {
      "namespace": "bevy_utils::Instant",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_utils::Instant"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "bevy_utils::Instant::clone": {
      "namespace": "bevy_utils::Instant",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_utils::Instant"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Instant"
        }
      }
    },
    "bevy_utils::Instant::duration_since": {
      "namespace": "bevy_utils::Instant",
      "identifier": "duration_since",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_utils::Instant"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_utils::Instant"
          },
          "name": "earlier"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Duration"
        }
      },
      "documentation": " Returns the amount of time elapsed from another instant to this one,\n or zero duration if that instant is later than this one.\n # Panics\n Previous Rust versions panicked when `earlier` was later than `self`. Currently this\n method saturates. Future versions may reintroduce the panic in some circumstances.\n See [Monotonicity].\n [Monotonicity]: Instant#monotonicity\n # Examples\n ```no_run\n use std::time::{Duration, Instant};\n use std::thread::sleep;\n let now = Instant::now();\n sleep(Duration::new(1, 0));\n let new_now = Instant::now();\n println!(\"{:?}\", new_now.duration_since(now));\n println!(\"{:?}\", now.duration_since(new_now)); // 0ns\n ```"
    },
    "bevy_utils::Instant::elapsed": {
      "namespace": "bevy_utils::Instant",
      "identifier": "elapsed",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_utils::Instant"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Duration"
        }
      },
      "documentation": " Returns the amount of time elapsed since this instant.\n # Panics\n Previous Rust versions panicked when the current time was earlier than self. Currently this\n method returns a Duration of zero in that case. Future versions may reintroduce the panic.\n See [Monotonicity].\n [Monotonicity]: Instant#monotonicity\n # Examples\n ```no_run\n use std::thread::sleep;\n use std::time::{Duration, Instant};\n let instant = Instant::now();\n let three_secs = Duration::from_secs(3);\n sleep(three_secs);\n assert!(instant.elapsed() >= three_secs);\n ```"
    },
    "bevy_utils::Instant::eq": {
      "namespace": "bevy_utils::Instant",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_utils::Instant"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "bevy_utils::Instant"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "bevy_utils::Instant::now": {
      "namespace": "bevy_utils::Instant",
      "identifier": "now",
      "return_type": {
        "kind": {
          "val": "bevy_utils::Instant"
        }
      },
      "documentation": " Returns an instant corresponding to \"now\".\n # Examples\n ```\n use std::time::Instant;\n let now = Instant::now();\n ```"
    },
    "bevy_utils::Instant::saturating_duration_since": {
      "namespace": "bevy_utils::Instant",
      "identifier": "saturating_duration_since",
      "arguments": [
        {
          "kind": {
            "ref": "bevy_utils::Instant"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_utils::Instant"
          },
          "name": "earlier"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Duration"
        }
      },
      "documentation": " Returns the amount of time elapsed from another instant to this one,\n or zero duration if that instant is later than this one.\n # Examples\n ```no_run\n use std::time::{Duration, Instant};\n use std::thread::sleep;\n let now = Instant::now();\n sleep(Duration::new(1, 0));\n let new_now = Instant::now();\n println!(\"{:?}\", new_now.saturating_duration_since(now));\n println!(\"{:?}\", now.saturating_duration_since(new_now)); // 0ns\n ```"
    },
    "bevy_utils::Instant::sub": {
      "namespace": "bevy_utils::Instant",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "bevy_utils::Instant"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "bevy_utils::Duration"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Instant"
        }
      }
    },
    "bevy_utils::Instant::sub-1": {
      "namespace": "bevy_utils::Instant",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "bevy_utils::Instant"
          }
        },
        {
          "kind": {
            "val": "bevy_utils::Instant"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "bevy_utils::Duration"
        }
      }
    },
    "core::ops::RangeFull::assert_receiver_is_total_eq": {
      "namespace": "core::ops::RangeFull",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "core::ops::RangeFull"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "core::ops::RangeFull::clone": {
      "namespace": "core::ops::RangeFull",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "core::ops::RangeFull"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::ops::RangeFull"
        }
      }
    },
    "core::ops::RangeFull::eq": {
      "namespace": "core::ops::RangeFull",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "core::ops::RangeFull"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "core::ops::RangeFull"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "core::sync::atomic::AtomicBool::into_inner": {
      "namespace": "core::sync::atomic::AtomicBool",
      "identifier": "into_inner",
      "arguments": [
        {
          "kind": {
            "val": "core::sync::atomic::AtomicBool"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Consumes the atomic and returns the contained value.\n This is safe because passing `self` by value guarantees that no other threads are\n concurrently accessing the atomic data.\n # Examples\n ```\n use std::sync::atomic::AtomicBool;\n let some_bool = AtomicBool::new(true);\n assert_eq!(some_bool.into_inner(), true);\n ```"
    },
    "core::sync::atomic::AtomicBool::new": {
      "namespace": "core::sync::atomic::AtomicBool",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::sync::atomic::AtomicBool"
        }
      },
      "documentation": " Creates a new `AtomicBool`.\n # Examples\n ```\n use std::sync::atomic::AtomicBool;\n let atomic_true = AtomicBool::new(true);\n let atomic_false = AtomicBool::new(false);\n ```"
    },
    "core::sync::atomic::AtomicI16::into_inner": {
      "namespace": "core::sync::atomic::AtomicI16",
      "identifier": "into_inner",
      "arguments": [
        {
          "kind": {
            "val": "core::sync::atomic::AtomicI16"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i16"
        }
      },
      "documentation": " Consumes the atomic and returns the contained value.\n This is safe because passing `self` by value guarantees that no other threads are\n concurrently accessing the atomic data.\n # Examples\n ```\nuse std::sync::atomic::AtomicI16;\nlet some_var = AtomicI16::new(5);\n assert_eq!(some_var.into_inner(), 5);\n ```"
    },
    "core::sync::atomic::AtomicI16::new": {
      "namespace": "core::sync::atomic::AtomicI16",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "i16"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::sync::atomic::AtomicI16"
        }
      },
      "documentation": " Creates a new atomic integer.\n # Examples\n ```\nuse std::sync::atomic::AtomicI16;\nlet atomic_forty_two = AtomicI16::new(42);\n ```"
    },
    "core::sync::atomic::AtomicI32::into_inner": {
      "namespace": "core::sync::atomic::AtomicI32",
      "identifier": "into_inner",
      "arguments": [
        {
          "kind": {
            "val": "core::sync::atomic::AtomicI32"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Consumes the atomic and returns the contained value.\n This is safe because passing `self` by value guarantees that no other threads are\n concurrently accessing the atomic data.\n # Examples\n ```\nuse std::sync::atomic::AtomicI32;\nlet some_var = AtomicI32::new(5);\n assert_eq!(some_var.into_inner(), 5);\n ```"
    },
    "core::sync::atomic::AtomicI32::new": {
      "namespace": "core::sync::atomic::AtomicI32",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::sync::atomic::AtomicI32"
        }
      },
      "documentation": " Creates a new atomic integer.\n # Examples\n ```\nuse std::sync::atomic::AtomicI32;\nlet atomic_forty_two = AtomicI32::new(42);\n ```"
    },
    "core::sync::atomic::AtomicI64::into_inner": {
      "namespace": "core::sync::atomic::AtomicI64",
      "identifier": "into_inner",
      "arguments": [
        {
          "kind": {
            "val": "core::sync::atomic::AtomicI64"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Consumes the atomic and returns the contained value.\n This is safe because passing `self` by value guarantees that no other threads are\n concurrently accessing the atomic data.\n # Examples\n ```\nuse std::sync::atomic::AtomicI64;\nlet some_var = AtomicI64::new(5);\n assert_eq!(some_var.into_inner(), 5);\n ```"
    },
    "core::sync::atomic::AtomicI64::new": {
      "namespace": "core::sync::atomic::AtomicI64",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::sync::atomic::AtomicI64"
        }
      },
      "documentation": " Creates a new atomic integer.\n # Examples\n ```\nuse std::sync::atomic::AtomicI64;\nlet atomic_forty_two = AtomicI64::new(42);\n ```"
    },
    "core::sync::atomic::AtomicI8::into_inner": {
      "namespace": "core::sync::atomic::AtomicI8",
      "identifier": "into_inner",
      "arguments": [
        {
          "kind": {
            "val": "core::sync::atomic::AtomicI8"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i8"
        }
      },
      "documentation": " Consumes the atomic and returns the contained value.\n This is safe because passing `self` by value guarantees that no other threads are\n concurrently accessing the atomic data.\n # Examples\n ```\nuse std::sync::atomic::AtomicI8;\nlet some_var = AtomicI8::new(5);\n assert_eq!(some_var.into_inner(), 5);\n ```"
    },
    "core::sync::atomic::AtomicI8::new": {
      "namespace": "core::sync::atomic::AtomicI8",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "i8"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::sync::atomic::AtomicI8"
        }
      },
      "documentation": " Creates a new atomic integer.\n # Examples\n ```\nuse std::sync::atomic::AtomicI8;\nlet atomic_forty_two = AtomicI8::new(42);\n ```"
    },
    "core::sync::atomic::AtomicIsize::into_inner": {
      "namespace": "core::sync::atomic::AtomicIsize",
      "identifier": "into_inner",
      "arguments": [
        {
          "kind": {
            "val": "core::sync::atomic::AtomicIsize"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "isize"
        }
      },
      "documentation": " Consumes the atomic and returns the contained value.\n This is safe because passing `self` by value guarantees that no other threads are\n concurrently accessing the atomic data.\n # Examples\n ```\nuse std::sync::atomic::AtomicIsize;\nlet some_var = AtomicIsize::new(5);\n assert_eq!(some_var.into_inner(), 5);\n ```"
    },
    "core::sync::atomic::AtomicIsize::new": {
      "namespace": "core::sync::atomic::AtomicIsize",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "isize"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::sync::atomic::AtomicIsize"
        }
      },
      "documentation": " Creates a new atomic integer.\n # Examples\n ```\nuse std::sync::atomic::AtomicIsize;\nlet atomic_forty_two = AtomicIsize::new(42);\n ```"
    },
    "core::sync::atomic::AtomicU16::into_inner": {
      "namespace": "core::sync::atomic::AtomicU16",
      "identifier": "into_inner",
      "arguments": [
        {
          "kind": {
            "val": "core::sync::atomic::AtomicU16"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u16"
        }
      },
      "documentation": " Consumes the atomic and returns the contained value.\n This is safe because passing `self` by value guarantees that no other threads are\n concurrently accessing the atomic data.\n # Examples\n ```\nuse std::sync::atomic::AtomicU16;\nlet some_var = AtomicU16::new(5);\n assert_eq!(some_var.into_inner(), 5);\n ```"
    },
    "core::sync::atomic::AtomicU16::new": {
      "namespace": "core::sync::atomic::AtomicU16",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u16"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::sync::atomic::AtomicU16"
        }
      },
      "documentation": " Creates a new atomic integer.\n # Examples\n ```\nuse std::sync::atomic::AtomicU16;\nlet atomic_forty_two = AtomicU16::new(42);\n ```"
    },
    "core::sync::atomic::AtomicU32::into_inner": {
      "namespace": "core::sync::atomic::AtomicU32",
      "identifier": "into_inner",
      "arguments": [
        {
          "kind": {
            "val": "core::sync::atomic::AtomicU32"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Consumes the atomic and returns the contained value.\n This is safe because passing `self` by value guarantees that no other threads are\n concurrently accessing the atomic data.\n # Examples\n ```\nuse std::sync::atomic::AtomicU32;\nlet some_var = AtomicU32::new(5);\n assert_eq!(some_var.into_inner(), 5);\n ```"
    },
    "core::sync::atomic::AtomicU32::new": {
      "namespace": "core::sync::atomic::AtomicU32",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::sync::atomic::AtomicU32"
        }
      },
      "documentation": " Creates a new atomic integer.\n # Examples\n ```\nuse std::sync::atomic::AtomicU32;\nlet atomic_forty_two = AtomicU32::new(42);\n ```"
    },
    "core::sync::atomic::AtomicU64::into_inner": {
      "namespace": "core::sync::atomic::AtomicU64",
      "identifier": "into_inner",
      "arguments": [
        {
          "kind": {
            "val": "core::sync::atomic::AtomicU64"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Consumes the atomic and returns the contained value.\n This is safe because passing `self` by value guarantees that no other threads are\n concurrently accessing the atomic data.\n # Examples\n ```\nuse std::sync::atomic::AtomicU64;\nlet some_var = AtomicU64::new(5);\n assert_eq!(some_var.into_inner(), 5);\n ```"
    },
    "core::sync::atomic::AtomicU64::new": {
      "namespace": "core::sync::atomic::AtomicU64",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::sync::atomic::AtomicU64"
        }
      },
      "documentation": " Creates a new atomic integer.\n # Examples\n ```\nuse std::sync::atomic::AtomicU64;\nlet atomic_forty_two = AtomicU64::new(42);\n ```"
    },
    "core::sync::atomic::AtomicU8::into_inner": {
      "namespace": "core::sync::atomic::AtomicU8",
      "identifier": "into_inner",
      "arguments": [
        {
          "kind": {
            "val": "core::sync::atomic::AtomicU8"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u8"
        }
      },
      "documentation": " Consumes the atomic and returns the contained value.\n This is safe because passing `self` by value guarantees that no other threads are\n concurrently accessing the atomic data.\n # Examples\n ```\nuse std::sync::atomic::AtomicU8;\nlet some_var = AtomicU8::new(5);\n assert_eq!(some_var.into_inner(), 5);\n ```"
    },
    "core::sync::atomic::AtomicU8::new": {
      "namespace": "core::sync::atomic::AtomicU8",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u8"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::sync::atomic::AtomicU8"
        }
      },
      "documentation": " Creates a new atomic integer.\n # Examples\n ```\nuse std::sync::atomic::AtomicU8;\nlet atomic_forty_two = AtomicU8::new(42);\n ```"
    },
    "core::sync::atomic::AtomicUsize::into_inner": {
      "namespace": "core::sync::atomic::AtomicUsize",
      "identifier": "into_inner",
      "arguments": [
        {
          "kind": {
            "val": "core::sync::atomic::AtomicUsize"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "usize"
        }
      },
      "documentation": " Consumes the atomic and returns the contained value.\n This is safe because passing `self` by value guarantees that no other threads are\n concurrently accessing the atomic data.\n # Examples\n ```\nuse std::sync::atomic::AtomicUsize;\nlet some_var = AtomicUsize::new(5);\n assert_eq!(some_var.into_inner(), 5);\n ```"
    },
    "core::sync::atomic::AtomicUsize::new": {
      "namespace": "core::sync::atomic::AtomicUsize",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "core::sync::atomic::AtomicUsize"
        }
      },
      "documentation": " Creates a new atomic integer.\n # Examples\n ```\nuse std::sync::atomic::AtomicUsize;\nlet atomic_forty_two = AtomicUsize::new(42);\n ```"
    },
    "glam::Affine2::abs_diff_eq": {
      "namespace": "glam::Affine2",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Affine2"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs`\n is less than or equal to `max_abs_diff`.\n This can be used to compare if two 3x4 matrices contain similar elements. It works\n best when comparing with a known value. The `max_abs_diff` that should be used used\n depends on the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::Affine2::clone": {
      "namespace": "glam::Affine2",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine2"
        }
      }
    },
    "glam::Affine2::eq": {
      "namespace": "glam::Affine2",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Affine2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::Affine2::from_angle": {
      "namespace": "glam::Affine2",
      "identifier": "from_angle",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine2"
        }
      },
      "documentation": " Creates an affine transform from the given rotation `angle`."
    },
    "glam::Affine2::from_angle_translation": {
      "namespace": "glam::Affine2",
      "identifier": "from_angle_translation",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine2"
        }
      },
      "documentation": " Creates an affine transform from the given 2D rotation `angle` (in radians) and\n `translation`.\n Equivalent to `Affine2::from_translation(translation) * Affine2::from_angle(angle)`"
    },
    "glam::Affine2::from_cols": {
      "namespace": "glam::Affine2",
      "identifier": "from_cols",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "x_axis"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "y_axis"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "z_axis"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine2"
        }
      },
      "documentation": " Creates an affine transform from three column vectors."
    },
    "glam::Affine2::from_mat2": {
      "namespace": "glam::Affine2",
      "identifier": "from_mat2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat2"
          },
          "name": "matrix2"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine2"
        }
      },
      "documentation": " Creates an affine transform from a 2x2 matrix (expressing scale, shear and rotation)"
    },
    "glam::Affine2::from_mat2_translation": {
      "namespace": "glam::Affine2",
      "identifier": "from_mat2_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat2"
          },
          "name": "matrix2"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine2"
        }
      },
      "documentation": " Creates an affine transform from a 2x2 matrix (expressing scale, shear and rotation) and a\n translation vector.\n Equivalent to\n `Affine2::from_translation(translation) * Affine2::from_mat2(mat2)`"
    },
    "glam::Affine2::from_mat3": {
      "namespace": "glam::Affine2",
      "identifier": "from_mat3",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine2"
        }
      },
      "documentation": " The given `Mat3` must be an affine transform,"
    },
    "glam::Affine2::from_mat3a": {
      "namespace": "glam::Affine2",
      "identifier": "from_mat3a",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3A"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine2"
        }
      },
      "documentation": " The given [`Mat3A`] must be an affine transform,"
    },
    "glam::Affine2::from_scale": {
      "namespace": "glam::Affine2",
      "identifier": "from_scale",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "scale"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine2"
        }
      },
      "documentation": " Creates an affine transform that changes scale.\n Note that if any scale is zero the transform will be non-invertible."
    },
    "glam::Affine2::from_scale_angle_translation": {
      "namespace": "glam::Affine2",
      "identifier": "from_scale_angle_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "scale"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine2"
        }
      },
      "documentation": " Creates an affine transform from the given 2D `scale`, rotation `angle` (in radians) and\n `translation`.\n Equivalent to `Affine2::from_translation(translation) *\n Affine2::from_angle(angle) * Affine2::from_scale(scale)`"
    },
    "glam::Affine2::from_translation": {
      "namespace": "glam::Affine2",
      "identifier": "from_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine2"
        }
      },
      "documentation": " Creates an affine transformation from the given 2D `translation`."
    },
    "glam::Affine2::inverse": {
      "namespace": "glam::Affine2",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine2"
        }
      },
      "documentation": " Return the inverse of this transform.\n Note that if the transform is not invertible the result will be invalid."
    },
    "glam::Affine2::is_finite": {
      "namespace": "glam::Affine2",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.\n If any element is either `NaN`, positive or negative infinity, this will return\n `false`."
    },
    "glam::Affine2::is_nan": {
      "namespace": "glam::Affine2",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::Affine2::mul": {
      "namespace": "glam::Affine2",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::Affine2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Affine2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine2"
        }
      }
    },
    "glam::Affine2::mul-1": {
      "namespace": "glam::Affine2",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Affine2"
          }
        },
        {
          "kind": {
            "val": "glam::Mat3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      }
    },
    "glam::Affine2::mul-2": {
      "namespace": "glam::Affine2",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Affine2"
          }
        },
        {
          "kind": {
            "val": "glam::Mat3A"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      }
    },
    "glam::Affine2::to_cols_array": {
      "namespace": "glam::Affine2",
      "identifier": "to_cols_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f32"
            },
            6
          ]
        }
      },
      "documentation": " Creates a `[f32; 6]` array storing data in column major order."
    },
    "glam::Affine2::to_cols_array_2d": {
      "namespace": "glam::Affine2",
      "identifier": "to_cols_array_2d",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "array": [
                {
                  "primitive": "f32"
                },
                2
              ]
            },
            3
          ]
        }
      },
      "documentation": " Creates a `[[f32; 2]; 3]` 2D array storing data in\n column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::Affine2::transform_point2": {
      "namespace": "glam::Affine2",
      "identifier": "transform_point2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Transforms the given 2D point, applying shear, scale, rotation and translation."
    },
    "glam::Affine2::transform_vector2": {
      "namespace": "glam::Affine2",
      "identifier": "transform_vector2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Transforms the given 2D vector, applying shear, scale and rotation (but NOT\n translation).\n To also apply translation, use [`Self::transform_point2()`] instead."
    },
    "glam::Affine3A::abs_diff_eq": {
      "namespace": "glam::Affine3A",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Affine3A"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs`\n is less than or equal to `max_abs_diff`.\n This can be used to compare if two 3x4 matrices contain similar elements. It works\n best when comparing with a known value. The `max_abs_diff` that should be used used\n depends on the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::Affine3A::clone": {
      "namespace": "glam::Affine3A",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      }
    },
    "glam::Affine3A::eq": {
      "namespace": "glam::Affine3A",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Affine3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::Affine3A::from_axis_angle": {
      "namespace": "glam::Affine3A",
      "identifier": "from_axis_angle",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "axis"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates an affine transform containing a 3D rotation around a normalized\n rotation `axis` of `angle` (in radians)."
    },
    "glam::Affine3A::from_cols": {
      "namespace": "glam::Affine3A",
      "identifier": "from_cols",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "x_axis"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "y_axis"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "z_axis"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "w_axis"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates an affine transform from three column vectors."
    },
    "glam::Affine3A::from_mat3": {
      "namespace": "glam::Affine3A",
      "identifier": "from_mat3",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3"
          },
          "name": "mat3"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates an affine transform from a 3x3 matrix (expressing scale, shear and\n rotation)"
    },
    "glam::Affine3A::from_mat3_translation": {
      "namespace": "glam::Affine3A",
      "identifier": "from_mat3_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3"
          },
          "name": "mat3"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates an affine transform from a 3x3 matrix (expressing scale, shear and rotation)\n and a translation vector.\n Equivalent to `Affine3A::from_translation(translation) * Affine3A::from_mat3(mat3)`"
    },
    "glam::Affine3A::from_mat4": {
      "namespace": "glam::Affine3A",
      "identifier": "from_mat4",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat4"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " The given `Mat4` must be an affine transform,\n i.e. contain no perspective transform."
    },
    "glam::Affine3A::from_quat": {
      "namespace": "glam::Affine3A",
      "identifier": "from_quat",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates an affine transform from the given `rotation` quaternion."
    },
    "glam::Affine3A::from_rotation_translation": {
      "namespace": "glam::Affine3A",
      "identifier": "from_rotation_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates an affine transform from the given 3D `rotation` and `translation`.\n Equivalent to `Affine3A::from_translation(translation) * Affine3A::from_quat(rotation)`"
    },
    "glam::Affine3A::from_rotation_x": {
      "namespace": "glam::Affine3A",
      "identifier": "from_rotation_x",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates an affine transform containing a 3D rotation around the x axis of\n `angle` (in radians)."
    },
    "glam::Affine3A::from_rotation_y": {
      "namespace": "glam::Affine3A",
      "identifier": "from_rotation_y",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates an affine transform containing a 3D rotation around the y axis of\n `angle` (in radians)."
    },
    "glam::Affine3A::from_rotation_z": {
      "namespace": "glam::Affine3A",
      "identifier": "from_rotation_z",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates an affine transform containing a 3D rotation around the z axis of\n `angle` (in radians)."
    },
    "glam::Affine3A::from_scale": {
      "namespace": "glam::Affine3A",
      "identifier": "from_scale",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "scale"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates an affine transform that changes scale.\n Note that if any scale is zero the transform will be non-invertible."
    },
    "glam::Affine3A::from_scale_rotation_translation": {
      "namespace": "glam::Affine3A",
      "identifier": "from_scale_rotation_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "scale"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates an affine transform from the given 3D `scale`, `rotation` and\n `translation`.\n Equivalent to `Affine3A::from_translation(translation) *\n Affine3A::from_quat(rotation) * Affine3A::from_scale(scale)`"
    },
    "glam::Affine3A::from_translation": {
      "namespace": "glam::Affine3A",
      "identifier": "from_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates an affine transformation from the given 3D `translation`."
    },
    "glam::Affine3A::inverse": {
      "namespace": "glam::Affine3A",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Return the inverse of this transform.\n Note that if the transform is not invertible the result will be invalid."
    },
    "glam::Affine3A::is_finite": {
      "namespace": "glam::Affine3A",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.\n If any element is either `NaN`, positive or negative infinity, this will return\n `false`."
    },
    "glam::Affine3A::is_nan": {
      "namespace": "glam::Affine3A",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::Affine3A::look_at_lh": {
      "namespace": "glam::Affine3A",
      "identifier": "look_at_lh",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "center"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates a left-handed view transform using a camera position, an up direction, and a focal\n point.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=forward`.\n # Panics\n Will panic if `up` is not normalized when `glam_assert` is enabled."
    },
    "glam::Affine3A::look_at_rh": {
      "namespace": "glam::Affine3A",
      "identifier": "look_at_rh",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "center"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates a right-handed view transform using a camera position, an up direction, and a focal\n point.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=back`.\n # Panics\n Will panic if `up` is not normalized when `glam_assert` is enabled."
    },
    "glam::Affine3A::look_to_lh": {
      "namespace": "glam::Affine3A",
      "identifier": "look_to_lh",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "dir"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates a left-handed view transform using a camera position, an up direction, and a facing\n direction.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=forward`."
    },
    "glam::Affine3A::look_to_rh": {
      "namespace": "glam::Affine3A",
      "identifier": "look_to_rh",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "dir"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      },
      "documentation": " Creates a right-handed view transform using a camera position, an up direction, and a facing\n direction.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=back`."
    },
    "glam::Affine3A::mul": {
      "namespace": "glam::Affine3A",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::Affine3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Affine3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Affine3A"
        }
      }
    },
    "glam::Affine3A::mul-1": {
      "namespace": "glam::Affine3A",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Affine3A"
          }
        },
        {
          "kind": {
            "val": "glam::Mat4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      }
    },
    "glam::Affine3A::to_cols_array": {
      "namespace": "glam::Affine3A",
      "identifier": "to_cols_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f32"
            },
            12
          ]
        }
      },
      "documentation": " Creates a `[f32; 12]` array storing data in column major order."
    },
    "glam::Affine3A::to_cols_array_2d": {
      "namespace": "glam::Affine3A",
      "identifier": "to_cols_array_2d",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "array": [
                {
                  "primitive": "f32"
                },
                3
              ]
            },
            4
          ]
        }
      },
      "documentation": " Creates a `[[f32; 3]; 4]` 3D array storing data in\n column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::Affine3A::transform_point3": {
      "namespace": "glam::Affine3A",
      "identifier": "transform_point3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Transforms the given 3D points, applying shear, scale, rotation and translation."
    },
    "glam::Affine3A::transform_point3a": {
      "namespace": "glam::Affine3A",
      "identifier": "transform_point3a",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Transforms the given [`Vec3A`], applying shear, scale, rotation and translation."
    },
    "glam::Affine3A::transform_vector3": {
      "namespace": "glam::Affine3A",
      "identifier": "transform_vector3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Transforms the given 3D vector, applying shear, scale and rotation (but NOT\n translation).\n To also apply translation, use [`Self::transform_point3()`] instead."
    },
    "glam::Affine3A::transform_vector3a": {
      "namespace": "glam::Affine3A",
      "identifier": "transform_vector3a",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Transforms the given [`Vec3A`], applying shear, scale and rotation (but NOT\n translation).\n To also apply translation, use [`Self::transform_point3a()`] instead."
    },
    "glam::BVec2::all": {
      "namespace": "glam::BVec2",
      "identifier": "all",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if all the elements are true, false otherwise."
    },
    "glam::BVec2::any": {
      "namespace": "glam::BVec2",
      "identifier": "any",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if any of the elements are true, false otherwise."
    },
    "glam::BVec2::assert_receiver_is_total_eq": {
      "namespace": "glam::BVec2",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::BVec2::bitmask": {
      "namespace": "glam::BVec2",
      "identifier": "bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 2 bits set from the elements of `self`.\n A true element results in a `1` bit and a false element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::BVec2::clone": {
      "namespace": "glam::BVec2",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      }
    },
    "glam::BVec2::eq": {
      "namespace": "glam::BVec2",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::BVec2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::BVec2::from_array": {
      "namespace": "glam::BVec2",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "bool"
              },
              2
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Creates a new vector mask from a bool array."
    },
    "glam::BVec2::new": {
      "namespace": "glam::BVec2",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Creates a new vector mask."
    },
    "glam::BVec2::set": {
      "namespace": "glam::BVec2",
      "identifier": "set",
      "arguments": [
        {
          "kind": {
            "mut": "glam::BVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Sets the element at `index`.\n Panics if `index` is greater than 1."
    },
    "glam::BVec2::splat": {
      "namespace": "glam::BVec2",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Creates a vector mask with all elements set to `v`."
    },
    "glam::BVec2::test": {
      "namespace": "glam::BVec2",
      "identifier": "test",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Tests the value at `index`.\n Panics if `index` is greater than 1."
    },
    "glam::BVec3::all": {
      "namespace": "glam::BVec3",
      "identifier": "all",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if all the elements are true, false otherwise."
    },
    "glam::BVec3::any": {
      "namespace": "glam::BVec3",
      "identifier": "any",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if any of the elements are true, false otherwise."
    },
    "glam::BVec3::assert_receiver_is_total_eq": {
      "namespace": "glam::BVec3",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::BVec3::bitmask": {
      "namespace": "glam::BVec3",
      "identifier": "bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 3 bits set from the elements of `self`.\n A true element results in a `1` bit and a false element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::BVec3::clone": {
      "namespace": "glam::BVec3",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      }
    },
    "glam::BVec3::eq": {
      "namespace": "glam::BVec3",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::BVec3"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::BVec3::from_array": {
      "namespace": "glam::BVec3",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "bool"
              },
              3
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Creates a new vector mask from a bool array."
    },
    "glam::BVec3::new": {
      "namespace": "glam::BVec3",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Creates a new vector mask."
    },
    "glam::BVec3::set": {
      "namespace": "glam::BVec3",
      "identifier": "set",
      "arguments": [
        {
          "kind": {
            "mut": "glam::BVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Sets the element at `index`.\n Panics if `index` is greater than 2."
    },
    "glam::BVec3::splat": {
      "namespace": "glam::BVec3",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Creates a vector mask with all elements set to `v`."
    },
    "glam::BVec3::test": {
      "namespace": "glam::BVec3",
      "identifier": "test",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Tests the value at `index`.\n Panics if `index` is greater than 2."
    },
    "glam::BVec3A::all": {
      "namespace": "glam::BVec3A",
      "identifier": "all",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if all the elements are true, false otherwise."
    },
    "glam::BVec3A::any": {
      "namespace": "glam::BVec3A",
      "identifier": "any",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if any of the elements are true, false otherwise."
    },
    "glam::BVec3A::bitmask": {
      "namespace": "glam::BVec3A",
      "identifier": "bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 3 bits set from the elements of `self`.\n A true element results in a `1` bit and a false element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::BVec3A::clone": {
      "namespace": "glam::BVec3A",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3A"
        }
      }
    },
    "glam::BVec3A::eq": {
      "namespace": "glam::BVec3A",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::BVec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::BVec3A::from_array": {
      "namespace": "glam::BVec3A",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "bool"
              },
              3
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3A"
        }
      },
      "documentation": " Creates a new vector mask from a bool array."
    },
    "glam::BVec3A::new": {
      "namespace": "glam::BVec3A",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3A"
        }
      },
      "documentation": " Creates a new vector mask."
    },
    "glam::BVec3A::set": {
      "namespace": "glam::BVec3A",
      "identifier": "set",
      "arguments": [
        {
          "kind": {
            "mut": "glam::BVec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Sets the element at `index`.\n Panics if `index` is greater than 2."
    },
    "glam::BVec3A::splat": {
      "namespace": "glam::BVec3A",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3A"
        }
      },
      "documentation": " Creates a vector mask with all elements set to `v`."
    },
    "glam::BVec3A::test": {
      "namespace": "glam::BVec3A",
      "identifier": "test",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Tests the value at `index`.\n Panics if `index` is greater than 2."
    },
    "glam::BVec4::all": {
      "namespace": "glam::BVec4",
      "identifier": "all",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if all the elements are true, false otherwise."
    },
    "glam::BVec4::any": {
      "namespace": "glam::BVec4",
      "identifier": "any",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if any of the elements are true, false otherwise."
    },
    "glam::BVec4::assert_receiver_is_total_eq": {
      "namespace": "glam::BVec4",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::BVec4::bitmask": {
      "namespace": "glam::BVec4",
      "identifier": "bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 4 bits set from the elements of `self`.\n A true element results in a `1` bit and a false element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::BVec4::clone": {
      "namespace": "glam::BVec4",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      }
    },
    "glam::BVec4::eq": {
      "namespace": "glam::BVec4",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::BVec4"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::BVec4::from_array": {
      "namespace": "glam::BVec4",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "bool"
              },
              4
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Creates a new vector mask from a bool array."
    },
    "glam::BVec4::new": {
      "namespace": "glam::BVec4",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "z"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Creates a new vector mask."
    },
    "glam::BVec4::set": {
      "namespace": "glam::BVec4",
      "identifier": "set",
      "arguments": [
        {
          "kind": {
            "mut": "glam::BVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Sets the element at `index`.\n Panics if `index` is greater than 3."
    },
    "glam::BVec4::splat": {
      "namespace": "glam::BVec4",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Creates a vector mask with all elements set to `v`."
    },
    "glam::BVec4::test": {
      "namespace": "glam::BVec4",
      "identifier": "test",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Tests the value at `index`.\n Panics if `index` is greater than 3."
    },
    "glam::BVec4A::all": {
      "namespace": "glam::BVec4A",
      "identifier": "all",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec4A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if all the elements are true, false otherwise."
    },
    "glam::BVec4A::any": {
      "namespace": "glam::BVec4A",
      "identifier": "any",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec4A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if any of the elements are true, false otherwise."
    },
    "glam::BVec4A::bitmask": {
      "namespace": "glam::BVec4A",
      "identifier": "bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec4A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 4 bits set from the elements of `self`.\n A true element results in a `1` bit and a false element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::BVec4A::clone": {
      "namespace": "glam::BVec4A",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec4A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4A"
        }
      }
    },
    "glam::BVec4A::eq": {
      "namespace": "glam::BVec4A",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec4A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::BVec4A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::BVec4A::from_array": {
      "namespace": "glam::BVec4A",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "bool"
              },
              4
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4A"
        }
      },
      "documentation": " Creates a new vector mask from a bool array."
    },
    "glam::BVec4A::new": {
      "namespace": "glam::BVec4A",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "z"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4A"
        }
      },
      "documentation": " Creates a new vector mask."
    },
    "glam::BVec4A::set": {
      "namespace": "glam::BVec4A",
      "identifier": "set",
      "arguments": [
        {
          "kind": {
            "mut": "glam::BVec4A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        },
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "value"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      },
      "documentation": " Sets the element at `index`.\n Panics if `index` is greater than 3."
    },
    "glam::BVec4A::splat": {
      "namespace": "glam::BVec4A",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "bool"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4A"
        }
      },
      "documentation": " Creates a vector mask with all elements set to `v`."
    },
    "glam::BVec4A::test": {
      "namespace": "glam::BVec4A",
      "identifier": "test",
      "arguments": [
        {
          "kind": {
            "ref": "glam::BVec4A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Tests the value at `index`.\n Panics if `index` is greater than 3."
    },
    "glam::DAffine2::abs_diff_eq": {
      "namespace": "glam::DAffine2",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DAffine2"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs`\n is less than or equal to `max_abs_diff`.\n This can be used to compare if two 3x4 matrices contain similar elements. It works\n best when comparing with a known value. The `max_abs_diff` that should be used used\n depends on the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::DAffine2::clone": {
      "namespace": "glam::DAffine2",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine2"
        }
      }
    },
    "glam::DAffine2::eq": {
      "namespace": "glam::DAffine2",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DAffine2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::DAffine2::from_angle": {
      "namespace": "glam::DAffine2",
      "identifier": "from_angle",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine2"
        }
      },
      "documentation": " Creates an affine transform from the given rotation `angle`."
    },
    "glam::DAffine2::from_angle_translation": {
      "namespace": "glam::DAffine2",
      "identifier": "from_angle_translation",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine2"
        }
      },
      "documentation": " Creates an affine transform from the given 2D rotation `angle` (in radians) and\n `translation`.\n Equivalent to `DAffine2::from_translation(translation) * DAffine2::from_angle(angle)`"
    },
    "glam::DAffine2::from_cols": {
      "namespace": "glam::DAffine2",
      "identifier": "from_cols",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "x_axis"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "y_axis"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "z_axis"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine2"
        }
      },
      "documentation": " Creates an affine transform from three column vectors."
    },
    "glam::DAffine2::from_mat2": {
      "namespace": "glam::DAffine2",
      "identifier": "from_mat2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat2"
          },
          "name": "matrix2"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine2"
        }
      },
      "documentation": " Creates an affine transform from a 2x2 matrix (expressing scale, shear and rotation)"
    },
    "glam::DAffine2::from_mat2_translation": {
      "namespace": "glam::DAffine2",
      "identifier": "from_mat2_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat2"
          },
          "name": "matrix2"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine2"
        }
      },
      "documentation": " Creates an affine transform from a 2x2 matrix (expressing scale, shear and rotation) and a\n translation vector.\n Equivalent to\n `DAffine2::from_translation(translation) * DAffine2::from_mat2(mat2)`"
    },
    "glam::DAffine2::from_mat3": {
      "namespace": "glam::DAffine2",
      "identifier": "from_mat3",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat3"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine2"
        }
      },
      "documentation": " The given `DMat3` must be an affine transform,"
    },
    "glam::DAffine2::from_scale": {
      "namespace": "glam::DAffine2",
      "identifier": "from_scale",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "scale"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine2"
        }
      },
      "documentation": " Creates an affine transform that changes scale.\n Note that if any scale is zero the transform will be non-invertible."
    },
    "glam::DAffine2::from_scale_angle_translation": {
      "namespace": "glam::DAffine2",
      "identifier": "from_scale_angle_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "scale"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine2"
        }
      },
      "documentation": " Creates an affine transform from the given 2D `scale`, rotation `angle` (in radians) and\n `translation`.\n Equivalent to `DAffine2::from_translation(translation) *\n DAffine2::from_angle(angle) * DAffine2::from_scale(scale)`"
    },
    "glam::DAffine2::from_translation": {
      "namespace": "glam::DAffine2",
      "identifier": "from_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine2"
        }
      },
      "documentation": " Creates an affine transformation from the given 2D `translation`."
    },
    "glam::DAffine2::inverse": {
      "namespace": "glam::DAffine2",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine2"
        }
      },
      "documentation": " Return the inverse of this transform.\n Note that if the transform is not invertible the result will be invalid."
    },
    "glam::DAffine2::is_finite": {
      "namespace": "glam::DAffine2",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.\n If any element is either `NaN`, positive or negative infinity, this will return\n `false`."
    },
    "glam::DAffine2::is_nan": {
      "namespace": "glam::DAffine2",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::DAffine2::mul": {
      "namespace": "glam::DAffine2",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::DAffine2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DAffine2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine2"
        }
      }
    },
    "glam::DAffine2::mul-1": {
      "namespace": "glam::DAffine2",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DAffine2"
          }
        },
        {
          "kind": {
            "val": "glam::DMat3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      }
    },
    "glam::DAffine2::to_cols_array": {
      "namespace": "glam::DAffine2",
      "identifier": "to_cols_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f64"
            },
            6
          ]
        }
      },
      "documentation": " Creates a `[f64; 6]` array storing data in column major order."
    },
    "glam::DAffine2::to_cols_array_2d": {
      "namespace": "glam::DAffine2",
      "identifier": "to_cols_array_2d",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "array": [
                {
                  "primitive": "f64"
                },
                2
              ]
            },
            3
          ]
        }
      },
      "documentation": " Creates a `[[f64; 2]; 3]` 2D array storing data in\n column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::DAffine2::transform_point2": {
      "namespace": "glam::DAffine2",
      "identifier": "transform_point2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Transforms the given 2D point, applying shear, scale, rotation and translation."
    },
    "glam::DAffine2::transform_vector2": {
      "namespace": "glam::DAffine2",
      "identifier": "transform_vector2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Transforms the given 2D vector, applying shear, scale and rotation (but NOT\n translation).\n To also apply translation, use [`Self::transform_point2()`] instead."
    },
    "glam::DAffine3::abs_diff_eq": {
      "namespace": "glam::DAffine3",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DAffine3"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs`\n is less than or equal to `max_abs_diff`.\n This can be used to compare if two 3x4 matrices contain similar elements. It works\n best when comparing with a known value. The `max_abs_diff` that should be used used\n depends on the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::DAffine3::clone": {
      "namespace": "glam::DAffine3",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      }
    },
    "glam::DAffine3::eq": {
      "namespace": "glam::DAffine3",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DAffine3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::DAffine3::from_axis_angle": {
      "namespace": "glam::DAffine3",
      "identifier": "from_axis_angle",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "axis"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates an affine transform containing a 3D rotation around a normalized\n rotation `axis` of `angle` (in radians)."
    },
    "glam::DAffine3::from_cols": {
      "namespace": "glam::DAffine3",
      "identifier": "from_cols",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "x_axis"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "y_axis"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "z_axis"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "w_axis"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates an affine transform from three column vectors."
    },
    "glam::DAffine3::from_mat3": {
      "namespace": "glam::DAffine3",
      "identifier": "from_mat3",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat3"
          },
          "name": "mat3"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates an affine transform from a 3x3 matrix (expressing scale, shear and\n rotation)"
    },
    "glam::DAffine3::from_mat3_translation": {
      "namespace": "glam::DAffine3",
      "identifier": "from_mat3_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat3"
          },
          "name": "mat3"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates an affine transform from a 3x3 matrix (expressing scale, shear and rotation)\n and a translation vector.\n Equivalent to `DAffine3::from_translation(translation) * DAffine3::from_mat3(mat3)`"
    },
    "glam::DAffine3::from_mat4": {
      "namespace": "glam::DAffine3",
      "identifier": "from_mat4",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat4"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " The given `DMat4` must be an affine transform,\n i.e. contain no perspective transform."
    },
    "glam::DAffine3::from_quat": {
      "namespace": "glam::DAffine3",
      "identifier": "from_quat",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates an affine transform from the given `rotation` quaternion."
    },
    "glam::DAffine3::from_rotation_translation": {
      "namespace": "glam::DAffine3",
      "identifier": "from_rotation_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "rotation"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates an affine transform from the given 3D `rotation` and `translation`.\n Equivalent to `DAffine3::from_translation(translation) * DAffine3::from_quat(rotation)`"
    },
    "glam::DAffine3::from_rotation_x": {
      "namespace": "glam::DAffine3",
      "identifier": "from_rotation_x",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates an affine transform containing a 3D rotation around the x axis of\n `angle` (in radians)."
    },
    "glam::DAffine3::from_rotation_y": {
      "namespace": "glam::DAffine3",
      "identifier": "from_rotation_y",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates an affine transform containing a 3D rotation around the y axis of\n `angle` (in radians)."
    },
    "glam::DAffine3::from_rotation_z": {
      "namespace": "glam::DAffine3",
      "identifier": "from_rotation_z",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates an affine transform containing a 3D rotation around the z axis of\n `angle` (in radians)."
    },
    "glam::DAffine3::from_scale": {
      "namespace": "glam::DAffine3",
      "identifier": "from_scale",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "scale"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates an affine transform that changes scale.\n Note that if any scale is zero the transform will be non-invertible."
    },
    "glam::DAffine3::from_scale_rotation_translation": {
      "namespace": "glam::DAffine3",
      "identifier": "from_scale_rotation_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "scale"
        },
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "rotation"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates an affine transform from the given 3D `scale`, `rotation` and\n `translation`.\n Equivalent to `DAffine3::from_translation(translation) *\n DAffine3::from_quat(rotation) * DAffine3::from_scale(scale)`"
    },
    "glam::DAffine3::from_translation": {
      "namespace": "glam::DAffine3",
      "identifier": "from_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates an affine transformation from the given 3D `translation`."
    },
    "glam::DAffine3::inverse": {
      "namespace": "glam::DAffine3",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Return the inverse of this transform.\n Note that if the transform is not invertible the result will be invalid."
    },
    "glam::DAffine3::is_finite": {
      "namespace": "glam::DAffine3",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.\n If any element is either `NaN`, positive or negative infinity, this will return\n `false`."
    },
    "glam::DAffine3::is_nan": {
      "namespace": "glam::DAffine3",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::DAffine3::look_at_lh": {
      "namespace": "glam::DAffine3",
      "identifier": "look_at_lh",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "center"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates a left-handed view transform using a camera position, an up direction, and a focal\n point.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=forward`.\n # Panics\n Will panic if `up` is not normalized when `glam_assert` is enabled."
    },
    "glam::DAffine3::look_at_rh": {
      "namespace": "glam::DAffine3",
      "identifier": "look_at_rh",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "center"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates a right-handed view transform using a camera position, an up direction, and a focal\n point.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=back`.\n # Panics\n Will panic if `up` is not normalized when `glam_assert` is enabled."
    },
    "glam::DAffine3::look_to_lh": {
      "namespace": "glam::DAffine3",
      "identifier": "look_to_lh",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "dir"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates a left-handed view transform using a camera position, an up direction, and a facing\n direction.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=forward`."
    },
    "glam::DAffine3::look_to_rh": {
      "namespace": "glam::DAffine3",
      "identifier": "look_to_rh",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "dir"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      },
      "documentation": " Creates a right-handed view transform using a camera position, an up direction, and a facing\n direction.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=back`."
    },
    "glam::DAffine3::mul": {
      "namespace": "glam::DAffine3",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::DAffine3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DAffine3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DAffine3"
        }
      }
    },
    "glam::DAffine3::mul-1": {
      "namespace": "glam::DAffine3",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DAffine3"
          }
        },
        {
          "kind": {
            "val": "glam::DMat4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      }
    },
    "glam::DAffine3::to_cols_array": {
      "namespace": "glam::DAffine3",
      "identifier": "to_cols_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f64"
            },
            12
          ]
        }
      },
      "documentation": " Creates a `[f64; 12]` array storing data in column major order."
    },
    "glam::DAffine3::to_cols_array_2d": {
      "namespace": "glam::DAffine3",
      "identifier": "to_cols_array_2d",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "array": [
                {
                  "primitive": "f64"
                },
                3
              ]
            },
            4
          ]
        }
      },
      "documentation": " Creates a `[[f64; 3]; 4]` 3D array storing data in\n column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::DAffine3::transform_point3": {
      "namespace": "glam::DAffine3",
      "identifier": "transform_point3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Transforms the given 3D points, applying shear, scale, rotation and translation."
    },
    "glam::DAffine3::transform_vector3": {
      "namespace": "glam::DAffine3",
      "identifier": "transform_vector3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Transforms the given 3D vector, applying shear, scale and rotation (but NOT\n translation).\n To also apply translation, use [`Self::transform_point3()`] instead."
    },
    "glam::DMat2::abs": {
      "namespace": "glam::DMat2",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      },
      "documentation": " Takes the absolute value of each element in `self`"
    },
    "glam::DMat2::abs_diff_eq": {
      "namespace": "glam::DMat2",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DMat2"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs`\n is less than or equal to `max_abs_diff`.\n This can be used to compare if two matrices contain similar elements. It works best\n when comparing with a known value. The `max_abs_diff` that should be used used\n depends on the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::DMat2::add": {
      "namespace": "glam::DMat2",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DMat2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      }
    },
    "glam::DMat2::add_mat2": {
      "namespace": "glam::DMat2",
      "identifier": "add_mat2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      },
      "documentation": " Adds two 2x2 matrices."
    },
    "glam::DMat2::as_mat2": {
      "namespace": "glam::DMat2",
      "identifier": "as_mat2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      }
    },
    "glam::DMat2::clone": {
      "namespace": "glam::DMat2",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      }
    },
    "glam::DMat2::col": {
      "namespace": "glam::DMat2",
      "identifier": "col",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns the matrix column for the given `index`.\n # Panics\n Panics if `index` is greater than 1."
    },
    "glam::DMat2::determinant": {
      "namespace": "glam::DMat2",
      "identifier": "determinant",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the determinant of `self`."
    },
    "glam::DMat2::div": {
      "namespace": "glam::DMat2",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      }
    },
    "glam::DMat2::div_scalar": {
      "namespace": "glam::DMat2",
      "identifier": "div_scalar",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      },
      "documentation": " Divides a 2x2 matrix by a scalar."
    },
    "glam::DMat2::eq": {
      "namespace": "glam::DMat2",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::DMat2::from_angle": {
      "namespace": "glam::DMat2",
      "identifier": "from_angle",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      },
      "documentation": " Creates a 2x2 matrix containing a rotation of `angle` (in radians)."
    },
    "glam::DMat2::from_cols": {
      "namespace": "glam::DMat2",
      "identifier": "from_cols",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "x_axis"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "y_axis"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      },
      "documentation": " Creates a 2x2 matrix from two column vectors."
    },
    "glam::DMat2::from_diagonal": {
      "namespace": "glam::DMat2",
      "identifier": "from_diagonal",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "diagonal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      },
      "documentation": " Creates a 2x2 matrix with its diagonal set to `diagonal` and all other entries set to 0."
    },
    "glam::DMat2::from_mat3": {
      "namespace": "glam::DMat2",
      "identifier": "from_mat3",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat3"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      },
      "documentation": " Creates a 2x2 matrix from a 3x3 matrix, discarding the 2nd row and column."
    },
    "glam::DMat2::from_mat3_minor": {
      "namespace": "glam::DMat2",
      "identifier": "from_mat3_minor",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat3"
          },
          "name": "m"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "i"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "j"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      },
      "documentation": " Creates a 2x2 matrix from the minor of the given 3x3 matrix, discarding the `i`th column\n and `j`th row.\n # Panics\n Panics if `i` or `j` is greater than 2."
    },
    "glam::DMat2::from_scale_angle": {
      "namespace": "glam::DMat2",
      "identifier": "from_scale_angle",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "scale"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      },
      "documentation": " Creates a 2x2 matrix containing the combining non-uniform `scale` and rotation of\n `angle` (in radians)."
    },
    "glam::DMat2::inverse": {
      "namespace": "glam::DMat2",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      },
      "documentation": " Returns the inverse of `self`.\n If the matrix is not invertible the returned matrix will be invalid.\n # Panics\n Will panic if the determinant of `self` is zero when `glam_assert` is enabled."
    },
    "glam::DMat2::is_finite": {
      "namespace": "glam::DMat2",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.\n If any element is either `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::DMat2::is_nan": {
      "namespace": "glam::DMat2",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::DMat2::mul": {
      "namespace": "glam::DMat2",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DMat2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      }
    },
    "glam::DMat2::mul-1": {
      "namespace": "glam::DMat2",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat2"
          }
        },
        {
          "kind": {
            "val": "glam::DVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DMat2::mul-2": {
      "namespace": "glam::DMat2",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat2"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      }
    },
    "glam::DMat2::mul_mat2": {
      "namespace": "glam::DMat2",
      "identifier": "mul_mat2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      },
      "documentation": " Multiplies two 2x2 matrices."
    },
    "glam::DMat2::mul_scalar": {
      "namespace": "glam::DMat2",
      "identifier": "mul_scalar",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      },
      "documentation": " Multiplies a 2x2 matrix by a scalar."
    },
    "glam::DMat2::mul_vec2": {
      "namespace": "glam::DMat2",
      "identifier": "mul_vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Transforms a 2D vector."
    },
    "glam::DMat2::neg": {
      "namespace": "glam::DMat2",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      }
    },
    "glam::DMat2::row": {
      "namespace": "glam::DMat2",
      "identifier": "row",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns the matrix row for the given `index`.\n # Panics\n Panics if `index` is greater than 1."
    },
    "glam::DMat2::sub": {
      "namespace": "glam::DMat2",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DMat2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      }
    },
    "glam::DMat2::sub_mat2": {
      "namespace": "glam::DMat2",
      "identifier": "sub_mat2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      },
      "documentation": " Subtracts two 2x2 matrices."
    },
    "glam::DMat2::to_cols_array": {
      "namespace": "glam::DMat2",
      "identifier": "to_cols_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f64"
            },
            4
          ]
        }
      },
      "documentation": " Creates a `[f64; 4]` array storing data in column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::DMat2::to_cols_array_2d": {
      "namespace": "glam::DMat2",
      "identifier": "to_cols_array_2d",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "array": [
                {
                  "primitive": "f64"
                },
                2
              ]
            },
            2
          ]
        }
      },
      "documentation": " Creates a `[[f64; 2]; 2]` 2D array storing data in column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::DMat2::transpose": {
      "namespace": "glam::DMat2",
      "identifier": "transpose",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      },
      "documentation": " Returns the transpose of `self`."
    },
    "glam::DMat3::abs": {
      "namespace": "glam::DMat3",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Takes the absolute value of each element in `self`"
    },
    "glam::DMat3::abs_diff_eq": {
      "namespace": "glam::DMat3",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DMat3"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs`\n is less than or equal to `max_abs_diff`.\n This can be used to compare if two matrices contain similar elements. It works best\n when comparing with a known value. The `max_abs_diff` that should be used used\n depends on the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::DMat3::add": {
      "namespace": "glam::DMat3",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DMat3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      }
    },
    "glam::DMat3::add_mat3": {
      "namespace": "glam::DMat3",
      "identifier": "add_mat3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Adds two 3x3 matrices."
    },
    "glam::DMat3::as_mat3": {
      "namespace": "glam::DMat3",
      "identifier": "as_mat3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      }
    },
    "glam::DMat3::clone": {
      "namespace": "glam::DMat3",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      }
    },
    "glam::DMat3::col": {
      "namespace": "glam::DMat3",
      "identifier": "col",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns the matrix column for the given `index`.\n # Panics\n Panics if `index` is greater than 2."
    },
    "glam::DMat3::determinant": {
      "namespace": "glam::DMat3",
      "identifier": "determinant",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the determinant of `self`."
    },
    "glam::DMat3::div": {
      "namespace": "glam::DMat3",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      }
    },
    "glam::DMat3::div_scalar": {
      "namespace": "glam::DMat3",
      "identifier": "div_scalar",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Divides a 3x3 matrix by a scalar."
    },
    "glam::DMat3::eq": {
      "namespace": "glam::DMat3",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::DMat3::from_angle": {
      "namespace": "glam::DMat3",
      "identifier": "from_angle",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 2D rotation `angle` (in\n radians).\n The resulting matrix can be used to transform 2D points and vectors. See\n [`Self::transform_point2()`] and [`Self::transform_vector2()`]."
    },
    "glam::DMat3::from_axis_angle": {
      "namespace": "glam::DMat3",
      "identifier": "from_axis_angle",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "axis"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Creates a 3D rotation matrix from a normalized rotation `axis` and `angle` (in\n radians).\n # Panics\n Will panic if `axis` is not normalized when `glam_assert` is enabled."
    },
    "glam::DMat3::from_cols": {
      "namespace": "glam::DMat3",
      "identifier": "from_cols",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "x_axis"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "y_axis"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "z_axis"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Creates a 3x3 matrix from three column vectors."
    },
    "glam::DMat3::from_diagonal": {
      "namespace": "glam::DMat3",
      "identifier": "from_diagonal",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "diagonal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Creates a 3x3 matrix with its diagonal set to `diagonal` and all other entries set to 0."
    },
    "glam::DMat3::from_euler": {
      "namespace": "glam::DMat3",
      "identifier": "from_euler",
      "arguments": [
        {
          "kind": {
            "val": "glam::EulerRot"
          },
          "name": "order"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "a"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "b"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "c"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Creates a 3D rotation matrix from the given euler rotation sequence and the angles (in\n radians)."
    },
    "glam::DMat3::from_mat2": {
      "namespace": "glam::DMat3",
      "identifier": "from_mat2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat2"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 2x2 matrix.\n The resulting matrix can be used to transform 2D points and vectors. See\n [`Self::transform_point2()`] and [`Self::transform_vector2()`]."
    },
    "glam::DMat3::from_mat4": {
      "namespace": "glam::DMat3",
      "identifier": "from_mat4",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat4"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th row and column."
    },
    "glam::DMat3::from_mat4_minor": {
      "namespace": "glam::DMat3",
      "identifier": "from_mat4_minor",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat4"
          },
          "name": "m"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "i"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "j"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Creates a 3x3 matrix from the minor of the given 4x4 matrix, discarding the `i`th column\n and `j`th row.\n # Panics\n Panics if `i` or `j` is greater than 3."
    },
    "glam::DMat3::from_quat": {
      "namespace": "glam::DMat3",
      "identifier": "from_quat",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Creates a 3D rotation matrix from the given quaternion.\n # Panics\n Will panic if `rotation` is not normalized when `glam_assert` is enabled."
    },
    "glam::DMat3::from_rotation_x": {
      "namespace": "glam::DMat3",
      "identifier": "from_rotation_x",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Creates a 3D rotation matrix from `angle` (in radians) around the x axis."
    },
    "glam::DMat3::from_rotation_y": {
      "namespace": "glam::DMat3",
      "identifier": "from_rotation_y",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Creates a 3D rotation matrix from `angle` (in radians) around the y axis."
    },
    "glam::DMat3::from_rotation_z": {
      "namespace": "glam::DMat3",
      "identifier": "from_rotation_z",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Creates a 3D rotation matrix from `angle` (in radians) around the z axis."
    },
    "glam::DMat3::from_scale": {
      "namespace": "glam::DMat3",
      "identifier": "from_scale",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "scale"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given non-uniform 2D `scale`.\n The resulting matrix can be used to transform 2D points and vectors. See\n [`Self::transform_point2()`] and [`Self::transform_vector2()`].\n # Panics\n Will panic if all elements of `scale` are zero when `glam_assert` is enabled."
    },
    "glam::DMat3::from_scale_angle_translation": {
      "namespace": "glam::DMat3",
      "identifier": "from_scale_angle_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "scale"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 2D `scale`, rotation `angle` (in\n radians) and `translation`.\n The resulting matrix can be used to transform 2D points and vectors. See\n [`Self::transform_point2()`] and [`Self::transform_vector2()`]."
    },
    "glam::DMat3::from_translation": {
      "namespace": "glam::DMat3",
      "identifier": "from_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 2D `translation`.\n The resulting matrix can be used to transform 2D points and vectors. See\n [`Self::transform_point2()`] and [`Self::transform_vector2()`]."
    },
    "glam::DMat3::inverse": {
      "namespace": "glam::DMat3",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Returns the inverse of `self`.\n If the matrix is not invertible the returned matrix will be invalid.\n # Panics\n Will panic if the determinant of `self` is zero when `glam_assert` is enabled."
    },
    "glam::DMat3::is_finite": {
      "namespace": "glam::DMat3",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.\n If any element is either `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::DMat3::is_nan": {
      "namespace": "glam::DMat3",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::DMat3::mul": {
      "namespace": "glam::DMat3",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DAffine2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      }
    },
    "glam::DMat3::mul-1": {
      "namespace": "glam::DMat3",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat3"
          }
        },
        {
          "kind": {
            "val": "glam::DMat3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      }
    },
    "glam::DMat3::mul-2": {
      "namespace": "glam::DMat3",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat3"
          }
        },
        {
          "kind": {
            "val": "glam::DVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DMat3::mul-3": {
      "namespace": "glam::DMat3",
      "identifier": "mul-3",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat3"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      }
    },
    "glam::DMat3::mul_mat3": {
      "namespace": "glam::DMat3",
      "identifier": "mul_mat3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Multiplies two 3x3 matrices."
    },
    "glam::DMat3::mul_scalar": {
      "namespace": "glam::DMat3",
      "identifier": "mul_scalar",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Multiplies a 3x3 matrix by a scalar."
    },
    "glam::DMat3::mul_vec3": {
      "namespace": "glam::DMat3",
      "identifier": "mul_vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Transforms a 3D vector."
    },
    "glam::DMat3::neg": {
      "namespace": "glam::DMat3",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      }
    },
    "glam::DMat3::row": {
      "namespace": "glam::DMat3",
      "identifier": "row",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns the matrix row for the given `index`.\n # Panics\n Panics if `index` is greater than 2."
    },
    "glam::DMat3::sub": {
      "namespace": "glam::DMat3",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DMat3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      }
    },
    "glam::DMat3::sub_mat3": {
      "namespace": "glam::DMat3",
      "identifier": "sub_mat3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Subtracts two 3x3 matrices."
    },
    "glam::DMat3::to_cols_array": {
      "namespace": "glam::DMat3",
      "identifier": "to_cols_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f64"
            },
            9
          ]
        }
      },
      "documentation": " Creates a `[f64; 9]` array storing data in column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::DMat3::to_cols_array_2d": {
      "namespace": "glam::DMat3",
      "identifier": "to_cols_array_2d",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "array": [
                {
                  "primitive": "f64"
                },
                3
              ]
            },
            3
          ]
        }
      },
      "documentation": " Creates a `[[f64; 3]; 3]` 3D array storing data in column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::DMat3::to_euler": {
      "namespace": "glam::DMat3",
      "identifier": "to_euler",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::EulerRot"
          },
          "name": "order"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": [
            {
              "primitive": "f64"
            },
            {
              "primitive": "f64"
            },
            {
              "primitive": "f64"
            }
          ]
        }
      },
      "documentation": " Extract Euler angles with the given Euler rotation order.\n Note if the input matrix contains scales, shears, or other non-rotation transformations then\n the resulting Euler angles will be ill-defined.\n # Panics\n Will panic if any input matrix column is not normalized when `glam_assert` is enabled."
    },
    "glam::DMat3::transform_point2": {
      "namespace": "glam::DMat3",
      "identifier": "transform_point2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Transforms the given 2D vector as a point.\n This is the equivalent of multiplying `rhs` as a 3D vector where `z` is `1`.\n This method assumes that `self` contains a valid affine transform.\n # Panics\n Will panic if the 2nd row of `self` is not `(0, 0, 1)` when `glam_assert` is enabled."
    },
    "glam::DMat3::transform_vector2": {
      "namespace": "glam::DMat3",
      "identifier": "transform_vector2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Rotates the given 2D vector.\n This is the equivalent of multiplying `rhs` as a 3D vector where `z` is `0`.\n This method assumes that `self` contains a valid affine transform.\n # Panics\n Will panic if the 2nd row of `self` is not `(0, 0, 1)` when `glam_assert` is enabled."
    },
    "glam::DMat3::transpose": {
      "namespace": "glam::DMat3",
      "identifier": "transpose",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      },
      "documentation": " Returns the transpose of `self`."
    },
    "glam::DMat4::abs": {
      "namespace": "glam::DMat4",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Takes the absolute value of each element in `self`"
    },
    "glam::DMat4::abs_diff_eq": {
      "namespace": "glam::DMat4",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DMat4"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs`\n is less than or equal to `max_abs_diff`.\n This can be used to compare if two matrices contain similar elements. It works best\n when comparing with a known value. The `max_abs_diff` that should be used used\n depends on the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::DMat4::add": {
      "namespace": "glam::DMat4",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DMat4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      }
    },
    "glam::DMat4::add_mat4": {
      "namespace": "glam::DMat4",
      "identifier": "add_mat4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Adds two 4x4 matrices."
    },
    "glam::DMat4::as_mat4": {
      "namespace": "glam::DMat4",
      "identifier": "as_mat4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      }
    },
    "glam::DMat4::clone": {
      "namespace": "glam::DMat4",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      }
    },
    "glam::DMat4::col": {
      "namespace": "glam::DMat4",
      "identifier": "col",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns the matrix column for the given `index`.\n # Panics\n Panics if `index` is greater than 3."
    },
    "glam::DMat4::determinant": {
      "namespace": "glam::DMat4",
      "identifier": "determinant",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the determinant of `self`."
    },
    "glam::DMat4::div": {
      "namespace": "glam::DMat4",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      }
    },
    "glam::DMat4::div_scalar": {
      "namespace": "glam::DMat4",
      "identifier": "div_scalar",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Divides a 4x4 matrix by a scalar."
    },
    "glam::DMat4::eq": {
      "namespace": "glam::DMat4",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::DMat4::from_axis_angle": {
      "namespace": "glam::DMat4",
      "identifier": "from_axis_angle",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "axis"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates an affine transformation matrix containing a 3D rotation around a normalized\n rotation `axis` of `angle` (in radians).\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`].\n # Panics\n Will panic if `axis` is not normalized when `glam_assert` is enabled."
    },
    "glam::DMat4::from_cols": {
      "namespace": "glam::DMat4",
      "identifier": "from_cols",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "x_axis"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "y_axis"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "z_axis"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "w_axis"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates a 4x4 matrix from four column vectors."
    },
    "glam::DMat4::from_diagonal": {
      "namespace": "glam::DMat4",
      "identifier": "from_diagonal",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "diagonal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates a 4x4 matrix with its diagonal set to `diagonal` and all other entries set to 0."
    },
    "glam::DMat4::from_euler": {
      "namespace": "glam::DMat4",
      "identifier": "from_euler",
      "arguments": [
        {
          "kind": {
            "val": "glam::EulerRot"
          },
          "name": "order"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "a"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "b"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "c"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates a affine transformation matrix containing a rotation from the given euler\n rotation sequence and angles (in radians).\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`]."
    },
    "glam::DMat4::from_mat3": {
      "namespace": "glam::DMat4",
      "identifier": "from_mat3",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat3"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 3x3 linear transformation\n matrix.\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`]."
    },
    "glam::DMat4::from_quat": {
      "namespace": "glam::DMat4",
      "identifier": "from_quat",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given `rotation` quaternion.\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`].\n # Panics\n Will panic if `rotation` is not normalized when `glam_assert` is enabled."
    },
    "glam::DMat4::from_rotation_translation": {
      "namespace": "glam::DMat4",
      "identifier": "from_rotation_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "rotation"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 3D `translation`.\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`].\n # Panics\n Will panic if `rotation` is not normalized when `glam_assert` is enabled."
    },
    "glam::DMat4::from_rotation_x": {
      "namespace": "glam::DMat4",
      "identifier": "from_rotation_x",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates an affine transformation matrix containing a 3D rotation around the x axis of\n `angle` (in radians).\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`]."
    },
    "glam::DMat4::from_rotation_y": {
      "namespace": "glam::DMat4",
      "identifier": "from_rotation_y",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates an affine transformation matrix containing a 3D rotation around the y axis of\n `angle` (in radians).\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`]."
    },
    "glam::DMat4::from_rotation_z": {
      "namespace": "glam::DMat4",
      "identifier": "from_rotation_z",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates an affine transformation matrix containing a 3D rotation around the z axis of\n `angle` (in radians).\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`]."
    },
    "glam::DMat4::from_scale": {
      "namespace": "glam::DMat4",
      "identifier": "from_scale",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "scale"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates an affine transformation matrix containing the given 3D non-uniform `scale`.\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`].\n # Panics\n Will panic if all elements of `scale` are zero when `glam_assert` is enabled."
    },
    "glam::DMat4::from_scale_rotation_translation": {
      "namespace": "glam::DMat4",
      "identifier": "from_scale_rotation_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "scale"
        },
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "rotation"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 3D `scale`, `rotation` and\n `translation`.\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`].\n # Panics\n Will panic if `rotation` is not normalized when `glam_assert` is enabled."
    },
    "glam::DMat4::from_translation": {
      "namespace": "glam::DMat4",
      "identifier": "from_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 3D `translation`.\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`]."
    },
    "glam::DMat4::inverse": {
      "namespace": "glam::DMat4",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Returns the inverse of `self`.\n If the matrix is not invertible the returned matrix will be invalid.\n # Panics\n Will panic if the determinant of `self` is zero when `glam_assert` is enabled."
    },
    "glam::DMat4::is_finite": {
      "namespace": "glam::DMat4",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.\n If any element is either `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::DMat4::is_nan": {
      "namespace": "glam::DMat4",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::DMat4::look_at_lh": {
      "namespace": "glam::DMat4",
      "identifier": "look_at_lh",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "center"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates a left-handed view matrix using a camera position, an up direction, and a focal\n point.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=forward`.\n # Panics\n Will panic if `up` is not normalized when `glam_assert` is enabled."
    },
    "glam::DMat4::look_at_rh": {
      "namespace": "glam::DMat4",
      "identifier": "look_at_rh",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "center"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates a right-handed view matrix using a camera position, an up direction, and a focal\n point.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=back`.\n # Panics\n Will panic if `up` is not normalized when `glam_assert` is enabled."
    },
    "glam::DMat4::look_to_lh": {
      "namespace": "glam::DMat4",
      "identifier": "look_to_lh",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "dir"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates a left-handed view matrix using a camera position, an up direction, and a facing\n direction.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=forward`."
    },
    "glam::DMat4::look_to_rh": {
      "namespace": "glam::DMat4",
      "identifier": "look_to_rh",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "dir"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates a right-handed view matrix using a camera position, an up direction, and a facing\n direction.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=back`."
    },
    "glam::DMat4::mul": {
      "namespace": "glam::DMat4",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DAffine3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      }
    },
    "glam::DMat4::mul-1": {
      "namespace": "glam::DMat4",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat4"
          }
        },
        {
          "kind": {
            "val": "glam::DMat4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      }
    },
    "glam::DMat4::mul-2": {
      "namespace": "glam::DMat4",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat4"
          }
        },
        {
          "kind": {
            "val": "glam::DVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DMat4::mul-3": {
      "namespace": "glam::DMat4",
      "identifier": "mul-3",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat4"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      }
    },
    "glam::DMat4::mul_mat4": {
      "namespace": "glam::DMat4",
      "identifier": "mul_mat4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Multiplies two 4x4 matrices."
    },
    "glam::DMat4::mul_scalar": {
      "namespace": "glam::DMat4",
      "identifier": "mul_scalar",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Multiplies a 4x4 matrix by a scalar."
    },
    "glam::DMat4::mul_vec4": {
      "namespace": "glam::DMat4",
      "identifier": "mul_vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Transforms a 4D vector."
    },
    "glam::DMat4::neg": {
      "namespace": "glam::DMat4",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      }
    },
    "glam::DMat4::orthographic_lh": {
      "namespace": "glam::DMat4",
      "identifier": "orthographic_lh",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "left"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "right"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "bottom"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "top"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "near"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "far"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates a left-handed orthographic projection matrix with `[0,1]` depth range.\n Useful to map a left-handed coordinate system to the normalized device coordinates that WebGPU/Direct3D/Metal expect."
    },
    "glam::DMat4::orthographic_rh": {
      "namespace": "glam::DMat4",
      "identifier": "orthographic_rh",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "left"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "right"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "bottom"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "top"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "near"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "far"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates a right-handed orthographic projection matrix with `[0,1]` depth range.\n Useful to map a right-handed coordinate system to the normalized device coordinates that WebGPU/Direct3D/Metal expect."
    },
    "glam::DMat4::orthographic_rh_gl": {
      "namespace": "glam::DMat4",
      "identifier": "orthographic_rh_gl",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "left"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "right"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "bottom"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "top"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "near"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "far"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates a right-handed orthographic projection matrix with `[-1,1]` depth\n range.  This is the same as the OpenGL `glOrtho` function in OpenGL.\n See\n <https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glOrtho.xml>\n Useful to map a right-handed coordinate system to the normalized device coordinates that OpenGL expects."
    },
    "glam::DMat4::perspective_infinite_lh": {
      "namespace": "glam::DMat4",
      "identifier": "perspective_infinite_lh",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "fov_y_radians"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "aspect_ratio"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z_near"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates an infinite left-handed perspective projection matrix with `[0,1]` depth range.\n Like `perspective_lh`, but with an infinite value for `z_far`.\n The result is that points near `z_near` are mapped to depth `0`, and as they move towards infinity the depth approaches `1`.\n # Panics\n Will panic if `z_near` or `z_far` are less than or equal to zero when `glam_assert` is\n enabled."
    },
    "glam::DMat4::perspective_infinite_reverse_lh": {
      "namespace": "glam::DMat4",
      "identifier": "perspective_infinite_reverse_lh",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "fov_y_radians"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "aspect_ratio"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z_near"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates an infinite reverse left-handed perspective projection matrix with `[0,1]` depth range.\n Similar to `perspective_infinite_lh`, but maps `Z = z_near` to a depth of `1` and `Z = infinity` to a depth of `0`.\n # Panics\n Will panic if `z_near` is less than or equal to zero when `glam_assert` is enabled."
    },
    "glam::DMat4::perspective_infinite_reverse_rh": {
      "namespace": "glam::DMat4",
      "identifier": "perspective_infinite_reverse_rh",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "fov_y_radians"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "aspect_ratio"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z_near"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates an infinite reverse right-handed perspective projection matrix with `[0,1]` depth range.\n Similar to `perspective_infinite_rh`, but maps `Z = z_near` to a depth of `1` and `Z = infinity` to a depth of `0`.\n # Panics\n Will panic if `z_near` is less than or equal to zero when `glam_assert` is enabled."
    },
    "glam::DMat4::perspective_infinite_rh": {
      "namespace": "glam::DMat4",
      "identifier": "perspective_infinite_rh",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "fov_y_radians"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "aspect_ratio"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z_near"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates an infinite right-handed perspective projection matrix with `[0,1]` depth range.\n Like `perspective_rh`, but with an infinite value for `z_far`.\n The result is that points near `z_near` are mapped to depth `0`, and as they move towards infinity the depth approaches `1`.\n # Panics\n Will panic if `z_near` or `z_far` are less than or equal to zero when `glam_assert` is\n enabled."
    },
    "glam::DMat4::perspective_lh": {
      "namespace": "glam::DMat4",
      "identifier": "perspective_lh",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "fov_y_radians"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "aspect_ratio"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z_near"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z_far"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates a left-handed perspective projection matrix with `[0,1]` depth range.\n Useful to map the standard left-handed coordinate system into what WebGPU/Metal/Direct3D expect.\n # Panics\n Will panic if `z_near` or `z_far` are less than or equal to zero when `glam_assert` is\n enabled."
    },
    "glam::DMat4::perspective_rh": {
      "namespace": "glam::DMat4",
      "identifier": "perspective_rh",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "fov_y_radians"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "aspect_ratio"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z_near"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z_far"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates a right-handed perspective projection matrix with `[0,1]` depth range.\n Useful to map the standard right-handed coordinate system into what WebGPU/Metal/Direct3D expect.\n # Panics\n Will panic if `z_near` or `z_far` are less than or equal to zero when `glam_assert` is\n enabled."
    },
    "glam::DMat4::perspective_rh_gl": {
      "namespace": "glam::DMat4",
      "identifier": "perspective_rh_gl",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "fov_y_radians"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "aspect_ratio"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z_near"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z_far"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Creates a right-handed perspective projection matrix with `[-1,1]` depth range.\n Useful to map the standard right-handed coordinate system into what OpenGL expects.\n This is the same as the OpenGL `gluPerspective` function.\n See <https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluPerspective.xml>"
    },
    "glam::DMat4::project_point3": {
      "namespace": "glam::DMat4",
      "identifier": "project_point3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Transforms the given 3D vector as a point, applying perspective correction.\n This is the equivalent of multiplying the 3D vector as a 4D vector where `w` is `1.0`.\n The perspective divide is performed meaning the resulting 3D vector is divided by `w`.\n This method assumes that `self` contains a projective transform."
    },
    "glam::DMat4::row": {
      "namespace": "glam::DMat4",
      "identifier": "row",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns the matrix row for the given `index`.\n # Panics\n Panics if `index` is greater than 3."
    },
    "glam::DMat4::sub": {
      "namespace": "glam::DMat4",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DMat4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      }
    },
    "glam::DMat4::sub_mat4": {
      "namespace": "glam::DMat4",
      "identifier": "sub_mat4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Subtracts two 4x4 matrices."
    },
    "glam::DMat4::to_cols_array": {
      "namespace": "glam::DMat4",
      "identifier": "to_cols_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f64"
            },
            16
          ]
        }
      },
      "documentation": " Creates a `[f64; 16]` array storing data in column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::DMat4::to_cols_array_2d": {
      "namespace": "glam::DMat4",
      "identifier": "to_cols_array_2d",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "array": [
                {
                  "primitive": "f64"
                },
                4
              ]
            },
            4
          ]
        }
      },
      "documentation": " Creates a `[[f64; 4]; 4]` 4D array storing data in column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::DMat4::to_euler": {
      "namespace": "glam::DMat4",
      "identifier": "to_euler",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::EulerRot"
          },
          "name": "order"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": [
            {
              "primitive": "f64"
            },
            {
              "primitive": "f64"
            },
            {
              "primitive": "f64"
            }
          ]
        }
      },
      "documentation": " Extract Euler angles with the given Euler rotation order.\n Note if the upper 3x3 matrix contain scales, shears, or other non-rotation transformations\n then the resulting Euler angles will be ill-defined.\n # Panics\n Will panic if any column of the upper 3x3 rotation matrix is not normalized when\n `glam_assert` is enabled."
    },
    "glam::DMat4::transform_point3": {
      "namespace": "glam::DMat4",
      "identifier": "transform_point3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Transforms the given 3D vector as a point.\n This is the equivalent of multiplying the 3D vector as a 4D vector where `w` is\n `1.0`.\n This method assumes that `self` contains a valid affine transform. It does not perform\n a perspective divide, if `self` contains a perspective transform, or if you are unsure,\n the [`Self::project_point3()`] method should be used instead.\n # Panics\n Will panic if the 3rd row of `self` is not `(0, 0, 0, 1)` when `glam_assert` is enabled."
    },
    "glam::DMat4::transform_vector3": {
      "namespace": "glam::DMat4",
      "identifier": "transform_vector3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Transforms the give 3D vector as a direction.\n This is the equivalent of multiplying the 3D vector as a 4D vector where `w` is\n `0.0`.\n This method assumes that `self` contains a valid affine transform.\n # Panics\n Will panic if the 3rd row of `self` is not `(0, 0, 0, 1)` when `glam_assert` is enabled."
    },
    "glam::DMat4::transpose": {
      "namespace": "glam::DMat4",
      "identifier": "transpose",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      },
      "documentation": " Returns the transpose of `self`."
    },
    "glam::DQuat::abs_diff_eq": {
      "namespace": "glam::DQuat",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs`\n is less than or equal to `max_abs_diff`.\n This can be used to compare if two quaternions contain similar elements. It works\n best when comparing with a known value. The `max_abs_diff` that should be used used\n depends on the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::DQuat::add": {
      "namespace": "glam::DQuat",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Adds two quaternions.\n The sum is not guaranteed to be normalized.\n Note that addition is not the same as combining the rotations represented by the\n two quaternions! That corresponds to multiplication."
    },
    "glam::DQuat::angle_between": {
      "namespace": "glam::DQuat",
      "identifier": "angle_between",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the angle (in radians) for the minimal rotation\n for transforming this quaternion into another.\n Both quaternions must be normalized.\n # Panics\n Will panic if `self` or `rhs` are not normalized when `glam_assert` is enabled."
    },
    "glam::DQuat::as_quat": {
      "namespace": "glam::DQuat",
      "identifier": "as_quat",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      }
    },
    "glam::DQuat::clone": {
      "namespace": "glam::DQuat",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      }
    },
    "glam::DQuat::conjugate": {
      "namespace": "glam::DQuat",
      "identifier": "conjugate",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Returns the quaternion conjugate of `self`. For a unit quaternion the\n conjugate is also the inverse."
    },
    "glam::DQuat::div": {
      "namespace": "glam::DQuat",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Divides a quaternion by a scalar value.\n The quotient is not guaranteed to be normalized."
    },
    "glam::DQuat::dot": {
      "namespace": "glam::DQuat",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`. The dot product is\n equal to the cosine of the angle between two quaternion rotations."
    },
    "glam::DQuat::eq": {
      "namespace": "glam::DQuat",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DQuat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DQuat"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::DQuat::from_affine3": {
      "namespace": "glam::DQuat",
      "identifier": "from_affine3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DAffine3"
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Creates a quaternion from a 3x3 rotation matrix inside a 3D affine transform.\n Note if the input affine matrix contain scales, shears, or other non-rotation\n transformations then the resulting quaternion will be ill-defined.\n # Panics\n Will panic if any input affine matrix column is not normalized when `glam_assert` is\n enabled."
    },
    "glam::DQuat::from_array": {
      "namespace": "glam::DQuat",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "f64"
              },
              4
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Creates a rotation quaternion from an array.\n # Preconditions\n This function does not check if the input is normalized, it is up to the user to\n provide normalized input or to normalized the resulting quaternion."
    },
    "glam::DQuat::from_axis_angle": {
      "namespace": "glam::DQuat",
      "identifier": "from_axis_angle",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "axis"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Create a quaternion for a normalized rotation `axis` and `angle` (in radians).\n The axis must be a unit vector.\n # Panics\n Will panic if `axis` is not normalized when `glam_assert` is enabled."
    },
    "glam::DQuat::from_euler": {
      "namespace": "glam::DQuat",
      "identifier": "from_euler",
      "arguments": [
        {
          "kind": {
            "val": "glam::EulerRot"
          },
          "name": "euler"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "a"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "b"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "c"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Creates a quaternion from the given Euler rotation sequence and the angles (in radians)."
    },
    "glam::DQuat::from_mat3": {
      "namespace": "glam::DQuat",
      "identifier": "from_mat3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat3"
          },
          "name": "mat"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Creates a quaternion from a 3x3 rotation matrix.\n Note if the input matrix contain scales, shears, or other non-rotation transformations then\n the resulting quaternion will be ill-defined.\n # Panics\n Will panic if any input matrix column is not normalized when `glam_assert` is enabled."
    },
    "glam::DQuat::from_mat4": {
      "namespace": "glam::DQuat",
      "identifier": "from_mat4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DMat4"
          },
          "name": "mat"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Creates a quaternion from the upper 3x3 rotation matrix inside a homogeneous 4x4 matrix.\n Note if the upper 3x3 matrix contain scales, shears, or other non-rotation transformations\n then the resulting quaternion will be ill-defined.\n # Panics\n Will panic if any column of the upper 3x3 rotation matrix is not normalized when\n `glam_assert` is enabled."
    },
    "glam::DQuat::from_rotation_arc": {
      "namespace": "glam::DQuat",
      "identifier": "from_rotation_arc",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "from"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "to"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Gets the minimal rotation for transforming `from` to `to`.  The rotation is in the\n plane spanned by the two vectors.  Will rotate at most 180 degrees.\n The inputs must be unit vectors.\n `from_rotation_arc(from, to) * from ≈ to`.\n For near-singular cases (from≈to and from≈-to) the current implementation\n is only accurate to about 0.001 (for `f32`).\n # Panics\n Will panic if `from` or `to` are not normalized when `glam_assert` is enabled."
    },
    "glam::DQuat::from_rotation_arc_2d": {
      "namespace": "glam::DQuat",
      "identifier": "from_rotation_arc_2d",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "from"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "to"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Gets the minimal rotation for transforming `from` to `to`.  The resulting rotation is\n around the z axis. Will rotate at most 180 degrees.\n The inputs must be unit vectors.\n `from_rotation_arc_2d(from, to) * from ≈ to`.\n For near-singular cases (from≈to and from≈-to) the current implementation\n is only accurate to about 0.001 (for `f32`).\n # Panics\n Will panic if `from` or `to` are not normalized when `glam_assert` is enabled."
    },
    "glam::DQuat::from_rotation_arc_colinear": {
      "namespace": "glam::DQuat",
      "identifier": "from_rotation_arc_colinear",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "from"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "to"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Gets the minimal rotation for transforming `from` to either `to` or `-to`.  This means\n that the resulting quaternion will rotate `from` so that it is colinear with `to`.\n The rotation is in the plane spanned by the two vectors.  Will rotate at most 90\n degrees.\n The inputs must be unit vectors.\n `to.dot(from_rotation_arc_colinear(from, to) * from).abs() ≈ 1`.\n # Panics\n Will panic if `from` or `to` are not normalized when `glam_assert` is enabled."
    },
    "glam::DQuat::from_rotation_x": {
      "namespace": "glam::DQuat",
      "identifier": "from_rotation_x",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Creates a quaternion from the `angle` (in radians) around the x axis."
    },
    "glam::DQuat::from_rotation_y": {
      "namespace": "glam::DQuat",
      "identifier": "from_rotation_y",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Creates a quaternion from the `angle` (in radians) around the y axis."
    },
    "glam::DQuat::from_rotation_z": {
      "namespace": "glam::DQuat",
      "identifier": "from_rotation_z",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Creates a quaternion from the `angle` (in radians) around the z axis."
    },
    "glam::DQuat::from_scaled_axis": {
      "namespace": "glam::DQuat",
      "identifier": "from_scaled_axis",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Create a quaternion that rotates `v.length()` radians around `v.normalize()`.\n `from_scaled_axis(Vec3::ZERO)` results in the identity quaternion."
    },
    "glam::DQuat::from_vec4": {
      "namespace": "glam::DQuat",
      "identifier": "from_vec4",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Creates a new rotation quaternion from a 4D vector.\n # Preconditions\n This function does not check if the input is normalized, it is up to the user to\n provide normalized input or to normalized the resulting quaternion."
    },
    "glam::DQuat::from_xyzw": {
      "namespace": "glam::DQuat",
      "identifier": "from_xyzw",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Creates a new rotation quaternion.\n This should generally not be called manually unless you know what you are doing.\n Use one of the other constructors instead such as `identity` or `from_axis_angle`.\n `from_xyzw` is mostly used by unit tests and `serde` deserialization.\n # Preconditions\n This function does not check if the input is normalized, it is up to the user to\n provide normalized input or to normalized the resulting quaternion."
    },
    "glam::DQuat::inverse": {
      "namespace": "glam::DQuat",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Returns the inverse of a normalized quaternion.\n Typically quaternion inverse returns the conjugate of a normalized quaternion.\n Because `self` is assumed to already be unit length this method *does not* normalize\n before returning the conjugate.\n # Panics\n Will panic if `self` is not normalized when `glam_assert` is enabled."
    },
    "glam::DQuat::is_finite": {
      "namespace": "glam::DQuat",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.\n If any element is either `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::DQuat::is_nan": {
      "namespace": "glam::DQuat",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NAN`."
    },
    "glam::DQuat::is_near_identity": {
      "namespace": "glam::DQuat",
      "identifier": "is_near_identity",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::DQuat::is_normalized": {
      "namespace": "glam::DQuat",
      "identifier": "is_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns whether `self` of length `1.0` or not.\n Uses a precision threshold of `1e-6`."
    },
    "glam::DQuat::length": {
      "namespace": "glam::DQuat",
      "identifier": "length",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes the length of `self`."
    },
    "glam::DQuat::length_recip": {
      "namespace": "glam::DQuat",
      "identifier": "length_recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes `1.0 / length()`.\n For valid results, `self` must _not_ be of length zero."
    },
    "glam::DQuat::length_squared": {
      "namespace": "glam::DQuat",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes the squared length of `self`.\n This is generally faster than `length()` as it avoids a square\n root operation."
    },
    "glam::DQuat::lerp": {
      "namespace": "glam::DQuat",
      "identifier": "lerp",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "end"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Performs a linear interpolation between `self` and `rhs` based on\n the value `s`.\n When `s` is `0.0`, the result will be equal to `self`.  When `s`\n is `1.0`, the result will be equal to `rhs`.\n # Panics\n Will panic if `self` or `end` are not normalized when `glam_assert` is enabled."
    },
    "glam::DQuat::mul": {
      "namespace": "glam::DQuat",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Multiplies two quaternions. If they each represent a rotation, the result will\n represent the combined rotation.\n Note that due to floating point rounding the result may not be perfectly\n normalized.\n # Panics\n Will panic if `self` or `rhs` are not normalized when `glam_assert` is enabled."
    },
    "glam::DQuat::mul-1": {
      "namespace": "glam::DQuat",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          }
        },
        {
          "kind": {
            "val": "glam::DVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DQuat::mul-2": {
      "namespace": "glam::DQuat",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      }
    },
    "glam::DQuat::mul_quat": {
      "namespace": "glam::DQuat",
      "identifier": "mul_quat",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Multiplies two quaternions. If they each represent a rotation, the result will\n represent the combined rotation.\n Note that due to floating point rounding the result may not be perfectly normalized.\n # Panics\n Will panic if `self` or `rhs` are not normalized when `glam_assert` is enabled."
    },
    "glam::DQuat::mul_vec3": {
      "namespace": "glam::DQuat",
      "identifier": "mul_vec3",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Multiplies a quaternion and a 3D vector, returning the rotated vector.\n # Panics\n Will panic if `self` is not normalized when `glam_assert` is enabled."
    },
    "glam::DQuat::neg": {
      "namespace": "glam::DQuat",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      }
    },
    "glam::DQuat::normalize": {
      "namespace": "glam::DQuat",
      "identifier": "normalize",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0.\n For valid results, `self` must _not_ be of length zero.\n Panics\n Will panic if `self` is zero length when `glam_assert` is enabled."
    },
    "glam::DQuat::rotate_towards": {
      "namespace": "glam::DQuat",
      "identifier": "rotate_towards",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DQuat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max_angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Rotates towards `rhs` up to `max_angle` (in radians).\n When `max_angle` is `0.0`, the result will be equal to `self`. When `max_angle` is equal to\n `self.angle_between(rhs)`, the result will be equal to `rhs`. If `max_angle` is negative,\n rotates towards the exact opposite of `rhs`. Will not go past the target.\n Both quaternions must be normalized.\n # Panics\n Will panic if `self` or `rhs` are not normalized when `glam_assert` is enabled."
    },
    "glam::DQuat::slerp": {
      "namespace": "glam::DQuat",
      "identifier": "slerp",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "end"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Performs a spherical linear interpolation between `self` and `end`\n based on the value `s`.\n When `s` is `0.0`, the result will be equal to `self`.  When `s`\n is `1.0`, the result will be equal to `end`.\n # Panics\n Will panic if `self` or `end` are not normalized when `glam_assert` is enabled."
    },
    "glam::DQuat::sub": {
      "namespace": "glam::DQuat",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      },
      "documentation": " Subtracts the `rhs` quaternion from `self`.\n The difference is not guaranteed to be normalized."
    },
    "glam::DQuat::to_array": {
      "namespace": "glam::DQuat",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f64"
            },
            4
          ]
        }
      },
      "documentation": " `[x, y, z, w]`"
    },
    "glam::DQuat::to_euler": {
      "namespace": "glam::DQuat",
      "identifier": "to_euler",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::EulerRot"
          },
          "name": "order"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": [
            {
              "primitive": "f64"
            },
            {
              "primitive": "f64"
            },
            {
              "primitive": "f64"
            }
          ]
        }
      },
      "documentation": " Returns the rotation angles for the given euler rotation sequence."
    },
    "glam::DQuat::to_scaled_axis": {
      "namespace": "glam::DQuat",
      "identifier": "to_scaled_axis",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns the rotation axis scaled by the rotation in radians."
    },
    "glam::DQuat::xyz": {
      "namespace": "glam::DQuat",
      "identifier": "xyz",
      "arguments": [
        {
          "kind": {
            "val": "glam::DQuat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns the vector part of the quaternion."
    },
    "glam::DVec2::abs": {
      "namespace": "glam::DVec2",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::DVec2::abs_diff_eq": {
      "namespace": "glam::DVec2",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs` is\n less than or equal to `max_abs_diff`.\n This can be used to compare if two vectors contain similar elements. It works best when\n comparing with a known value. The `max_abs_diff` that should be used used depends on\n the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::DVec2::add": {
      "namespace": "glam::DVec2",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::add-1": {
      "namespace": "glam::DVec2",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          }
        },
        {
          "kind": {
            "val": "glam::DVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::add-2": {
      "namespace": "glam::DVec2",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::angle_between": {
      "namespace": "glam::DVec2",
      "identifier": "angle_between",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      }
    },
    "glam::DVec2::angle_to": {
      "namespace": "glam::DVec2",
      "identifier": "angle_to",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the angle of rotation (in radians) from `self` to `rhs` in the range `[-π, +π]`.\n The inputs do not need to be unit vectors however they must be non-zero."
    },
    "glam::DVec2::as_i64vec2": {
      "namespace": "glam::DVec2",
      "identifier": "as_i64vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::DVec2::as_ivec2": {
      "namespace": "glam::DVec2",
      "identifier": "as_ivec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::DVec2::as_u64vec2": {
      "namespace": "glam::DVec2",
      "identifier": "as_u64vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::DVec2::as_uvec2": {
      "namespace": "glam::DVec2",
      "identifier": "as_uvec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::DVec2::as_vec2": {
      "namespace": "glam::DVec2",
      "identifier": "as_vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::DVec2::ceil": {
      "namespace": "glam::DVec2",
      "identifier": "ceil",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector containing the smallest integer greater than or equal to a number for\n each element of `self`."
    },
    "glam::DVec2::clamp": {
      "namespace": "glam::DVec2",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`f64::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::DVec2::clamp_length": {
      "namespace": "glam::DVec2",
      "identifier": "clamp_length",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "min"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector with a length no less than `min` and no more than `max`.\n # Panics\n Will panic if `min` is greater than `max`, or if either `min` or `max` is negative, when `glam_assert` is enabled."
    },
    "glam::DVec2::clamp_length_max": {
      "namespace": "glam::DVec2",
      "identifier": "clamp_length_max",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector with a length no more than `max`.\n # Panics\n Will panic if `max` is negative when `glam_assert` is enabled."
    },
    "glam::DVec2::clamp_length_min": {
      "namespace": "glam::DVec2",
      "identifier": "clamp_length_min",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "min"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector with a length no less than `min`.\n # Panics\n Will panic if `min` is negative when `glam_assert` is enabled."
    },
    "glam::DVec2::clone": {
      "namespace": "glam::DVec2",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::cmpeq": {
      "namespace": "glam::DVec2",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::DVec2::cmpge": {
      "namespace": "glam::DVec2",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::DVec2::cmpgt": {
      "namespace": "glam::DVec2",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::DVec2::cmple": {
      "namespace": "glam::DVec2",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::DVec2::cmplt": {
      "namespace": "glam::DVec2",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::DVec2::cmpne": {
      "namespace": "glam::DVec2",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::DVec2::copysign": {
      "namespace": "glam::DVec2",
      "identifier": "copysign",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector with signs of `rhs` and the magnitudes of `self`."
    },
    "glam::DVec2::distance": {
      "namespace": "glam::DVec2",
      "identifier": "distance",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes the Euclidean distance between two points in space."
    },
    "glam::DVec2::distance_squared": {
      "namespace": "glam::DVec2",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::DVec2::div": {
      "namespace": "glam::DVec2",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::div-1": {
      "namespace": "glam::DVec2",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          }
        },
        {
          "kind": {
            "val": "glam::DVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::div-2": {
      "namespace": "glam::DVec2",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::div_euclid": {
      "namespace": "glam::DVec2",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`."
    },
    "glam::DVec2::dot": {
      "namespace": "glam::DVec2",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::DVec2::dot_into_vec": {
      "namespace": "glam::DVec2",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::DVec2::element_product": {
      "namespace": "glam::DVec2",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::DVec2::element_sum": {
      "namespace": "glam::DVec2",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::DVec2::eq": {
      "namespace": "glam::DVec2",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::DVec2::exp": {
      "namespace": "glam::DVec2",
      "identifier": "exp",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector containing `e^self` (the exponential function) for each element of\n `self`."
    },
    "glam::DVec2::extend": {
      "namespace": "glam::DVec2",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` and the given `z` value."
    },
    "glam::DVec2::floor": {
      "namespace": "glam::DVec2",
      "identifier": "floor",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector containing the largest integer less than or equal to a number for each\n element of `self`."
    },
    "glam::DVec2::fract": {
      "namespace": "glam::DVec2",
      "identifier": "fract",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector containing the fractional part of the vector as `self - self.trunc()`.\n Note that this differs from the GLSL implementation of `fract` which returns\n `self - self.floor()`.\n Note that this is fast but not precise for large numbers."
    },
    "glam::DVec2::fract_gl": {
      "namespace": "glam::DVec2",
      "identifier": "fract_gl",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector containing the fractional part of the vector as `self - self.floor()`.\n Note that this differs from the Rust implementation of `fract` which returns\n `self - self.trunc()`.\n Note that this is fast but not precise for large numbers."
    },
    "glam::DVec2::from_angle": {
      "namespace": "glam::DVec2",
      "identifier": "from_angle",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Creates a 2D vector containing `[angle.cos(), angle.sin()]`. This can be used in\n conjunction with the [`rotate()`][Self::rotate()] method, e.g.\n `DVec2::from_angle(PI).rotate(DVec2::Y)` will create the vector `[-1, 0]`\n and rotate [`DVec2::Y`] around it returning `-DVec2::Y`."
    },
    "glam::DVec2::from_array": {
      "namespace": "glam::DVec2",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "f64"
              },
              2
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::DVec2::is_finite": {
      "namespace": "glam::DVec2",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.  If any element is either\n `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::DVec2::is_finite_mask": {
      "namespace": "glam::DVec2",
      "identifier": "is_finite_mask",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Performs `is_finite` on each element of self, returning a vector mask of the results.\n In other words, this computes `[x.is_finite(), y.is_finite(), ...]`."
    },
    "glam::DVec2::is_nan": {
      "namespace": "glam::DVec2",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::DVec2::is_nan_mask": {
      "namespace": "glam::DVec2",
      "identifier": "is_nan_mask",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Performs `is_nan` on each element of self, returning a vector mask of the results.\n In other words, this computes `[x.is_nan(), y.is_nan(), ...]`."
    },
    "glam::DVec2::is_negative_bitmask": {
      "namespace": "glam::DVec2",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 2 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::DVec2::is_normalized": {
      "namespace": "glam::DVec2",
      "identifier": "is_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns whether `self` is length `1.0` or not.\n Uses a precision threshold of approximately `1e-4`."
    },
    "glam::DVec2::length": {
      "namespace": "glam::DVec2",
      "identifier": "length",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes the length of `self`."
    },
    "glam::DVec2::length_recip": {
      "namespace": "glam::DVec2",
      "identifier": "length_recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes `1.0 / length()`.\n For valid results, `self` must _not_ be of length zero."
    },
    "glam::DVec2::length_squared": {
      "namespace": "glam::DVec2",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes the squared length of `self`.\n This is faster than `length()` as it avoids a square root operation."
    },
    "glam::DVec2::lerp": {
      "namespace": "glam::DVec2",
      "identifier": "lerp",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Performs a linear interpolation between `self` and `rhs` based on the value `s`.\n When `s` is `0.0`, the result will be equal to `self`.  When `s` is `1.0`, the result\n will be equal to `rhs`. When `s` is outside of range `[0, 1]`, the result is linearly\n extrapolated."
    },
    "glam::DVec2::max": {
      "namespace": "glam::DVec2",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::DVec2::max_element": {
      "namespace": "glam::DVec2",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::DVec2::midpoint": {
      "namespace": "glam::DVec2",
      "identifier": "midpoint",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Calculates the midpoint between `self` and `rhs`.\n The midpoint is the average of, or halfway point between, two vectors.\n `a.midpoint(b)` should yield the same result as `a.lerp(b, 0.5)`\n while being slightly cheaper to compute."
    },
    "glam::DVec2::min": {
      "namespace": "glam::DVec2",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::DVec2::min_element": {
      "namespace": "glam::DVec2",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::DVec2::move_towards": {
      "namespace": "glam::DVec2",
      "identifier": "move_towards",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "d"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Moves towards `rhs` based on the value `d`.\n When `d` is `0.0`, the result will be equal to `self`. When `d` is equal to\n `self.distance(rhs)`, the result will be equal to `rhs`. Will not go past `rhs`."
    },
    "glam::DVec2::mul": {
      "namespace": "glam::DVec2",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::mul-1": {
      "namespace": "glam::DVec2",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          }
        },
        {
          "kind": {
            "val": "glam::DVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::mul-2": {
      "namespace": "glam::DVec2",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::mul_add": {
      "namespace": "glam::DVec2",
      "identifier": "mul_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "a"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "b"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Fused multiply-add. Computes `(self * a) + b` element-wise with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.\n Using `mul_add` *may* be more performant than an unfused multiply-add if the target\n architecture has a dedicated fma CPU instruction. However, this is not always true,\n and will be heavily dependant on designing algorithms with specific target hardware in\n mind."
    },
    "glam::DVec2::neg": {
      "namespace": "glam::DVec2",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::new": {
      "namespace": "glam::DVec2",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::DVec2::normalize": {
      "namespace": "glam::DVec2",
      "identifier": "normalize",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0.\n For valid results, `self` must be finite and _not_ of length zero, nor very close to zero.\n See also [`Self::try_normalize()`] and [`Self::normalize_or_zero()`].\n Panics\n Will panic if the resulting normalized vector is not finite when `glam_assert` is enabled."
    },
    "glam::DVec2::normalize_or": {
      "namespace": "glam::DVec2",
      "identifier": "normalize_or",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "fallback"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0 if possible, else returns a\n fallback value.\n In particular, if the input is zero (or very close to zero), or non-finite,\n the result of this operation will be the fallback value.\n See also [`Self::try_normalize()`]."
    },
    "glam::DVec2::normalize_or_zero": {
      "namespace": "glam::DVec2",
      "identifier": "normalize_or_zero",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0 if possible, else returns zero.\n In particular, if the input is zero (or very close to zero), or non-finite,\n the result of this operation will be zero.\n See also [`Self::try_normalize()`]."
    },
    "glam::DVec2::perp": {
      "namespace": "glam::DVec2",
      "identifier": "perp",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector that is equal to `self` rotated by 90 degrees."
    },
    "glam::DVec2::perp_dot": {
      "namespace": "glam::DVec2",
      "identifier": "perp_dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " The perpendicular dot product of `self` and `rhs`.\n Also known as the wedge product, 2D cross product, and determinant."
    },
    "glam::DVec2::powf": {
      "namespace": "glam::DVec2",
      "identifier": "powf",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "n"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector containing each element of `self` raised to the power of `n`."
    },
    "glam::DVec2::project_onto": {
      "namespace": "glam::DVec2",
      "identifier": "project_onto",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns the vector projection of `self` onto `rhs`.\n `rhs` must be of non-zero length.\n # Panics\n Will panic if `rhs` is zero length when `glam_assert` is enabled."
    },
    "glam::DVec2::project_onto_normalized": {
      "namespace": "glam::DVec2",
      "identifier": "project_onto_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns the vector projection of `self` onto `rhs`.\n `rhs` must be normalized.\n # Panics\n Will panic if `rhs` is not normalized when `glam_assert` is enabled."
    },
    "glam::DVec2::recip": {
      "namespace": "glam::DVec2",
      "identifier": "recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector containing the reciprocal `1.0/n` of each element of `self`."
    },
    "glam::DVec2::reflect": {
      "namespace": "glam::DVec2",
      "identifier": "reflect",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "normal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns the reflection vector for a given incident vector `self` and surface normal\n `normal`.\n `normal` must be normalized.\n # Panics\n Will panic if `normal` is not normalized when `glam_assert` is enabled."
    },
    "glam::DVec2::refract": {
      "namespace": "glam::DVec2",
      "identifier": "refract",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "normal"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "eta"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns the refraction direction for a given incident vector `self`, surface normal\n `normal` and ratio of indices of refraction, `eta`. When total internal reflection occurs,\n a zero vector will be returned.\n `self` and `normal` must be normalized.\n # Panics\n Will panic if `self` or `normal` is not normalized when `glam_assert` is enabled."
    },
    "glam::DVec2::reject_from": {
      "namespace": "glam::DVec2",
      "identifier": "reject_from",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns the vector rejection of `self` from `rhs`.\n The vector rejection is the vector perpendicular to the projection of `self` onto\n `rhs`, in rhs words the result of `self - self.project_onto(rhs)`.\n `rhs` must be of non-zero length.\n # Panics\n Will panic if `rhs` has a length of zero when `glam_assert` is enabled."
    },
    "glam::DVec2::reject_from_normalized": {
      "namespace": "glam::DVec2",
      "identifier": "reject_from_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns the vector rejection of `self` from `rhs`.\n The vector rejection is the vector perpendicular to the projection of `self` onto\n `rhs`, in rhs words the result of `self - self.project_onto(rhs)`.\n `rhs` must be normalized.\n # Panics\n Will panic if `rhs` is not normalized when `glam_assert` is enabled."
    },
    "glam::DVec2::rem": {
      "namespace": "glam::DVec2",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::rem-1": {
      "namespace": "glam::DVec2",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          }
        },
        {
          "kind": {
            "val": "glam::DVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::rem-2": {
      "namespace": "glam::DVec2",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::rem_euclid": {
      "namespace": "glam::DVec2",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n [Euclidean division]: f64::rem_euclid"
    },
    "glam::DVec2::rotate": {
      "namespace": "glam::DVec2",
      "identifier": "rotate",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns `rhs` rotated by the angle of `self`. If `self` is normalized,\n then this just rotation. This is what you usually want. Otherwise,\n it will be like a rotation with a multiplication by `self`'s length."
    },
    "glam::DVec2::rotate_towards": {
      "namespace": "glam::DVec2",
      "identifier": "rotate_towards",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max_angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Rotates towards `rhs` up to `max_angle` (in radians).\n When `max_angle` is `0.0`, the result will be equal to `self`. When `max_angle` is equal to\n `self.angle_between(rhs)`, the result will be equal to `rhs`. If `max_angle` is negative,\n rotates towards the exact opposite of `rhs`. Will not go past the target."
    },
    "glam::DVec2::round": {
      "namespace": "glam::DVec2",
      "identifier": "round",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector containing the nearest integer to a number for each element of `self`.\n Round half-way cases away from 0.0."
    },
    "glam::DVec2::select": {
      "namespace": "glam::DVec2",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec2"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::DVec2::signum": {
      "namespace": "glam::DVec2",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n - `1.0` if the number is positive, `+0.0` or `INFINITY`\n - `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`\n - `NAN` if the number is `NAN`"
    },
    "glam::DVec2::splat": {
      "namespace": "glam::DVec2",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::DVec2::sub": {
      "namespace": "glam::DVec2",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::sub-1": {
      "namespace": "glam::DVec2",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          }
        },
        {
          "kind": {
            "val": "glam::DVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::sub-2": {
      "namespace": "glam::DVec2",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      }
    },
    "glam::DVec2::to_angle": {
      "namespace": "glam::DVec2",
      "identifier": "to_angle",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the angle (in radians) of this vector in the range `[-π, +π]`.\n The input does not need to be a unit vector however it must be non-zero."
    },
    "glam::DVec2::to_array": {
      "namespace": "glam::DVec2",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f64"
            },
            2
          ]
        }
      },
      "documentation": " `[x, y]`"
    },
    "glam::DVec2::trunc": {
      "namespace": "glam::DVec2",
      "identifier": "trunc",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Returns a vector containing the integer part each element of `self`. This means numbers are\n always truncated towards zero."
    },
    "glam::DVec2::with_x": {
      "namespace": "glam::DVec2",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `x`."
    },
    "glam::DVec2::with_y": {
      "namespace": "glam::DVec2",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `y`."
    },
    "glam::DVec3::abs": {
      "namespace": "glam::DVec3",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::DVec3::abs_diff_eq": {
      "namespace": "glam::DVec3",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs` is\n less than or equal to `max_abs_diff`.\n This can be used to compare if two vectors contain similar elements. It works best when\n comparing with a known value. The `max_abs_diff` that should be used used depends on\n the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::DVec3::add": {
      "namespace": "glam::DVec3",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::add-1": {
      "namespace": "glam::DVec3",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          }
        },
        {
          "kind": {
            "val": "glam::DVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::add-2": {
      "namespace": "glam::DVec3",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::angle_between": {
      "namespace": "glam::DVec3",
      "identifier": "angle_between",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the angle (in radians) between two vectors in the range `[0, +π]`.\n The inputs do not need to be unit vectors however they must be non-zero."
    },
    "glam::DVec3::any_orthogonal_vector": {
      "namespace": "glam::DVec3",
      "identifier": "any_orthogonal_vector",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns some vector that is orthogonal to the given one.\n The input vector must be finite and non-zero.\n The output vector is not necessarily unit length. For that use\n [`Self::any_orthonormal_vector()`] instead."
    },
    "glam::DVec3::any_orthonormal_vector": {
      "namespace": "glam::DVec3",
      "identifier": "any_orthonormal_vector",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns any unit vector that is orthogonal to the given one.\n The input vector must be unit length.\n # Panics\n Will panic if `self` is not normalized when `glam_assert` is enabled."
    },
    "glam::DVec3::as_i64vec3": {
      "namespace": "glam::DVec3",
      "identifier": "as_i64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::DVec3::as_ivec3": {
      "namespace": "glam::DVec3",
      "identifier": "as_ivec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::DVec3::as_u64vec3": {
      "namespace": "glam::DVec3",
      "identifier": "as_u64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::DVec3::as_uvec3": {
      "namespace": "glam::DVec3",
      "identifier": "as_uvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::DVec3::as_vec3": {
      "namespace": "glam::DVec3",
      "identifier": "as_vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::DVec3::as_vec3a": {
      "namespace": "glam::DVec3",
      "identifier": "as_vec3a",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::DVec3::ceil": {
      "namespace": "glam::DVec3",
      "identifier": "ceil",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector containing the smallest integer greater than or equal to a number for\n each element of `self`."
    },
    "glam::DVec3::clamp": {
      "namespace": "glam::DVec3",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`f64::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::DVec3::clamp_length": {
      "namespace": "glam::DVec3",
      "identifier": "clamp_length",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "min"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector with a length no less than `min` and no more than `max`.\n # Panics\n Will panic if `min` is greater than `max`, or if either `min` or `max` is negative, when `glam_assert` is enabled."
    },
    "glam::DVec3::clamp_length_max": {
      "namespace": "glam::DVec3",
      "identifier": "clamp_length_max",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector with a length no more than `max`.\n # Panics\n Will panic if `max` is negative when `glam_assert` is enabled."
    },
    "glam::DVec3::clamp_length_min": {
      "namespace": "glam::DVec3",
      "identifier": "clamp_length_min",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "min"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector with a length no less than `min`.\n # Panics\n Will panic if `min` is negative when `glam_assert` is enabled."
    },
    "glam::DVec3::clone": {
      "namespace": "glam::DVec3",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::cmpeq": {
      "namespace": "glam::DVec3",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::DVec3::cmpge": {
      "namespace": "glam::DVec3",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::DVec3::cmpgt": {
      "namespace": "glam::DVec3",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::DVec3::cmple": {
      "namespace": "glam::DVec3",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::DVec3::cmplt": {
      "namespace": "glam::DVec3",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::DVec3::cmpne": {
      "namespace": "glam::DVec3",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::DVec3::copysign": {
      "namespace": "glam::DVec3",
      "identifier": "copysign",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector with signs of `rhs` and the magnitudes of `self`."
    },
    "glam::DVec3::cross": {
      "namespace": "glam::DVec3",
      "identifier": "cross",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Computes the cross product of `self` and `rhs`."
    },
    "glam::DVec3::distance": {
      "namespace": "glam::DVec3",
      "identifier": "distance",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes the Euclidean distance between two points in space."
    },
    "glam::DVec3::distance_squared": {
      "namespace": "glam::DVec3",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::DVec3::div": {
      "namespace": "glam::DVec3",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::div-1": {
      "namespace": "glam::DVec3",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          }
        },
        {
          "kind": {
            "val": "glam::DVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::div-2": {
      "namespace": "glam::DVec3",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::div_euclid": {
      "namespace": "glam::DVec3",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`."
    },
    "glam::DVec3::dot": {
      "namespace": "glam::DVec3",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::DVec3::dot_into_vec": {
      "namespace": "glam::DVec3",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::DVec3::element_product": {
      "namespace": "glam::DVec3",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::DVec3::element_sum": {
      "namespace": "glam::DVec3",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::DVec3::eq": {
      "namespace": "glam::DVec3",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::DVec3::exp": {
      "namespace": "glam::DVec3",
      "identifier": "exp",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector containing `e^self` (the exponential function) for each element of\n `self`."
    },
    "glam::DVec3::extend": {
      "namespace": "glam::DVec3",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` and the given `w` value."
    },
    "glam::DVec3::floor": {
      "namespace": "glam::DVec3",
      "identifier": "floor",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector containing the largest integer less than or equal to a number for each\n element of `self`."
    },
    "glam::DVec3::fract": {
      "namespace": "glam::DVec3",
      "identifier": "fract",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector containing the fractional part of the vector as `self - self.trunc()`.\n Note that this differs from the GLSL implementation of `fract` which returns\n `self - self.floor()`.\n Note that this is fast but not precise for large numbers."
    },
    "glam::DVec3::fract_gl": {
      "namespace": "glam::DVec3",
      "identifier": "fract_gl",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector containing the fractional part of the vector as `self - self.floor()`.\n Note that this differs from the Rust implementation of `fract` which returns\n `self - self.trunc()`.\n Note that this is fast but not precise for large numbers."
    },
    "glam::DVec3::from_array": {
      "namespace": "glam::DVec3",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "f64"
              },
              3
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::DVec3::is_finite": {
      "namespace": "glam::DVec3",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.  If any element is either\n `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::DVec3::is_finite_mask": {
      "namespace": "glam::DVec3",
      "identifier": "is_finite_mask",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Performs `is_finite` on each element of self, returning a vector mask of the results.\n In other words, this computes `[x.is_finite(), y.is_finite(), ...]`."
    },
    "glam::DVec3::is_nan": {
      "namespace": "glam::DVec3",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::DVec3::is_nan_mask": {
      "namespace": "glam::DVec3",
      "identifier": "is_nan_mask",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Performs `is_nan` on each element of self, returning a vector mask of the results.\n In other words, this computes `[x.is_nan(), y.is_nan(), ...]`."
    },
    "glam::DVec3::is_negative_bitmask": {
      "namespace": "glam::DVec3",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 3 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::DVec3::is_normalized": {
      "namespace": "glam::DVec3",
      "identifier": "is_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns whether `self` is length `1.0` or not.\n Uses a precision threshold of approximately `1e-4`."
    },
    "glam::DVec3::length": {
      "namespace": "glam::DVec3",
      "identifier": "length",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes the length of `self`."
    },
    "glam::DVec3::length_recip": {
      "namespace": "glam::DVec3",
      "identifier": "length_recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes `1.0 / length()`.\n For valid results, `self` must _not_ be of length zero."
    },
    "glam::DVec3::length_squared": {
      "namespace": "glam::DVec3",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes the squared length of `self`.\n This is faster than `length()` as it avoids a square root operation."
    },
    "glam::DVec3::lerp": {
      "namespace": "glam::DVec3",
      "identifier": "lerp",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Performs a linear interpolation between `self` and `rhs` based on the value `s`.\n When `s` is `0.0`, the result will be equal to `self`.  When `s` is `1.0`, the result\n will be equal to `rhs`. When `s` is outside of range `[0, 1]`, the result is linearly\n extrapolated."
    },
    "glam::DVec3::max": {
      "namespace": "glam::DVec3",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::DVec3::max_element": {
      "namespace": "glam::DVec3",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::DVec3::midpoint": {
      "namespace": "glam::DVec3",
      "identifier": "midpoint",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Calculates the midpoint between `self` and `rhs`.\n The midpoint is the average of, or halfway point between, two vectors.\n `a.midpoint(b)` should yield the same result as `a.lerp(b, 0.5)`\n while being slightly cheaper to compute."
    },
    "glam::DVec3::min": {
      "namespace": "glam::DVec3",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::DVec3::min_element": {
      "namespace": "glam::DVec3",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::DVec3::move_towards": {
      "namespace": "glam::DVec3",
      "identifier": "move_towards",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "d"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Moves towards `rhs` based on the value `d`.\n When `d` is `0.0`, the result will be equal to `self`. When `d` is equal to\n `self.distance(rhs)`, the result will be equal to `rhs`. Will not go past `rhs`."
    },
    "glam::DVec3::mul": {
      "namespace": "glam::DVec3",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::mul-1": {
      "namespace": "glam::DVec3",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          }
        },
        {
          "kind": {
            "val": "glam::DVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::mul-2": {
      "namespace": "glam::DVec3",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::mul_add": {
      "namespace": "glam::DVec3",
      "identifier": "mul_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "a"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "b"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Fused multiply-add. Computes `(self * a) + b` element-wise with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.\n Using `mul_add` *may* be more performant than an unfused multiply-add if the target\n architecture has a dedicated fma CPU instruction. However, this is not always true,\n and will be heavily dependant on designing algorithms with specific target hardware in\n mind."
    },
    "glam::DVec3::neg": {
      "namespace": "glam::DVec3",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::new": {
      "namespace": "glam::DVec3",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::DVec3::normalize": {
      "namespace": "glam::DVec3",
      "identifier": "normalize",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0.\n For valid results, `self` must be finite and _not_ of length zero, nor very close to zero.\n See also [`Self::try_normalize()`] and [`Self::normalize_or_zero()`].\n Panics\n Will panic if the resulting normalized vector is not finite when `glam_assert` is enabled."
    },
    "glam::DVec3::normalize_or": {
      "namespace": "glam::DVec3",
      "identifier": "normalize_or",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "fallback"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0 if possible, else returns a\n fallback value.\n In particular, if the input is zero (or very close to zero), or non-finite,\n the result of this operation will be the fallback value.\n See also [`Self::try_normalize()`]."
    },
    "glam::DVec3::normalize_or_zero": {
      "namespace": "glam::DVec3",
      "identifier": "normalize_or_zero",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0 if possible, else returns zero.\n In particular, if the input is zero (or very close to zero), or non-finite,\n the result of this operation will be zero.\n See also [`Self::try_normalize()`]."
    },
    "glam::DVec3::powf": {
      "namespace": "glam::DVec3",
      "identifier": "powf",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "n"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector containing each element of `self` raised to the power of `n`."
    },
    "glam::DVec3::project_onto": {
      "namespace": "glam::DVec3",
      "identifier": "project_onto",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns the vector projection of `self` onto `rhs`.\n `rhs` must be of non-zero length.\n # Panics\n Will panic if `rhs` is zero length when `glam_assert` is enabled."
    },
    "glam::DVec3::project_onto_normalized": {
      "namespace": "glam::DVec3",
      "identifier": "project_onto_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns the vector projection of `self` onto `rhs`.\n `rhs` must be normalized.\n # Panics\n Will panic if `rhs` is not normalized when `glam_assert` is enabled."
    },
    "glam::DVec3::recip": {
      "namespace": "glam::DVec3",
      "identifier": "recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector containing the reciprocal `1.0/n` of each element of `self`."
    },
    "glam::DVec3::reflect": {
      "namespace": "glam::DVec3",
      "identifier": "reflect",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "normal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns the reflection vector for a given incident vector `self` and surface normal\n `normal`.\n `normal` must be normalized.\n # Panics\n Will panic if `normal` is not normalized when `glam_assert` is enabled."
    },
    "glam::DVec3::refract": {
      "namespace": "glam::DVec3",
      "identifier": "refract",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "normal"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "eta"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns the refraction direction for a given incident vector `self`, surface normal\n `normal` and ratio of indices of refraction, `eta`. When total internal reflection occurs,\n a zero vector will be returned.\n `self` and `normal` must be normalized.\n # Panics\n Will panic if `self` or `normal` is not normalized when `glam_assert` is enabled."
    },
    "glam::DVec3::reject_from": {
      "namespace": "glam::DVec3",
      "identifier": "reject_from",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns the vector rejection of `self` from `rhs`.\n The vector rejection is the vector perpendicular to the projection of `self` onto\n `rhs`, in rhs words the result of `self - self.project_onto(rhs)`.\n `rhs` must be of non-zero length.\n # Panics\n Will panic if `rhs` has a length of zero when `glam_assert` is enabled."
    },
    "glam::DVec3::reject_from_normalized": {
      "namespace": "glam::DVec3",
      "identifier": "reject_from_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns the vector rejection of `self` from `rhs`.\n The vector rejection is the vector perpendicular to the projection of `self` onto\n `rhs`, in rhs words the result of `self - self.project_onto(rhs)`.\n `rhs` must be normalized.\n # Panics\n Will panic if `rhs` is not normalized when `glam_assert` is enabled."
    },
    "glam::DVec3::rem": {
      "namespace": "glam::DVec3",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::rem-1": {
      "namespace": "glam::DVec3",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          }
        },
        {
          "kind": {
            "val": "glam::DVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::rem-2": {
      "namespace": "glam::DVec3",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::rem_euclid": {
      "namespace": "glam::DVec3",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n [Euclidean division]: f64::rem_euclid"
    },
    "glam::DVec3::round": {
      "namespace": "glam::DVec3",
      "identifier": "round",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector containing the nearest integer to a number for each element of `self`.\n Round half-way cases away from 0.0."
    },
    "glam::DVec3::select": {
      "namespace": "glam::DVec3",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec3"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::DVec3::signum": {
      "namespace": "glam::DVec3",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n - `1.0` if the number is positive, `+0.0` or `INFINITY`\n - `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`\n - `NAN` if the number is `NAN`"
    },
    "glam::DVec3::splat": {
      "namespace": "glam::DVec3",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::DVec3::sub": {
      "namespace": "glam::DVec3",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::sub-1": {
      "namespace": "glam::DVec3",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          }
        },
        {
          "kind": {
            "val": "glam::DVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::sub-2": {
      "namespace": "glam::DVec3",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      }
    },
    "glam::DVec3::to_array": {
      "namespace": "glam::DVec3",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f64"
            },
            3
          ]
        }
      },
      "documentation": " `[x, y, z]`"
    },
    "glam::DVec3::trunc": {
      "namespace": "glam::DVec3",
      "identifier": "trunc",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Returns a vector containing the integer part each element of `self`. This means numbers are\n always truncated towards zero."
    },
    "glam::DVec3::truncate": {
      "namespace": "glam::DVec3",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Creates a 2D vector from the `x` and `y` elements of `self`, discarding `z`.\n Truncation may also be performed by using [`self.xy()`][crate::swizzles::Vec3Swizzles::xy()]."
    },
    "glam::DVec3::with_x": {
      "namespace": "glam::DVec3",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `x`."
    },
    "glam::DVec3::with_y": {
      "namespace": "glam::DVec3",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `y`."
    },
    "glam::DVec3::with_z": {
      "namespace": "glam::DVec3",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `z`."
    },
    "glam::DVec4::abs": {
      "namespace": "glam::DVec4",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::DVec4::abs_diff_eq": {
      "namespace": "glam::DVec4",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs` is\n less than or equal to `max_abs_diff`.\n This can be used to compare if two vectors contain similar elements. It works best when\n comparing with a known value. The `max_abs_diff` that should be used used depends on\n the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::DVec4::add": {
      "namespace": "glam::DVec4",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::add-1": {
      "namespace": "glam::DVec4",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          }
        },
        {
          "kind": {
            "val": "glam::DVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::add-2": {
      "namespace": "glam::DVec4",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::as_i64vec4": {
      "namespace": "glam::DVec4",
      "identifier": "as_i64vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::DVec4::as_ivec4": {
      "namespace": "glam::DVec4",
      "identifier": "as_ivec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::DVec4::as_u64vec4": {
      "namespace": "glam::DVec4",
      "identifier": "as_u64vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::DVec4::as_uvec4": {
      "namespace": "glam::DVec4",
      "identifier": "as_uvec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::DVec4::as_vec4": {
      "namespace": "glam::DVec4",
      "identifier": "as_vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::DVec4::ceil": {
      "namespace": "glam::DVec4",
      "identifier": "ceil",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector containing the smallest integer greater than or equal to a number for\n each element of `self`."
    },
    "glam::DVec4::clamp": {
      "namespace": "glam::DVec4",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`f64::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::DVec4::clamp_length": {
      "namespace": "glam::DVec4",
      "identifier": "clamp_length",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "min"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector with a length no less than `min` and no more than `max`.\n # Panics\n Will panic if `min` is greater than `max`, or if either `min` or `max` is negative, when `glam_assert` is enabled."
    },
    "glam::DVec4::clamp_length_max": {
      "namespace": "glam::DVec4",
      "identifier": "clamp_length_max",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector with a length no more than `max`.\n # Panics\n Will panic if `max` is negative when `glam_assert` is enabled."
    },
    "glam::DVec4::clamp_length_min": {
      "namespace": "glam::DVec4",
      "identifier": "clamp_length_min",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "min"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector with a length no less than `min`.\n # Panics\n Will panic if `min` is negative when `glam_assert` is enabled."
    },
    "glam::DVec4::clone": {
      "namespace": "glam::DVec4",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::cmpeq": {
      "namespace": "glam::DVec4",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::DVec4::cmpge": {
      "namespace": "glam::DVec4",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::DVec4::cmpgt": {
      "namespace": "glam::DVec4",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::DVec4::cmple": {
      "namespace": "glam::DVec4",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::DVec4::cmplt": {
      "namespace": "glam::DVec4",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::DVec4::cmpne": {
      "namespace": "glam::DVec4",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::DVec4::copysign": {
      "namespace": "glam::DVec4",
      "identifier": "copysign",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector with signs of `rhs` and the magnitudes of `self`."
    },
    "glam::DVec4::distance": {
      "namespace": "glam::DVec4",
      "identifier": "distance",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes the Euclidean distance between two points in space."
    },
    "glam::DVec4::distance_squared": {
      "namespace": "glam::DVec4",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::DVec4::div": {
      "namespace": "glam::DVec4",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::div-1": {
      "namespace": "glam::DVec4",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          }
        },
        {
          "kind": {
            "val": "glam::DVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::div-2": {
      "namespace": "glam::DVec4",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::div_euclid": {
      "namespace": "glam::DVec4",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`."
    },
    "glam::DVec4::dot": {
      "namespace": "glam::DVec4",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::DVec4::dot_into_vec": {
      "namespace": "glam::DVec4",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::DVec4::element_product": {
      "namespace": "glam::DVec4",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::DVec4::element_sum": {
      "namespace": "glam::DVec4",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::DVec4::eq": {
      "namespace": "glam::DVec4",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::DVec4::exp": {
      "namespace": "glam::DVec4",
      "identifier": "exp",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector containing `e^self` (the exponential function) for each element of\n `self`."
    },
    "glam::DVec4::floor": {
      "namespace": "glam::DVec4",
      "identifier": "floor",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector containing the largest integer less than or equal to a number for each\n element of `self`."
    },
    "glam::DVec4::fract": {
      "namespace": "glam::DVec4",
      "identifier": "fract",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector containing the fractional part of the vector as `self - self.trunc()`.\n Note that this differs from the GLSL implementation of `fract` which returns\n `self - self.floor()`.\n Note that this is fast but not precise for large numbers."
    },
    "glam::DVec4::fract_gl": {
      "namespace": "glam::DVec4",
      "identifier": "fract_gl",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector containing the fractional part of the vector as `self - self.floor()`.\n Note that this differs from the Rust implementation of `fract` which returns\n `self - self.trunc()`.\n Note that this is fast but not precise for large numbers."
    },
    "glam::DVec4::from_array": {
      "namespace": "glam::DVec4",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "f64"
              },
              4
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::DVec4::is_finite": {
      "namespace": "glam::DVec4",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.  If any element is either\n `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::DVec4::is_finite_mask": {
      "namespace": "glam::DVec4",
      "identifier": "is_finite_mask",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Performs `is_finite` on each element of self, returning a vector mask of the results.\n In other words, this computes `[x.is_finite(), y.is_finite(), ...]`."
    },
    "glam::DVec4::is_nan": {
      "namespace": "glam::DVec4",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::DVec4::is_nan_mask": {
      "namespace": "glam::DVec4",
      "identifier": "is_nan_mask",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Performs `is_nan` on each element of self, returning a vector mask of the results.\n In other words, this computes `[x.is_nan(), y.is_nan(), ...]`."
    },
    "glam::DVec4::is_negative_bitmask": {
      "namespace": "glam::DVec4",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 4 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::DVec4::is_normalized": {
      "namespace": "glam::DVec4",
      "identifier": "is_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns whether `self` is length `1.0` or not.\n Uses a precision threshold of approximately `1e-4`."
    },
    "glam::DVec4::length": {
      "namespace": "glam::DVec4",
      "identifier": "length",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes the length of `self`."
    },
    "glam::DVec4::length_recip": {
      "namespace": "glam::DVec4",
      "identifier": "length_recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes `1.0 / length()`.\n For valid results, `self` must _not_ be of length zero."
    },
    "glam::DVec4::length_squared": {
      "namespace": "glam::DVec4",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Computes the squared length of `self`.\n This is faster than `length()` as it avoids a square root operation."
    },
    "glam::DVec4::lerp": {
      "namespace": "glam::DVec4",
      "identifier": "lerp",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Performs a linear interpolation between `self` and `rhs` based on the value `s`.\n When `s` is `0.0`, the result will be equal to `self`.  When `s` is `1.0`, the result\n will be equal to `rhs`. When `s` is outside of range `[0, 1]`, the result is linearly\n extrapolated."
    },
    "glam::DVec4::max": {
      "namespace": "glam::DVec4",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::DVec4::max_element": {
      "namespace": "glam::DVec4",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::DVec4::midpoint": {
      "namespace": "glam::DVec4",
      "identifier": "midpoint",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Calculates the midpoint between `self` and `rhs`.\n The midpoint is the average of, or halfway point between, two vectors.\n `a.midpoint(b)` should yield the same result as `a.lerp(b, 0.5)`\n while being slightly cheaper to compute."
    },
    "glam::DVec4::min": {
      "namespace": "glam::DVec4",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::DVec4::min_element": {
      "namespace": "glam::DVec4",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f64"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::DVec4::move_towards": {
      "namespace": "glam::DVec4",
      "identifier": "move_towards",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "d"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Moves towards `rhs` based on the value `d`.\n When `d` is `0.0`, the result will be equal to `self`. When `d` is equal to\n `self.distance(rhs)`, the result will be equal to `rhs`. Will not go past `rhs`."
    },
    "glam::DVec4::mul": {
      "namespace": "glam::DVec4",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::mul-1": {
      "namespace": "glam::DVec4",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          }
        },
        {
          "kind": {
            "val": "glam::DVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::mul-2": {
      "namespace": "glam::DVec4",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::mul_add": {
      "namespace": "glam::DVec4",
      "identifier": "mul_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "a"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "b"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Fused multiply-add. Computes `(self * a) + b` element-wise with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.\n Using `mul_add` *may* be more performant than an unfused multiply-add if the target\n architecture has a dedicated fma CPU instruction. However, this is not always true,\n and will be heavily dependant on designing algorithms with specific target hardware in\n mind."
    },
    "glam::DVec4::neg": {
      "namespace": "glam::DVec4",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::new": {
      "namespace": "glam::DVec4",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::DVec4::normalize": {
      "namespace": "glam::DVec4",
      "identifier": "normalize",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0.\n For valid results, `self` must be finite and _not_ of length zero, nor very close to zero.\n See also [`Self::try_normalize()`] and [`Self::normalize_or_zero()`].\n Panics\n Will panic if the resulting normalized vector is not finite when `glam_assert` is enabled."
    },
    "glam::DVec4::normalize_or": {
      "namespace": "glam::DVec4",
      "identifier": "normalize_or",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "fallback"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0 if possible, else returns a\n fallback value.\n In particular, if the input is zero (or very close to zero), or non-finite,\n the result of this operation will be the fallback value.\n See also [`Self::try_normalize()`]."
    },
    "glam::DVec4::normalize_or_zero": {
      "namespace": "glam::DVec4",
      "identifier": "normalize_or_zero",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0 if possible, else returns zero.\n In particular, if the input is zero (or very close to zero), or non-finite,\n the result of this operation will be zero.\n See also [`Self::try_normalize()`]."
    },
    "glam::DVec4::powf": {
      "namespace": "glam::DVec4",
      "identifier": "powf",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "n"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector containing each element of `self` raised to the power of `n`."
    },
    "glam::DVec4::project_onto": {
      "namespace": "glam::DVec4",
      "identifier": "project_onto",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns the vector projection of `self` onto `rhs`.\n `rhs` must be of non-zero length.\n # Panics\n Will panic if `rhs` is zero length when `glam_assert` is enabled."
    },
    "glam::DVec4::project_onto_normalized": {
      "namespace": "glam::DVec4",
      "identifier": "project_onto_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns the vector projection of `self` onto `rhs`.\n `rhs` must be normalized.\n # Panics\n Will panic if `rhs` is not normalized when `glam_assert` is enabled."
    },
    "glam::DVec4::recip": {
      "namespace": "glam::DVec4",
      "identifier": "recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector containing the reciprocal `1.0/n` of each element of `self`."
    },
    "glam::DVec4::reflect": {
      "namespace": "glam::DVec4",
      "identifier": "reflect",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "normal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns the reflection vector for a given incident vector `self` and surface normal\n `normal`.\n `normal` must be normalized.\n # Panics\n Will panic if `normal` is not normalized when `glam_assert` is enabled."
    },
    "glam::DVec4::refract": {
      "namespace": "glam::DVec4",
      "identifier": "refract",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "normal"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "eta"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns the refraction direction for a given incident vector `self`, surface normal\n `normal` and ratio of indices of refraction, `eta`. When total internal reflection occurs,\n a zero vector will be returned.\n `self` and `normal` must be normalized.\n # Panics\n Will panic if `self` or `normal` is not normalized when `glam_assert` is enabled."
    },
    "glam::DVec4::reject_from": {
      "namespace": "glam::DVec4",
      "identifier": "reject_from",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns the vector rejection of `self` from `rhs`.\n The vector rejection is the vector perpendicular to the projection of `self` onto\n `rhs`, in rhs words the result of `self - self.project_onto(rhs)`.\n `rhs` must be of non-zero length.\n # Panics\n Will panic if `rhs` has a length of zero when `glam_assert` is enabled."
    },
    "glam::DVec4::reject_from_normalized": {
      "namespace": "glam::DVec4",
      "identifier": "reject_from_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns the vector rejection of `self` from `rhs`.\n The vector rejection is the vector perpendicular to the projection of `self` onto\n `rhs`, in rhs words the result of `self - self.project_onto(rhs)`.\n `rhs` must be normalized.\n # Panics\n Will panic if `rhs` is not normalized when `glam_assert` is enabled."
    },
    "glam::DVec4::rem": {
      "namespace": "glam::DVec4",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::rem-1": {
      "namespace": "glam::DVec4",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          }
        },
        {
          "kind": {
            "val": "glam::DVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::rem-2": {
      "namespace": "glam::DVec4",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::rem_euclid": {
      "namespace": "glam::DVec4",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n [Euclidean division]: f64::rem_euclid"
    },
    "glam::DVec4::round": {
      "namespace": "glam::DVec4",
      "identifier": "round",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector containing the nearest integer to a number for each element of `self`.\n Round half-way cases away from 0.0."
    },
    "glam::DVec4::select": {
      "namespace": "glam::DVec4",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec4"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::DVec4::signum": {
      "namespace": "glam::DVec4",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n - `1.0` if the number is positive, `+0.0` or `INFINITY`\n - `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`\n - `NAN` if the number is `NAN`"
    },
    "glam::DVec4::splat": {
      "namespace": "glam::DVec4",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::DVec4::sub": {
      "namespace": "glam::DVec4",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::sub-1": {
      "namespace": "glam::DVec4",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          }
        },
        {
          "kind": {
            "val": "glam::DVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::sub-2": {
      "namespace": "glam::DVec4",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          }
        },
        {
          "kind": {
            "primitive": "f64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      }
    },
    "glam::DVec4::to_array": {
      "namespace": "glam::DVec4",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f64"
            },
            4
          ]
        }
      },
      "documentation": " `[x, y, z, w]`"
    },
    "glam::DVec4::trunc": {
      "namespace": "glam::DVec4",
      "identifier": "trunc",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Returns a vector containing the integer part each element of `self`. This means numbers are\n always truncated towards zero."
    },
    "glam::DVec4::truncate": {
      "namespace": "glam::DVec4",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Creates a 3D vector from the `x`, `y` and `z` elements of `self`, discarding `w`.\n Truncation to [`DVec3`] may also be performed by using [`self.xyz()`][crate::swizzles::Vec4Swizzles::xyz()]."
    },
    "glam::DVec4::with_w": {
      "namespace": "glam::DVec4",
      "identifier": "with_w",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `w`."
    },
    "glam::DVec4::with_x": {
      "namespace": "glam::DVec4",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `x`."
    },
    "glam::DVec4::with_y": {
      "namespace": "glam::DVec4",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `y`."
    },
    "glam::DVec4::with_z": {
      "namespace": "glam::DVec4",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::DVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f64"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `z`."
    },
    "glam::EulerRot::assert_receiver_is_total_eq": {
      "namespace": "glam::EulerRot",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::EulerRot"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::EulerRot::clone": {
      "namespace": "glam::EulerRot",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::EulerRot"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::EulerRot"
        }
      }
    },
    "glam::EulerRot::eq": {
      "namespace": "glam::EulerRot",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::EulerRot"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::EulerRot"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::I64Vec2::abs": {
      "namespace": "glam::I64Vec2",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::I64Vec2::add": {
      "namespace": "glam::I64Vec2",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::add-1": {
      "namespace": "glam::I64Vec2",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::add-2": {
      "namespace": "glam::I64Vec2",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          }
        },
        {
          "kind": {
            "primitive": "i64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::as_dvec2": {
      "namespace": "glam::I64Vec2",
      "identifier": "as_dvec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::I64Vec2::as_ivec2": {
      "namespace": "glam::I64Vec2",
      "identifier": "as_ivec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::I64Vec2::as_u64vec2": {
      "namespace": "glam::I64Vec2",
      "identifier": "as_u64vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::I64Vec2::as_uvec2": {
      "namespace": "glam::I64Vec2",
      "identifier": "as_uvec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::I64Vec2::as_vec2": {
      "namespace": "glam::I64Vec2",
      "identifier": "as_vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::I64Vec2::assert_receiver_is_total_eq": {
      "namespace": "glam::I64Vec2",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::I64Vec2::clamp": {
      "namespace": "glam::I64Vec2",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`i64::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::I64Vec2::clone": {
      "namespace": "glam::I64Vec2",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::cmpeq": {
      "namespace": "glam::I64Vec2",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec2::cmpge": {
      "namespace": "glam::I64Vec2",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec2::cmpgt": {
      "namespace": "glam::I64Vec2",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec2::cmple": {
      "namespace": "glam::I64Vec2",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec2::cmplt": {
      "namespace": "glam::I64Vec2",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec2::cmpne": {
      "namespace": "glam::I64Vec2",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec2::distance_squared": {
      "namespace": "glam::I64Vec2",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::I64Vec2::div": {
      "namespace": "glam::I64Vec2",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::div-1": {
      "namespace": "glam::I64Vec2",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::div-2": {
      "namespace": "glam::I64Vec2",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          }
        },
        {
          "kind": {
            "primitive": "i64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::div_euclid": {
      "namespace": "glam::I64Vec2",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow."
    },
    "glam::I64Vec2::dot": {
      "namespace": "glam::I64Vec2",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::I64Vec2::dot_into_vec": {
      "namespace": "glam::I64Vec2",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::I64Vec2::element_product": {
      "namespace": "glam::I64Vec2",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::I64Vec2::element_sum": {
      "namespace": "glam::I64Vec2",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::I64Vec2::eq": {
      "namespace": "glam::I64Vec2",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::I64Vec2::extend": {
      "namespace": "glam::I64Vec2",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` and the given `z` value."
    },
    "glam::I64Vec2::from_array": {
      "namespace": "glam::I64Vec2",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "i64"
              },
              2
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::I64Vec2::is_negative_bitmask": {
      "namespace": "glam::I64Vec2",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 2 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::I64Vec2::length_squared": {
      "namespace": "glam::I64Vec2",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::I64Vec2::max": {
      "namespace": "glam::I64Vec2",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::I64Vec2::max_element": {
      "namespace": "glam::I64Vec2",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::I64Vec2::min": {
      "namespace": "glam::I64Vec2",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::I64Vec2::min_element": {
      "namespace": "glam::I64Vec2",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::I64Vec2::mul": {
      "namespace": "glam::I64Vec2",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::mul-1": {
      "namespace": "glam::I64Vec2",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::mul-2": {
      "namespace": "glam::I64Vec2",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          }
        },
        {
          "kind": {
            "primitive": "i64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::neg": {
      "namespace": "glam::I64Vec2",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::new": {
      "namespace": "glam::I64Vec2",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::I64Vec2::perp": {
      "namespace": "glam::I64Vec2",
      "identifier": "perp",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector that is equal to `self` rotated by 90 degrees."
    },
    "glam::I64Vec2::perp_dot": {
      "namespace": "glam::I64Vec2",
      "identifier": "perp_dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " The perpendicular dot product of `self` and `rhs`.\n Also known as the wedge product, 2D cross product, and determinant."
    },
    "glam::I64Vec2::rem": {
      "namespace": "glam::I64Vec2",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::rem-1": {
      "namespace": "glam::I64Vec2",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::rem-2": {
      "namespace": "glam::I64Vec2",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          }
        },
        {
          "kind": {
            "primitive": "i64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::rem_euclid": {
      "namespace": "glam::I64Vec2",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow.\n [Euclidean division]: i64::rem_euclid"
    },
    "glam::I64Vec2::rotate": {
      "namespace": "glam::I64Vec2",
      "identifier": "rotate",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns `rhs` rotated by the angle of `self`. If `self` is normalized,\n then this just rotation. This is what you usually want. Otherwise,\n it will be like a rotation with a multiplication by `self`'s length."
    },
    "glam::I64Vec2::saturating_add": {
      "namespace": "glam::I64Vec2",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::I64Vec2::saturating_add_unsigned": {
      "namespace": "glam::I64Vec2",
      "identifier": "saturating_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " In other words this computes `[self.x.saturating_add_unsigned(rhs.x), self.y.saturating_add_unsigned(rhs.y), ..]`."
    },
    "glam::I64Vec2::saturating_div": {
      "namespace": "glam::I64Vec2",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::I64Vec2::saturating_mul": {
      "namespace": "glam::I64Vec2",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::I64Vec2::saturating_sub": {
      "namespace": "glam::I64Vec2",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::I64Vec2::saturating_sub_unsigned": {
      "namespace": "glam::I64Vec2",
      "identifier": "saturating_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.saturating_sub_unsigned(rhs.x), self.y.saturating_sub_unsigned(rhs.y), ..]`."
    },
    "glam::I64Vec2::select": {
      "namespace": "glam::I64Vec2",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec2"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::I64Vec2::signum": {
      "namespace": "glam::I64Vec2",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n  - `0` if the number is zero\n  - `1` if the number is positive\n  - `-1` if the number is negative"
    },
    "glam::I64Vec2::splat": {
      "namespace": "glam::I64Vec2",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::I64Vec2::sub": {
      "namespace": "glam::I64Vec2",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::sub-1": {
      "namespace": "glam::I64Vec2",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::sub-2": {
      "namespace": "glam::I64Vec2",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          }
        },
        {
          "kind": {
            "primitive": "i64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      }
    },
    "glam::I64Vec2::to_array": {
      "namespace": "glam::I64Vec2",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "i64"
            },
            2
          ]
        }
      },
      "documentation": " `[x, y]`"
    },
    "glam::I64Vec2::with_x": {
      "namespace": "glam::I64Vec2",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `x`."
    },
    "glam::I64Vec2::with_y": {
      "namespace": "glam::I64Vec2",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `y`."
    },
    "glam::I64Vec2::wrapping_add": {
      "namespace": "glam::I64Vec2",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::I64Vec2::wrapping_add_unsigned": {
      "namespace": "glam::I64Vec2",
      "identifier": "wrapping_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_add_unsigned(rhs.x), self.y.wrapping_add_unsigned(rhs.y), ..]`."
    },
    "glam::I64Vec2::wrapping_div": {
      "namespace": "glam::I64Vec2",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::I64Vec2::wrapping_mul": {
      "namespace": "glam::I64Vec2",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::I64Vec2::wrapping_sub": {
      "namespace": "glam::I64Vec2",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::I64Vec2::wrapping_sub_unsigned": {
      "namespace": "glam::I64Vec2",
      "identifier": "wrapping_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_sub_unsigned(rhs.x), self.y.wrapping_sub_unsigned(rhs.y), ..]`."
    },
    "glam::I64Vec3::abs": {
      "namespace": "glam::I64Vec3",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::I64Vec3::add": {
      "namespace": "glam::I64Vec3",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::add-1": {
      "namespace": "glam::I64Vec3",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::add-2": {
      "namespace": "glam::I64Vec3",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          }
        },
        {
          "kind": {
            "primitive": "i64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::as_dvec3": {
      "namespace": "glam::I64Vec3",
      "identifier": "as_dvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::I64Vec3::as_ivec3": {
      "namespace": "glam::I64Vec3",
      "identifier": "as_ivec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::I64Vec3::as_u64vec3": {
      "namespace": "glam::I64Vec3",
      "identifier": "as_u64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::I64Vec3::as_uvec3": {
      "namespace": "glam::I64Vec3",
      "identifier": "as_uvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::I64Vec3::as_vec3": {
      "namespace": "glam::I64Vec3",
      "identifier": "as_vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::I64Vec3::as_vec3a": {
      "namespace": "glam::I64Vec3",
      "identifier": "as_vec3a",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::I64Vec3::assert_receiver_is_total_eq": {
      "namespace": "glam::I64Vec3",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::I64Vec3::clamp": {
      "namespace": "glam::I64Vec3",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`i64::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::I64Vec3::clone": {
      "namespace": "glam::I64Vec3",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::cmpeq": {
      "namespace": "glam::I64Vec3",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec3::cmpge": {
      "namespace": "glam::I64Vec3",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec3::cmpgt": {
      "namespace": "glam::I64Vec3",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec3::cmple": {
      "namespace": "glam::I64Vec3",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec3::cmplt": {
      "namespace": "glam::I64Vec3",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec3::cmpne": {
      "namespace": "glam::I64Vec3",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec3::cross": {
      "namespace": "glam::I64Vec3",
      "identifier": "cross",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Computes the cross product of `self` and `rhs`."
    },
    "glam::I64Vec3::distance_squared": {
      "namespace": "glam::I64Vec3",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::I64Vec3::div": {
      "namespace": "glam::I64Vec3",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::div-1": {
      "namespace": "glam::I64Vec3",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::div-2": {
      "namespace": "glam::I64Vec3",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          }
        },
        {
          "kind": {
            "primitive": "i64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::div_euclid": {
      "namespace": "glam::I64Vec3",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow."
    },
    "glam::I64Vec3::dot": {
      "namespace": "glam::I64Vec3",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::I64Vec3::dot_into_vec": {
      "namespace": "glam::I64Vec3",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::I64Vec3::element_product": {
      "namespace": "glam::I64Vec3",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::I64Vec3::element_sum": {
      "namespace": "glam::I64Vec3",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::I64Vec3::eq": {
      "namespace": "glam::I64Vec3",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::I64Vec3::extend": {
      "namespace": "glam::I64Vec3",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` and the given `w` value."
    },
    "glam::I64Vec3::from_array": {
      "namespace": "glam::I64Vec3",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "i64"
              },
              3
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::I64Vec3::is_negative_bitmask": {
      "namespace": "glam::I64Vec3",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 3 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::I64Vec3::length_squared": {
      "namespace": "glam::I64Vec3",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::I64Vec3::max": {
      "namespace": "glam::I64Vec3",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::I64Vec3::max_element": {
      "namespace": "glam::I64Vec3",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::I64Vec3::min": {
      "namespace": "glam::I64Vec3",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::I64Vec3::min_element": {
      "namespace": "glam::I64Vec3",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::I64Vec3::mul": {
      "namespace": "glam::I64Vec3",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::mul-1": {
      "namespace": "glam::I64Vec3",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::mul-2": {
      "namespace": "glam::I64Vec3",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          }
        },
        {
          "kind": {
            "primitive": "i64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::neg": {
      "namespace": "glam::I64Vec3",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::new": {
      "namespace": "glam::I64Vec3",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::I64Vec3::rem": {
      "namespace": "glam::I64Vec3",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::rem-1": {
      "namespace": "glam::I64Vec3",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::rem-2": {
      "namespace": "glam::I64Vec3",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          }
        },
        {
          "kind": {
            "primitive": "i64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::rem_euclid": {
      "namespace": "glam::I64Vec3",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow.\n [Euclidean division]: i64::rem_euclid"
    },
    "glam::I64Vec3::saturating_add": {
      "namespace": "glam::I64Vec3",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::I64Vec3::saturating_add_unsigned": {
      "namespace": "glam::I64Vec3",
      "identifier": "saturating_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " In other words this computes `[self.x.saturating_add_unsigned(rhs.x), self.y.saturating_add_unsigned(rhs.y), ..]`."
    },
    "glam::I64Vec3::saturating_div": {
      "namespace": "glam::I64Vec3",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::I64Vec3::saturating_mul": {
      "namespace": "glam::I64Vec3",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::I64Vec3::saturating_sub": {
      "namespace": "glam::I64Vec3",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::I64Vec3::saturating_sub_unsigned": {
      "namespace": "glam::I64Vec3",
      "identifier": "saturating_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.saturating_sub_unsigned(rhs.x), self.y.saturating_sub_unsigned(rhs.y), ..]`."
    },
    "glam::I64Vec3::select": {
      "namespace": "glam::I64Vec3",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec3"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::I64Vec3::signum": {
      "namespace": "glam::I64Vec3",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n  - `0` if the number is zero\n  - `1` if the number is positive\n  - `-1` if the number is negative"
    },
    "glam::I64Vec3::splat": {
      "namespace": "glam::I64Vec3",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::I64Vec3::sub": {
      "namespace": "glam::I64Vec3",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::sub-1": {
      "namespace": "glam::I64Vec3",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::sub-2": {
      "namespace": "glam::I64Vec3",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          }
        },
        {
          "kind": {
            "primitive": "i64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      }
    },
    "glam::I64Vec3::to_array": {
      "namespace": "glam::I64Vec3",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "i64"
            },
            3
          ]
        }
      },
      "documentation": " `[x, y, z]`"
    },
    "glam::I64Vec3::truncate": {
      "namespace": "glam::I64Vec3",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Creates a 2D vector from the `x` and `y` elements of `self`, discarding `z`.\n Truncation may also be performed by using [`self.xy()`][crate::swizzles::Vec3Swizzles::xy()]."
    },
    "glam::I64Vec3::with_x": {
      "namespace": "glam::I64Vec3",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `x`."
    },
    "glam::I64Vec3::with_y": {
      "namespace": "glam::I64Vec3",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `y`."
    },
    "glam::I64Vec3::with_z": {
      "namespace": "glam::I64Vec3",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `z`."
    },
    "glam::I64Vec3::wrapping_add": {
      "namespace": "glam::I64Vec3",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::I64Vec3::wrapping_add_unsigned": {
      "namespace": "glam::I64Vec3",
      "identifier": "wrapping_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_add_unsigned(rhs.x), self.y.wrapping_add_unsigned(rhs.y), ..]`."
    },
    "glam::I64Vec3::wrapping_div": {
      "namespace": "glam::I64Vec3",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::I64Vec3::wrapping_mul": {
      "namespace": "glam::I64Vec3",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::I64Vec3::wrapping_sub": {
      "namespace": "glam::I64Vec3",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::I64Vec3::wrapping_sub_unsigned": {
      "namespace": "glam::I64Vec3",
      "identifier": "wrapping_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_sub_unsigned(rhs.x), self.y.wrapping_sub_unsigned(rhs.y), ..]`."
    },
    "glam::I64Vec4::abs": {
      "namespace": "glam::I64Vec4",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::I64Vec4::add": {
      "namespace": "glam::I64Vec4",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::add-1": {
      "namespace": "glam::I64Vec4",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::add-2": {
      "namespace": "glam::I64Vec4",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          }
        },
        {
          "kind": {
            "primitive": "i64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::as_dvec4": {
      "namespace": "glam::I64Vec4",
      "identifier": "as_dvec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::I64Vec4::as_ivec4": {
      "namespace": "glam::I64Vec4",
      "identifier": "as_ivec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::I64Vec4::as_u64vec4": {
      "namespace": "glam::I64Vec4",
      "identifier": "as_u64vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::I64Vec4::as_uvec4": {
      "namespace": "glam::I64Vec4",
      "identifier": "as_uvec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::I64Vec4::as_vec4": {
      "namespace": "glam::I64Vec4",
      "identifier": "as_vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::I64Vec4::assert_receiver_is_total_eq": {
      "namespace": "glam::I64Vec4",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::I64Vec4::clamp": {
      "namespace": "glam::I64Vec4",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`i64::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::I64Vec4::clone": {
      "namespace": "glam::I64Vec4",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::cmpeq": {
      "namespace": "glam::I64Vec4",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec4::cmpge": {
      "namespace": "glam::I64Vec4",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec4::cmpgt": {
      "namespace": "glam::I64Vec4",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec4::cmple": {
      "namespace": "glam::I64Vec4",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec4::cmplt": {
      "namespace": "glam::I64Vec4",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec4::cmpne": {
      "namespace": "glam::I64Vec4",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::I64Vec4::distance_squared": {
      "namespace": "glam::I64Vec4",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::I64Vec4::div": {
      "namespace": "glam::I64Vec4",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::div-1": {
      "namespace": "glam::I64Vec4",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::div-2": {
      "namespace": "glam::I64Vec4",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          }
        },
        {
          "kind": {
            "primitive": "i64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::div_euclid": {
      "namespace": "glam::I64Vec4",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow."
    },
    "glam::I64Vec4::dot": {
      "namespace": "glam::I64Vec4",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::I64Vec4::dot_into_vec": {
      "namespace": "glam::I64Vec4",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::I64Vec4::element_product": {
      "namespace": "glam::I64Vec4",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::I64Vec4::element_sum": {
      "namespace": "glam::I64Vec4",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::I64Vec4::eq": {
      "namespace": "glam::I64Vec4",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::I64Vec4::from_array": {
      "namespace": "glam::I64Vec4",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "i64"
              },
              4
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::I64Vec4::is_negative_bitmask": {
      "namespace": "glam::I64Vec4",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 4 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::I64Vec4::length_squared": {
      "namespace": "glam::I64Vec4",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::I64Vec4::max": {
      "namespace": "glam::I64Vec4",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::I64Vec4::max_element": {
      "namespace": "glam::I64Vec4",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::I64Vec4::min": {
      "namespace": "glam::I64Vec4",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::I64Vec4::min_element": {
      "namespace": "glam::I64Vec4",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i64"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::I64Vec4::mul": {
      "namespace": "glam::I64Vec4",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::mul-1": {
      "namespace": "glam::I64Vec4",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::mul-2": {
      "namespace": "glam::I64Vec4",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          }
        },
        {
          "kind": {
            "primitive": "i64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::neg": {
      "namespace": "glam::I64Vec4",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::new": {
      "namespace": "glam::I64Vec4",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "z"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::I64Vec4::rem": {
      "namespace": "glam::I64Vec4",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::rem-1": {
      "namespace": "glam::I64Vec4",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::rem-2": {
      "namespace": "glam::I64Vec4",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          }
        },
        {
          "kind": {
            "primitive": "i64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::rem_euclid": {
      "namespace": "glam::I64Vec4",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow.\n [Euclidean division]: i64::rem_euclid"
    },
    "glam::I64Vec4::saturating_add": {
      "namespace": "glam::I64Vec4",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::I64Vec4::saturating_add_unsigned": {
      "namespace": "glam::I64Vec4",
      "identifier": "saturating_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " In other words this computes `[self.x.saturating_add_unsigned(rhs.x), self.y.saturating_add_unsigned(rhs.y), ..]`."
    },
    "glam::I64Vec4::saturating_div": {
      "namespace": "glam::I64Vec4",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::I64Vec4::saturating_mul": {
      "namespace": "glam::I64Vec4",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::I64Vec4::saturating_sub": {
      "namespace": "glam::I64Vec4",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::I64Vec4::saturating_sub_unsigned": {
      "namespace": "glam::I64Vec4",
      "identifier": "saturating_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.saturating_sub_unsigned(rhs.x), self.y.saturating_sub_unsigned(rhs.y), ..]`."
    },
    "glam::I64Vec4::select": {
      "namespace": "glam::I64Vec4",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec4"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::I64Vec4::signum": {
      "namespace": "glam::I64Vec4",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n  - `0` if the number is zero\n  - `1` if the number is positive\n  - `-1` if the number is negative"
    },
    "glam::I64Vec4::splat": {
      "namespace": "glam::I64Vec4",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::I64Vec4::sub": {
      "namespace": "glam::I64Vec4",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::sub-1": {
      "namespace": "glam::I64Vec4",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::sub-2": {
      "namespace": "glam::I64Vec4",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          }
        },
        {
          "kind": {
            "primitive": "i64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      }
    },
    "glam::I64Vec4::to_array": {
      "namespace": "glam::I64Vec4",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "i64"
            },
            4
          ]
        }
      },
      "documentation": " `[x, y, z, w]`"
    },
    "glam::I64Vec4::truncate": {
      "namespace": "glam::I64Vec4",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Creates a 3D vector from the `x`, `y` and `z` elements of `self`, discarding `w`.\n Truncation to [`I64Vec3`] may also be performed by using [`self.xyz()`][crate::swizzles::Vec4Swizzles::xyz()]."
    },
    "glam::I64Vec4::with_w": {
      "namespace": "glam::I64Vec4",
      "identifier": "with_w",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `w`."
    },
    "glam::I64Vec4::with_x": {
      "namespace": "glam::I64Vec4",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `x`."
    },
    "glam::I64Vec4::with_y": {
      "namespace": "glam::I64Vec4",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `y`."
    },
    "glam::I64Vec4::with_z": {
      "namespace": "glam::I64Vec4",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i64"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `z`."
    },
    "glam::I64Vec4::wrapping_add": {
      "namespace": "glam::I64Vec4",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::I64Vec4::wrapping_add_unsigned": {
      "namespace": "glam::I64Vec4",
      "identifier": "wrapping_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_add_unsigned(rhs.x), self.y.wrapping_add_unsigned(rhs.y), ..]`."
    },
    "glam::I64Vec4::wrapping_div": {
      "namespace": "glam::I64Vec4",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::I64Vec4::wrapping_mul": {
      "namespace": "glam::I64Vec4",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::I64Vec4::wrapping_sub": {
      "namespace": "glam::I64Vec4",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::I64Vec4::wrapping_sub_unsigned": {
      "namespace": "glam::I64Vec4",
      "identifier": "wrapping_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_sub_unsigned(rhs.x), self.y.wrapping_sub_unsigned(rhs.y), ..]`."
    },
    "glam::IVec2::abs": {
      "namespace": "glam::IVec2",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::IVec2::add": {
      "namespace": "glam::IVec2",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::add-1": {
      "namespace": "glam::IVec2",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          }
        },
        {
          "kind": {
            "val": "glam::IVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::add-2": {
      "namespace": "glam::IVec2",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          }
        },
        {
          "kind": {
            "primitive": "i32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::as_dvec2": {
      "namespace": "glam::IVec2",
      "identifier": "as_dvec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::IVec2::as_i64vec2": {
      "namespace": "glam::IVec2",
      "identifier": "as_i64vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::IVec2::as_u64vec2": {
      "namespace": "glam::IVec2",
      "identifier": "as_u64vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::IVec2::as_uvec2": {
      "namespace": "glam::IVec2",
      "identifier": "as_uvec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::IVec2::as_vec2": {
      "namespace": "glam::IVec2",
      "identifier": "as_vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::IVec2::assert_receiver_is_total_eq": {
      "namespace": "glam::IVec2",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::IVec2::clamp": {
      "namespace": "glam::IVec2",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`i32::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::IVec2::clone": {
      "namespace": "glam::IVec2",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::cmpeq": {
      "namespace": "glam::IVec2",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::IVec2::cmpge": {
      "namespace": "glam::IVec2",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::IVec2::cmpgt": {
      "namespace": "glam::IVec2",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::IVec2::cmple": {
      "namespace": "glam::IVec2",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::IVec2::cmplt": {
      "namespace": "glam::IVec2",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::IVec2::cmpne": {
      "namespace": "glam::IVec2",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::IVec2::distance_squared": {
      "namespace": "glam::IVec2",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::IVec2::div": {
      "namespace": "glam::IVec2",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::div-1": {
      "namespace": "glam::IVec2",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          }
        },
        {
          "kind": {
            "val": "glam::IVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::div-2": {
      "namespace": "glam::IVec2",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          }
        },
        {
          "kind": {
            "primitive": "i32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::div_euclid": {
      "namespace": "glam::IVec2",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow."
    },
    "glam::IVec2::dot": {
      "namespace": "glam::IVec2",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::IVec2::dot_into_vec": {
      "namespace": "glam::IVec2",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::IVec2::element_product": {
      "namespace": "glam::IVec2",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::IVec2::element_sum": {
      "namespace": "glam::IVec2",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::IVec2::eq": {
      "namespace": "glam::IVec2",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::IVec2::extend": {
      "namespace": "glam::IVec2",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` and the given `z` value."
    },
    "glam::IVec2::from_array": {
      "namespace": "glam::IVec2",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "i32"
              },
              2
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::IVec2::is_negative_bitmask": {
      "namespace": "glam::IVec2",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 2 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::IVec2::length_squared": {
      "namespace": "glam::IVec2",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::IVec2::max": {
      "namespace": "glam::IVec2",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::IVec2::max_element": {
      "namespace": "glam::IVec2",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::IVec2::min": {
      "namespace": "glam::IVec2",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::IVec2::min_element": {
      "namespace": "glam::IVec2",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::IVec2::mul": {
      "namespace": "glam::IVec2",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::mul-1": {
      "namespace": "glam::IVec2",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          }
        },
        {
          "kind": {
            "val": "glam::IVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::mul-2": {
      "namespace": "glam::IVec2",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          }
        },
        {
          "kind": {
            "primitive": "i32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::neg": {
      "namespace": "glam::IVec2",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::new": {
      "namespace": "glam::IVec2",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::IVec2::perp": {
      "namespace": "glam::IVec2",
      "identifier": "perp",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector that is equal to `self` rotated by 90 degrees."
    },
    "glam::IVec2::perp_dot": {
      "namespace": "glam::IVec2",
      "identifier": "perp_dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " The perpendicular dot product of `self` and `rhs`.\n Also known as the wedge product, 2D cross product, and determinant."
    },
    "glam::IVec2::rem": {
      "namespace": "glam::IVec2",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::rem-1": {
      "namespace": "glam::IVec2",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          }
        },
        {
          "kind": {
            "val": "glam::IVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::rem-2": {
      "namespace": "glam::IVec2",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          }
        },
        {
          "kind": {
            "primitive": "i32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::rem_euclid": {
      "namespace": "glam::IVec2",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow.\n [Euclidean division]: i32::rem_euclid"
    },
    "glam::IVec2::rotate": {
      "namespace": "glam::IVec2",
      "identifier": "rotate",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns `rhs` rotated by the angle of `self`. If `self` is normalized,\n then this just rotation. This is what you usually want. Otherwise,\n it will be like a rotation with a multiplication by `self`'s length."
    },
    "glam::IVec2::saturating_add": {
      "namespace": "glam::IVec2",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::IVec2::saturating_add_unsigned": {
      "namespace": "glam::IVec2",
      "identifier": "saturating_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " In other words this computes `[self.x.saturating_add_unsigned(rhs.x), self.y.saturating_add_unsigned(rhs.y), ..]`."
    },
    "glam::IVec2::saturating_div": {
      "namespace": "glam::IVec2",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::IVec2::saturating_mul": {
      "namespace": "glam::IVec2",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::IVec2::saturating_sub": {
      "namespace": "glam::IVec2",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::IVec2::saturating_sub_unsigned": {
      "namespace": "glam::IVec2",
      "identifier": "saturating_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.saturating_sub_unsigned(rhs.x), self.y.saturating_sub_unsigned(rhs.y), ..]`."
    },
    "glam::IVec2::select": {
      "namespace": "glam::IVec2",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec2"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::IVec2::signum": {
      "namespace": "glam::IVec2",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n  - `0` if the number is zero\n  - `1` if the number is positive\n  - `-1` if the number is negative"
    },
    "glam::IVec2::splat": {
      "namespace": "glam::IVec2",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::IVec2::sub": {
      "namespace": "glam::IVec2",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::sub-1": {
      "namespace": "glam::IVec2",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          }
        },
        {
          "kind": {
            "val": "glam::IVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::sub-2": {
      "namespace": "glam::IVec2",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          }
        },
        {
          "kind": {
            "primitive": "i32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      }
    },
    "glam::IVec2::to_array": {
      "namespace": "glam::IVec2",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "i32"
            },
            2
          ]
        }
      },
      "documentation": " `[x, y]`"
    },
    "glam::IVec2::with_x": {
      "namespace": "glam::IVec2",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `x`."
    },
    "glam::IVec2::with_y": {
      "namespace": "glam::IVec2",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `y`."
    },
    "glam::IVec2::wrapping_add": {
      "namespace": "glam::IVec2",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::IVec2::wrapping_add_unsigned": {
      "namespace": "glam::IVec2",
      "identifier": "wrapping_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_add_unsigned(rhs.x), self.y.wrapping_add_unsigned(rhs.y), ..]`."
    },
    "glam::IVec2::wrapping_div": {
      "namespace": "glam::IVec2",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::IVec2::wrapping_mul": {
      "namespace": "glam::IVec2",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::IVec2::wrapping_sub": {
      "namespace": "glam::IVec2",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::IVec2::wrapping_sub_unsigned": {
      "namespace": "glam::IVec2",
      "identifier": "wrapping_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_sub_unsigned(rhs.x), self.y.wrapping_sub_unsigned(rhs.y), ..]`."
    },
    "glam::IVec3::abs": {
      "namespace": "glam::IVec3",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::IVec3::add": {
      "namespace": "glam::IVec3",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::add-1": {
      "namespace": "glam::IVec3",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          }
        },
        {
          "kind": {
            "val": "glam::IVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::add-2": {
      "namespace": "glam::IVec3",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          }
        },
        {
          "kind": {
            "primitive": "i32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::as_dvec3": {
      "namespace": "glam::IVec3",
      "identifier": "as_dvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::IVec3::as_i64vec3": {
      "namespace": "glam::IVec3",
      "identifier": "as_i64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::IVec3::as_u64vec3": {
      "namespace": "glam::IVec3",
      "identifier": "as_u64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::IVec3::as_uvec3": {
      "namespace": "glam::IVec3",
      "identifier": "as_uvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::IVec3::as_vec3": {
      "namespace": "glam::IVec3",
      "identifier": "as_vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::IVec3::as_vec3a": {
      "namespace": "glam::IVec3",
      "identifier": "as_vec3a",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::IVec3::assert_receiver_is_total_eq": {
      "namespace": "glam::IVec3",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::IVec3::clamp": {
      "namespace": "glam::IVec3",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`i32::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::IVec3::clone": {
      "namespace": "glam::IVec3",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::cmpeq": {
      "namespace": "glam::IVec3",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::IVec3::cmpge": {
      "namespace": "glam::IVec3",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::IVec3::cmpgt": {
      "namespace": "glam::IVec3",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::IVec3::cmple": {
      "namespace": "glam::IVec3",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::IVec3::cmplt": {
      "namespace": "glam::IVec3",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::IVec3::cmpne": {
      "namespace": "glam::IVec3",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::IVec3::cross": {
      "namespace": "glam::IVec3",
      "identifier": "cross",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Computes the cross product of `self` and `rhs`."
    },
    "glam::IVec3::distance_squared": {
      "namespace": "glam::IVec3",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::IVec3::div": {
      "namespace": "glam::IVec3",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::div-1": {
      "namespace": "glam::IVec3",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          }
        },
        {
          "kind": {
            "val": "glam::IVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::div-2": {
      "namespace": "glam::IVec3",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          }
        },
        {
          "kind": {
            "primitive": "i32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::div_euclid": {
      "namespace": "glam::IVec3",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow."
    },
    "glam::IVec3::dot": {
      "namespace": "glam::IVec3",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::IVec3::dot_into_vec": {
      "namespace": "glam::IVec3",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::IVec3::element_product": {
      "namespace": "glam::IVec3",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::IVec3::element_sum": {
      "namespace": "glam::IVec3",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::IVec3::eq": {
      "namespace": "glam::IVec3",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::IVec3::extend": {
      "namespace": "glam::IVec3",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` and the given `w` value."
    },
    "glam::IVec3::from_array": {
      "namespace": "glam::IVec3",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "i32"
              },
              3
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::IVec3::is_negative_bitmask": {
      "namespace": "glam::IVec3",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 3 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::IVec3::length_squared": {
      "namespace": "glam::IVec3",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::IVec3::max": {
      "namespace": "glam::IVec3",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::IVec3::max_element": {
      "namespace": "glam::IVec3",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::IVec3::min": {
      "namespace": "glam::IVec3",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::IVec3::min_element": {
      "namespace": "glam::IVec3",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::IVec3::mul": {
      "namespace": "glam::IVec3",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::mul-1": {
      "namespace": "glam::IVec3",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          }
        },
        {
          "kind": {
            "val": "glam::IVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::mul-2": {
      "namespace": "glam::IVec3",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          }
        },
        {
          "kind": {
            "primitive": "i32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::neg": {
      "namespace": "glam::IVec3",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::new": {
      "namespace": "glam::IVec3",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::IVec3::rem": {
      "namespace": "glam::IVec3",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::rem-1": {
      "namespace": "glam::IVec3",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          }
        },
        {
          "kind": {
            "val": "glam::IVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::rem-2": {
      "namespace": "glam::IVec3",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          }
        },
        {
          "kind": {
            "primitive": "i32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::rem_euclid": {
      "namespace": "glam::IVec3",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow.\n [Euclidean division]: i32::rem_euclid"
    },
    "glam::IVec3::saturating_add": {
      "namespace": "glam::IVec3",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::IVec3::saturating_add_unsigned": {
      "namespace": "glam::IVec3",
      "identifier": "saturating_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " In other words this computes `[self.x.saturating_add_unsigned(rhs.x), self.y.saturating_add_unsigned(rhs.y), ..]`."
    },
    "glam::IVec3::saturating_div": {
      "namespace": "glam::IVec3",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::IVec3::saturating_mul": {
      "namespace": "glam::IVec3",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::IVec3::saturating_sub": {
      "namespace": "glam::IVec3",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::IVec3::saturating_sub_unsigned": {
      "namespace": "glam::IVec3",
      "identifier": "saturating_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.saturating_sub_unsigned(rhs.x), self.y.saturating_sub_unsigned(rhs.y), ..]`."
    },
    "glam::IVec3::select": {
      "namespace": "glam::IVec3",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec3"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::IVec3::signum": {
      "namespace": "glam::IVec3",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n  - `0` if the number is zero\n  - `1` if the number is positive\n  - `-1` if the number is negative"
    },
    "glam::IVec3::splat": {
      "namespace": "glam::IVec3",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::IVec3::sub": {
      "namespace": "glam::IVec3",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::sub-1": {
      "namespace": "glam::IVec3",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          }
        },
        {
          "kind": {
            "val": "glam::IVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::sub-2": {
      "namespace": "glam::IVec3",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          }
        },
        {
          "kind": {
            "primitive": "i32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      }
    },
    "glam::IVec3::to_array": {
      "namespace": "glam::IVec3",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "i32"
            },
            3
          ]
        }
      },
      "documentation": " `[x, y, z]`"
    },
    "glam::IVec3::truncate": {
      "namespace": "glam::IVec3",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Creates a 2D vector from the `x` and `y` elements of `self`, discarding `z`.\n Truncation may also be performed by using [`self.xy()`][crate::swizzles::Vec3Swizzles::xy()]."
    },
    "glam::IVec3::with_x": {
      "namespace": "glam::IVec3",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `x`."
    },
    "glam::IVec3::with_y": {
      "namespace": "glam::IVec3",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `y`."
    },
    "glam::IVec3::with_z": {
      "namespace": "glam::IVec3",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `z`."
    },
    "glam::IVec3::wrapping_add": {
      "namespace": "glam::IVec3",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::IVec3::wrapping_add_unsigned": {
      "namespace": "glam::IVec3",
      "identifier": "wrapping_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_add_unsigned(rhs.x), self.y.wrapping_add_unsigned(rhs.y), ..]`."
    },
    "glam::IVec3::wrapping_div": {
      "namespace": "glam::IVec3",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::IVec3::wrapping_mul": {
      "namespace": "glam::IVec3",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::IVec3::wrapping_sub": {
      "namespace": "glam::IVec3",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::IVec3::wrapping_sub_unsigned": {
      "namespace": "glam::IVec3",
      "identifier": "wrapping_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_sub_unsigned(rhs.x), self.y.wrapping_sub_unsigned(rhs.y), ..]`."
    },
    "glam::IVec4::abs": {
      "namespace": "glam::IVec4",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::IVec4::add": {
      "namespace": "glam::IVec4",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::add-1": {
      "namespace": "glam::IVec4",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          }
        },
        {
          "kind": {
            "val": "glam::IVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::add-2": {
      "namespace": "glam::IVec4",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          }
        },
        {
          "kind": {
            "primitive": "i32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::as_dvec4": {
      "namespace": "glam::IVec4",
      "identifier": "as_dvec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::IVec4::as_i64vec4": {
      "namespace": "glam::IVec4",
      "identifier": "as_i64vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::IVec4::as_u64vec4": {
      "namespace": "glam::IVec4",
      "identifier": "as_u64vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::IVec4::as_uvec4": {
      "namespace": "glam::IVec4",
      "identifier": "as_uvec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::IVec4::as_vec4": {
      "namespace": "glam::IVec4",
      "identifier": "as_vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::IVec4::assert_receiver_is_total_eq": {
      "namespace": "glam::IVec4",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::IVec4::clamp": {
      "namespace": "glam::IVec4",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`i32::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::IVec4::clone": {
      "namespace": "glam::IVec4",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::cmpeq": {
      "namespace": "glam::IVec4",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::IVec4::cmpge": {
      "namespace": "glam::IVec4",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::IVec4::cmpgt": {
      "namespace": "glam::IVec4",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::IVec4::cmple": {
      "namespace": "glam::IVec4",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::IVec4::cmplt": {
      "namespace": "glam::IVec4",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::IVec4::cmpne": {
      "namespace": "glam::IVec4",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::IVec4::distance_squared": {
      "namespace": "glam::IVec4",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::IVec4::div": {
      "namespace": "glam::IVec4",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::div-1": {
      "namespace": "glam::IVec4",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          }
        },
        {
          "kind": {
            "val": "glam::IVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::div-2": {
      "namespace": "glam::IVec4",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          }
        },
        {
          "kind": {
            "primitive": "i32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::div_euclid": {
      "namespace": "glam::IVec4",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow."
    },
    "glam::IVec4::dot": {
      "namespace": "glam::IVec4",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::IVec4::dot_into_vec": {
      "namespace": "glam::IVec4",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::IVec4::element_product": {
      "namespace": "glam::IVec4",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::IVec4::element_sum": {
      "namespace": "glam::IVec4",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::IVec4::eq": {
      "namespace": "glam::IVec4",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::IVec4::from_array": {
      "namespace": "glam::IVec4",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "i32"
              },
              4
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::IVec4::is_negative_bitmask": {
      "namespace": "glam::IVec4",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 4 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::IVec4::length_squared": {
      "namespace": "glam::IVec4",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::IVec4::max": {
      "namespace": "glam::IVec4",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::IVec4::max_element": {
      "namespace": "glam::IVec4",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::IVec4::min": {
      "namespace": "glam::IVec4",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::IVec4::min_element": {
      "namespace": "glam::IVec4",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "i32"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::IVec4::mul": {
      "namespace": "glam::IVec4",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::mul-1": {
      "namespace": "glam::IVec4",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          }
        },
        {
          "kind": {
            "val": "glam::IVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::mul-2": {
      "namespace": "glam::IVec4",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          }
        },
        {
          "kind": {
            "primitive": "i32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::neg": {
      "namespace": "glam::IVec4",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::new": {
      "namespace": "glam::IVec4",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "z"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::IVec4::rem": {
      "namespace": "glam::IVec4",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::rem-1": {
      "namespace": "glam::IVec4",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          }
        },
        {
          "kind": {
            "val": "glam::IVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::rem-2": {
      "namespace": "glam::IVec4",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          }
        },
        {
          "kind": {
            "primitive": "i32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::rem_euclid": {
      "namespace": "glam::IVec4",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n # Panics\n This function will panic if any `rhs` element is 0 or the division results in overflow.\n [Euclidean division]: i32::rem_euclid"
    },
    "glam::IVec4::saturating_add": {
      "namespace": "glam::IVec4",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::IVec4::saturating_add_unsigned": {
      "namespace": "glam::IVec4",
      "identifier": "saturating_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " In other words this computes `[self.x.saturating_add_unsigned(rhs.x), self.y.saturating_add_unsigned(rhs.y), ..]`."
    },
    "glam::IVec4::saturating_div": {
      "namespace": "glam::IVec4",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::IVec4::saturating_mul": {
      "namespace": "glam::IVec4",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::IVec4::saturating_sub": {
      "namespace": "glam::IVec4",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::IVec4::saturating_sub_unsigned": {
      "namespace": "glam::IVec4",
      "identifier": "saturating_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.saturating_sub_unsigned(rhs.x), self.y.saturating_sub_unsigned(rhs.y), ..]`."
    },
    "glam::IVec4::select": {
      "namespace": "glam::IVec4",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec4"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::IVec4::signum": {
      "namespace": "glam::IVec4",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n  - `0` if the number is zero\n  - `1` if the number is positive\n  - `-1` if the number is negative"
    },
    "glam::IVec4::splat": {
      "namespace": "glam::IVec4",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::IVec4::sub": {
      "namespace": "glam::IVec4",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::sub-1": {
      "namespace": "glam::IVec4",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          }
        },
        {
          "kind": {
            "val": "glam::IVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::sub-2": {
      "namespace": "glam::IVec4",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          }
        },
        {
          "kind": {
            "primitive": "i32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      }
    },
    "glam::IVec4::to_array": {
      "namespace": "glam::IVec4",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "i32"
            },
            4
          ]
        }
      },
      "documentation": " `[x, y, z, w]`"
    },
    "glam::IVec4::truncate": {
      "namespace": "glam::IVec4",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Creates a 3D vector from the `x`, `y` and `z` elements of `self`, discarding `w`.\n Truncation to [`IVec3`] may also be performed by using [`self.xyz()`][crate::swizzles::Vec4Swizzles::xyz()]."
    },
    "glam::IVec4::with_w": {
      "namespace": "glam::IVec4",
      "identifier": "with_w",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `w`."
    },
    "glam::IVec4::with_x": {
      "namespace": "glam::IVec4",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `x`."
    },
    "glam::IVec4::with_y": {
      "namespace": "glam::IVec4",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `y`."
    },
    "glam::IVec4::with_z": {
      "namespace": "glam::IVec4",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "i32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `z`."
    },
    "glam::IVec4::wrapping_add": {
      "namespace": "glam::IVec4",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::IVec4::wrapping_add_unsigned": {
      "namespace": "glam::IVec4",
      "identifier": "wrapping_add_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_add_unsigned(rhs.x), self.y.wrapping_add_unsigned(rhs.y), ..]`."
    },
    "glam::IVec4::wrapping_div": {
      "namespace": "glam::IVec4",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::IVec4::wrapping_mul": {
      "namespace": "glam::IVec4",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::IVec4::wrapping_sub": {
      "namespace": "glam::IVec4",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::IVec4::wrapping_sub_unsigned": {
      "namespace": "glam::IVec4",
      "identifier": "wrapping_sub_unsigned",
      "arguments": [
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and unsigned vector `rhs`.\n In other words this computes `[self.x.wrapping_sub_unsigned(rhs.x), self.y.wrapping_sub_unsigned(rhs.y), ..]`."
    },
    "glam::Mat2::abs": {
      "namespace": "glam::Mat2",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Takes the absolute value of each element in `self`"
    },
    "glam::Mat2::abs_diff_eq": {
      "namespace": "glam::Mat2",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Mat2"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs`\n is less than or equal to `max_abs_diff`.\n This can be used to compare if two matrices contain similar elements. It works best\n when comparing with a known value. The `max_abs_diff` that should be used used\n depends on the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::Mat2::add": {
      "namespace": "glam::Mat2",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Mat2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      }
    },
    "glam::Mat2::add_mat2": {
      "namespace": "glam::Mat2",
      "identifier": "add_mat2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Adds two 2x2 matrices."
    },
    "glam::Mat2::as_dmat2": {
      "namespace": "glam::Mat2",
      "identifier": "as_dmat2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat2"
        }
      }
    },
    "glam::Mat2::clone": {
      "namespace": "glam::Mat2",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      }
    },
    "glam::Mat2::col": {
      "namespace": "glam::Mat2",
      "identifier": "col",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns the matrix column for the given `index`.\n # Panics\n Panics if `index` is greater than 1."
    },
    "glam::Mat2::determinant": {
      "namespace": "glam::Mat2",
      "identifier": "determinant",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the determinant of `self`."
    },
    "glam::Mat2::div": {
      "namespace": "glam::Mat2",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      }
    },
    "glam::Mat2::div_scalar": {
      "namespace": "glam::Mat2",
      "identifier": "div_scalar",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Divides a 2x2 matrix by a scalar."
    },
    "glam::Mat2::eq": {
      "namespace": "glam::Mat2",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::Mat2::from_angle": {
      "namespace": "glam::Mat2",
      "identifier": "from_angle",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Creates a 2x2 matrix containing a rotation of `angle` (in radians)."
    },
    "glam::Mat2::from_cols": {
      "namespace": "glam::Mat2",
      "identifier": "from_cols",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "x_axis"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "y_axis"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Creates a 2x2 matrix from two column vectors."
    },
    "glam::Mat2::from_diagonal": {
      "namespace": "glam::Mat2",
      "identifier": "from_diagonal",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "diagonal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Creates a 2x2 matrix with its diagonal set to `diagonal` and all other entries set to 0."
    },
    "glam::Mat2::from_mat3": {
      "namespace": "glam::Mat2",
      "identifier": "from_mat3",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Creates a 2x2 matrix from a 3x3 matrix, discarding the 2nd row and column."
    },
    "glam::Mat2::from_mat3_minor": {
      "namespace": "glam::Mat2",
      "identifier": "from_mat3_minor",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3"
          },
          "name": "m"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "i"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "j"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Creates a 2x2 matrix from the minor of the given 3x3 matrix, discarding the `i`th column\n and `j`th row.\n # Panics\n Panics if `i` or `j` is greater than 2."
    },
    "glam::Mat2::from_mat3a": {
      "namespace": "glam::Mat2",
      "identifier": "from_mat3a",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3A"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Creates a 2x2 matrix from a 3x3 matrix, discarding the 2nd row and column."
    },
    "glam::Mat2::from_mat3a_minor": {
      "namespace": "glam::Mat2",
      "identifier": "from_mat3a_minor",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3A"
          },
          "name": "m"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "i"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "j"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Creates a 2x2 matrix from the minor of the given 3x3 matrix, discarding the `i`th column\n and `j`th row.\n # Panics\n Panics if `i` or `j` is greater than 2."
    },
    "glam::Mat2::from_scale_angle": {
      "namespace": "glam::Mat2",
      "identifier": "from_scale_angle",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "scale"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Creates a 2x2 matrix containing the combining non-uniform `scale` and rotation of\n `angle` (in radians)."
    },
    "glam::Mat2::inverse": {
      "namespace": "glam::Mat2",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Returns the inverse of `self`.\n If the matrix is not invertible the returned matrix will be invalid.\n # Panics\n Will panic if the determinant of `self` is zero when `glam_assert` is enabled."
    },
    "glam::Mat2::is_finite": {
      "namespace": "glam::Mat2",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.\n If any element is either `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::Mat2::is_nan": {
      "namespace": "glam::Mat2",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::Mat2::mul": {
      "namespace": "glam::Mat2",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Mat2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      }
    },
    "glam::Mat2::mul-1": {
      "namespace": "glam::Mat2",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat2"
          }
        },
        {
          "kind": {
            "val": "glam::Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Mat2::mul-2": {
      "namespace": "glam::Mat2",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat2"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      }
    },
    "glam::Mat2::mul_mat2": {
      "namespace": "glam::Mat2",
      "identifier": "mul_mat2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Multiplies two 2x2 matrices."
    },
    "glam::Mat2::mul_scalar": {
      "namespace": "glam::Mat2",
      "identifier": "mul_scalar",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Multiplies a 2x2 matrix by a scalar."
    },
    "glam::Mat2::mul_vec2": {
      "namespace": "glam::Mat2",
      "identifier": "mul_vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Transforms a 2D vector."
    },
    "glam::Mat2::neg": {
      "namespace": "glam::Mat2",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      }
    },
    "glam::Mat2::row": {
      "namespace": "glam::Mat2",
      "identifier": "row",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns the matrix row for the given `index`.\n # Panics\n Panics if `index` is greater than 1."
    },
    "glam::Mat2::sub": {
      "namespace": "glam::Mat2",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Mat2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      }
    },
    "glam::Mat2::sub_mat2": {
      "namespace": "glam::Mat2",
      "identifier": "sub_mat2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Subtracts two 2x2 matrices."
    },
    "glam::Mat2::to_cols_array": {
      "namespace": "glam::Mat2",
      "identifier": "to_cols_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f32"
            },
            4
          ]
        }
      },
      "documentation": " Creates a `[f32; 4]` array storing data in column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::Mat2::to_cols_array_2d": {
      "namespace": "glam::Mat2",
      "identifier": "to_cols_array_2d",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "array": [
                {
                  "primitive": "f32"
                },
                2
              ]
            },
            2
          ]
        }
      },
      "documentation": " Creates a `[[f32; 2]; 2]` 2D array storing data in column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::Mat2::transpose": {
      "namespace": "glam::Mat2",
      "identifier": "transpose",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat2"
        }
      },
      "documentation": " Returns the transpose of `self`."
    },
    "glam::Mat3::abs": {
      "namespace": "glam::Mat3",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Takes the absolute value of each element in `self`"
    },
    "glam::Mat3::abs_diff_eq": {
      "namespace": "glam::Mat3",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Mat3"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs`\n is less than or equal to `max_abs_diff`.\n This can be used to compare if two matrices contain similar elements. It works best\n when comparing with a known value. The `max_abs_diff` that should be used used\n depends on the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::Mat3::add": {
      "namespace": "glam::Mat3",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Mat3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      }
    },
    "glam::Mat3::add_mat3": {
      "namespace": "glam::Mat3",
      "identifier": "add_mat3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Adds two 3x3 matrices."
    },
    "glam::Mat3::as_dmat3": {
      "namespace": "glam::Mat3",
      "identifier": "as_dmat3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      }
    },
    "glam::Mat3::clone": {
      "namespace": "glam::Mat3",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      }
    },
    "glam::Mat3::col": {
      "namespace": "glam::Mat3",
      "identifier": "col",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns the matrix column for the given `index`.\n # Panics\n Panics if `index` is greater than 2."
    },
    "glam::Mat3::determinant": {
      "namespace": "glam::Mat3",
      "identifier": "determinant",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the determinant of `self`."
    },
    "glam::Mat3::div": {
      "namespace": "glam::Mat3",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      }
    },
    "glam::Mat3::div_scalar": {
      "namespace": "glam::Mat3",
      "identifier": "div_scalar",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Divides a 3x3 matrix by a scalar."
    },
    "glam::Mat3::eq": {
      "namespace": "glam::Mat3",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::Mat3::from_angle": {
      "namespace": "glam::Mat3",
      "identifier": "from_angle",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 2D rotation `angle` (in\n radians).\n The resulting matrix can be used to transform 2D points and vectors. See\n [`Self::transform_point2()`] and [`Self::transform_vector2()`]."
    },
    "glam::Mat3::from_axis_angle": {
      "namespace": "glam::Mat3",
      "identifier": "from_axis_angle",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "axis"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Creates a 3D rotation matrix from a normalized rotation `axis` and `angle` (in\n radians).\n # Panics\n Will panic if `axis` is not normalized when `glam_assert` is enabled."
    },
    "glam::Mat3::from_cols": {
      "namespace": "glam::Mat3",
      "identifier": "from_cols",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "x_axis"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "y_axis"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "z_axis"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Creates a 3x3 matrix from three column vectors."
    },
    "glam::Mat3::from_diagonal": {
      "namespace": "glam::Mat3",
      "identifier": "from_diagonal",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "diagonal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Creates a 3x3 matrix with its diagonal set to `diagonal` and all other entries set to 0."
    },
    "glam::Mat3::from_euler": {
      "namespace": "glam::Mat3",
      "identifier": "from_euler",
      "arguments": [
        {
          "kind": {
            "val": "glam::EulerRot"
          },
          "name": "order"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "a"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "b"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "c"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Creates a 3D rotation matrix from the given euler rotation sequence and the angles (in\n radians)."
    },
    "glam::Mat3::from_mat2": {
      "namespace": "glam::Mat3",
      "identifier": "from_mat2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat2"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 2x2 matrix.\n The resulting matrix can be used to transform 2D points and vectors. See\n [`Self::transform_point2()`] and [`Self::transform_vector2()`]."
    },
    "glam::Mat3::from_mat4": {
      "namespace": "glam::Mat3",
      "identifier": "from_mat4",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat4"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th row and column."
    },
    "glam::Mat3::from_mat4_minor": {
      "namespace": "glam::Mat3",
      "identifier": "from_mat4_minor",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat4"
          },
          "name": "m"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "i"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "j"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Creates a 3x3 matrix from the minor of the given 4x4 matrix, discarding the `i`th column\n and `j`th row.\n # Panics\n Panics if `i` or `j` is greater than 3."
    },
    "glam::Mat3::from_quat": {
      "namespace": "glam::Mat3",
      "identifier": "from_quat",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Creates a 3D rotation matrix from the given quaternion.\n # Panics\n Will panic if `rotation` is not normalized when `glam_assert` is enabled."
    },
    "glam::Mat3::from_rotation_x": {
      "namespace": "glam::Mat3",
      "identifier": "from_rotation_x",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Creates a 3D rotation matrix from `angle` (in radians) around the x axis."
    },
    "glam::Mat3::from_rotation_y": {
      "namespace": "glam::Mat3",
      "identifier": "from_rotation_y",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Creates a 3D rotation matrix from `angle` (in radians) around the y axis."
    },
    "glam::Mat3::from_rotation_z": {
      "namespace": "glam::Mat3",
      "identifier": "from_rotation_z",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Creates a 3D rotation matrix from `angle` (in radians) around the z axis."
    },
    "glam::Mat3::from_scale": {
      "namespace": "glam::Mat3",
      "identifier": "from_scale",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "scale"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given non-uniform 2D `scale`.\n The resulting matrix can be used to transform 2D points and vectors. See\n [`Self::transform_point2()`] and [`Self::transform_vector2()`].\n # Panics\n Will panic if all elements of `scale` are zero when `glam_assert` is enabled."
    },
    "glam::Mat3::from_scale_angle_translation": {
      "namespace": "glam::Mat3",
      "identifier": "from_scale_angle_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "scale"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 2D `scale`, rotation `angle` (in\n radians) and `translation`.\n The resulting matrix can be used to transform 2D points and vectors. See\n [`Self::transform_point2()`] and [`Self::transform_vector2()`]."
    },
    "glam::Mat3::from_translation": {
      "namespace": "glam::Mat3",
      "identifier": "from_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 2D `translation`.\n The resulting matrix can be used to transform 2D points and vectors. See\n [`Self::transform_point2()`] and [`Self::transform_vector2()`]."
    },
    "glam::Mat3::inverse": {
      "namespace": "glam::Mat3",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Returns the inverse of `self`.\n If the matrix is not invertible the returned matrix will be invalid.\n # Panics\n Will panic if the determinant of `self` is zero when `glam_assert` is enabled."
    },
    "glam::Mat3::is_finite": {
      "namespace": "glam::Mat3",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.\n If any element is either `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::Mat3::is_nan": {
      "namespace": "glam::Mat3",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::Mat3::mul": {
      "namespace": "glam::Mat3",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Affine2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      }
    },
    "glam::Mat3::mul-1": {
      "namespace": "glam::Mat3",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3"
          }
        },
        {
          "kind": {
            "val": "glam::Mat3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      }
    },
    "glam::Mat3::mul-2": {
      "namespace": "glam::Mat3",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Mat3::mul-3": {
      "namespace": "glam::Mat3",
      "identifier": "mul-3",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Mat3::mul-4": {
      "namespace": "glam::Mat3",
      "identifier": "mul-4",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      }
    },
    "glam::Mat3::mul_mat3": {
      "namespace": "glam::Mat3",
      "identifier": "mul_mat3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Multiplies two 3x3 matrices."
    },
    "glam::Mat3::mul_scalar": {
      "namespace": "glam::Mat3",
      "identifier": "mul_scalar",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Multiplies a 3x3 matrix by a scalar."
    },
    "glam::Mat3::mul_vec3": {
      "namespace": "glam::Mat3",
      "identifier": "mul_vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Transforms a 3D vector."
    },
    "glam::Mat3::mul_vec3a": {
      "namespace": "glam::Mat3",
      "identifier": "mul_vec3a",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Transforms a [`Vec3A`]."
    },
    "glam::Mat3::neg": {
      "namespace": "glam::Mat3",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      }
    },
    "glam::Mat3::row": {
      "namespace": "glam::Mat3",
      "identifier": "row",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns the matrix row for the given `index`.\n # Panics\n Panics if `index` is greater than 2."
    },
    "glam::Mat3::sub": {
      "namespace": "glam::Mat3",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Mat3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      }
    },
    "glam::Mat3::sub_mat3": {
      "namespace": "glam::Mat3",
      "identifier": "sub_mat3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Subtracts two 3x3 matrices."
    },
    "glam::Mat3::to_cols_array": {
      "namespace": "glam::Mat3",
      "identifier": "to_cols_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f32"
            },
            9
          ]
        }
      },
      "documentation": " Creates a `[f32; 9]` array storing data in column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::Mat3::to_cols_array_2d": {
      "namespace": "glam::Mat3",
      "identifier": "to_cols_array_2d",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "array": [
                {
                  "primitive": "f32"
                },
                3
              ]
            },
            3
          ]
        }
      },
      "documentation": " Creates a `[[f32; 3]; 3]` 3D array storing data in column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::Mat3::to_euler": {
      "namespace": "glam::Mat3",
      "identifier": "to_euler",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::EulerRot"
          },
          "name": "order"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": [
            {
              "primitive": "f32"
            },
            {
              "primitive": "f32"
            },
            {
              "primitive": "f32"
            }
          ]
        }
      },
      "documentation": " Extract Euler angles with the given Euler rotation order.\n Note if the input matrix contains scales, shears, or other non-rotation transformations then\n the resulting Euler angles will be ill-defined.\n # Panics\n Will panic if any input matrix column is not normalized when `glam_assert` is enabled."
    },
    "glam::Mat3::transform_point2": {
      "namespace": "glam::Mat3",
      "identifier": "transform_point2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Transforms the given 2D vector as a point.\n This is the equivalent of multiplying `rhs` as a 3D vector where `z` is `1`.\n This method assumes that `self` contains a valid affine transform.\n # Panics\n Will panic if the 2nd row of `self` is not `(0, 0, 1)` when `glam_assert` is enabled."
    },
    "glam::Mat3::transform_vector2": {
      "namespace": "glam::Mat3",
      "identifier": "transform_vector2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Rotates the given 2D vector.\n This is the equivalent of multiplying `rhs` as a 3D vector where `z` is `0`.\n This method assumes that `self` contains a valid affine transform.\n # Panics\n Will panic if the 2nd row of `self` is not `(0, 0, 1)` when `glam_assert` is enabled."
    },
    "glam::Mat3::transpose": {
      "namespace": "glam::Mat3",
      "identifier": "transpose",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3"
        }
      },
      "documentation": " Returns the transpose of `self`."
    },
    "glam::Mat3A::abs": {
      "namespace": "glam::Mat3A",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Takes the absolute value of each element in `self`"
    },
    "glam::Mat3A::abs_diff_eq": {
      "namespace": "glam::Mat3A",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Mat3A"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs`\n is less than or equal to `max_abs_diff`.\n This can be used to compare if two matrices contain similar elements. It works best\n when comparing with a known value. The `max_abs_diff` that should be used used\n depends on the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::Mat3A::add": {
      "namespace": "glam::Mat3A",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Mat3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      }
    },
    "glam::Mat3A::add_mat3": {
      "namespace": "glam::Mat3A",
      "identifier": "add_mat3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Adds two 3x3 matrices."
    },
    "glam::Mat3A::as_dmat3": {
      "namespace": "glam::Mat3A",
      "identifier": "as_dmat3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat3"
        }
      }
    },
    "glam::Mat3A::clone": {
      "namespace": "glam::Mat3A",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      }
    },
    "glam::Mat3A::col": {
      "namespace": "glam::Mat3A",
      "identifier": "col",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns the matrix column for the given `index`.\n # Panics\n Panics if `index` is greater than 2."
    },
    "glam::Mat3A::determinant": {
      "namespace": "glam::Mat3A",
      "identifier": "determinant",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the determinant of `self`."
    },
    "glam::Mat3A::div": {
      "namespace": "glam::Mat3A",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      }
    },
    "glam::Mat3A::div_scalar": {
      "namespace": "glam::Mat3A",
      "identifier": "div_scalar",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Divides a 3x3 matrix by a scalar."
    },
    "glam::Mat3A::eq": {
      "namespace": "glam::Mat3A",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::Mat3A::from_angle": {
      "namespace": "glam::Mat3A",
      "identifier": "from_angle",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 2D rotation `angle` (in\n radians).\n The resulting matrix can be used to transform 2D points and vectors. See\n [`Self::transform_point2()`] and [`Self::transform_vector2()`]."
    },
    "glam::Mat3A::from_axis_angle": {
      "namespace": "glam::Mat3A",
      "identifier": "from_axis_angle",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "axis"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Creates a 3D rotation matrix from a normalized rotation `axis` and `angle` (in\n radians).\n # Panics\n Will panic if `axis` is not normalized when `glam_assert` is enabled."
    },
    "glam::Mat3A::from_cols": {
      "namespace": "glam::Mat3A",
      "identifier": "from_cols",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "x_axis"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "y_axis"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "z_axis"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Creates a 3x3 matrix from three column vectors."
    },
    "glam::Mat3A::from_diagonal": {
      "namespace": "glam::Mat3A",
      "identifier": "from_diagonal",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "diagonal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Creates a 3x3 matrix with its diagonal set to `diagonal` and all other entries set to 0."
    },
    "glam::Mat3A::from_euler": {
      "namespace": "glam::Mat3A",
      "identifier": "from_euler",
      "arguments": [
        {
          "kind": {
            "val": "glam::EulerRot"
          },
          "name": "order"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "a"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "b"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "c"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Creates a 3D rotation matrix from the given euler rotation sequence and the angles (in\n radians)."
    },
    "glam::Mat3A::from_mat2": {
      "namespace": "glam::Mat3A",
      "identifier": "from_mat2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat2"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 2x2 matrix.\n The resulting matrix can be used to transform 2D points and vectors. See\n [`Self::transform_point2()`] and [`Self::transform_vector2()`]."
    },
    "glam::Mat3A::from_mat4": {
      "namespace": "glam::Mat3A",
      "identifier": "from_mat4",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat4"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Creates a 3x3 matrix from a 4x4 matrix, discarding the 4th row and column."
    },
    "glam::Mat3A::from_mat4_minor": {
      "namespace": "glam::Mat3A",
      "identifier": "from_mat4_minor",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat4"
          },
          "name": "m"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "i"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "j"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Creates a 3x3 matrix from the minor of the given 4x4 matrix, discarding the `i`th column\n and `j`th row.\n # Panics\n Panics if `i` or `j` is greater than 3."
    },
    "glam::Mat3A::from_quat": {
      "namespace": "glam::Mat3A",
      "identifier": "from_quat",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Creates a 3D rotation matrix from the given quaternion.\n # Panics\n Will panic if `rotation` is not normalized when `glam_assert` is enabled."
    },
    "glam::Mat3A::from_rotation_x": {
      "namespace": "glam::Mat3A",
      "identifier": "from_rotation_x",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Creates a 3D rotation matrix from `angle` (in radians) around the x axis."
    },
    "glam::Mat3A::from_rotation_y": {
      "namespace": "glam::Mat3A",
      "identifier": "from_rotation_y",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Creates a 3D rotation matrix from `angle` (in radians) around the y axis."
    },
    "glam::Mat3A::from_rotation_z": {
      "namespace": "glam::Mat3A",
      "identifier": "from_rotation_z",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Creates a 3D rotation matrix from `angle` (in radians) around the z axis."
    },
    "glam::Mat3A::from_scale": {
      "namespace": "glam::Mat3A",
      "identifier": "from_scale",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "scale"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given non-uniform 2D `scale`.\n The resulting matrix can be used to transform 2D points and vectors. See\n [`Self::transform_point2()`] and [`Self::transform_vector2()`].\n # Panics\n Will panic if all elements of `scale` are zero when `glam_assert` is enabled."
    },
    "glam::Mat3A::from_scale_angle_translation": {
      "namespace": "glam::Mat3A",
      "identifier": "from_scale_angle_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "scale"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 2D `scale`, rotation `angle` (in\n radians) and `translation`.\n The resulting matrix can be used to transform 2D points and vectors. See\n [`Self::transform_point2()`] and [`Self::transform_vector2()`]."
    },
    "glam::Mat3A::from_translation": {
      "namespace": "glam::Mat3A",
      "identifier": "from_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 2D `translation`.\n The resulting matrix can be used to transform 2D points and vectors. See\n [`Self::transform_point2()`] and [`Self::transform_vector2()`]."
    },
    "glam::Mat3A::inverse": {
      "namespace": "glam::Mat3A",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Returns the inverse of `self`.\n If the matrix is not invertible the returned matrix will be invalid.\n # Panics\n Will panic if the determinant of `self` is zero when `glam_assert` is enabled."
    },
    "glam::Mat3A::is_finite": {
      "namespace": "glam::Mat3A",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.\n If any element is either `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::Mat3A::is_nan": {
      "namespace": "glam::Mat3A",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::Mat3A::mul": {
      "namespace": "glam::Mat3A",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Affine2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      }
    },
    "glam::Mat3A::mul-1": {
      "namespace": "glam::Mat3A",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3A"
          }
        },
        {
          "kind": {
            "val": "glam::Mat3A"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      }
    },
    "glam::Mat3A::mul-2": {
      "namespace": "glam::Mat3A",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3A"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Mat3A::mul-3": {
      "namespace": "glam::Mat3A",
      "identifier": "mul-3",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3A"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Mat3A::mul-4": {
      "namespace": "glam::Mat3A",
      "identifier": "mul-4",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3A"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      }
    },
    "glam::Mat3A::mul_mat3": {
      "namespace": "glam::Mat3A",
      "identifier": "mul_mat3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Multiplies two 3x3 matrices."
    },
    "glam::Mat3A::mul_scalar": {
      "namespace": "glam::Mat3A",
      "identifier": "mul_scalar",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Multiplies a 3x3 matrix by a scalar."
    },
    "glam::Mat3A::mul_vec3": {
      "namespace": "glam::Mat3A",
      "identifier": "mul_vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Transforms a 3D vector."
    },
    "glam::Mat3A::mul_vec3a": {
      "namespace": "glam::Mat3A",
      "identifier": "mul_vec3a",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Transforms a [`Vec3A`]."
    },
    "glam::Mat3A::neg": {
      "namespace": "glam::Mat3A",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      }
    },
    "glam::Mat3A::row": {
      "namespace": "glam::Mat3A",
      "identifier": "row",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns the matrix row for the given `index`.\n # Panics\n Panics if `index` is greater than 2."
    },
    "glam::Mat3A::sub": {
      "namespace": "glam::Mat3A",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Mat3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      }
    },
    "glam::Mat3A::sub_mat3": {
      "namespace": "glam::Mat3A",
      "identifier": "sub_mat3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Subtracts two 3x3 matrices."
    },
    "glam::Mat3A::to_cols_array": {
      "namespace": "glam::Mat3A",
      "identifier": "to_cols_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f32"
            },
            9
          ]
        }
      },
      "documentation": " Creates a `[f32; 9]` array storing data in column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::Mat3A::to_cols_array_2d": {
      "namespace": "glam::Mat3A",
      "identifier": "to_cols_array_2d",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "array": [
                {
                  "primitive": "f32"
                },
                3
              ]
            },
            3
          ]
        }
      },
      "documentation": " Creates a `[[f32; 3]; 3]` 3D array storing data in column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::Mat3A::to_euler": {
      "namespace": "glam::Mat3A",
      "identifier": "to_euler",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::EulerRot"
          },
          "name": "order"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": [
            {
              "primitive": "f32"
            },
            {
              "primitive": "f32"
            },
            {
              "primitive": "f32"
            }
          ]
        }
      },
      "documentation": " Extract Euler angles with the given Euler rotation order.\n Note if the input matrix contains scales, shears, or other non-rotation transformations then\n the resulting Euler angles will be ill-defined.\n # Panics\n Will panic if any input matrix column is not normalized when `glam_assert` is enabled."
    },
    "glam::Mat3A::transform_point2": {
      "namespace": "glam::Mat3A",
      "identifier": "transform_point2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Transforms the given 2D vector as a point.\n This is the equivalent of multiplying `rhs` as a 3D vector where `z` is `1`.\n This method assumes that `self` contains a valid affine transform.\n # Panics\n Will panic if the 2nd row of `self` is not `(0, 0, 1)` when `glam_assert` is enabled."
    },
    "glam::Mat3A::transform_vector2": {
      "namespace": "glam::Mat3A",
      "identifier": "transform_vector2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Rotates the given 2D vector.\n This is the equivalent of multiplying `rhs` as a 3D vector where `z` is `0`.\n This method assumes that `self` contains a valid affine transform.\n # Panics\n Will panic if the 2nd row of `self` is not `(0, 0, 1)` when `glam_assert` is enabled."
    },
    "glam::Mat3A::transpose": {
      "namespace": "glam::Mat3A",
      "identifier": "transpose",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat3A"
        }
      },
      "documentation": " Returns the transpose of `self`."
    },
    "glam::Mat4::abs": {
      "namespace": "glam::Mat4",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Takes the absolute value of each element in `self`"
    },
    "glam::Mat4::abs_diff_eq": {
      "namespace": "glam::Mat4",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Mat4"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs`\n is less than or equal to `max_abs_diff`.\n This can be used to compare if two matrices contain similar elements. It works best\n when comparing with a known value. The `max_abs_diff` that should be used used\n depends on the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::Mat4::add": {
      "namespace": "glam::Mat4",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Mat4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      }
    },
    "glam::Mat4::add_mat4": {
      "namespace": "glam::Mat4",
      "identifier": "add_mat4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Adds two 4x4 matrices."
    },
    "glam::Mat4::as_dmat4": {
      "namespace": "glam::Mat4",
      "identifier": "as_dmat4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DMat4"
        }
      }
    },
    "glam::Mat4::clone": {
      "namespace": "glam::Mat4",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      }
    },
    "glam::Mat4::col": {
      "namespace": "glam::Mat4",
      "identifier": "col",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns the matrix column for the given `index`.\n # Panics\n Panics if `index` is greater than 3."
    },
    "glam::Mat4::determinant": {
      "namespace": "glam::Mat4",
      "identifier": "determinant",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the determinant of `self`."
    },
    "glam::Mat4::div": {
      "namespace": "glam::Mat4",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      }
    },
    "glam::Mat4::div_scalar": {
      "namespace": "glam::Mat4",
      "identifier": "div_scalar",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Divides a 4x4 matrix by a scalar."
    },
    "glam::Mat4::eq": {
      "namespace": "glam::Mat4",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::Mat4::from_axis_angle": {
      "namespace": "glam::Mat4",
      "identifier": "from_axis_angle",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "axis"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates an affine transformation matrix containing a 3D rotation around a normalized\n rotation `axis` of `angle` (in radians).\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`].\n # Panics\n Will panic if `axis` is not normalized when `glam_assert` is enabled."
    },
    "glam::Mat4::from_cols": {
      "namespace": "glam::Mat4",
      "identifier": "from_cols",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "x_axis"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "y_axis"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "z_axis"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "w_axis"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates a 4x4 matrix from four column vectors."
    },
    "glam::Mat4::from_diagonal": {
      "namespace": "glam::Mat4",
      "identifier": "from_diagonal",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "diagonal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates a 4x4 matrix with its diagonal set to `diagonal` and all other entries set to 0."
    },
    "glam::Mat4::from_euler": {
      "namespace": "glam::Mat4",
      "identifier": "from_euler",
      "arguments": [
        {
          "kind": {
            "val": "glam::EulerRot"
          },
          "name": "order"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "a"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "b"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "c"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates a affine transformation matrix containing a rotation from the given euler\n rotation sequence and angles (in radians).\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`]."
    },
    "glam::Mat4::from_mat3": {
      "namespace": "glam::Mat4",
      "identifier": "from_mat3",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 3x3 linear transformation\n matrix.\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`]."
    },
    "glam::Mat4::from_mat3a": {
      "namespace": "glam::Mat4",
      "identifier": "from_mat3a",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat3A"
          },
          "name": "m"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 3x3 linear transformation\n matrix.\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`]."
    },
    "glam::Mat4::from_quat": {
      "namespace": "glam::Mat4",
      "identifier": "from_quat",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given `rotation` quaternion.\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`].\n # Panics\n Will panic if `rotation` is not normalized when `glam_assert` is enabled."
    },
    "glam::Mat4::from_rotation_translation": {
      "namespace": "glam::Mat4",
      "identifier": "from_rotation_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 3D `translation`.\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`].\n # Panics\n Will panic if `rotation` is not normalized when `glam_assert` is enabled."
    },
    "glam::Mat4::from_rotation_x": {
      "namespace": "glam::Mat4",
      "identifier": "from_rotation_x",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates an affine transformation matrix containing a 3D rotation around the x axis of\n `angle` (in radians).\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`]."
    },
    "glam::Mat4::from_rotation_y": {
      "namespace": "glam::Mat4",
      "identifier": "from_rotation_y",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates an affine transformation matrix containing a 3D rotation around the y axis of\n `angle` (in radians).\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`]."
    },
    "glam::Mat4::from_rotation_z": {
      "namespace": "glam::Mat4",
      "identifier": "from_rotation_z",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates an affine transformation matrix containing a 3D rotation around the z axis of\n `angle` (in radians).\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`]."
    },
    "glam::Mat4::from_scale": {
      "namespace": "glam::Mat4",
      "identifier": "from_scale",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "scale"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates an affine transformation matrix containing the given 3D non-uniform `scale`.\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`].\n # Panics\n Will panic if all elements of `scale` are zero when `glam_assert` is enabled."
    },
    "glam::Mat4::from_scale_rotation_translation": {
      "namespace": "glam::Mat4",
      "identifier": "from_scale_rotation_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "scale"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rotation"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 3D `scale`, `rotation` and\n `translation`.\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`].\n # Panics\n Will panic if `rotation` is not normalized when `glam_assert` is enabled."
    },
    "glam::Mat4::from_translation": {
      "namespace": "glam::Mat4",
      "identifier": "from_translation",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "translation"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates an affine transformation matrix from the given 3D `translation`.\n The resulting matrix can be used to transform 3D points and vectors. See\n [`Self::transform_point3()`] and [`Self::transform_vector3()`]."
    },
    "glam::Mat4::inverse": {
      "namespace": "glam::Mat4",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Returns the inverse of `self`.\n If the matrix is not invertible the returned matrix will be invalid.\n # Panics\n Will panic if the determinant of `self` is zero when `glam_assert` is enabled."
    },
    "glam::Mat4::is_finite": {
      "namespace": "glam::Mat4",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.\n If any element is either `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::Mat4::is_nan": {
      "namespace": "glam::Mat4",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::Mat4::look_at_lh": {
      "namespace": "glam::Mat4",
      "identifier": "look_at_lh",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "center"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates a left-handed view matrix using a camera position, an up direction, and a focal\n point.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=forward`.\n # Panics\n Will panic if `up` is not normalized when `glam_assert` is enabled."
    },
    "glam::Mat4::look_at_rh": {
      "namespace": "glam::Mat4",
      "identifier": "look_at_rh",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "center"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates a right-handed view matrix using a camera position, an up direction, and a focal\n point.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=back`.\n # Panics\n Will panic if `up` is not normalized when `glam_assert` is enabled."
    },
    "glam::Mat4::look_to_lh": {
      "namespace": "glam::Mat4",
      "identifier": "look_to_lh",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "dir"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates a left-handed view matrix using a camera position, an up direction, and a facing\n direction.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=forward`."
    },
    "glam::Mat4::look_to_rh": {
      "namespace": "glam::Mat4",
      "identifier": "look_to_rh",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "eye"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "dir"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "up"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates a right-handed view matrix using a camera position, an up direction, and a facing\n direction.\n For a view coordinate system with `+X=right`, `+Y=up` and `+Z=back`."
    },
    "glam::Mat4::mul": {
      "namespace": "glam::Mat4",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Affine3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      }
    },
    "glam::Mat4::mul-1": {
      "namespace": "glam::Mat4",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat4"
          }
        },
        {
          "kind": {
            "val": "glam::Mat4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      }
    },
    "glam::Mat4::mul-2": {
      "namespace": "glam::Mat4",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat4"
          }
        },
        {
          "kind": {
            "val": "glam::Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Mat4::mul-3": {
      "namespace": "glam::Mat4",
      "identifier": "mul-3",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat4"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      }
    },
    "glam::Mat4::mul_mat4": {
      "namespace": "glam::Mat4",
      "identifier": "mul_mat4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Multiplies two 4x4 matrices."
    },
    "glam::Mat4::mul_scalar": {
      "namespace": "glam::Mat4",
      "identifier": "mul_scalar",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Multiplies a 4x4 matrix by a scalar."
    },
    "glam::Mat4::mul_vec4": {
      "namespace": "glam::Mat4",
      "identifier": "mul_vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Transforms a 4D vector."
    },
    "glam::Mat4::neg": {
      "namespace": "glam::Mat4",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      }
    },
    "glam::Mat4::orthographic_lh": {
      "namespace": "glam::Mat4",
      "identifier": "orthographic_lh",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "left"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "right"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "bottom"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "top"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "near"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "far"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates a left-handed orthographic projection matrix with `[0,1]` depth range.\n Useful to map a left-handed coordinate system to the normalized device coordinates that WebGPU/Direct3D/Metal expect."
    },
    "glam::Mat4::orthographic_rh": {
      "namespace": "glam::Mat4",
      "identifier": "orthographic_rh",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "left"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "right"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "bottom"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "top"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "near"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "far"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates a right-handed orthographic projection matrix with `[0,1]` depth range.\n Useful to map a right-handed coordinate system to the normalized device coordinates that WebGPU/Direct3D/Metal expect."
    },
    "glam::Mat4::orthographic_rh_gl": {
      "namespace": "glam::Mat4",
      "identifier": "orthographic_rh_gl",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "left"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "right"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "bottom"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "top"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "near"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "far"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates a right-handed orthographic projection matrix with `[-1,1]` depth\n range.  This is the same as the OpenGL `glOrtho` function in OpenGL.\n See\n <https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/glOrtho.xml>\n Useful to map a right-handed coordinate system to the normalized device coordinates that OpenGL expects."
    },
    "glam::Mat4::perspective_infinite_lh": {
      "namespace": "glam::Mat4",
      "identifier": "perspective_infinite_lh",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "fov_y_radians"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "aspect_ratio"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z_near"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates an infinite left-handed perspective projection matrix with `[0,1]` depth range.\n Like `perspective_lh`, but with an infinite value for `z_far`.\n The result is that points near `z_near` are mapped to depth `0`, and as they move towards infinity the depth approaches `1`.\n # Panics\n Will panic if `z_near` or `z_far` are less than or equal to zero when `glam_assert` is\n enabled."
    },
    "glam::Mat4::perspective_infinite_reverse_lh": {
      "namespace": "glam::Mat4",
      "identifier": "perspective_infinite_reverse_lh",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "fov_y_radians"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "aspect_ratio"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z_near"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates an infinite reverse left-handed perspective projection matrix with `[0,1]` depth range.\n Similar to `perspective_infinite_lh`, but maps `Z = z_near` to a depth of `1` and `Z = infinity` to a depth of `0`.\n # Panics\n Will panic if `z_near` is less than or equal to zero when `glam_assert` is enabled."
    },
    "glam::Mat4::perspective_infinite_reverse_rh": {
      "namespace": "glam::Mat4",
      "identifier": "perspective_infinite_reverse_rh",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "fov_y_radians"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "aspect_ratio"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z_near"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates an infinite reverse right-handed perspective projection matrix with `[0,1]` depth range.\n Similar to `perspective_infinite_rh`, but maps `Z = z_near` to a depth of `1` and `Z = infinity` to a depth of `0`.\n # Panics\n Will panic if `z_near` is less than or equal to zero when `glam_assert` is enabled."
    },
    "glam::Mat4::perspective_infinite_rh": {
      "namespace": "glam::Mat4",
      "identifier": "perspective_infinite_rh",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "fov_y_radians"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "aspect_ratio"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z_near"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates an infinite right-handed perspective projection matrix with `[0,1]` depth range.\n Like `perspective_rh`, but with an infinite value for `z_far`.\n The result is that points near `z_near` are mapped to depth `0`, and as they move towards infinity the depth approaches `1`.\n # Panics\n Will panic if `z_near` or `z_far` are less than or equal to zero when `glam_assert` is\n enabled."
    },
    "glam::Mat4::perspective_lh": {
      "namespace": "glam::Mat4",
      "identifier": "perspective_lh",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "fov_y_radians"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "aspect_ratio"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z_near"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z_far"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates a left-handed perspective projection matrix with `[0,1]` depth range.\n Useful to map the standard left-handed coordinate system into what WebGPU/Metal/Direct3D expect.\n # Panics\n Will panic if `z_near` or `z_far` are less than or equal to zero when `glam_assert` is\n enabled."
    },
    "glam::Mat4::perspective_rh": {
      "namespace": "glam::Mat4",
      "identifier": "perspective_rh",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "fov_y_radians"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "aspect_ratio"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z_near"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z_far"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates a right-handed perspective projection matrix with `[0,1]` depth range.\n Useful to map the standard right-handed coordinate system into what WebGPU/Metal/Direct3D expect.\n # Panics\n Will panic if `z_near` or `z_far` are less than or equal to zero when `glam_assert` is\n enabled."
    },
    "glam::Mat4::perspective_rh_gl": {
      "namespace": "glam::Mat4",
      "identifier": "perspective_rh_gl",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "fov_y_radians"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "aspect_ratio"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z_near"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z_far"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Creates a right-handed perspective projection matrix with `[-1,1]` depth range.\n Useful to map the standard right-handed coordinate system into what OpenGL expects.\n This is the same as the OpenGL `gluPerspective` function.\n See <https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluPerspective.xml>"
    },
    "glam::Mat4::project_point3": {
      "namespace": "glam::Mat4",
      "identifier": "project_point3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Transforms the given 3D vector as a point, applying perspective correction.\n This is the equivalent of multiplying the 3D vector as a 4D vector where `w` is `1.0`.\n The perspective divide is performed meaning the resulting 3D vector is divided by `w`.\n This method assumes that `self` contains a projective transform."
    },
    "glam::Mat4::project_point3a": {
      "namespace": "glam::Mat4",
      "identifier": "project_point3a",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Transforms the given [`Vec3A`] as a 3D point, applying perspective correction.\n This is the equivalent of multiplying the [`Vec3A`] as a 4D vector where `w` is `1.0`.\n The perspective divide is performed meaning the resulting 3D vector is divided by `w`.\n This method assumes that `self` contains a projective transform."
    },
    "glam::Mat4::row": {
      "namespace": "glam::Mat4",
      "identifier": "row",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "usize"
          },
          "name": "index"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns the matrix row for the given `index`.\n # Panics\n Panics if `index` is greater than 3."
    },
    "glam::Mat4::sub": {
      "namespace": "glam::Mat4",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Mat4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      }
    },
    "glam::Mat4::sub_mat4": {
      "namespace": "glam::Mat4",
      "identifier": "sub_mat4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Subtracts two 4x4 matrices."
    },
    "glam::Mat4::to_cols_array": {
      "namespace": "glam::Mat4",
      "identifier": "to_cols_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f32"
            },
            16
          ]
        }
      },
      "documentation": " Creates a `[f32; 16]` array storing data in column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::Mat4::to_cols_array_2d": {
      "namespace": "glam::Mat4",
      "identifier": "to_cols_array_2d",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "array": [
                {
                  "primitive": "f32"
                },
                4
              ]
            },
            4
          ]
        }
      },
      "documentation": " Creates a `[[f32; 4]; 4]` 4D array storing data in column major order.\n If you require data in row major order `transpose` the matrix first."
    },
    "glam::Mat4::to_euler": {
      "namespace": "glam::Mat4",
      "identifier": "to_euler",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::EulerRot"
          },
          "name": "order"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": [
            {
              "primitive": "f32"
            },
            {
              "primitive": "f32"
            },
            {
              "primitive": "f32"
            }
          ]
        }
      },
      "documentation": " Extract Euler angles with the given Euler rotation order.\n Note if the upper 3x3 matrix contain scales, shears, or other non-rotation transformations\n then the resulting Euler angles will be ill-defined.\n # Panics\n Will panic if any column of the upper 3x3 rotation matrix is not normalized when\n `glam_assert` is enabled."
    },
    "glam::Mat4::transform_point3": {
      "namespace": "glam::Mat4",
      "identifier": "transform_point3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Transforms the given 3D vector as a point.\n This is the equivalent of multiplying the 3D vector as a 4D vector where `w` is\n `1.0`.\n This method assumes that `self` contains a valid affine transform. It does not perform\n a perspective divide, if `self` contains a perspective transform, or if you are unsure,\n the [`Self::project_point3()`] method should be used instead.\n # Panics\n Will panic if the 3rd row of `self` is not `(0, 0, 0, 1)` when `glam_assert` is enabled."
    },
    "glam::Mat4::transform_point3a": {
      "namespace": "glam::Mat4",
      "identifier": "transform_point3a",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Transforms the given [`Vec3A`] as 3D point.\n This is the equivalent of multiplying the [`Vec3A`] as a 4D vector where `w` is `1.0`."
    },
    "glam::Mat4::transform_vector3": {
      "namespace": "glam::Mat4",
      "identifier": "transform_vector3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Transforms the give 3D vector as a direction.\n This is the equivalent of multiplying the 3D vector as a 4D vector where `w` is\n `0.0`.\n This method assumes that `self` contains a valid affine transform.\n # Panics\n Will panic if the 3rd row of `self` is not `(0, 0, 0, 1)` when `glam_assert` is enabled."
    },
    "glam::Mat4::transform_vector3a": {
      "namespace": "glam::Mat4",
      "identifier": "transform_vector3a",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Transforms the give [`Vec3A`] as 3D vector.\n This is the equivalent of multiplying the [`Vec3A`] as a 4D vector where `w` is `0.0`."
    },
    "glam::Mat4::transpose": {
      "namespace": "glam::Mat4",
      "identifier": "transpose",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Mat4"
        }
      },
      "documentation": " Returns the transpose of `self`."
    },
    "glam::Quat::abs_diff_eq": {
      "namespace": "glam::Quat",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs`\n is less than or equal to `max_abs_diff`.\n This can be used to compare if two quaternions contain similar elements. It works\n best when comparing with a known value. The `max_abs_diff` that should be used used\n depends on the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::Quat::add": {
      "namespace": "glam::Quat",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Adds two quaternions.\n The sum is not guaranteed to be normalized.\n Note that addition is not the same as combining the rotations represented by the\n two quaternions! That corresponds to multiplication."
    },
    "glam::Quat::angle_between": {
      "namespace": "glam::Quat",
      "identifier": "angle_between",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the angle (in radians) for the minimal rotation\n for transforming this quaternion into another.\n Both quaternions must be normalized.\n # Panics\n Will panic if `self` or `rhs` are not normalized when `glam_assert` is enabled."
    },
    "glam::Quat::as_dquat": {
      "namespace": "glam::Quat",
      "identifier": "as_dquat",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DQuat"
        }
      }
    },
    "glam::Quat::clone": {
      "namespace": "glam::Quat",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      }
    },
    "glam::Quat::conjugate": {
      "namespace": "glam::Quat",
      "identifier": "conjugate",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Returns the quaternion conjugate of `self`. For a unit quaternion the\n conjugate is also the inverse."
    },
    "glam::Quat::div": {
      "namespace": "glam::Quat",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Divides a quaternion by a scalar value.\n The quotient is not guaranteed to be normalized."
    },
    "glam::Quat::dot": {
      "namespace": "glam::Quat",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`. The dot product is\n equal to the cosine of the angle between two quaternion rotations."
    },
    "glam::Quat::eq": {
      "namespace": "glam::Quat",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Quat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Quat"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::Quat::from_affine3": {
      "namespace": "glam::Quat",
      "identifier": "from_affine3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Affine3A"
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Creates a quaternion from a 3x3 rotation matrix inside a 3D affine transform.\n Note if the input affine matrix contain scales, shears, or other non-rotation\n transformations then the resulting quaternion will be ill-defined.\n # Panics\n Will panic if any input affine matrix column is not normalized when `glam_assert` is\n enabled."
    },
    "glam::Quat::from_array": {
      "namespace": "glam::Quat",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "f32"
              },
              4
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Creates a rotation quaternion from an array.\n # Preconditions\n This function does not check if the input is normalized, it is up to the user to\n provide normalized input or to normalized the resulting quaternion."
    },
    "glam::Quat::from_axis_angle": {
      "namespace": "glam::Quat",
      "identifier": "from_axis_angle",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "axis"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Create a quaternion for a normalized rotation `axis` and `angle` (in radians).\n The axis must be a unit vector.\n # Panics\n Will panic if `axis` is not normalized when `glam_assert` is enabled."
    },
    "glam::Quat::from_euler": {
      "namespace": "glam::Quat",
      "identifier": "from_euler",
      "arguments": [
        {
          "kind": {
            "val": "glam::EulerRot"
          },
          "name": "euler"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "a"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "b"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "c"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Creates a quaternion from the given Euler rotation sequence and the angles (in radians)."
    },
    "glam::Quat::from_mat3": {
      "namespace": "glam::Quat",
      "identifier": "from_mat3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3"
          },
          "name": "mat"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Creates a quaternion from a 3x3 rotation matrix.\n Note if the input matrix contain scales, shears, or other non-rotation transformations then\n the resulting quaternion will be ill-defined.\n # Panics\n Will panic if any input matrix column is not normalized when `glam_assert` is enabled."
    },
    "glam::Quat::from_mat3a": {
      "namespace": "glam::Quat",
      "identifier": "from_mat3a",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat3A"
          },
          "name": "mat"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Creates a quaternion from a 3x3 SIMD aligned rotation matrix.\n Note if the input matrix contain scales, shears, or other non-rotation transformations then\n the resulting quaternion will be ill-defined.\n # Panics\n Will panic if any input matrix column is not normalized when `glam_assert` is enabled."
    },
    "glam::Quat::from_mat4": {
      "namespace": "glam::Quat",
      "identifier": "from_mat4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Mat4"
          },
          "name": "mat"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Creates a quaternion from the upper 3x3 rotation matrix inside a homogeneous 4x4 matrix.\n Note if the upper 3x3 matrix contain scales, shears, or other non-rotation transformations\n then the resulting quaternion will be ill-defined.\n # Panics\n Will panic if any column of the upper 3x3 rotation matrix is not normalized when\n `glam_assert` is enabled."
    },
    "glam::Quat::from_rotation_arc": {
      "namespace": "glam::Quat",
      "identifier": "from_rotation_arc",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "from"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "to"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Gets the minimal rotation for transforming `from` to `to`.  The rotation is in the\n plane spanned by the two vectors.  Will rotate at most 180 degrees.\n The inputs must be unit vectors.\n `from_rotation_arc(from, to) * from ≈ to`.\n For near-singular cases (from≈to and from≈-to) the current implementation\n is only accurate to about 0.001 (for `f32`).\n # Panics\n Will panic if `from` or `to` are not normalized when `glam_assert` is enabled."
    },
    "glam::Quat::from_rotation_arc_2d": {
      "namespace": "glam::Quat",
      "identifier": "from_rotation_arc_2d",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "from"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "to"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Gets the minimal rotation for transforming `from` to `to`.  The resulting rotation is\n around the z axis. Will rotate at most 180 degrees.\n The inputs must be unit vectors.\n `from_rotation_arc_2d(from, to) * from ≈ to`.\n For near-singular cases (from≈to and from≈-to) the current implementation\n is only accurate to about 0.001 (for `f32`).\n # Panics\n Will panic if `from` or `to` are not normalized when `glam_assert` is enabled."
    },
    "glam::Quat::from_rotation_arc_colinear": {
      "namespace": "glam::Quat",
      "identifier": "from_rotation_arc_colinear",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "from"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "to"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Gets the minimal rotation for transforming `from` to either `to` or `-to`.  This means\n that the resulting quaternion will rotate `from` so that it is colinear with `to`.\n The rotation is in the plane spanned by the two vectors.  Will rotate at most 90\n degrees.\n The inputs must be unit vectors.\n `to.dot(from_rotation_arc_colinear(from, to) * from).abs() ≈ 1`.\n # Panics\n Will panic if `from` or `to` are not normalized when `glam_assert` is enabled."
    },
    "glam::Quat::from_rotation_x": {
      "namespace": "glam::Quat",
      "identifier": "from_rotation_x",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Creates a quaternion from the `angle` (in radians) around the x axis."
    },
    "glam::Quat::from_rotation_y": {
      "namespace": "glam::Quat",
      "identifier": "from_rotation_y",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Creates a quaternion from the `angle` (in radians) around the y axis."
    },
    "glam::Quat::from_rotation_z": {
      "namespace": "glam::Quat",
      "identifier": "from_rotation_z",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Creates a quaternion from the `angle` (in radians) around the z axis."
    },
    "glam::Quat::from_scaled_axis": {
      "namespace": "glam::Quat",
      "identifier": "from_scaled_axis",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Create a quaternion that rotates `v.length()` radians around `v.normalize()`.\n `from_scaled_axis(Vec3::ZERO)` results in the identity quaternion."
    },
    "glam::Quat::from_vec4": {
      "namespace": "glam::Quat",
      "identifier": "from_vec4",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Creates a new rotation quaternion from a 4D vector.\n # Preconditions\n This function does not check if the input is normalized, it is up to the user to\n provide normalized input or to normalized the resulting quaternion."
    },
    "glam::Quat::from_xyzw": {
      "namespace": "glam::Quat",
      "identifier": "from_xyzw",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Creates a new rotation quaternion.\n This should generally not be called manually unless you know what you are doing.\n Use one of the other constructors instead such as `identity` or `from_axis_angle`.\n `from_xyzw` is mostly used by unit tests and `serde` deserialization.\n # Preconditions\n This function does not check if the input is normalized, it is up to the user to\n provide normalized input or to normalized the resulting quaternion."
    },
    "glam::Quat::inverse": {
      "namespace": "glam::Quat",
      "identifier": "inverse",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Returns the inverse of a normalized quaternion.\n Typically quaternion inverse returns the conjugate of a normalized quaternion.\n Because `self` is assumed to already be unit length this method *does not* normalize\n before returning the conjugate.\n # Panics\n Will panic if `self` is not normalized when `glam_assert` is enabled."
    },
    "glam::Quat::is_finite": {
      "namespace": "glam::Quat",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.\n If any element is either `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::Quat::is_nan": {
      "namespace": "glam::Quat",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NAN`."
    },
    "glam::Quat::is_near_identity": {
      "namespace": "glam::Quat",
      "identifier": "is_near_identity",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::Quat::is_normalized": {
      "namespace": "glam::Quat",
      "identifier": "is_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns whether `self` of length `1.0` or not.\n Uses a precision threshold of `1e-6`."
    },
    "glam::Quat::length": {
      "namespace": "glam::Quat",
      "identifier": "length",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the length of `self`."
    },
    "glam::Quat::length_recip": {
      "namespace": "glam::Quat",
      "identifier": "length_recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes `1.0 / length()`.\n For valid results, `self` must _not_ be of length zero."
    },
    "glam::Quat::length_squared": {
      "namespace": "glam::Quat",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the squared length of `self`.\n This is generally faster than `length()` as it avoids a square\n root operation."
    },
    "glam::Quat::lerp": {
      "namespace": "glam::Quat",
      "identifier": "lerp",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "end"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Performs a linear interpolation between `self` and `rhs` based on\n the value `s`.\n When `s` is `0.0`, the result will be equal to `self`.  When `s`\n is `1.0`, the result will be equal to `rhs`.\n # Panics\n Will panic if `self` or `end` are not normalized when `glam_assert` is enabled."
    },
    "glam::Quat::mul": {
      "namespace": "glam::Quat",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Multiplies two quaternions. If they each represent a rotation, the result will\n represent the combined rotation.\n Note that due to floating point rounding the result may not be perfectly\n normalized.\n # Panics\n Will panic if `self` or `rhs` are not normalized when `glam_assert` is enabled."
    },
    "glam::Quat::mul-1": {
      "namespace": "glam::Quat",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Quat::mul-2": {
      "namespace": "glam::Quat",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Quat::mul-3": {
      "namespace": "glam::Quat",
      "identifier": "mul-3",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      }
    },
    "glam::Quat::mul_quat": {
      "namespace": "glam::Quat",
      "identifier": "mul_quat",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Multiplies two quaternions. If they each represent a rotation, the result will\n represent the combined rotation.\n Note that due to floating point rounding the result may not be perfectly normalized.\n # Panics\n Will panic if `self` or `rhs` are not normalized when `glam_assert` is enabled."
    },
    "glam::Quat::mul_vec3": {
      "namespace": "glam::Quat",
      "identifier": "mul_vec3",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Multiplies a quaternion and a 3D vector, returning the rotated vector.\n # Panics\n Will panic if `self` is not normalized when `glam_assert` is enabled."
    },
    "glam::Quat::mul_vec3a": {
      "namespace": "glam::Quat",
      "identifier": "mul_vec3a",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Multiplies a quaternion and a 3D vector, returning the rotated vector."
    },
    "glam::Quat::neg": {
      "namespace": "glam::Quat",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      }
    },
    "glam::Quat::normalize": {
      "namespace": "glam::Quat",
      "identifier": "normalize",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0.\n For valid results, `self` must _not_ be of length zero.\n Panics\n Will panic if `self` is zero length when `glam_assert` is enabled."
    },
    "glam::Quat::rotate_towards": {
      "namespace": "glam::Quat",
      "identifier": "rotate_towards",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Quat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max_angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Rotates towards `rhs` up to `max_angle` (in radians).\n When `max_angle` is `0.0`, the result will be equal to `self`. When `max_angle` is equal to\n `self.angle_between(rhs)`, the result will be equal to `rhs`. If `max_angle` is negative,\n rotates towards the exact opposite of `rhs`. Will not go past the target.\n Both quaternions must be normalized.\n # Panics\n Will panic if `self` or `rhs` are not normalized when `glam_assert` is enabled."
    },
    "glam::Quat::slerp": {
      "namespace": "glam::Quat",
      "identifier": "slerp",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "end"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Performs a spherical linear interpolation between `self` and `end`\n based on the value `s`.\n When `s` is `0.0`, the result will be equal to `self`.  When `s`\n is `1.0`, the result will be equal to `end`.\n # Panics\n Will panic if `self` or `end` are not normalized when `glam_assert` is enabled."
    },
    "glam::Quat::sub": {
      "namespace": "glam::Quat",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Quat"
        }
      },
      "documentation": " Subtracts the `rhs` quaternion from `self`.\n The difference is not guaranteed to be normalized."
    },
    "glam::Quat::to_array": {
      "namespace": "glam::Quat",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f32"
            },
            4
          ]
        }
      },
      "documentation": " `[x, y, z, w]`"
    },
    "glam::Quat::to_euler": {
      "namespace": "glam::Quat",
      "identifier": "to_euler",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::EulerRot"
          },
          "name": "order"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": [
            {
              "primitive": "f32"
            },
            {
              "primitive": "f32"
            },
            {
              "primitive": "f32"
            }
          ]
        }
      },
      "documentation": " Returns the rotation angles for the given euler rotation sequence."
    },
    "glam::Quat::to_scaled_axis": {
      "namespace": "glam::Quat",
      "identifier": "to_scaled_axis",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns the rotation axis scaled by the rotation in radians."
    },
    "glam::Quat::xyz": {
      "namespace": "glam::Quat",
      "identifier": "xyz",
      "arguments": [
        {
          "kind": {
            "val": "glam::Quat"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns the vector part of the quaternion."
    },
    "glam::U64Vec2::add": {
      "namespace": "glam::U64Vec2",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::add-1": {
      "namespace": "glam::U64Vec2",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::add-2": {
      "namespace": "glam::U64Vec2",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          }
        },
        {
          "kind": {
            "primitive": "u64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::as_dvec2": {
      "namespace": "glam::U64Vec2",
      "identifier": "as_dvec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::U64Vec2::as_i64vec2": {
      "namespace": "glam::U64Vec2",
      "identifier": "as_i64vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::U64Vec2::as_ivec2": {
      "namespace": "glam::U64Vec2",
      "identifier": "as_ivec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::U64Vec2::as_uvec2": {
      "namespace": "glam::U64Vec2",
      "identifier": "as_uvec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::U64Vec2::as_vec2": {
      "namespace": "glam::U64Vec2",
      "identifier": "as_vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::U64Vec2::assert_receiver_is_total_eq": {
      "namespace": "glam::U64Vec2",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::U64Vec2::clamp": {
      "namespace": "glam::U64Vec2",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`u64::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::U64Vec2::clone": {
      "namespace": "glam::U64Vec2",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::cmpeq": {
      "namespace": "glam::U64Vec2",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec2::cmpge": {
      "namespace": "glam::U64Vec2",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec2::cmpgt": {
      "namespace": "glam::U64Vec2",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec2::cmple": {
      "namespace": "glam::U64Vec2",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec2::cmplt": {
      "namespace": "glam::U64Vec2",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec2::cmpne": {
      "namespace": "glam::U64Vec2",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec2::div": {
      "namespace": "glam::U64Vec2",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::div-1": {
      "namespace": "glam::U64Vec2",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::div-2": {
      "namespace": "glam::U64Vec2",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          }
        },
        {
          "kind": {
            "primitive": "u64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::dot": {
      "namespace": "glam::U64Vec2",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::U64Vec2::dot_into_vec": {
      "namespace": "glam::U64Vec2",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::U64Vec2::element_product": {
      "namespace": "glam::U64Vec2",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::U64Vec2::element_sum": {
      "namespace": "glam::U64Vec2",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::U64Vec2::eq": {
      "namespace": "glam::U64Vec2",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::U64Vec2::extend": {
      "namespace": "glam::U64Vec2",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` and the given `z` value."
    },
    "glam::U64Vec2::from_array": {
      "namespace": "glam::U64Vec2",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "u64"
              },
              2
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::U64Vec2::length_squared": {
      "namespace": "glam::U64Vec2",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::U64Vec2::max": {
      "namespace": "glam::U64Vec2",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::U64Vec2::max_element": {
      "namespace": "glam::U64Vec2",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::U64Vec2::min": {
      "namespace": "glam::U64Vec2",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::U64Vec2::min_element": {
      "namespace": "glam::U64Vec2",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::U64Vec2::mul": {
      "namespace": "glam::U64Vec2",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::mul-1": {
      "namespace": "glam::U64Vec2",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::mul-2": {
      "namespace": "glam::U64Vec2",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          }
        },
        {
          "kind": {
            "primitive": "u64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::new": {
      "namespace": "glam::U64Vec2",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::U64Vec2::rem": {
      "namespace": "glam::U64Vec2",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::rem-1": {
      "namespace": "glam::U64Vec2",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::rem-2": {
      "namespace": "glam::U64Vec2",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          }
        },
        {
          "kind": {
            "primitive": "u64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::saturating_add": {
      "namespace": "glam::U64Vec2",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::U64Vec2::saturating_add_signed": {
      "namespace": "glam::U64Vec2",
      "identifier": "saturating_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.saturating_add_signed(rhs.x), self.y.saturating_add_signed(rhs.y), ..]`."
    },
    "glam::U64Vec2::saturating_div": {
      "namespace": "glam::U64Vec2",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::U64Vec2::saturating_mul": {
      "namespace": "glam::U64Vec2",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::U64Vec2::saturating_sub": {
      "namespace": "glam::U64Vec2",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::U64Vec2::select": {
      "namespace": "glam::U64Vec2",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec2"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::U64Vec2::splat": {
      "namespace": "glam::U64Vec2",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::U64Vec2::sub": {
      "namespace": "glam::U64Vec2",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::sub-1": {
      "namespace": "glam::U64Vec2",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::sub-2": {
      "namespace": "glam::U64Vec2",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          }
        },
        {
          "kind": {
            "primitive": "u64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      }
    },
    "glam::U64Vec2::to_array": {
      "namespace": "glam::U64Vec2",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "u64"
            },
            2
          ]
        }
      },
      "documentation": " `[x, y]`"
    },
    "glam::U64Vec2::with_x": {
      "namespace": "glam::U64Vec2",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `x`."
    },
    "glam::U64Vec2::with_y": {
      "namespace": "glam::U64Vec2",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `y`."
    },
    "glam::U64Vec2::wrapping_add": {
      "namespace": "glam::U64Vec2",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::U64Vec2::wrapping_add_signed": {
      "namespace": "glam::U64Vec2",
      "identifier": "wrapping_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.wrapping_add_signed(rhs.x), self.y.wrapping_add_signed(rhs.y), ..]`."
    },
    "glam::U64Vec2::wrapping_div": {
      "namespace": "glam::U64Vec2",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::U64Vec2::wrapping_mul": {
      "namespace": "glam::U64Vec2",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::U64Vec2::wrapping_sub": {
      "namespace": "glam::U64Vec2",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::U64Vec3::add": {
      "namespace": "glam::U64Vec3",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::add-1": {
      "namespace": "glam::U64Vec3",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::add-2": {
      "namespace": "glam::U64Vec3",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          }
        },
        {
          "kind": {
            "primitive": "u64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::as_dvec3": {
      "namespace": "glam::U64Vec3",
      "identifier": "as_dvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::U64Vec3::as_i64vec3": {
      "namespace": "glam::U64Vec3",
      "identifier": "as_i64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::U64Vec3::as_ivec3": {
      "namespace": "glam::U64Vec3",
      "identifier": "as_ivec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::U64Vec3::as_uvec3": {
      "namespace": "glam::U64Vec3",
      "identifier": "as_uvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::U64Vec3::as_vec3": {
      "namespace": "glam::U64Vec3",
      "identifier": "as_vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::U64Vec3::as_vec3a": {
      "namespace": "glam::U64Vec3",
      "identifier": "as_vec3a",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::U64Vec3::assert_receiver_is_total_eq": {
      "namespace": "glam::U64Vec3",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::U64Vec3::clamp": {
      "namespace": "glam::U64Vec3",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`u64::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::U64Vec3::clone": {
      "namespace": "glam::U64Vec3",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::cmpeq": {
      "namespace": "glam::U64Vec3",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec3::cmpge": {
      "namespace": "glam::U64Vec3",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec3::cmpgt": {
      "namespace": "glam::U64Vec3",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec3::cmple": {
      "namespace": "glam::U64Vec3",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec3::cmplt": {
      "namespace": "glam::U64Vec3",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec3::cmpne": {
      "namespace": "glam::U64Vec3",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec3::cross": {
      "namespace": "glam::U64Vec3",
      "identifier": "cross",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Computes the cross product of `self` and `rhs`."
    },
    "glam::U64Vec3::div": {
      "namespace": "glam::U64Vec3",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::div-1": {
      "namespace": "glam::U64Vec3",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::div-2": {
      "namespace": "glam::U64Vec3",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          }
        },
        {
          "kind": {
            "primitive": "u64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::dot": {
      "namespace": "glam::U64Vec3",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::U64Vec3::dot_into_vec": {
      "namespace": "glam::U64Vec3",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::U64Vec3::element_product": {
      "namespace": "glam::U64Vec3",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::U64Vec3::element_sum": {
      "namespace": "glam::U64Vec3",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::U64Vec3::eq": {
      "namespace": "glam::U64Vec3",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::U64Vec3::extend": {
      "namespace": "glam::U64Vec3",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` and the given `w` value."
    },
    "glam::U64Vec3::from_array": {
      "namespace": "glam::U64Vec3",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "u64"
              },
              3
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::U64Vec3::length_squared": {
      "namespace": "glam::U64Vec3",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::U64Vec3::max": {
      "namespace": "glam::U64Vec3",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::U64Vec3::max_element": {
      "namespace": "glam::U64Vec3",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::U64Vec3::min": {
      "namespace": "glam::U64Vec3",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::U64Vec3::min_element": {
      "namespace": "glam::U64Vec3",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::U64Vec3::mul": {
      "namespace": "glam::U64Vec3",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::mul-1": {
      "namespace": "glam::U64Vec3",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::mul-2": {
      "namespace": "glam::U64Vec3",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          }
        },
        {
          "kind": {
            "primitive": "u64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::new": {
      "namespace": "glam::U64Vec3",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::U64Vec3::rem": {
      "namespace": "glam::U64Vec3",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::rem-1": {
      "namespace": "glam::U64Vec3",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::rem-2": {
      "namespace": "glam::U64Vec3",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          }
        },
        {
          "kind": {
            "primitive": "u64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::saturating_add": {
      "namespace": "glam::U64Vec3",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::U64Vec3::saturating_add_signed": {
      "namespace": "glam::U64Vec3",
      "identifier": "saturating_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.saturating_add_signed(rhs.x), self.y.saturating_add_signed(rhs.y), ..]`."
    },
    "glam::U64Vec3::saturating_div": {
      "namespace": "glam::U64Vec3",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::U64Vec3::saturating_mul": {
      "namespace": "glam::U64Vec3",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::U64Vec3::saturating_sub": {
      "namespace": "glam::U64Vec3",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::U64Vec3::select": {
      "namespace": "glam::U64Vec3",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec3"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::U64Vec3::splat": {
      "namespace": "glam::U64Vec3",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::U64Vec3::sub": {
      "namespace": "glam::U64Vec3",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::sub-1": {
      "namespace": "glam::U64Vec3",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::sub-2": {
      "namespace": "glam::U64Vec3",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          }
        },
        {
          "kind": {
            "primitive": "u64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      }
    },
    "glam::U64Vec3::to_array": {
      "namespace": "glam::U64Vec3",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "u64"
            },
            3
          ]
        }
      },
      "documentation": " `[x, y, z]`"
    },
    "glam::U64Vec3::truncate": {
      "namespace": "glam::U64Vec3",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Creates a 2D vector from the `x` and `y` elements of `self`, discarding `z`.\n Truncation may also be performed by using [`self.xy()`][crate::swizzles::Vec3Swizzles::xy()]."
    },
    "glam::U64Vec3::with_x": {
      "namespace": "glam::U64Vec3",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `x`."
    },
    "glam::U64Vec3::with_y": {
      "namespace": "glam::U64Vec3",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `y`."
    },
    "glam::U64Vec3::with_z": {
      "namespace": "glam::U64Vec3",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `z`."
    },
    "glam::U64Vec3::wrapping_add": {
      "namespace": "glam::U64Vec3",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::U64Vec3::wrapping_add_signed": {
      "namespace": "glam::U64Vec3",
      "identifier": "wrapping_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.wrapping_add_signed(rhs.x), self.y.wrapping_add_signed(rhs.y), ..]`."
    },
    "glam::U64Vec3::wrapping_div": {
      "namespace": "glam::U64Vec3",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::U64Vec3::wrapping_mul": {
      "namespace": "glam::U64Vec3",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::U64Vec3::wrapping_sub": {
      "namespace": "glam::U64Vec3",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::U64Vec4::add": {
      "namespace": "glam::U64Vec4",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::add-1": {
      "namespace": "glam::U64Vec4",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::add-2": {
      "namespace": "glam::U64Vec4",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          }
        },
        {
          "kind": {
            "primitive": "u64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::as_dvec4": {
      "namespace": "glam::U64Vec4",
      "identifier": "as_dvec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::U64Vec4::as_i64vec4": {
      "namespace": "glam::U64Vec4",
      "identifier": "as_i64vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::U64Vec4::as_ivec4": {
      "namespace": "glam::U64Vec4",
      "identifier": "as_ivec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::U64Vec4::as_uvec4": {
      "namespace": "glam::U64Vec4",
      "identifier": "as_uvec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::U64Vec4::as_vec4": {
      "namespace": "glam::U64Vec4",
      "identifier": "as_vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::U64Vec4::assert_receiver_is_total_eq": {
      "namespace": "glam::U64Vec4",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::U64Vec4::clamp": {
      "namespace": "glam::U64Vec4",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`u64::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::U64Vec4::clone": {
      "namespace": "glam::U64Vec4",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::cmpeq": {
      "namespace": "glam::U64Vec4",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec4::cmpge": {
      "namespace": "glam::U64Vec4",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec4::cmpgt": {
      "namespace": "glam::U64Vec4",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec4::cmple": {
      "namespace": "glam::U64Vec4",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec4::cmplt": {
      "namespace": "glam::U64Vec4",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec4::cmpne": {
      "namespace": "glam::U64Vec4",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::U64Vec4::div": {
      "namespace": "glam::U64Vec4",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::div-1": {
      "namespace": "glam::U64Vec4",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::div-2": {
      "namespace": "glam::U64Vec4",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          }
        },
        {
          "kind": {
            "primitive": "u64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::dot": {
      "namespace": "glam::U64Vec4",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::U64Vec4::dot_into_vec": {
      "namespace": "glam::U64Vec4",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::U64Vec4::element_product": {
      "namespace": "glam::U64Vec4",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::U64Vec4::element_sum": {
      "namespace": "glam::U64Vec4",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::U64Vec4::eq": {
      "namespace": "glam::U64Vec4",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::U64Vec4::from_array": {
      "namespace": "glam::U64Vec4",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "u64"
              },
              4
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::U64Vec4::length_squared": {
      "namespace": "glam::U64Vec4",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::U64Vec4::max": {
      "namespace": "glam::U64Vec4",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::U64Vec4::max_element": {
      "namespace": "glam::U64Vec4",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::U64Vec4::min": {
      "namespace": "glam::U64Vec4",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::U64Vec4::min_element": {
      "namespace": "glam::U64Vec4",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u64"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::U64Vec4::mul": {
      "namespace": "glam::U64Vec4",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::mul-1": {
      "namespace": "glam::U64Vec4",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::mul-2": {
      "namespace": "glam::U64Vec4",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          }
        },
        {
          "kind": {
            "primitive": "u64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::new": {
      "namespace": "glam::U64Vec4",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "z"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::U64Vec4::rem": {
      "namespace": "glam::U64Vec4",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::rem-1": {
      "namespace": "glam::U64Vec4",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::rem-2": {
      "namespace": "glam::U64Vec4",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          }
        },
        {
          "kind": {
            "primitive": "u64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::saturating_add": {
      "namespace": "glam::U64Vec4",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::U64Vec4::saturating_add_signed": {
      "namespace": "glam::U64Vec4",
      "identifier": "saturating_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.saturating_add_signed(rhs.x), self.y.saturating_add_signed(rhs.y), ..]`."
    },
    "glam::U64Vec4::saturating_div": {
      "namespace": "glam::U64Vec4",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::U64Vec4::saturating_mul": {
      "namespace": "glam::U64Vec4",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::U64Vec4::saturating_sub": {
      "namespace": "glam::U64Vec4",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::U64Vec4::select": {
      "namespace": "glam::U64Vec4",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec4"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::U64Vec4::splat": {
      "namespace": "glam::U64Vec4",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::U64Vec4::sub": {
      "namespace": "glam::U64Vec4",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::sub-1": {
      "namespace": "glam::U64Vec4",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::sub-2": {
      "namespace": "glam::U64Vec4",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          }
        },
        {
          "kind": {
            "primitive": "u64"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      }
    },
    "glam::U64Vec4::to_array": {
      "namespace": "glam::U64Vec4",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "u64"
            },
            4
          ]
        }
      },
      "documentation": " `[x, y, z, w]`"
    },
    "glam::U64Vec4::truncate": {
      "namespace": "glam::U64Vec4",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Creates a 3D vector from the `x`, `y` and `z` elements of `self`, discarding `w`.\n Truncation to [`U64Vec3`] may also be performed by using [`self.xyz()`][crate::swizzles::Vec4Swizzles::xyz()]."
    },
    "glam::U64Vec4::with_w": {
      "namespace": "glam::U64Vec4",
      "identifier": "with_w",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `w`."
    },
    "glam::U64Vec4::with_x": {
      "namespace": "glam::U64Vec4",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `x`."
    },
    "glam::U64Vec4::with_y": {
      "namespace": "glam::U64Vec4",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `y`."
    },
    "glam::U64Vec4::with_z": {
      "namespace": "glam::U64Vec4",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `z`."
    },
    "glam::U64Vec4::wrapping_add": {
      "namespace": "glam::U64Vec4",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::U64Vec4::wrapping_add_signed": {
      "namespace": "glam::U64Vec4",
      "identifier": "wrapping_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::I64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.wrapping_add_signed(rhs.x), self.y.wrapping_add_signed(rhs.y), ..]`."
    },
    "glam::U64Vec4::wrapping_div": {
      "namespace": "glam::U64Vec4",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::U64Vec4::wrapping_mul": {
      "namespace": "glam::U64Vec4",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::U64Vec4::wrapping_sub": {
      "namespace": "glam::U64Vec4",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::U64Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::UVec2::add": {
      "namespace": "glam::UVec2",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::add-1": {
      "namespace": "glam::UVec2",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          }
        },
        {
          "kind": {
            "val": "glam::UVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::add-2": {
      "namespace": "glam::UVec2",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          }
        },
        {
          "kind": {
            "primitive": "u32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::as_dvec2": {
      "namespace": "glam::UVec2",
      "identifier": "as_dvec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::UVec2::as_i64vec2": {
      "namespace": "glam::UVec2",
      "identifier": "as_i64vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::UVec2::as_ivec2": {
      "namespace": "glam::UVec2",
      "identifier": "as_ivec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::UVec2::as_u64vec2": {
      "namespace": "glam::UVec2",
      "identifier": "as_u64vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::UVec2::as_vec2": {
      "namespace": "glam::UVec2",
      "identifier": "as_vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::UVec2::assert_receiver_is_total_eq": {
      "namespace": "glam::UVec2",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::UVec2::clamp": {
      "namespace": "glam::UVec2",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`u32::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::UVec2::clone": {
      "namespace": "glam::UVec2",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::cmpeq": {
      "namespace": "glam::UVec2",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::UVec2::cmpge": {
      "namespace": "glam::UVec2",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::UVec2::cmpgt": {
      "namespace": "glam::UVec2",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::UVec2::cmple": {
      "namespace": "glam::UVec2",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::UVec2::cmplt": {
      "namespace": "glam::UVec2",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::UVec2::cmpne": {
      "namespace": "glam::UVec2",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::UVec2::div": {
      "namespace": "glam::UVec2",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::div-1": {
      "namespace": "glam::UVec2",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          }
        },
        {
          "kind": {
            "val": "glam::UVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::div-2": {
      "namespace": "glam::UVec2",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          }
        },
        {
          "kind": {
            "primitive": "u32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::dot": {
      "namespace": "glam::UVec2",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::UVec2::dot_into_vec": {
      "namespace": "glam::UVec2",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::UVec2::element_product": {
      "namespace": "glam::UVec2",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::UVec2::element_sum": {
      "namespace": "glam::UVec2",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::UVec2::eq": {
      "namespace": "glam::UVec2",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::UVec2::extend": {
      "namespace": "glam::UVec2",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` and the given `z` value."
    },
    "glam::UVec2::from_array": {
      "namespace": "glam::UVec2",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "u32"
              },
              2
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::UVec2::length_squared": {
      "namespace": "glam::UVec2",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::UVec2::max": {
      "namespace": "glam::UVec2",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::UVec2::max_element": {
      "namespace": "glam::UVec2",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::UVec2::min": {
      "namespace": "glam::UVec2",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::UVec2::min_element": {
      "namespace": "glam::UVec2",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::UVec2::mul": {
      "namespace": "glam::UVec2",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::mul-1": {
      "namespace": "glam::UVec2",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          }
        },
        {
          "kind": {
            "val": "glam::UVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::mul-2": {
      "namespace": "glam::UVec2",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          }
        },
        {
          "kind": {
            "primitive": "u32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::new": {
      "namespace": "glam::UVec2",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::UVec2::rem": {
      "namespace": "glam::UVec2",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::rem-1": {
      "namespace": "glam::UVec2",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          }
        },
        {
          "kind": {
            "val": "glam::UVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::rem-2": {
      "namespace": "glam::UVec2",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          }
        },
        {
          "kind": {
            "primitive": "u32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::saturating_add": {
      "namespace": "glam::UVec2",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::UVec2::saturating_add_signed": {
      "namespace": "glam::UVec2",
      "identifier": "saturating_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.saturating_add_signed(rhs.x), self.y.saturating_add_signed(rhs.y), ..]`."
    },
    "glam::UVec2::saturating_div": {
      "namespace": "glam::UVec2",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::UVec2::saturating_mul": {
      "namespace": "glam::UVec2",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::UVec2::saturating_sub": {
      "namespace": "glam::UVec2",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::UVec2::select": {
      "namespace": "glam::UVec2",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec2"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::UVec2::splat": {
      "namespace": "glam::UVec2",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::UVec2::sub": {
      "namespace": "glam::UVec2",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::sub-1": {
      "namespace": "glam::UVec2",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          }
        },
        {
          "kind": {
            "val": "glam::UVec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::sub-2": {
      "namespace": "glam::UVec2",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          }
        },
        {
          "kind": {
            "primitive": "u32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      }
    },
    "glam::UVec2::to_array": {
      "namespace": "glam::UVec2",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "u32"
            },
            2
          ]
        }
      },
      "documentation": " `[x, y]`"
    },
    "glam::UVec2::with_x": {
      "namespace": "glam::UVec2",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `x`."
    },
    "glam::UVec2::with_y": {
      "namespace": "glam::UVec2",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `y`."
    },
    "glam::UVec2::wrapping_add": {
      "namespace": "glam::UVec2",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::UVec2::wrapping_add_signed": {
      "namespace": "glam::UVec2",
      "identifier": "wrapping_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.wrapping_add_signed(rhs.x), self.y.wrapping_add_signed(rhs.y), ..]`."
    },
    "glam::UVec2::wrapping_div": {
      "namespace": "glam::UVec2",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::UVec2::wrapping_mul": {
      "namespace": "glam::UVec2",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::UVec2::wrapping_sub": {
      "namespace": "glam::UVec2",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::UVec3::add": {
      "namespace": "glam::UVec3",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::add-1": {
      "namespace": "glam::UVec3",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          }
        },
        {
          "kind": {
            "val": "glam::UVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::add-2": {
      "namespace": "glam::UVec3",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          }
        },
        {
          "kind": {
            "primitive": "u32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::as_dvec3": {
      "namespace": "glam::UVec3",
      "identifier": "as_dvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::UVec3::as_i64vec3": {
      "namespace": "glam::UVec3",
      "identifier": "as_i64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::UVec3::as_ivec3": {
      "namespace": "glam::UVec3",
      "identifier": "as_ivec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::UVec3::as_u64vec3": {
      "namespace": "glam::UVec3",
      "identifier": "as_u64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::UVec3::as_vec3": {
      "namespace": "glam::UVec3",
      "identifier": "as_vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::UVec3::as_vec3a": {
      "namespace": "glam::UVec3",
      "identifier": "as_vec3a",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::UVec3::assert_receiver_is_total_eq": {
      "namespace": "glam::UVec3",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::UVec3::clamp": {
      "namespace": "glam::UVec3",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`u32::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::UVec3::clone": {
      "namespace": "glam::UVec3",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::cmpeq": {
      "namespace": "glam::UVec3",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::UVec3::cmpge": {
      "namespace": "glam::UVec3",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::UVec3::cmpgt": {
      "namespace": "glam::UVec3",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::UVec3::cmple": {
      "namespace": "glam::UVec3",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::UVec3::cmplt": {
      "namespace": "glam::UVec3",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::UVec3::cmpne": {
      "namespace": "glam::UVec3",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::UVec3::cross": {
      "namespace": "glam::UVec3",
      "identifier": "cross",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Computes the cross product of `self` and `rhs`."
    },
    "glam::UVec3::div": {
      "namespace": "glam::UVec3",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::div-1": {
      "namespace": "glam::UVec3",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          }
        },
        {
          "kind": {
            "val": "glam::UVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::div-2": {
      "namespace": "glam::UVec3",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          }
        },
        {
          "kind": {
            "primitive": "u32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::dot": {
      "namespace": "glam::UVec3",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::UVec3::dot_into_vec": {
      "namespace": "glam::UVec3",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::UVec3::element_product": {
      "namespace": "glam::UVec3",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::UVec3::element_sum": {
      "namespace": "glam::UVec3",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::UVec3::eq": {
      "namespace": "glam::UVec3",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::UVec3::extend": {
      "namespace": "glam::UVec3",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` and the given `w` value."
    },
    "glam::UVec3::from_array": {
      "namespace": "glam::UVec3",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "u32"
              },
              3
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::UVec3::length_squared": {
      "namespace": "glam::UVec3",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::UVec3::max": {
      "namespace": "glam::UVec3",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::UVec3::max_element": {
      "namespace": "glam::UVec3",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::UVec3::min": {
      "namespace": "glam::UVec3",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::UVec3::min_element": {
      "namespace": "glam::UVec3",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::UVec3::mul": {
      "namespace": "glam::UVec3",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::mul-1": {
      "namespace": "glam::UVec3",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          }
        },
        {
          "kind": {
            "val": "glam::UVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::mul-2": {
      "namespace": "glam::UVec3",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          }
        },
        {
          "kind": {
            "primitive": "u32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::new": {
      "namespace": "glam::UVec3",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::UVec3::rem": {
      "namespace": "glam::UVec3",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::rem-1": {
      "namespace": "glam::UVec3",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          }
        },
        {
          "kind": {
            "val": "glam::UVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::rem-2": {
      "namespace": "glam::UVec3",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          }
        },
        {
          "kind": {
            "primitive": "u32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::saturating_add": {
      "namespace": "glam::UVec3",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::UVec3::saturating_add_signed": {
      "namespace": "glam::UVec3",
      "identifier": "saturating_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.saturating_add_signed(rhs.x), self.y.saturating_add_signed(rhs.y), ..]`."
    },
    "glam::UVec3::saturating_div": {
      "namespace": "glam::UVec3",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::UVec3::saturating_mul": {
      "namespace": "glam::UVec3",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::UVec3::saturating_sub": {
      "namespace": "glam::UVec3",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::UVec3::select": {
      "namespace": "glam::UVec3",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec3"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::UVec3::splat": {
      "namespace": "glam::UVec3",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::UVec3::sub": {
      "namespace": "glam::UVec3",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::sub-1": {
      "namespace": "glam::UVec3",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          }
        },
        {
          "kind": {
            "val": "glam::UVec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::sub-2": {
      "namespace": "glam::UVec3",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          }
        },
        {
          "kind": {
            "primitive": "u32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      }
    },
    "glam::UVec3::to_array": {
      "namespace": "glam::UVec3",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "u32"
            },
            3
          ]
        }
      },
      "documentation": " `[x, y, z]`"
    },
    "glam::UVec3::truncate": {
      "namespace": "glam::UVec3",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Creates a 2D vector from the `x` and `y` elements of `self`, discarding `z`.\n Truncation may also be performed by using [`self.xy()`][crate::swizzles::Vec3Swizzles::xy()]."
    },
    "glam::UVec3::with_x": {
      "namespace": "glam::UVec3",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `x`."
    },
    "glam::UVec3::with_y": {
      "namespace": "glam::UVec3",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `y`."
    },
    "glam::UVec3::with_z": {
      "namespace": "glam::UVec3",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `z`."
    },
    "glam::UVec3::wrapping_add": {
      "namespace": "glam::UVec3",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::UVec3::wrapping_add_signed": {
      "namespace": "glam::UVec3",
      "identifier": "wrapping_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.wrapping_add_signed(rhs.x), self.y.wrapping_add_signed(rhs.y), ..]`."
    },
    "glam::UVec3::wrapping_div": {
      "namespace": "glam::UVec3",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::UVec3::wrapping_mul": {
      "namespace": "glam::UVec3",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::UVec3::wrapping_sub": {
      "namespace": "glam::UVec3",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::UVec4::add": {
      "namespace": "glam::UVec4",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::add-1": {
      "namespace": "glam::UVec4",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          }
        },
        {
          "kind": {
            "val": "glam::UVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::add-2": {
      "namespace": "glam::UVec4",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          }
        },
        {
          "kind": {
            "primitive": "u32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::as_dvec4": {
      "namespace": "glam::UVec4",
      "identifier": "as_dvec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::UVec4::as_i64vec4": {
      "namespace": "glam::UVec4",
      "identifier": "as_i64vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::UVec4::as_ivec4": {
      "namespace": "glam::UVec4",
      "identifier": "as_ivec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::UVec4::as_u64vec4": {
      "namespace": "glam::UVec4",
      "identifier": "as_u64vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::UVec4::as_vec4": {
      "namespace": "glam::UVec4",
      "identifier": "as_vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `f32`."
    },
    "glam::UVec4::assert_receiver_is_total_eq": {
      "namespace": "glam::UVec4",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "glam::UVec4::clamp": {
      "namespace": "glam::UVec4",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`u32::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::UVec4::clone": {
      "namespace": "glam::UVec4",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::cmpeq": {
      "namespace": "glam::UVec4",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::UVec4::cmpge": {
      "namespace": "glam::UVec4",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::UVec4::cmpgt": {
      "namespace": "glam::UVec4",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::UVec4::cmple": {
      "namespace": "glam::UVec4",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::UVec4::cmplt": {
      "namespace": "glam::UVec4",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::UVec4::cmpne": {
      "namespace": "glam::UVec4",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::UVec4::div": {
      "namespace": "glam::UVec4",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::div-1": {
      "namespace": "glam::UVec4",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          }
        },
        {
          "kind": {
            "val": "glam::UVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::div-2": {
      "namespace": "glam::UVec4",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          }
        },
        {
          "kind": {
            "primitive": "u32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::dot": {
      "namespace": "glam::UVec4",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::UVec4::dot_into_vec": {
      "namespace": "glam::UVec4",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::UVec4::element_product": {
      "namespace": "glam::UVec4",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::UVec4::element_sum": {
      "namespace": "glam::UVec4",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::UVec4::eq": {
      "namespace": "glam::UVec4",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::UVec4::from_array": {
      "namespace": "glam::UVec4",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "u32"
              },
              4
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::UVec4::length_squared": {
      "namespace": "glam::UVec4",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Computes the squared length of `self`."
    },
    "glam::UVec4::max": {
      "namespace": "glam::UVec4",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::UVec4::max_element": {
      "namespace": "glam::UVec4",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::UVec4::min": {
      "namespace": "glam::UVec4",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::UVec4::min_element": {
      "namespace": "glam::UVec4",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::UVec4::mul": {
      "namespace": "glam::UVec4",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::mul-1": {
      "namespace": "glam::UVec4",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          }
        },
        {
          "kind": {
            "val": "glam::UVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::mul-2": {
      "namespace": "glam::UVec4",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          }
        },
        {
          "kind": {
            "primitive": "u32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::new": {
      "namespace": "glam::UVec4",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "z"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::UVec4::rem": {
      "namespace": "glam::UVec4",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::rem-1": {
      "namespace": "glam::UVec4",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          }
        },
        {
          "kind": {
            "val": "glam::UVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::rem-2": {
      "namespace": "glam::UVec4",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          }
        },
        {
          "kind": {
            "primitive": "u32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::saturating_add": {
      "namespace": "glam::UVec4",
      "identifier": "saturating_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and `rhs`.\n In other words this computes `[self.x.saturating_add(rhs.x), self.y.saturating_add(rhs.y), ..]`."
    },
    "glam::UVec4::saturating_add_signed": {
      "namespace": "glam::UVec4",
      "identifier": "saturating_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Returns a vector containing the saturating addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.saturating_add_signed(rhs.x), self.y.saturating_add_signed(rhs.y), ..]`."
    },
    "glam::UVec4::saturating_div": {
      "namespace": "glam::UVec4",
      "identifier": "saturating_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Returns a vector containing the saturating division of `self` and `rhs`.\n In other words this computes `[self.x.saturating_div(rhs.x), self.y.saturating_div(rhs.y), ..]`."
    },
    "glam::UVec4::saturating_mul": {
      "namespace": "glam::UVec4",
      "identifier": "saturating_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Returns a vector containing the saturating multiplication of `self` and `rhs`.\n In other words this computes `[self.x.saturating_mul(rhs.x), self.y.saturating_mul(rhs.y), ..]`."
    },
    "glam::UVec4::saturating_sub": {
      "namespace": "glam::UVec4",
      "identifier": "saturating_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Returns a vector containing the saturating subtraction of `self` and `rhs`.\n In other words this computes `[self.x.saturating_sub(rhs.x), self.y.saturating_sub(rhs.y), ..]`."
    },
    "glam::UVec4::select": {
      "namespace": "glam::UVec4",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec4"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::UVec4::splat": {
      "namespace": "glam::UVec4",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::UVec4::sub": {
      "namespace": "glam::UVec4",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::sub-1": {
      "namespace": "glam::UVec4",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          }
        },
        {
          "kind": {
            "val": "glam::UVec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::sub-2": {
      "namespace": "glam::UVec4",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          }
        },
        {
          "kind": {
            "primitive": "u32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      }
    },
    "glam::UVec4::to_array": {
      "namespace": "glam::UVec4",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "u32"
            },
            4
          ]
        }
      },
      "documentation": " `[x, y, z, w]`"
    },
    "glam::UVec4::truncate": {
      "namespace": "glam::UVec4",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Creates a 3D vector from the `x`, `y` and `z` elements of `self`, discarding `w`.\n Truncation to [`UVec3`] may also be performed by using [`self.xyz()`][crate::swizzles::Vec4Swizzles::xyz()]."
    },
    "glam::UVec4::with_w": {
      "namespace": "glam::UVec4",
      "identifier": "with_w",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `w`."
    },
    "glam::UVec4::with_x": {
      "namespace": "glam::UVec4",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `x`."
    },
    "glam::UVec4::with_y": {
      "namespace": "glam::UVec4",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `y`."
    },
    "glam::UVec4::with_z": {
      "namespace": "glam::UVec4",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "u32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `z`."
    },
    "glam::UVec4::wrapping_add": {
      "namespace": "glam::UVec4",
      "identifier": "wrapping_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_add(rhs.x), self.y.wrapping_add(rhs.y), ..]`."
    },
    "glam::UVec4::wrapping_add_signed": {
      "namespace": "glam::UVec4",
      "identifier": "wrapping_add_signed",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::IVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping addition of `self` and signed vector `rhs`.\n In other words this computes `[self.x.wrapping_add_signed(rhs.x), self.y.wrapping_add_signed(rhs.y), ..]`."
    },
    "glam::UVec4::wrapping_div": {
      "namespace": "glam::UVec4",
      "identifier": "wrapping_div",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping division of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_div(rhs.x), self.y.wrapping_div(rhs.y), ..]`."
    },
    "glam::UVec4::wrapping_mul": {
      "namespace": "glam::UVec4",
      "identifier": "wrapping_mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping multiplication of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_mul(rhs.x), self.y.wrapping_mul(rhs.y), ..]`."
    },
    "glam::UVec4::wrapping_sub": {
      "namespace": "glam::UVec4",
      "identifier": "wrapping_sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::UVec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Returns a vector containing the wrapping subtraction of `self` and `rhs`.\n In other words this computes `[self.x.wrapping_sub(rhs.x), self.y.wrapping_sub(rhs.y), ..]`."
    },
    "glam::Vec2::abs": {
      "namespace": "glam::Vec2",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::Vec2::abs_diff_eq": {
      "namespace": "glam::Vec2",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs` is\n less than or equal to `max_abs_diff`.\n This can be used to compare if two vectors contain similar elements. It works best when\n comparing with a known value. The `max_abs_diff` that should be used used depends on\n the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::Vec2::add": {
      "namespace": "glam::Vec2",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::add-1": {
      "namespace": "glam::Vec2",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::add-2": {
      "namespace": "glam::Vec2",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::angle_between": {
      "namespace": "glam::Vec2",
      "identifier": "angle_between",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      }
    },
    "glam::Vec2::angle_to": {
      "namespace": "glam::Vec2",
      "identifier": "angle_to",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the angle of rotation (in radians) from `self` to `rhs` in the range `[-π, +π]`.\n The inputs do not need to be unit vectors however they must be non-zero."
    },
    "glam::Vec2::as_dvec2": {
      "namespace": "glam::Vec2",
      "identifier": "as_dvec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::Vec2::as_i64vec2": {
      "namespace": "glam::Vec2",
      "identifier": "as_i64vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::Vec2::as_ivec2": {
      "namespace": "glam::Vec2",
      "identifier": "as_ivec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::Vec2::as_u64vec2": {
      "namespace": "glam::Vec2",
      "identifier": "as_u64vec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::Vec2::as_uvec2": {
      "namespace": "glam::Vec2",
      "identifier": "as_uvec2",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec2"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::Vec2::ceil": {
      "namespace": "glam::Vec2",
      "identifier": "ceil",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector containing the smallest integer greater than or equal to a number for\n each element of `self`."
    },
    "glam::Vec2::clamp": {
      "namespace": "glam::Vec2",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`f32::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::Vec2::clamp_length": {
      "namespace": "glam::Vec2",
      "identifier": "clamp_length",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "min"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector with a length no less than `min` and no more than `max`.\n # Panics\n Will panic if `min` is greater than `max`, or if either `min` or `max` is negative, when `glam_assert` is enabled."
    },
    "glam::Vec2::clamp_length_max": {
      "namespace": "glam::Vec2",
      "identifier": "clamp_length_max",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector with a length no more than `max`.\n # Panics\n Will panic if `max` is negative when `glam_assert` is enabled."
    },
    "glam::Vec2::clamp_length_min": {
      "namespace": "glam::Vec2",
      "identifier": "clamp_length_min",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "min"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector with a length no less than `min`.\n # Panics\n Will panic if `min` is negative when `glam_assert` is enabled."
    },
    "glam::Vec2::clone": {
      "namespace": "glam::Vec2",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::cmpeq": {
      "namespace": "glam::Vec2",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::Vec2::cmpge": {
      "namespace": "glam::Vec2",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::Vec2::cmpgt": {
      "namespace": "glam::Vec2",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::Vec2::cmple": {
      "namespace": "glam::Vec2",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::Vec2::cmplt": {
      "namespace": "glam::Vec2",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::Vec2::cmpne": {
      "namespace": "glam::Vec2",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::Vec2::copysign": {
      "namespace": "glam::Vec2",
      "identifier": "copysign",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector with signs of `rhs` and the magnitudes of `self`."
    },
    "glam::Vec2::distance": {
      "namespace": "glam::Vec2",
      "identifier": "distance",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the Euclidean distance between two points in space."
    },
    "glam::Vec2::distance_squared": {
      "namespace": "glam::Vec2",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::Vec2::div": {
      "namespace": "glam::Vec2",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::div-1": {
      "namespace": "glam::Vec2",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::div-2": {
      "namespace": "glam::Vec2",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::div_euclid": {
      "namespace": "glam::Vec2",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`."
    },
    "glam::Vec2::dot": {
      "namespace": "glam::Vec2",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::Vec2::dot_into_vec": {
      "namespace": "glam::Vec2",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::Vec2::element_product": {
      "namespace": "glam::Vec2",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::Vec2::element_sum": {
      "namespace": "glam::Vec2",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::Vec2::eq": {
      "namespace": "glam::Vec2",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::Vec2::exp": {
      "namespace": "glam::Vec2",
      "identifier": "exp",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector containing `e^self` (the exponential function) for each element of\n `self`."
    },
    "glam::Vec2::extend": {
      "namespace": "glam::Vec2",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` and the given `z` value."
    },
    "glam::Vec2::floor": {
      "namespace": "glam::Vec2",
      "identifier": "floor",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector containing the largest integer less than or equal to a number for each\n element of `self`."
    },
    "glam::Vec2::fract": {
      "namespace": "glam::Vec2",
      "identifier": "fract",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector containing the fractional part of the vector as `self - self.trunc()`.\n Note that this differs from the GLSL implementation of `fract` which returns\n `self - self.floor()`.\n Note that this is fast but not precise for large numbers."
    },
    "glam::Vec2::fract_gl": {
      "namespace": "glam::Vec2",
      "identifier": "fract_gl",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector containing the fractional part of the vector as `self - self.floor()`.\n Note that this differs from the Rust implementation of `fract` which returns\n `self - self.trunc()`.\n Note that this is fast but not precise for large numbers."
    },
    "glam::Vec2::from_angle": {
      "namespace": "glam::Vec2",
      "identifier": "from_angle",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Creates a 2D vector containing `[angle.cos(), angle.sin()]`. This can be used in\n conjunction with the [`rotate()`][Self::rotate()] method, e.g.\n `Vec2::from_angle(PI).rotate(Vec2::Y)` will create the vector `[-1, 0]`\n and rotate [`Vec2::Y`] around it returning `-Vec2::Y`."
    },
    "glam::Vec2::from_array": {
      "namespace": "glam::Vec2",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "f32"
              },
              2
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::Vec2::is_finite": {
      "namespace": "glam::Vec2",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.  If any element is either\n `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::Vec2::is_finite_mask": {
      "namespace": "glam::Vec2",
      "identifier": "is_finite_mask",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Performs `is_finite` on each element of self, returning a vector mask of the results.\n In other words, this computes `[x.is_finite(), y.is_finite(), ...]`."
    },
    "glam::Vec2::is_nan": {
      "namespace": "glam::Vec2",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::Vec2::is_nan_mask": {
      "namespace": "glam::Vec2",
      "identifier": "is_nan_mask",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec2"
        }
      },
      "documentation": " Performs `is_nan` on each element of self, returning a vector mask of the results.\n In other words, this computes `[x.is_nan(), y.is_nan(), ...]`."
    },
    "glam::Vec2::is_negative_bitmask": {
      "namespace": "glam::Vec2",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 2 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::Vec2::is_normalized": {
      "namespace": "glam::Vec2",
      "identifier": "is_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns whether `self` is length `1.0` or not.\n Uses a precision threshold of approximately `1e-4`."
    },
    "glam::Vec2::length": {
      "namespace": "glam::Vec2",
      "identifier": "length",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the length of `self`."
    },
    "glam::Vec2::length_recip": {
      "namespace": "glam::Vec2",
      "identifier": "length_recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes `1.0 / length()`.\n For valid results, `self` must _not_ be of length zero."
    },
    "glam::Vec2::length_squared": {
      "namespace": "glam::Vec2",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the squared length of `self`.\n This is faster than `length()` as it avoids a square root operation."
    },
    "glam::Vec2::lerp": {
      "namespace": "glam::Vec2",
      "identifier": "lerp",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Performs a linear interpolation between `self` and `rhs` based on the value `s`.\n When `s` is `0.0`, the result will be equal to `self`.  When `s` is `1.0`, the result\n will be equal to `rhs`. When `s` is outside of range `[0, 1]`, the result is linearly\n extrapolated."
    },
    "glam::Vec2::max": {
      "namespace": "glam::Vec2",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::Vec2::max_element": {
      "namespace": "glam::Vec2",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::Vec2::midpoint": {
      "namespace": "glam::Vec2",
      "identifier": "midpoint",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Calculates the midpoint between `self` and `rhs`.\n The midpoint is the average of, or halfway point between, two vectors.\n `a.midpoint(b)` should yield the same result as `a.lerp(b, 0.5)`\n while being slightly cheaper to compute."
    },
    "glam::Vec2::min": {
      "namespace": "glam::Vec2",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::Vec2::min_element": {
      "namespace": "glam::Vec2",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::Vec2::move_towards": {
      "namespace": "glam::Vec2",
      "identifier": "move_towards",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "d"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Moves towards `rhs` based on the value `d`.\n When `d` is `0.0`, the result will be equal to `self`. When `d` is equal to\n `self.distance(rhs)`, the result will be equal to `rhs`. Will not go past `rhs`."
    },
    "glam::Vec2::mul": {
      "namespace": "glam::Vec2",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::mul-1": {
      "namespace": "glam::Vec2",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::mul-2": {
      "namespace": "glam::Vec2",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::mul_add": {
      "namespace": "glam::Vec2",
      "identifier": "mul_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "a"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "b"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Fused multiply-add. Computes `(self * a) + b` element-wise with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.\n Using `mul_add` *may* be more performant than an unfused multiply-add if the target\n architecture has a dedicated fma CPU instruction. However, this is not always true,\n and will be heavily dependant on designing algorithms with specific target hardware in\n mind."
    },
    "glam::Vec2::neg": {
      "namespace": "glam::Vec2",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::new": {
      "namespace": "glam::Vec2",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::Vec2::normalize": {
      "namespace": "glam::Vec2",
      "identifier": "normalize",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0.\n For valid results, `self` must be finite and _not_ of length zero, nor very close to zero.\n See also [`Self::try_normalize()`] and [`Self::normalize_or_zero()`].\n Panics\n Will panic if the resulting normalized vector is not finite when `glam_assert` is enabled."
    },
    "glam::Vec2::normalize_or": {
      "namespace": "glam::Vec2",
      "identifier": "normalize_or",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "fallback"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0 if possible, else returns a\n fallback value.\n In particular, if the input is zero (or very close to zero), or non-finite,\n the result of this operation will be the fallback value.\n See also [`Self::try_normalize()`]."
    },
    "glam::Vec2::normalize_or_zero": {
      "namespace": "glam::Vec2",
      "identifier": "normalize_or_zero",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0 if possible, else returns zero.\n In particular, if the input is zero (or very close to zero), or non-finite,\n the result of this operation will be zero.\n See also [`Self::try_normalize()`]."
    },
    "glam::Vec2::perp": {
      "namespace": "glam::Vec2",
      "identifier": "perp",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector that is equal to `self` rotated by 90 degrees."
    },
    "glam::Vec2::perp_dot": {
      "namespace": "glam::Vec2",
      "identifier": "perp_dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " The perpendicular dot product of `self` and `rhs`.\n Also known as the wedge product, 2D cross product, and determinant."
    },
    "glam::Vec2::powf": {
      "namespace": "glam::Vec2",
      "identifier": "powf",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "n"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector containing each element of `self` raised to the power of `n`."
    },
    "glam::Vec2::project_onto": {
      "namespace": "glam::Vec2",
      "identifier": "project_onto",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns the vector projection of `self` onto `rhs`.\n `rhs` must be of non-zero length.\n # Panics\n Will panic if `rhs` is zero length when `glam_assert` is enabled."
    },
    "glam::Vec2::project_onto_normalized": {
      "namespace": "glam::Vec2",
      "identifier": "project_onto_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns the vector projection of `self` onto `rhs`.\n `rhs` must be normalized.\n # Panics\n Will panic if `rhs` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec2::recip": {
      "namespace": "glam::Vec2",
      "identifier": "recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector containing the reciprocal `1.0/n` of each element of `self`."
    },
    "glam::Vec2::reflect": {
      "namespace": "glam::Vec2",
      "identifier": "reflect",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "normal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns the reflection vector for a given incident vector `self` and surface normal\n `normal`.\n `normal` must be normalized.\n # Panics\n Will panic if `normal` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec2::refract": {
      "namespace": "glam::Vec2",
      "identifier": "refract",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "normal"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "eta"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns the refraction direction for a given incident vector `self`, surface normal\n `normal` and ratio of indices of refraction, `eta`. When total internal reflection occurs,\n a zero vector will be returned.\n `self` and `normal` must be normalized.\n # Panics\n Will panic if `self` or `normal` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec2::reject_from": {
      "namespace": "glam::Vec2",
      "identifier": "reject_from",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns the vector rejection of `self` from `rhs`.\n The vector rejection is the vector perpendicular to the projection of `self` onto\n `rhs`, in rhs words the result of `self - self.project_onto(rhs)`.\n `rhs` must be of non-zero length.\n # Panics\n Will panic if `rhs` has a length of zero when `glam_assert` is enabled."
    },
    "glam::Vec2::reject_from_normalized": {
      "namespace": "glam::Vec2",
      "identifier": "reject_from_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns the vector rejection of `self` from `rhs`.\n The vector rejection is the vector perpendicular to the projection of `self` onto\n `rhs`, in rhs words the result of `self - self.project_onto(rhs)`.\n `rhs` must be normalized.\n # Panics\n Will panic if `rhs` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec2::rem": {
      "namespace": "glam::Vec2",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::rem-1": {
      "namespace": "glam::Vec2",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::rem-2": {
      "namespace": "glam::Vec2",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::rem_euclid": {
      "namespace": "glam::Vec2",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n [Euclidean division]: f32::rem_euclid"
    },
    "glam::Vec2::rotate": {
      "namespace": "glam::Vec2",
      "identifier": "rotate",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns `rhs` rotated by the angle of `self`. If `self` is normalized,\n then this just rotation. This is what you usually want. Otherwise,\n it will be like a rotation with a multiplication by `self`'s length."
    },
    "glam::Vec2::rotate_towards": {
      "namespace": "glam::Vec2",
      "identifier": "rotate_towards",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max_angle"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Rotates towards `rhs` up to `max_angle` (in radians).\n When `max_angle` is `0.0`, the result will be equal to `self`. When `max_angle` is equal to\n `self.angle_between(rhs)`, the result will be equal to `rhs`. If `max_angle` is negative,\n rotates towards the exact opposite of `rhs`. Will not go past the target."
    },
    "glam::Vec2::round": {
      "namespace": "glam::Vec2",
      "identifier": "round",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector containing the nearest integer to a number for each element of `self`.\n Round half-way cases away from 0.0."
    },
    "glam::Vec2::select": {
      "namespace": "glam::Vec2",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec2"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::Vec2::signum": {
      "namespace": "glam::Vec2",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n - `1.0` if the number is positive, `+0.0` or `INFINITY`\n - `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`\n - `NAN` if the number is `NAN`"
    },
    "glam::Vec2::splat": {
      "namespace": "glam::Vec2",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::Vec2::sub": {
      "namespace": "glam::Vec2",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::sub-1": {
      "namespace": "glam::Vec2",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          }
        },
        {
          "kind": {
            "val": "glam::Vec2"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::sub-2": {
      "namespace": "glam::Vec2",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      }
    },
    "glam::Vec2::to_angle": {
      "namespace": "glam::Vec2",
      "identifier": "to_angle",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the angle (in radians) of this vector in the range `[-π, +π]`.\n The input does not need to be a unit vector however it must be non-zero."
    },
    "glam::Vec2::to_array": {
      "namespace": "glam::Vec2",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f32"
            },
            2
          ]
        }
      },
      "documentation": " `[x, y]`"
    },
    "glam::Vec2::trunc": {
      "namespace": "glam::Vec2",
      "identifier": "trunc",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Returns a vector containing the integer part each element of `self`. This means numbers are\n always truncated towards zero."
    },
    "glam::Vec2::with_x": {
      "namespace": "glam::Vec2",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `x`."
    },
    "glam::Vec2::with_y": {
      "namespace": "glam::Vec2",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec2"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Creates a 2D vector from `self` with the given value of `y`."
    },
    "glam::Vec3::abs": {
      "namespace": "glam::Vec3",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::Vec3::abs_diff_eq": {
      "namespace": "glam::Vec3",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs` is\n less than or equal to `max_abs_diff`.\n This can be used to compare if two vectors contain similar elements. It works best when\n comparing with a known value. The `max_abs_diff` that should be used used depends on\n the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::Vec3::add": {
      "namespace": "glam::Vec3",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::add-1": {
      "namespace": "glam::Vec3",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::add-2": {
      "namespace": "glam::Vec3",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::angle_between": {
      "namespace": "glam::Vec3",
      "identifier": "angle_between",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the angle (in radians) between two vectors in the range `[0, +π]`.\n The inputs do not need to be unit vectors however they must be non-zero."
    },
    "glam::Vec3::any_orthogonal_vector": {
      "namespace": "glam::Vec3",
      "identifier": "any_orthogonal_vector",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns some vector that is orthogonal to the given one.\n The input vector must be finite and non-zero.\n The output vector is not necessarily unit length. For that use\n [`Self::any_orthonormal_vector()`] instead."
    },
    "glam::Vec3::any_orthonormal_vector": {
      "namespace": "glam::Vec3",
      "identifier": "any_orthonormal_vector",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns any unit vector that is orthogonal to the given one.\n The input vector must be unit length.\n # Panics\n Will panic if `self` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec3::as_dvec3": {
      "namespace": "glam::Vec3",
      "identifier": "as_dvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::Vec3::as_i64vec3": {
      "namespace": "glam::Vec3",
      "identifier": "as_i64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::Vec3::as_ivec3": {
      "namespace": "glam::Vec3",
      "identifier": "as_ivec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::Vec3::as_u64vec3": {
      "namespace": "glam::Vec3",
      "identifier": "as_u64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::Vec3::as_uvec3": {
      "namespace": "glam::Vec3",
      "identifier": "as_uvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::Vec3::ceil": {
      "namespace": "glam::Vec3",
      "identifier": "ceil",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector containing the smallest integer greater than or equal to a number for\n each element of `self`."
    },
    "glam::Vec3::clamp": {
      "namespace": "glam::Vec3",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`f32::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::Vec3::clamp_length": {
      "namespace": "glam::Vec3",
      "identifier": "clamp_length",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "min"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector with a length no less than `min` and no more than `max`.\n # Panics\n Will panic if `min` is greater than `max`, or if either `min` or `max` is negative, when `glam_assert` is enabled."
    },
    "glam::Vec3::clamp_length_max": {
      "namespace": "glam::Vec3",
      "identifier": "clamp_length_max",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector with a length no more than `max`.\n # Panics\n Will panic if `max` is negative when `glam_assert` is enabled."
    },
    "glam::Vec3::clamp_length_min": {
      "namespace": "glam::Vec3",
      "identifier": "clamp_length_min",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "min"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector with a length no less than `min`.\n # Panics\n Will panic if `min` is negative when `glam_assert` is enabled."
    },
    "glam::Vec3::clone": {
      "namespace": "glam::Vec3",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::cmpeq": {
      "namespace": "glam::Vec3",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::Vec3::cmpge": {
      "namespace": "glam::Vec3",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::Vec3::cmpgt": {
      "namespace": "glam::Vec3",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::Vec3::cmple": {
      "namespace": "glam::Vec3",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::Vec3::cmplt": {
      "namespace": "glam::Vec3",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::Vec3::cmpne": {
      "namespace": "glam::Vec3",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::Vec3::copysign": {
      "namespace": "glam::Vec3",
      "identifier": "copysign",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector with signs of `rhs` and the magnitudes of `self`."
    },
    "glam::Vec3::cross": {
      "namespace": "glam::Vec3",
      "identifier": "cross",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Computes the cross product of `self` and `rhs`."
    },
    "glam::Vec3::distance": {
      "namespace": "glam::Vec3",
      "identifier": "distance",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the Euclidean distance between two points in space."
    },
    "glam::Vec3::distance_squared": {
      "namespace": "glam::Vec3",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::Vec3::div": {
      "namespace": "glam::Vec3",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::div-1": {
      "namespace": "glam::Vec3",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::div-2": {
      "namespace": "glam::Vec3",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::div_euclid": {
      "namespace": "glam::Vec3",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`."
    },
    "glam::Vec3::dot": {
      "namespace": "glam::Vec3",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::Vec3::dot_into_vec": {
      "namespace": "glam::Vec3",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::Vec3::element_product": {
      "namespace": "glam::Vec3",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::Vec3::element_sum": {
      "namespace": "glam::Vec3",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::Vec3::eq": {
      "namespace": "glam::Vec3",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::Vec3::exp": {
      "namespace": "glam::Vec3",
      "identifier": "exp",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector containing `e^self` (the exponential function) for each element of\n `self`."
    },
    "glam::Vec3::extend": {
      "namespace": "glam::Vec3",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` and the given `w` value."
    },
    "glam::Vec3::floor": {
      "namespace": "glam::Vec3",
      "identifier": "floor",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector containing the largest integer less than or equal to a number for each\n element of `self`."
    },
    "glam::Vec3::fract": {
      "namespace": "glam::Vec3",
      "identifier": "fract",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector containing the fractional part of the vector as `self - self.trunc()`.\n Note that this differs from the GLSL implementation of `fract` which returns\n `self - self.floor()`.\n Note that this is fast but not precise for large numbers."
    },
    "glam::Vec3::fract_gl": {
      "namespace": "glam::Vec3",
      "identifier": "fract_gl",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector containing the fractional part of the vector as `self - self.floor()`.\n Note that this differs from the Rust implementation of `fract` which returns\n `self - self.trunc()`.\n Note that this is fast but not precise for large numbers."
    },
    "glam::Vec3::from_array": {
      "namespace": "glam::Vec3",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "f32"
              },
              3
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::Vec3::is_finite": {
      "namespace": "glam::Vec3",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.  If any element is either\n `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::Vec3::is_finite_mask": {
      "namespace": "glam::Vec3",
      "identifier": "is_finite_mask",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Performs `is_finite` on each element of self, returning a vector mask of the results.\n In other words, this computes `[x.is_finite(), y.is_finite(), ...]`."
    },
    "glam::Vec3::is_nan": {
      "namespace": "glam::Vec3",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::Vec3::is_nan_mask": {
      "namespace": "glam::Vec3",
      "identifier": "is_nan_mask",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3"
        }
      },
      "documentation": " Performs `is_nan` on each element of self, returning a vector mask of the results.\n In other words, this computes `[x.is_nan(), y.is_nan(), ...]`."
    },
    "glam::Vec3::is_negative_bitmask": {
      "namespace": "glam::Vec3",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 3 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::Vec3::is_normalized": {
      "namespace": "glam::Vec3",
      "identifier": "is_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns whether `self` is length `1.0` or not.\n Uses a precision threshold of approximately `1e-4`."
    },
    "glam::Vec3::length": {
      "namespace": "glam::Vec3",
      "identifier": "length",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the length of `self`."
    },
    "glam::Vec3::length_recip": {
      "namespace": "glam::Vec3",
      "identifier": "length_recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes `1.0 / length()`.\n For valid results, `self` must _not_ be of length zero."
    },
    "glam::Vec3::length_squared": {
      "namespace": "glam::Vec3",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the squared length of `self`.\n This is faster than `length()` as it avoids a square root operation."
    },
    "glam::Vec3::lerp": {
      "namespace": "glam::Vec3",
      "identifier": "lerp",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Performs a linear interpolation between `self` and `rhs` based on the value `s`.\n When `s` is `0.0`, the result will be equal to `self`.  When `s` is `1.0`, the result\n will be equal to `rhs`. When `s` is outside of range `[0, 1]`, the result is linearly\n extrapolated."
    },
    "glam::Vec3::max": {
      "namespace": "glam::Vec3",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::Vec3::max_element": {
      "namespace": "glam::Vec3",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::Vec3::midpoint": {
      "namespace": "glam::Vec3",
      "identifier": "midpoint",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Calculates the midpoint between `self` and `rhs`.\n The midpoint is the average of, or halfway point between, two vectors.\n `a.midpoint(b)` should yield the same result as `a.lerp(b, 0.5)`\n while being slightly cheaper to compute."
    },
    "glam::Vec3::min": {
      "namespace": "glam::Vec3",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::Vec3::min_element": {
      "namespace": "glam::Vec3",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::Vec3::move_towards": {
      "namespace": "glam::Vec3",
      "identifier": "move_towards",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "d"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Moves towards `rhs` based on the value `d`.\n When `d` is `0.0`, the result will be equal to `self`. When `d` is equal to\n `self.distance(rhs)`, the result will be equal to `rhs`. Will not go past `rhs`."
    },
    "glam::Vec3::mul": {
      "namespace": "glam::Vec3",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::mul-1": {
      "namespace": "glam::Vec3",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::mul-2": {
      "namespace": "glam::Vec3",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::mul_add": {
      "namespace": "glam::Vec3",
      "identifier": "mul_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "a"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "b"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Fused multiply-add. Computes `(self * a) + b` element-wise with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.\n Using `mul_add` *may* be more performant than an unfused multiply-add if the target\n architecture has a dedicated fma CPU instruction. However, this is not always true,\n and will be heavily dependant on designing algorithms with specific target hardware in\n mind."
    },
    "glam::Vec3::neg": {
      "namespace": "glam::Vec3",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::new": {
      "namespace": "glam::Vec3",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::Vec3::normalize": {
      "namespace": "glam::Vec3",
      "identifier": "normalize",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0.\n For valid results, `self` must be finite and _not_ of length zero, nor very close to zero.\n See also [`Self::try_normalize()`] and [`Self::normalize_or_zero()`].\n Panics\n Will panic if the resulting normalized vector is not finite when `glam_assert` is enabled."
    },
    "glam::Vec3::normalize_or": {
      "namespace": "glam::Vec3",
      "identifier": "normalize_or",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "fallback"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0 if possible, else returns a\n fallback value.\n In particular, if the input is zero (or very close to zero), or non-finite,\n the result of this operation will be the fallback value.\n See also [`Self::try_normalize()`]."
    },
    "glam::Vec3::normalize_or_zero": {
      "namespace": "glam::Vec3",
      "identifier": "normalize_or_zero",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0 if possible, else returns zero.\n In particular, if the input is zero (or very close to zero), or non-finite,\n the result of this operation will be zero.\n See also [`Self::try_normalize()`]."
    },
    "glam::Vec3::powf": {
      "namespace": "glam::Vec3",
      "identifier": "powf",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "n"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector containing each element of `self` raised to the power of `n`."
    },
    "glam::Vec3::project_onto": {
      "namespace": "glam::Vec3",
      "identifier": "project_onto",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns the vector projection of `self` onto `rhs`.\n `rhs` must be of non-zero length.\n # Panics\n Will panic if `rhs` is zero length when `glam_assert` is enabled."
    },
    "glam::Vec3::project_onto_normalized": {
      "namespace": "glam::Vec3",
      "identifier": "project_onto_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns the vector projection of `self` onto `rhs`.\n `rhs` must be normalized.\n # Panics\n Will panic if `rhs` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec3::recip": {
      "namespace": "glam::Vec3",
      "identifier": "recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector containing the reciprocal `1.0/n` of each element of `self`."
    },
    "glam::Vec3::reflect": {
      "namespace": "glam::Vec3",
      "identifier": "reflect",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "normal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns the reflection vector for a given incident vector `self` and surface normal\n `normal`.\n `normal` must be normalized.\n # Panics\n Will panic if `normal` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec3::refract": {
      "namespace": "glam::Vec3",
      "identifier": "refract",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "normal"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "eta"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns the refraction direction for a given incident vector `self`, surface normal\n `normal` and ratio of indices of refraction, `eta`. When total internal reflection occurs,\n a zero vector will be returned.\n `self` and `normal` must be normalized.\n # Panics\n Will panic if `self` or `normal` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec3::reject_from": {
      "namespace": "glam::Vec3",
      "identifier": "reject_from",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns the vector rejection of `self` from `rhs`.\n The vector rejection is the vector perpendicular to the projection of `self` onto\n `rhs`, in rhs words the result of `self - self.project_onto(rhs)`.\n `rhs` must be of non-zero length.\n # Panics\n Will panic if `rhs` has a length of zero when `glam_assert` is enabled."
    },
    "glam::Vec3::reject_from_normalized": {
      "namespace": "glam::Vec3",
      "identifier": "reject_from_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns the vector rejection of `self` from `rhs`.\n The vector rejection is the vector perpendicular to the projection of `self` onto\n `rhs`, in rhs words the result of `self - self.project_onto(rhs)`.\n `rhs` must be normalized.\n # Panics\n Will panic if `rhs` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec3::rem": {
      "namespace": "glam::Vec3",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::rem-1": {
      "namespace": "glam::Vec3",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::rem-2": {
      "namespace": "glam::Vec3",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::rem_euclid": {
      "namespace": "glam::Vec3",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n [Euclidean division]: f32::rem_euclid"
    },
    "glam::Vec3::round": {
      "namespace": "glam::Vec3",
      "identifier": "round",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector containing the nearest integer to a number for each element of `self`.\n Round half-way cases away from 0.0."
    },
    "glam::Vec3::select": {
      "namespace": "glam::Vec3",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec3"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::Vec3::signum": {
      "namespace": "glam::Vec3",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n - `1.0` if the number is positive, `+0.0` or `INFINITY`\n - `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`\n - `NAN` if the number is `NAN`"
    },
    "glam::Vec3::splat": {
      "namespace": "glam::Vec3",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::Vec3::sub": {
      "namespace": "glam::Vec3",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::sub-1": {
      "namespace": "glam::Vec3",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::sub-2": {
      "namespace": "glam::Vec3",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      }
    },
    "glam::Vec3::to_array": {
      "namespace": "glam::Vec3",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f32"
            },
            3
          ]
        }
      },
      "documentation": " `[x, y, z]`"
    },
    "glam::Vec3::trunc": {
      "namespace": "glam::Vec3",
      "identifier": "trunc",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Returns a vector containing the integer part each element of `self`. This means numbers are\n always truncated towards zero."
    },
    "glam::Vec3::truncate": {
      "namespace": "glam::Vec3",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Creates a 2D vector from the `x` and `y` elements of `self`, discarding `z`.\n Truncation may also be performed by using [`self.xy()`][crate::swizzles::Vec3Swizzles::xy()]."
    },
    "glam::Vec3::with_x": {
      "namespace": "glam::Vec3",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `x`."
    },
    "glam::Vec3::with_y": {
      "namespace": "glam::Vec3",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `y`."
    },
    "glam::Vec3::with_z": {
      "namespace": "glam::Vec3",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `z`."
    },
    "glam::Vec3A::abs": {
      "namespace": "glam::Vec3A",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::Vec3A::abs_diff_eq": {
      "namespace": "glam::Vec3A",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs` is\n less than or equal to `max_abs_diff`.\n This can be used to compare if two vectors contain similar elements. It works best when\n comparing with a known value. The `max_abs_diff` that should be used used depends on\n the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::Vec3A::add": {
      "namespace": "glam::Vec3A",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::add-1": {
      "namespace": "glam::Vec3A",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::add-2": {
      "namespace": "glam::Vec3A",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::angle_between": {
      "namespace": "glam::Vec3A",
      "identifier": "angle_between",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the angle (in radians) between two vectors in the range `[0, +π]`.\n The inputs do not need to be unit vectors however they must be non-zero."
    },
    "glam::Vec3A::any_orthogonal_vector": {
      "namespace": "glam::Vec3A",
      "identifier": "any_orthogonal_vector",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns some vector that is orthogonal to the given one.\n The input vector must be finite and non-zero.\n The output vector is not necessarily unit length. For that use\n [`Self::any_orthonormal_vector()`] instead."
    },
    "glam::Vec3A::any_orthonormal_vector": {
      "namespace": "glam::Vec3A",
      "identifier": "any_orthonormal_vector",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns any unit vector that is orthogonal to the given one.\n The input vector must be unit length.\n # Panics\n Will panic if `self` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec3A::as_dvec3": {
      "namespace": "glam::Vec3A",
      "identifier": "as_dvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::Vec3A::as_i64vec3": {
      "namespace": "glam::Vec3A",
      "identifier": "as_i64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::Vec3A::as_ivec3": {
      "namespace": "glam::Vec3A",
      "identifier": "as_ivec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::Vec3A::as_u64vec3": {
      "namespace": "glam::Vec3A",
      "identifier": "as_u64vec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::Vec3A::as_uvec3": {
      "namespace": "glam::Vec3A",
      "identifier": "as_uvec3",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec3"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::Vec3A::ceil": {
      "namespace": "glam::Vec3A",
      "identifier": "ceil",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector containing the smallest integer greater than or equal to a number for\n each element of `self`."
    },
    "glam::Vec3A::clamp": {
      "namespace": "glam::Vec3A",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`f32::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::Vec3A::clamp_length": {
      "namespace": "glam::Vec3A",
      "identifier": "clamp_length",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "min"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector with a length no less than `min` and no more than `max`.\n # Panics\n Will panic if `min` is greater than `max`, or if either `min` or `max` is negative, when `glam_assert` is enabled."
    },
    "glam::Vec3A::clamp_length_max": {
      "namespace": "glam::Vec3A",
      "identifier": "clamp_length_max",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector with a length no more than `max`.\n # Panics\n Will panic if `max` is negative when `glam_assert` is enabled."
    },
    "glam::Vec3A::clamp_length_min": {
      "namespace": "glam::Vec3A",
      "identifier": "clamp_length_min",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "min"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector with a length no less than `min`.\n # Panics\n Will panic if `min` is negative when `glam_assert` is enabled."
    },
    "glam::Vec3A::clone": {
      "namespace": "glam::Vec3A",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::cmpeq": {
      "namespace": "glam::Vec3A",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3A"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::Vec3A::cmpge": {
      "namespace": "glam::Vec3A",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3A"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::Vec3A::cmpgt": {
      "namespace": "glam::Vec3A",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3A"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::Vec3A::cmple": {
      "namespace": "glam::Vec3A",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3A"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::Vec3A::cmplt": {
      "namespace": "glam::Vec3A",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3A"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::Vec3A::cmpne": {
      "namespace": "glam::Vec3A",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3A"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::Vec3A::copysign": {
      "namespace": "glam::Vec3A",
      "identifier": "copysign",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector with signs of `rhs` and the magnitudes of `self`."
    },
    "glam::Vec3A::cross": {
      "namespace": "glam::Vec3A",
      "identifier": "cross",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Computes the cross product of `self` and `rhs`."
    },
    "glam::Vec3A::distance": {
      "namespace": "glam::Vec3A",
      "identifier": "distance",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the Euclidean distance between two points in space."
    },
    "glam::Vec3A::distance_squared": {
      "namespace": "glam::Vec3A",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::Vec3A::div": {
      "namespace": "glam::Vec3A",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::div-1": {
      "namespace": "glam::Vec3A",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::div-2": {
      "namespace": "glam::Vec3A",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::div_euclid": {
      "namespace": "glam::Vec3A",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`."
    },
    "glam::Vec3A::dot": {
      "namespace": "glam::Vec3A",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::Vec3A::dot_into_vec": {
      "namespace": "glam::Vec3A",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::Vec3A::element_product": {
      "namespace": "glam::Vec3A",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::Vec3A::element_sum": {
      "namespace": "glam::Vec3A",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::Vec3A::eq": {
      "namespace": "glam::Vec3A",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::Vec3A::exp": {
      "namespace": "glam::Vec3A",
      "identifier": "exp",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector containing `e^self` (the exponential function) for each element of\n `self`."
    },
    "glam::Vec3A::extend": {
      "namespace": "glam::Vec3A",
      "identifier": "extend",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` and the given `w` value."
    },
    "glam::Vec3A::floor": {
      "namespace": "glam::Vec3A",
      "identifier": "floor",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector containing the largest integer less than or equal to a number for each\n element of `self`."
    },
    "glam::Vec3A::fract": {
      "namespace": "glam::Vec3A",
      "identifier": "fract",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector containing the fractional part of the vector as `self - self.trunc()`.\n Note that this differs from the GLSL implementation of `fract` which returns\n `self - self.floor()`.\n Note that this is fast but not precise for large numbers."
    },
    "glam::Vec3A::fract_gl": {
      "namespace": "glam::Vec3A",
      "identifier": "fract_gl",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector containing the fractional part of the vector as `self - self.floor()`.\n Note that this differs from the Rust implementation of `fract` which returns\n `self - self.trunc()`.\n Note that this is fast but not precise for large numbers."
    },
    "glam::Vec3A::from_array": {
      "namespace": "glam::Vec3A",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "f32"
              },
              3
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::Vec3A::from_vec4": {
      "namespace": "glam::Vec3A",
      "identifier": "from_vec4",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Creates a [`Vec3A`] from the `x`, `y` and `z` elements of `self` discarding `w`.\n On architectures where SIMD is supported such as SSE2 on `x86_64` this conversion is a noop."
    },
    "glam::Vec3A::is_finite": {
      "namespace": "glam::Vec3A",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.  If any element is either\n `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::Vec3A::is_finite_mask": {
      "namespace": "glam::Vec3A",
      "identifier": "is_finite_mask",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3A"
        }
      },
      "documentation": " Performs `is_finite` on each element of self, returning a vector mask of the results.\n In other words, this computes `[x.is_finite(), y.is_finite(), ...]`."
    },
    "glam::Vec3A::is_nan": {
      "namespace": "glam::Vec3A",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::Vec3A::is_nan_mask": {
      "namespace": "glam::Vec3A",
      "identifier": "is_nan_mask",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec3A"
        }
      },
      "documentation": " Performs `is_nan` on each element of self, returning a vector mask of the results.\n In other words, this computes `[x.is_nan(), y.is_nan(), ...]`."
    },
    "glam::Vec3A::is_negative_bitmask": {
      "namespace": "glam::Vec3A",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 3 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::Vec3A::is_normalized": {
      "namespace": "glam::Vec3A",
      "identifier": "is_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns whether `self` is length `1.0` or not.\n Uses a precision threshold of approximately `1e-4`."
    },
    "glam::Vec3A::length": {
      "namespace": "glam::Vec3A",
      "identifier": "length",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the length of `self`."
    },
    "glam::Vec3A::length_recip": {
      "namespace": "glam::Vec3A",
      "identifier": "length_recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes `1.0 / length()`.\n For valid results, `self` must _not_ be of length zero."
    },
    "glam::Vec3A::length_squared": {
      "namespace": "glam::Vec3A",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the squared length of `self`.\n This is faster than `length()` as it avoids a square root operation."
    },
    "glam::Vec3A::lerp": {
      "namespace": "glam::Vec3A",
      "identifier": "lerp",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Performs a linear interpolation between `self` and `rhs` based on the value `s`.\n When `s` is `0.0`, the result will be equal to `self`.  When `s` is `1.0`, the result\n will be equal to `rhs`. When `s` is outside of range `[0, 1]`, the result is linearly\n extrapolated."
    },
    "glam::Vec3A::max": {
      "namespace": "glam::Vec3A",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::Vec3A::max_element": {
      "namespace": "glam::Vec3A",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::Vec3A::midpoint": {
      "namespace": "glam::Vec3A",
      "identifier": "midpoint",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Calculates the midpoint between `self` and `rhs`.\n The midpoint is the average of, or halfway point between, two vectors.\n `a.midpoint(b)` should yield the same result as `a.lerp(b, 0.5)`\n while being slightly cheaper to compute."
    },
    "glam::Vec3A::min": {
      "namespace": "glam::Vec3A",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::Vec3A::min_element": {
      "namespace": "glam::Vec3A",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::Vec3A::move_towards": {
      "namespace": "glam::Vec3A",
      "identifier": "move_towards",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "d"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Moves towards `rhs` based on the value `d`.\n When `d` is `0.0`, the result will be equal to `self`. When `d` is equal to\n `self.distance(rhs)`, the result will be equal to `rhs`. Will not go past `rhs`."
    },
    "glam::Vec3A::mul": {
      "namespace": "glam::Vec3A",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::mul-1": {
      "namespace": "glam::Vec3A",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::mul-2": {
      "namespace": "glam::Vec3A",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::mul_add": {
      "namespace": "glam::Vec3A",
      "identifier": "mul_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "a"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "b"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Fused multiply-add. Computes `(self * a) + b` element-wise with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.\n Using `mul_add` *may* be more performant than an unfused multiply-add if the target\n architecture has a dedicated fma CPU instruction. However, this is not always true,\n and will be heavily dependant on designing algorithms with specific target hardware in\n mind."
    },
    "glam::Vec3A::neg": {
      "namespace": "glam::Vec3A",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::new": {
      "namespace": "glam::Vec3A",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::Vec3A::normalize": {
      "namespace": "glam::Vec3A",
      "identifier": "normalize",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0.\n For valid results, `self` must be finite and _not_ of length zero, nor very close to zero.\n See also [`Self::try_normalize()`] and [`Self::normalize_or_zero()`].\n Panics\n Will panic if the resulting normalized vector is not finite when `glam_assert` is enabled."
    },
    "glam::Vec3A::normalize_or": {
      "namespace": "glam::Vec3A",
      "identifier": "normalize_or",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "fallback"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0 if possible, else returns a\n fallback value.\n In particular, if the input is zero (or very close to zero), or non-finite,\n the result of this operation will be the fallback value.\n See also [`Self::try_normalize()`]."
    },
    "glam::Vec3A::normalize_or_zero": {
      "namespace": "glam::Vec3A",
      "identifier": "normalize_or_zero",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0 if possible, else returns zero.\n In particular, if the input is zero (or very close to zero), or non-finite,\n the result of this operation will be zero.\n See also [`Self::try_normalize()`]."
    },
    "glam::Vec3A::powf": {
      "namespace": "glam::Vec3A",
      "identifier": "powf",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "n"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector containing each element of `self` raised to the power of `n`."
    },
    "glam::Vec3A::project_onto": {
      "namespace": "glam::Vec3A",
      "identifier": "project_onto",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns the vector projection of `self` onto `rhs`.\n `rhs` must be of non-zero length.\n # Panics\n Will panic if `rhs` is zero length when `glam_assert` is enabled."
    },
    "glam::Vec3A::project_onto_normalized": {
      "namespace": "glam::Vec3A",
      "identifier": "project_onto_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns the vector projection of `self` onto `rhs`.\n `rhs` must be normalized.\n # Panics\n Will panic if `rhs` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec3A::recip": {
      "namespace": "glam::Vec3A",
      "identifier": "recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector containing the reciprocal `1.0/n` of each element of `self`."
    },
    "glam::Vec3A::reflect": {
      "namespace": "glam::Vec3A",
      "identifier": "reflect",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "normal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns the reflection vector for a given incident vector `self` and surface normal\n `normal`.\n `normal` must be normalized.\n # Panics\n Will panic if `normal` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec3A::refract": {
      "namespace": "glam::Vec3A",
      "identifier": "refract",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "normal"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "eta"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns the refraction direction for a given incident vector `self`, surface normal\n `normal` and ratio of indices of refraction, `eta`. When total internal reflection occurs,\n a zero vector will be returned.\n `self` and `normal` must be normalized.\n # Panics\n Will panic if `self` or `normal` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec3A::reject_from": {
      "namespace": "glam::Vec3A",
      "identifier": "reject_from",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns the vector rejection of `self` from `rhs`.\n The vector rejection is the vector perpendicular to the projection of `self` onto\n `rhs`, in rhs words the result of `self - self.project_onto(rhs)`.\n `rhs` must be of non-zero length.\n # Panics\n Will panic if `rhs` has a length of zero when `glam_assert` is enabled."
    },
    "glam::Vec3A::reject_from_normalized": {
      "namespace": "glam::Vec3A",
      "identifier": "reject_from_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns the vector rejection of `self` from `rhs`.\n The vector rejection is the vector perpendicular to the projection of `self` onto\n `rhs`, in rhs words the result of `self - self.project_onto(rhs)`.\n `rhs` must be normalized.\n # Panics\n Will panic if `rhs` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec3A::rem": {
      "namespace": "glam::Vec3A",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::rem-1": {
      "namespace": "glam::Vec3A",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::rem-2": {
      "namespace": "glam::Vec3A",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::rem_euclid": {
      "namespace": "glam::Vec3A",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n [Euclidean division]: f32::rem_euclid"
    },
    "glam::Vec3A::round": {
      "namespace": "glam::Vec3A",
      "identifier": "round",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector containing the nearest integer to a number for each element of `self`.\n Round half-way cases away from 0.0."
    },
    "glam::Vec3A::select": {
      "namespace": "glam::Vec3A",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec3A"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::Vec3A::signum": {
      "namespace": "glam::Vec3A",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n - `1.0` if the number is positive, `+0.0` or `INFINITY`\n - `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`\n - `NAN` if the number is `NAN`"
    },
    "glam::Vec3A::splat": {
      "namespace": "glam::Vec3A",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::Vec3A::sub": {
      "namespace": "glam::Vec3A",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::sub-1": {
      "namespace": "glam::Vec3A",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        },
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::sub-2": {
      "namespace": "glam::Vec3A",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      }
    },
    "glam::Vec3A::to_array": {
      "namespace": "glam::Vec3A",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f32"
            },
            3
          ]
        }
      },
      "documentation": " `[x, y, z]`"
    },
    "glam::Vec3A::trunc": {
      "namespace": "glam::Vec3A",
      "identifier": "trunc",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Returns a vector containing the integer part each element of `self`. This means numbers are\n always truncated towards zero."
    },
    "glam::Vec3A::truncate": {
      "namespace": "glam::Vec3A",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec2"
        }
      },
      "documentation": " Creates a 2D vector from the `x` and `y` elements of `self`, discarding `z`.\n Truncation may also be performed by using [`self.xy()`][crate::swizzles::Vec3Swizzles::xy()]."
    },
    "glam::Vec3A::with_x": {
      "namespace": "glam::Vec3A",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `x`."
    },
    "glam::Vec3A::with_y": {
      "namespace": "glam::Vec3A",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `y`."
    },
    "glam::Vec3A::with_z": {
      "namespace": "glam::Vec3A",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec3A"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3A"
        }
      },
      "documentation": " Creates a 3D vector from `self` with the given value of `z`."
    },
    "glam::Vec4::abs": {
      "namespace": "glam::Vec4",
      "identifier": "abs",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector containing the absolute value of each element of `self`."
    },
    "glam::Vec4::abs_diff_eq": {
      "namespace": "glam::Vec4",
      "identifier": "abs_diff_eq",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max_abs_diff"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns true if the absolute difference of all elements between `self` and `rhs` is\n less than or equal to `max_abs_diff`.\n This can be used to compare if two vectors contain similar elements. It works best when\n comparing with a known value. The `max_abs_diff` that should be used used depends on\n the values being compared against.\n For more see\n [comparing floating point numbers](https://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/)."
    },
    "glam::Vec4::add": {
      "namespace": "glam::Vec4",
      "identifier": "add",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::add-1": {
      "namespace": "glam::Vec4",
      "identifier": "add-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::add-2": {
      "namespace": "glam::Vec4",
      "identifier": "add-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::as_dvec4": {
      "namespace": "glam::Vec4",
      "identifier": "as_dvec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::DVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `f64`."
    },
    "glam::Vec4::as_i64vec4": {
      "namespace": "glam::Vec4",
      "identifier": "as_i64vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::I64Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i64`."
    },
    "glam::Vec4::as_ivec4": {
      "namespace": "glam::Vec4",
      "identifier": "as_ivec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::IVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `i32`."
    },
    "glam::Vec4::as_u64vec4": {
      "namespace": "glam::Vec4",
      "identifier": "as_u64vec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::U64Vec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u64`."
    },
    "glam::Vec4::as_uvec4": {
      "namespace": "glam::Vec4",
      "identifier": "as_uvec4",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::UVec4"
        }
      },
      "documentation": " Casts all elements of `self` to `u32`."
    },
    "glam::Vec4::ceil": {
      "namespace": "glam::Vec4",
      "identifier": "ceil",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector containing the smallest integer greater than or equal to a number for\n each element of `self`."
    },
    "glam::Vec4::clamp": {
      "namespace": "glam::Vec4",
      "identifier": "clamp",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "min"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Component-wise clamping of values, similar to [`f32::clamp`].\n Each element in `min` must be less-or-equal to the corresponding element in `max`.\n # Panics\n Will panic if `min` is greater than `max` when `glam_assert` is enabled."
    },
    "glam::Vec4::clamp_length": {
      "namespace": "glam::Vec4",
      "identifier": "clamp_length",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "min"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector with a length no less than `min` and no more than `max`.\n # Panics\n Will panic if `min` is greater than `max`, or if either `min` or `max` is negative, when `glam_assert` is enabled."
    },
    "glam::Vec4::clamp_length_max": {
      "namespace": "glam::Vec4",
      "identifier": "clamp_length_max",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "max"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector with a length no more than `max`.\n # Panics\n Will panic if `max` is negative when `glam_assert` is enabled."
    },
    "glam::Vec4::clamp_length_min": {
      "namespace": "glam::Vec4",
      "identifier": "clamp_length_min",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "min"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector with a length no less than `min`.\n # Panics\n Will panic if `min` is negative when `glam_assert` is enabled."
    },
    "glam::Vec4::clone": {
      "namespace": "glam::Vec4",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::cmpeq": {
      "namespace": "glam::Vec4",
      "identifier": "cmpeq",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4A"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `==` comparison for each element of\n `self` and `rhs`.\n In other words, this computes `[self.x == rhs.x, self.y == rhs.y, ..]` for all\n elements."
    },
    "glam::Vec4::cmpge": {
      "namespace": "glam::Vec4",
      "identifier": "cmpge",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4A"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x >= rhs.x, self.y >= rhs.y, ..]` for all\n elements."
    },
    "glam::Vec4::cmpgt": {
      "namespace": "glam::Vec4",
      "identifier": "cmpgt",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4A"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `>` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x > rhs.x, self.y > rhs.y, ..]` for all\n elements."
    },
    "glam::Vec4::cmple": {
      "namespace": "glam::Vec4",
      "identifier": "cmple",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4A"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x <= rhs.x, self.y <= rhs.y, ..]` for all\n elements."
    },
    "glam::Vec4::cmplt": {
      "namespace": "glam::Vec4",
      "identifier": "cmplt",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4A"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `<` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x < rhs.x, self.y < rhs.y, ..]` for all\n elements."
    },
    "glam::Vec4::cmpne": {
      "namespace": "glam::Vec4",
      "identifier": "cmpne",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4A"
        }
      },
      "documentation": " Returns a vector mask containing the result of a `!=` comparison for each element of\n `self` and `rhs`.\n In other words this computes `[self.x != rhs.x, self.y != rhs.y, ..]` for all\n elements."
    },
    "glam::Vec4::copysign": {
      "namespace": "glam::Vec4",
      "identifier": "copysign",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector with signs of `rhs` and the magnitudes of `self`."
    },
    "glam::Vec4::distance": {
      "namespace": "glam::Vec4",
      "identifier": "distance",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the Euclidean distance between two points in space."
    },
    "glam::Vec4::distance_squared": {
      "namespace": "glam::Vec4",
      "identifier": "distance_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Compute the squared euclidean distance between two points in space."
    },
    "glam::Vec4::div": {
      "namespace": "glam::Vec4",
      "identifier": "div",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::div-1": {
      "namespace": "glam::Vec4",
      "identifier": "div-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::div-2": {
      "namespace": "glam::Vec4",
      "identifier": "div-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::div_euclid": {
      "namespace": "glam::Vec4",
      "identifier": "div_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns the element-wise quotient of [Euclidean division] of `self` by `rhs`."
    },
    "glam::Vec4::dot": {
      "namespace": "glam::Vec4",
      "identifier": "dot",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the dot product of `self` and `rhs`."
    },
    "glam::Vec4::dot_into_vec": {
      "namespace": "glam::Vec4",
      "identifier": "dot_into_vec",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector where every component is the dot product of `self` and `rhs`."
    },
    "glam::Vec4::element_product": {
      "namespace": "glam::Vec4",
      "identifier": "element_product",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the product of all elements of `self`.\n In other words, this computes `self.x * self.y * ..`."
    },
    "glam::Vec4::element_sum": {
      "namespace": "glam::Vec4",
      "identifier": "element_sum",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the sum of all elements of `self`.\n In other words, this computes `self.x + self.y + ..`."
    },
    "glam::Vec4::eq": {
      "namespace": "glam::Vec4",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "glam::Vec4::exp": {
      "namespace": "glam::Vec4",
      "identifier": "exp",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector containing `e^self` (the exponential function) for each element of\n `self`."
    },
    "glam::Vec4::floor": {
      "namespace": "glam::Vec4",
      "identifier": "floor",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector containing the largest integer less than or equal to a number for each\n element of `self`."
    },
    "glam::Vec4::fract": {
      "namespace": "glam::Vec4",
      "identifier": "fract",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector containing the fractional part of the vector as `self - self.trunc()`.\n Note that this differs from the GLSL implementation of `fract` which returns\n `self - self.floor()`.\n Note that this is fast but not precise for large numbers."
    },
    "glam::Vec4::fract_gl": {
      "namespace": "glam::Vec4",
      "identifier": "fract_gl",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector containing the fractional part of the vector as `self - self.floor()`.\n Note that this differs from the Rust implementation of `fract` which returns\n `self - self.trunc()`.\n Note that this is fast but not precise for large numbers."
    },
    "glam::Vec4::from_array": {
      "namespace": "glam::Vec4",
      "identifier": "from_array",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "f32"
              },
              4
            ]
          },
          "name": "a"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Creates a new vector from an array."
    },
    "glam::Vec4::is_finite": {
      "namespace": "glam::Vec4",
      "identifier": "is_finite",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if, and only if, all elements are finite.  If any element is either\n `NaN`, positive or negative infinity, this will return `false`."
    },
    "glam::Vec4::is_finite_mask": {
      "namespace": "glam::Vec4",
      "identifier": "is_finite_mask",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4A"
        }
      },
      "documentation": " Performs `is_finite` on each element of self, returning a vector mask of the results.\n In other words, this computes `[x.is_finite(), y.is_finite(), ...]`."
    },
    "glam::Vec4::is_nan": {
      "namespace": "glam::Vec4",
      "identifier": "is_nan",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns `true` if any elements are `NaN`."
    },
    "glam::Vec4::is_nan_mask": {
      "namespace": "glam::Vec4",
      "identifier": "is_nan_mask",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::BVec4A"
        }
      },
      "documentation": " Performs `is_nan` on each element of self, returning a vector mask of the results.\n In other words, this computes `[x.is_nan(), y.is_nan(), ...]`."
    },
    "glam::Vec4::is_negative_bitmask": {
      "namespace": "glam::Vec4",
      "identifier": "is_negative_bitmask",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u32"
        }
      },
      "documentation": " Returns a bitmask with the lowest 4 bits set to the sign bits from the elements of `self`.\n A negative element results in a `1` bit and a positive element in a `0` bit.  Element `x` goes\n into the first lowest bit, element `y` into the second, etc."
    },
    "glam::Vec4::is_normalized": {
      "namespace": "glam::Vec4",
      "identifier": "is_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Returns whether `self` is length `1.0` or not.\n Uses a precision threshold of approximately `1e-4`."
    },
    "glam::Vec4::length": {
      "namespace": "glam::Vec4",
      "identifier": "length",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the length of `self`."
    },
    "glam::Vec4::length_recip": {
      "namespace": "glam::Vec4",
      "identifier": "length_recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes `1.0 / length()`.\n For valid results, `self` must _not_ be of length zero."
    },
    "glam::Vec4::length_squared": {
      "namespace": "glam::Vec4",
      "identifier": "length_squared",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Computes the squared length of `self`.\n This is faster than `length()` as it avoids a square root operation."
    },
    "glam::Vec4::lerp": {
      "namespace": "glam::Vec4",
      "identifier": "lerp",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "s"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Performs a linear interpolation between `self` and `rhs` based on the value `s`.\n When `s` is `0.0`, the result will be equal to `self`.  When `s` is `1.0`, the result\n will be equal to `rhs`. When `s` is outside of range `[0, 1]`, the result is linearly\n extrapolated."
    },
    "glam::Vec4::max": {
      "namespace": "glam::Vec4",
      "identifier": "max",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector containing the maximum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.max(rhs.x), self.y.max(rhs.y), ..]`."
    },
    "glam::Vec4::max_element": {
      "namespace": "glam::Vec4",
      "identifier": "max_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the horizontal maximum of `self`.\n In other words this computes `max(x, y, ..)`."
    },
    "glam::Vec4::midpoint": {
      "namespace": "glam::Vec4",
      "identifier": "midpoint",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Calculates the midpoint between `self` and `rhs`.\n The midpoint is the average of, or halfway point between, two vectors.\n `a.midpoint(b)` should yield the same result as `a.lerp(b, 0.5)`\n while being slightly cheaper to compute."
    },
    "glam::Vec4::min": {
      "namespace": "glam::Vec4",
      "identifier": "min",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector containing the minimum values for each element of `self` and `rhs`.\n In other words this computes `[self.x.min(rhs.x), self.y.min(rhs.y), ..]`."
    },
    "glam::Vec4::min_element": {
      "namespace": "glam::Vec4",
      "identifier": "min_element",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "f32"
        }
      },
      "documentation": " Returns the horizontal minimum of `self`.\n In other words this computes `min(x, y, ..)`."
    },
    "glam::Vec4::move_towards": {
      "namespace": "glam::Vec4",
      "identifier": "move_towards",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "d"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Moves towards `rhs` based on the value `d`.\n When `d` is `0.0`, the result will be equal to `self`. When `d` is equal to\n `self.distance(rhs)`, the result will be equal to `rhs`. Will not go past `rhs`."
    },
    "glam::Vec4::mul": {
      "namespace": "glam::Vec4",
      "identifier": "mul",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::mul-1": {
      "namespace": "glam::Vec4",
      "identifier": "mul-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::mul-2": {
      "namespace": "glam::Vec4",
      "identifier": "mul-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::mul_add": {
      "namespace": "glam::Vec4",
      "identifier": "mul_add",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "a"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "b"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Fused multiply-add. Computes `(self * a) + b` element-wise with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.\n Using `mul_add` *may* be more performant than an unfused multiply-add if the target\n architecture has a dedicated fma CPU instruction. However, this is not always true,\n and will be heavily dependant on designing algorithms with specific target hardware in\n mind."
    },
    "glam::Vec4::neg": {
      "namespace": "glam::Vec4",
      "identifier": "neg",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::new": {
      "namespace": "glam::Vec4",
      "identifier": "new",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Creates a new vector."
    },
    "glam::Vec4::normalize": {
      "namespace": "glam::Vec4",
      "identifier": "normalize",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0.\n For valid results, `self` must be finite and _not_ of length zero, nor very close to zero.\n See also [`Self::try_normalize()`] and [`Self::normalize_or_zero()`].\n Panics\n Will panic if the resulting normalized vector is not finite when `glam_assert` is enabled."
    },
    "glam::Vec4::normalize_or": {
      "namespace": "glam::Vec4",
      "identifier": "normalize_or",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "fallback"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0 if possible, else returns a\n fallback value.\n In particular, if the input is zero (or very close to zero), or non-finite,\n the result of this operation will be the fallback value.\n See also [`Self::try_normalize()`]."
    },
    "glam::Vec4::normalize_or_zero": {
      "namespace": "glam::Vec4",
      "identifier": "normalize_or_zero",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns `self` normalized to length 1.0 if possible, else returns zero.\n In particular, if the input is zero (or very close to zero), or non-finite,\n the result of this operation will be zero.\n See also [`Self::try_normalize()`]."
    },
    "glam::Vec4::powf": {
      "namespace": "glam::Vec4",
      "identifier": "powf",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "n"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector containing each element of `self` raised to the power of `n`."
    },
    "glam::Vec4::project_onto": {
      "namespace": "glam::Vec4",
      "identifier": "project_onto",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns the vector projection of `self` onto `rhs`.\n `rhs` must be of non-zero length.\n # Panics\n Will panic if `rhs` is zero length when `glam_assert` is enabled."
    },
    "glam::Vec4::project_onto_normalized": {
      "namespace": "glam::Vec4",
      "identifier": "project_onto_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns the vector projection of `self` onto `rhs`.\n `rhs` must be normalized.\n # Panics\n Will panic if `rhs` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec4::recip": {
      "namespace": "glam::Vec4",
      "identifier": "recip",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector containing the reciprocal `1.0/n` of each element of `self`."
    },
    "glam::Vec4::reflect": {
      "namespace": "glam::Vec4",
      "identifier": "reflect",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "normal"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns the reflection vector for a given incident vector `self` and surface normal\n `normal`.\n `normal` must be normalized.\n # Panics\n Will panic if `normal` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec4::refract": {
      "namespace": "glam::Vec4",
      "identifier": "refract",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "normal"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "eta"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns the refraction direction for a given incident vector `self`, surface normal\n `normal` and ratio of indices of refraction, `eta`. When total internal reflection occurs,\n a zero vector will be returned.\n `self` and `normal` must be normalized.\n # Panics\n Will panic if `self` or `normal` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec4::reject_from": {
      "namespace": "glam::Vec4",
      "identifier": "reject_from",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns the vector rejection of `self` from `rhs`.\n The vector rejection is the vector perpendicular to the projection of `self` onto\n `rhs`, in rhs words the result of `self - self.project_onto(rhs)`.\n `rhs` must be of non-zero length.\n # Panics\n Will panic if `rhs` has a length of zero when `glam_assert` is enabled."
    },
    "glam::Vec4::reject_from_normalized": {
      "namespace": "glam::Vec4",
      "identifier": "reject_from_normalized",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns the vector rejection of `self` from `rhs`.\n The vector rejection is the vector perpendicular to the projection of `self` onto\n `rhs`, in rhs words the result of `self - self.project_onto(rhs)`.\n `rhs` must be normalized.\n # Panics\n Will panic if `rhs` is not normalized when `glam_assert` is enabled."
    },
    "glam::Vec4::rem": {
      "namespace": "glam::Vec4",
      "identifier": "rem",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::rem-1": {
      "namespace": "glam::Vec4",
      "identifier": "rem-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::rem-2": {
      "namespace": "glam::Vec4",
      "identifier": "rem-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::rem_euclid": {
      "namespace": "glam::Vec4",
      "identifier": "rem_euclid",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns the element-wise remainder of [Euclidean division] of `self` by `rhs`.\n [Euclidean division]: f32::rem_euclid"
    },
    "glam::Vec4::round": {
      "namespace": "glam::Vec4",
      "identifier": "round",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector containing the nearest integer to a number for each element of `self`.\n Round half-way cases away from 0.0."
    },
    "glam::Vec4::select": {
      "namespace": "glam::Vec4",
      "identifier": "select",
      "arguments": [
        {
          "kind": {
            "val": "glam::BVec4A"
          },
          "name": "mask"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "if_true"
        },
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "if_false"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Creates a vector from the elements in `if_true` and `if_false`, selecting which to use\n for each element of `self`.\n A true element in the mask uses the corresponding element from `if_true`, and false\n uses the element from `if_false`."
    },
    "glam::Vec4::signum": {
      "namespace": "glam::Vec4",
      "identifier": "signum",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector with elements representing the sign of `self`.\n - `1.0` if the number is positive, `+0.0` or `INFINITY`\n - `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`\n - `NAN` if the number is `NAN`"
    },
    "glam::Vec4::splat": {
      "namespace": "glam::Vec4",
      "identifier": "splat",
      "arguments": [
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Creates a vector with all elements set to `v`."
    },
    "glam::Vec4::sub": {
      "namespace": "glam::Vec4",
      "identifier": "sub",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "rhs"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::sub-1": {
      "namespace": "glam::Vec4",
      "identifier": "sub-1",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          }
        },
        {
          "kind": {
            "val": "glam::Vec4"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::sub-2": {
      "namespace": "glam::Vec4",
      "identifier": "sub-2",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          }
        },
        {
          "kind": {
            "primitive": "f32"
          }
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      }
    },
    "glam::Vec4::to_array": {
      "namespace": "glam::Vec4",
      "identifier": "to_array",
      "arguments": [
        {
          "kind": {
            "ref": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "f32"
            },
            4
          ]
        }
      },
      "documentation": " `[x, y, z, w]`"
    },
    "glam::Vec4::trunc": {
      "namespace": "glam::Vec4",
      "identifier": "trunc",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Returns a vector containing the integer part each element of `self`. This means numbers are\n always truncated towards zero."
    },
    "glam::Vec4::truncate": {
      "namespace": "glam::Vec4",
      "identifier": "truncate",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec3"
        }
      },
      "documentation": " Creates a 3D vector from the `x`, `y` and `z` elements of `self`, discarding `w`.\n Truncation to [`Vec3`] may also be performed by using [`self.xyz()`][crate::swizzles::Vec4Swizzles::xyz()].\n To truncate to [`Vec3A`] use [`Vec3A::from()`]."
    },
    "glam::Vec4::with_w": {
      "namespace": "glam::Vec4",
      "identifier": "with_w",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "w"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `w`."
    },
    "glam::Vec4::with_x": {
      "namespace": "glam::Vec4",
      "identifier": "with_x",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "x"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `x`."
    },
    "glam::Vec4::with_y": {
      "namespace": "glam::Vec4",
      "identifier": "with_y",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "y"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `y`."
    },
    "glam::Vec4::with_z": {
      "namespace": "glam::Vec4",
      "identifier": "with_z",
      "arguments": [
        {
          "kind": {
            "val": "glam::Vec4"
          },
          "name": "_self"
        },
        {
          "kind": {
            "primitive": "f32"
          },
          "name": "z"
        }
      ],
      "return_type": {
        "kind": {
          "val": "glam::Vec4"
        }
      },
      "documentation": " Creates a 4D vector from `self` with the given value of `z`."
    },
    "smol_str::SmolStr::clone": {
      "namespace": "smol_str::SmolStr",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "smol_str::SmolStr"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "smol_str::SmolStr"
        }
      }
    },
    "smol_str::SmolStr::eq": {
      "namespace": "smol_str::SmolStr",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "smol_str::SmolStr"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "smol_str::SmolStr"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "smol_str::SmolStr::is_empty": {
      "namespace": "smol_str::SmolStr",
      "identifier": "is_empty",
      "arguments": [
        {
          "kind": {
            "ref": "smol_str::SmolStr"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "smol_str::SmolStr::is_heap_allocated": {
      "namespace": "smol_str::SmolStr",
      "identifier": "is_heap_allocated",
      "arguments": [
        {
          "kind": {
            "ref": "smol_str::SmolStr"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "smol_str::SmolStr::len": {
      "namespace": "smol_str::SmolStr",
      "identifier": "len",
      "arguments": [
        {
          "kind": {
            "ref": "smol_str::SmolStr"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "usize"
        }
      }
    },
    "smol_str::SmolStr::to_string": {
      "namespace": "smol_str::SmolStr",
      "identifier": "to_string",
      "arguments": [
        {
          "kind": {
            "ref": "smol_str::SmolStr"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "string"
        }
      }
    },
    "uuid::Uuid::as_u128": {
      "namespace": "uuid::Uuid",
      "identifier": "as_u128",
      "arguments": [
        {
          "kind": {
            "ref": "uuid::Uuid"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u128"
        }
      },
      "documentation": " Returns a 128bit value containing the value.\n The bytes in the UUID will be packed directly into a `u128`.\n # Examples\n ```\n # use uuid::Uuid;\n # fn main() -> Result<(), uuid::Error> {\n let uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\n assert_eq!(\n     uuid.as_u128(),\n     0xa1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8,\n );\n # Ok(())\n # }\n ```"
    },
    "uuid::Uuid::as_u64_pair": {
      "namespace": "uuid::Uuid",
      "identifier": "as_u64_pair",
      "arguments": [
        {
          "kind": {
            "ref": "uuid::Uuid"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": [
            {
              "primitive": "u64"
            },
            {
              "primitive": "u64"
            }
          ]
        }
      },
      "documentation": " Returns two 64bit values containing the value.\n The bytes in the UUID will be split into two `u64`.\n The first u64 represents the 64 most significant bits,\n the second one represents the 64 least significant.\n # Examples\n ```\n # use uuid::Uuid;\n # fn main() -> Result<(), uuid::Error> {\n let uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\n assert_eq!(\n     uuid.as_u64_pair(),\n     (0xa1a2a3a4b1b2c1c2, 0xd1d2d3d4d5d6d7d8),\n );\n # Ok(())\n # }\n ```"
    },
    "uuid::Uuid::assert_receiver_is_total_eq": {
      "namespace": "uuid::Uuid",
      "identifier": "assert_receiver_is_total_eq",
      "arguments": [
        {
          "kind": {
            "ref": "uuid::Uuid"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "tuple": []
        }
      }
    },
    "uuid::Uuid::clone": {
      "namespace": "uuid::Uuid",
      "identifier": "clone",
      "arguments": [
        {
          "kind": {
            "ref": "uuid::Uuid"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "val": "uuid::Uuid"
        }
      }
    },
    "uuid::Uuid::encode_buffer": {
      "namespace": "uuid::Uuid",
      "identifier": "encode_buffer",
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "u8"
            },
            45
          ]
        }
      },
      "documentation": " A buffer that can be used for `encode_...` calls, that is\n guaranteed to be long enough for any of the format adapters.\n # Examples\n ```\n # use uuid::Uuid;\n let uuid = Uuid::nil();\n assert_eq!(\n     uuid.simple().encode_lower(&mut Uuid::encode_buffer()),\n     \"00000000000000000000000000000000\"\n );\n assert_eq!(\n     uuid.hyphenated()\n         .encode_lower(&mut Uuid::encode_buffer()),\n     \"00000000-0000-0000-0000-000000000000\"\n );\n assert_eq!(\n     uuid.urn().encode_lower(&mut Uuid::encode_buffer()),\n     \"urn:uuid:00000000-0000-0000-0000-000000000000\"\n );\n ```"
    },
    "uuid::Uuid::eq": {
      "namespace": "uuid::Uuid",
      "identifier": "eq",
      "arguments": [
        {
          "kind": {
            "ref": "uuid::Uuid"
          },
          "name": "_self"
        },
        {
          "kind": {
            "ref": "uuid::Uuid"
          },
          "name": "other"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      }
    },
    "uuid::Uuid::from_bytes": {
      "namespace": "uuid::Uuid",
      "identifier": "from_bytes",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "u8"
              },
              16
            ]
          },
          "name": "bytes"
        }
      ],
      "return_type": {
        "kind": {
          "val": "uuid::Uuid"
        }
      },
      "documentation": " Creates a UUID using the supplied bytes.\n # Examples\n Basic usage:\n ```\n # fn main() -> Result<(), uuid::Error> {\n # use uuid::Uuid;\n let bytes = [\n     0xa1, 0xa2, 0xa3, 0xa4,\n     0xb1, 0xb2,\n     0xc1, 0xc2,\n     0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n ];\n let uuid = Uuid::from_bytes(bytes);\n assert_eq!(\n     uuid.hyphenated().to_string(),\n     \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\"\n );\n # Ok(())\n # }\n ```"
    },
    "uuid::Uuid::from_bytes_le": {
      "namespace": "uuid::Uuid",
      "identifier": "from_bytes_le",
      "arguments": [
        {
          "kind": {
            "array": [
              {
                "primitive": "u8"
              },
              16
            ]
          },
          "name": "b"
        }
      ],
      "return_type": {
        "kind": {
          "val": "uuid::Uuid"
        }
      },
      "documentation": " Creates a UUID using the supplied bytes in little endian order.\n The individual fields encoded in the buffer will be flipped.\n # Examples\n Basic usage:\n ```\n # fn main() -> Result<(), uuid::Error> {\n # use uuid::Uuid;\n let bytes = [\n     0xa1, 0xa2, 0xa3, 0xa4,\n     0xb1, 0xb2,\n     0xc1, 0xc2,\n     0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n ];\n let uuid = Uuid::from_bytes_le(bytes);\n assert_eq!(\n     \"a4a3a2a1-b2b1-c2c1-d1d2-d3d4d5d6d7d8\",\n     uuid.hyphenated().to_string(),\n );\n # Ok(())\n # }\n ```"
    },
    "uuid::Uuid::from_u128": {
      "namespace": "uuid::Uuid",
      "identifier": "from_u128",
      "arguments": [
        {
          "kind": {
            "primitive": "u128"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "uuid::Uuid"
        }
      },
      "documentation": " Creates a UUID from a 128bit value.\n # Examples\n Basic usage:\n ```\n # use uuid::Uuid;\n let v = 0xa1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8u128;\n let uuid = Uuid::from_u128(v);\n assert_eq!(\n     \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n     uuid.hyphenated().to_string(),\n );\n ```"
    },
    "uuid::Uuid::from_u128_le": {
      "namespace": "uuid::Uuid",
      "identifier": "from_u128_le",
      "arguments": [
        {
          "kind": {
            "primitive": "u128"
          },
          "name": "v"
        }
      ],
      "return_type": {
        "kind": {
          "val": "uuid::Uuid"
        }
      },
      "documentation": " Creates a UUID from a 128bit value in little-endian order.\n The entire value will be flipped to convert into big-endian order.\n This is based on the endianness of the UUID, rather than the target\n environment so bytes will be flipped on both big and little endian\n machines.\n # Examples\n Basic usage:\n ```\n # use uuid::Uuid;\n let v = 0xa1a2a3a4b1b2c1c2d1d2d3d4d5d6d7d8u128;\n let uuid = Uuid::from_u128_le(v);\n assert_eq!(\n     \"d8d7d6d5-d4d3-d2d1-c2c1-b2b1a4a3a2a1\",\n     uuid.hyphenated().to_string(),\n );\n ```"
    },
    "uuid::Uuid::from_u64_pair": {
      "namespace": "uuid::Uuid",
      "identifier": "from_u64_pair",
      "arguments": [
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "high_bits"
        },
        {
          "kind": {
            "primitive": "u64"
          },
          "name": "low_bits"
        }
      ],
      "return_type": {
        "kind": {
          "val": "uuid::Uuid"
        }
      },
      "documentation": " Creates a UUID from two 64bit values.\n # Examples\n Basic usage:\n ```\n # use uuid::Uuid;\n let hi = 0xa1a2a3a4b1b2c1c2u64;\n let lo = 0xd1d2d3d4d5d6d7d8u64;\n let uuid = Uuid::from_u64_pair(hi, lo);\n assert_eq!(\n     \"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\",\n     uuid.hyphenated().to_string(),\n );\n ```"
    },
    "uuid::Uuid::get_node_id": {
      "namespace": "uuid::Uuid",
      "identifier": "get_node_id",
      "arguments": [
        {
          "kind": {
            "ref": "uuid::Uuid"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "option": {
            "array": [
              {
                "primitive": "u8"
              },
              6
            ]
          }
        }
      },
      "documentation": " If the UUID is the correct version (v1, or v6) this will return the\n node value as a 6-byte array. For other versions this will return `None`."
    },
    "uuid::Uuid::get_version_num": {
      "namespace": "uuid::Uuid",
      "identifier": "get_version_num",
      "arguments": [
        {
          "kind": {
            "ref": "uuid::Uuid"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "usize"
        }
      },
      "documentation": " Returns the version number of the UUID.\n This represents the algorithm used to generate the value.\n This method is the future-proof alternative to [`Uuid::get_version`].\n # Examples\n Basic usage:\n ```\n # use uuid::Uuid;\n # fn main() -> Result<(), uuid::Error> {\n let my_uuid = Uuid::parse_str(\"02f09a3f-1624-3b1d-8409-44eff7708208\")?;\n assert_eq!(3, my_uuid.get_version_num());\n # Ok(())\n # }\n ```\n # References\n * [Version Field in RFC 9562](https://www.ietf.org/rfc/rfc9562.html#section-4.2)"
    },
    "uuid::Uuid::into_bytes": {
      "namespace": "uuid::Uuid",
      "identifier": "into_bytes",
      "arguments": [
        {
          "kind": {
            "val": "uuid::Uuid"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "u8"
            },
            16
          ]
        }
      },
      "documentation": " Consumes self and returns the underlying byte value of the UUID.\n # Examples\n ```\n # use uuid::Uuid;\n let bytes = [\n     0xa1, 0xa2, 0xa3, 0xa4,\n     0xb1, 0xb2,\n     0xc1, 0xc2,\n     0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,\n ];\n let uuid = Uuid::from_bytes(bytes);\n assert_eq!(bytes, uuid.into_bytes());\n ```"
    },
    "uuid::Uuid::is_max": {
      "namespace": "uuid::Uuid",
      "identifier": "is_max",
      "arguments": [
        {
          "kind": {
            "ref": "uuid::Uuid"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Tests if the UUID is max (all ones)."
    },
    "uuid::Uuid::is_nil": {
      "namespace": "uuid::Uuid",
      "identifier": "is_nil",
      "arguments": [
        {
          "kind": {
            "ref": "uuid::Uuid"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "bool"
        }
      },
      "documentation": " Tests if the UUID is nil (all zeros)."
    },
    "uuid::Uuid::max": {
      "namespace": "uuid::Uuid",
      "identifier": "max",
      "return_type": {
        "kind": {
          "val": "uuid::Uuid"
        }
      },
      "documentation": " The 'max UUID' (all ones).\n The max UUID is a special form of UUID that is specified to have all\n 128 bits set to one.\n # References\n * [Max UUID in RFC 9562](https://www.ietf.org/rfc/rfc9562.html#section-5.10)\n # Examples\n Basic usage:\n ```\n # use uuid::Uuid;\n let uuid = Uuid::max();\n assert_eq!(\n     \"ffffffff-ffff-ffff-ffff-ffffffffffff\",\n     uuid.hyphenated().to_string(),\n );\n ```"
    },
    "uuid::Uuid::new_v4": {
      "namespace": "uuid::Uuid",
      "identifier": "new_v4",
      "return_type": {
        "kind": {
          "val": "uuid::Uuid"
        }
      },
      "documentation": " Creates a random UUID.\n This uses the [`getrandom`] crate to utilise the operating system's RNG\n as the source of random numbers. If you'd like to use a custom\n generator, don't use this method: generate random bytes using your\n custom generator and pass them to the\n [`uuid::Builder::from_random_bytes`][from_random_bytes] function\n instead.\n Note that usage of this method requires the `v4` feature of this crate\n to be enabled.\n # Examples\n Basic usage:\n ```\n # use uuid::{Uuid, Version};\n let uuid = Uuid::new_v4();\n assert_eq!(Some(Version::Random), uuid.get_version());\n ```\n # References\n * [UUID Version 4 in RFC 9562](https://www.ietf.org/rfc/rfc9562.html#section-5.4)\n [`getrandom`]: https://crates.io/crates/getrandom\n [from_random_bytes]: struct.Builder.html#method.from_random_bytes"
    },
    "uuid::Uuid::nil": {
      "namespace": "uuid::Uuid",
      "identifier": "nil",
      "return_type": {
        "kind": {
          "val": "uuid::Uuid"
        }
      },
      "documentation": " The 'nil UUID' (all zeros).\n The nil UUID is a special form of UUID that is specified to have all\n 128 bits set to zero.\n # References\n * [Nil UUID in RFC 9562](https://www.ietf.org/rfc/rfc9562.html#section-5.9)\n # Examples\n Basic usage:\n ```\n # use uuid::Uuid;\n let uuid = Uuid::nil();\n assert_eq!(\n     \"00000000-0000-0000-0000-000000000000\",\n     uuid.hyphenated().to_string(),\n );\n ```"
    },
    "uuid::Uuid::to_bytes_le": {
      "namespace": "uuid::Uuid",
      "identifier": "to_bytes_le",
      "arguments": [
        {
          "kind": {
            "ref": "uuid::Uuid"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "array": [
            {
              "primitive": "u8"
            },
            16
          ]
        }
      },
      "documentation": " Returns the bytes of the UUID in little-endian order.\n The bytes will be flipped to convert into little-endian order. This is\n based on the endianness of the UUID, rather than the target environment\n so bytes will be flipped on both big and little endian machines.\n # Examples\n ```\n use uuid::Uuid;\n # fn main() -> Result<(), uuid::Error> {\n let uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\n assert_eq!(\n     uuid.to_bytes_le(),\n     ([\n         0xa4, 0xa3, 0xa2, 0xa1, 0xb2, 0xb1, 0xc2, 0xc1, 0xd1, 0xd2,\n         0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8\n     ])\n );\n # Ok(())\n # }\n ```"
    },
    "uuid::Uuid::to_u128_le": {
      "namespace": "uuid::Uuid",
      "identifier": "to_u128_le",
      "arguments": [
        {
          "kind": {
            "ref": "uuid::Uuid"
          },
          "name": "_self"
        }
      ],
      "return_type": {
        "kind": {
          "primitive": "u128"
        }
      },
      "documentation": " Returns a 128bit little-endian value containing the value.\n The bytes in the `u128` will be flipped to convert into big-endian\n order. This is based on the endianness of the UUID, rather than the\n target environment so bytes will be flipped on both big and little\n endian machines.\n Note that this will produce a different result than\n [`Uuid::to_fields_le`], because the entire UUID is reversed, rather\n than reversing the individual fields in-place.\n # Examples\n ```\n # use uuid::Uuid;\n # fn main() -> Result<(), uuid::Error> {\n let uuid = Uuid::parse_str(\"a1a2a3a4-b1b2-c1c2-d1d2-d3d4d5d6d7d8\")?;\n assert_eq!(\n     uuid.to_u128_le(),\n     0xd8d7d6d5d4d3d2d1c2c1b2b1a4a3a2a1,\n );\n # Ok(())\n # }\n ```"
    }
  },
  "primitives": {
    "DynamicFunction": {
      "kind": "dynamicFunction",
      "documentation": "A callable dynamic function"
    },
    "DynamicFunctionMut": {
      "kind": "dynamicFunctionMut",
      "documentation": "A stateful and callable dynamic function"
    },
    "FunctionCallContext": {
      "kind": "functionCallContext",
      "documentation": "Function call context, if accepted by a function, means the function can access the world in arbitrary ways."
    },
    "OsString": {
      "kind": "osString",
      "documentation": "A heap allocated OS string"
    },
    "PathBuf": {
      "kind": "pathBuf",
      "documentation": "A heap allocated file path"
    },
    "ReflectReference": {
      "kind": "reflectReference",
      "documentation": "A reference to a reflectable type"
    },
    "String": {
      "kind": "string",
      "documentation": "A heap allocated string"
    },
    "bool": {
      "kind": "bool",
      "documentation": "A boolean value"
    },
    "char": {
      "kind": "char",
      "documentation": "An 8-bit character"
    },
    "f32": {
      "kind": "f32",
      "documentation": "A 32-bit floating point number"
    },
    "f64": {
      "kind": "f64",
      "documentation": "A 64-bit floating point number"
    },
    "i128": {
      "kind": "i128",
      "documentation": "A signed 128-bit integer"
    },
    "i16": {
      "kind": "i16",
      "documentation": "A signed 16-bit integer"
    },
    "i32": {
      "kind": "i32",
      "documentation": "A signed 32-bit integer"
    },
    "i64": {
      "kind": "i64",
      "documentation": "A signed 64-bit integer"
    },
    "i8": {
      "kind": "i8",
      "documentation": "A signed 8-bit integer"
    },
    "isize": {
      "kind": "isize",
      "documentation": "A signed pointer-sized integer"
    },
    "str": {
      "kind": "str",
      "documentation": "A string slice"
    },
    "u128": {
      "kind": "u128",
      "documentation": "An unsigned 128-bit integer"
    },
    "u16": {
      "kind": "u16",
      "documentation": "An unsigned 16-bit integer"
    },
    "u32": {
      "kind": "u32",
      "documentation": "An unsigned 32-bit integer"
    },
    "u64": {
      "kind": "u64",
      "documentation": "An unsigned 64-bit integer"
    },
    "u8": {
      "kind": "u8",
      "documentation": "An unsigned 8-bit integer"
    },
    "usize": {
      "kind": "usize",
      "documentation": "An unsigned pointer-sized integer"
    }
  },
  "description": ""
}